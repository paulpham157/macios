// <auto-generated />

#nullable enable

using AVFoundation;
using CoreGraphics;
using Foundation;
using ObjCBindings;
using ObjCRuntime;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Threading.Tasks;

namespace TestNamespace;

[Register ("PropertyTests", true)]
public partial class PropertyTests
{
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selCountX = "count";
	static readonly global::ObjCRuntime.NativeHandle selCountXHandle = global::ObjCRuntime.Selector.GetHandle ("count");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetCount_X = "setCount:";
	static readonly global::ObjCRuntime.NativeHandle selSetCount_XHandle = global::ObjCRuntime.Selector.GetHandle ("setCount:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selLineSpacingX = "lineSpacing";
	static readonly global::ObjCRuntime.NativeHandle selLineSpacingXHandle = global::ObjCRuntime.Selector.GetHandle ("lineSpacing");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetLineSpacing_X = "setLineSpacing:";
	static readonly global::ObjCRuntime.NativeHandle selSetLineSpacing_XHandle = global::ObjCRuntime.Selector.GetHandle ("setLineSpacing:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSizesX = "sizes";
	static readonly global::ObjCRuntime.NativeHandle selSizesXHandle = global::ObjCRuntime.Selector.GetHandle ("sizes");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetSizes_X = "setSizes:";
	static readonly global::ObjCRuntime.NativeHandle selSetSizes_XHandle = global::ObjCRuntime.Selector.GetHandle ("setSizes:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selContainsAttachmentsX = "containsAttachments";
	static readonly global::ObjCRuntime.NativeHandle selContainsAttachmentsXHandle = global::ObjCRuntime.Selector.GetHandle ("containsAttachments");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetContainsAttachments_X = "setContainsAttachments:";
	static readonly global::ObjCRuntime.NativeHandle selSetContainsAttachments_XHandle = global::ObjCRuntime.Selector.GetHandle ("setContainsAttachments:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selNameX = "name";
	static readonly global::ObjCRuntime.NativeHandle selNameXHandle = global::ObjCRuntime.Selector.GetHandle ("name");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetName_X = "setName:";
	static readonly global::ObjCRuntime.NativeHandle selSetName_XHandle = global::ObjCRuntime.Selector.GetHandle ("setName:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSurnamesX = "surnames";
	static readonly global::ObjCRuntime.NativeHandle selSurnamesXHandle = global::ObjCRuntime.Selector.GetHandle ("surnames");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetSurnames_X = "setSurnames:";
	static readonly global::ObjCRuntime.NativeHandle selSetSurnames_XHandle = global::ObjCRuntime.Selector.GetHandle ("setSurnames:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selAttributedStringByInflectingStringX = "attributedStringByInflectingString";
	static readonly global::ObjCRuntime.NativeHandle selAttributedStringByInflectingStringXHandle = global::ObjCRuntime.Selector.GetHandle ("attributedStringByInflectingString");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetAttributedStringByInflectingString_X = "setAttributedStringByInflectingString:";
	static readonly global::ObjCRuntime.NativeHandle selSetAttributedStringByInflectingString_XHandle = global::ObjCRuntime.Selector.GetHandle ("setAttributedStringByInflectingString:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selDelegateX = "delegate";
	static readonly global::ObjCRuntime.NativeHandle selDelegateXHandle = global::ObjCRuntime.Selector.GetHandle ("delegate");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetDelegate_X = "setDelegate:";
	static readonly global::ObjCRuntime.NativeHandle selSetDelegate_XHandle = global::ObjCRuntime.Selector.GetHandle ("setDelegate:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selResultsX = "results";
	static readonly global::ObjCRuntime.NativeHandle selResultsXHandle = global::ObjCRuntime.Selector.GetHandle ("results");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetResults_X = "setResults:";
	static readonly global::ObjCRuntime.NativeHandle selSetResults_XHandle = global::ObjCRuntime.Selector.GetHandle ("setResults:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSizeX = "size";
	static readonly global::ObjCRuntime.NativeHandle selSizeXHandle = global::ObjCRuntime.Selector.GetHandle ("size");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetSize_X = "setSize:";
	static readonly global::ObjCRuntime.NativeHandle selSetSize_XHandle = global::ObjCRuntime.Selector.GetHandle ("setSize:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selAlphanumericCharacterSetX = "alphanumericCharacterSet";
	static readonly global::ObjCRuntime.NativeHandle selAlphanumericCharacterSetXHandle = global::ObjCRuntime.Selector.GetHandle ("alphanumericCharacterSet");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetAlphanumericCharacterSet_X = "setAlphanumericCharacterSet:";
	static readonly global::ObjCRuntime.NativeHandle selSetAlphanumericCharacterSet_XHandle = global::ObjCRuntime.Selector.GetHandle ("setAlphanumericCharacterSet:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selLocaleX = "locale";
	static readonly global::ObjCRuntime.NativeHandle selLocaleXHandle = global::ObjCRuntime.Selector.GetHandle ("locale");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetLocale_X = "setLocale:";
	static readonly global::ObjCRuntime.NativeHandle selSetLocale_XHandle = global::ObjCRuntime.Selector.GetHandle ("setLocale:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selIsForPersonMassUseX = "isForPersonMassUse";
	static readonly global::ObjCRuntime.NativeHandle selIsForPersonMassUseXHandle = global::ObjCRuntime.Selector.GetHandle ("isForPersonMassUse");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetForPersonMassUse_X = "setForPersonMassUse:";
	static readonly global::ObjCRuntime.NativeHandle selSetForPersonMassUse_XHandle = global::ObjCRuntime.Selector.GetHandle ("setForPersonMassUse:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selIsLenientX = "isLenient";
	static readonly global::ObjCRuntime.NativeHandle selIsLenientXHandle = global::ObjCRuntime.Selector.GetHandle ("isLenient");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetLenient_X = "setLenient:";
	static readonly global::ObjCRuntime.NativeHandle selSetLenient_XHandle = global::ObjCRuntime.Selector.GetHandle ("setLenient:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selCanDrawX = "canDraw";
	static readonly global::ObjCRuntime.NativeHandle selCanDrawXHandle = global::ObjCRuntime.Selector.GetHandle ("canDraw");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetCanDraw_X = "setCanDraw:";
	static readonly global::ObjCRuntime.NativeHandle selSetCanDraw_XHandle = global::ObjCRuntime.Selector.GetHandle ("setCanDraw:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selCenterX = "Center";
	static readonly global::ObjCRuntime.NativeHandle selCenterXHandle = global::ObjCRuntime.Selector.GetHandle ("Center");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetCenter_X = "setCenter:";
	static readonly global::ObjCRuntime.NativeHandle selSetCenter_XHandle = global::ObjCRuntime.Selector.GetHandle ("setCenter:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	static readonly global::ObjCRuntime.NativeHandle class_ptr = global::ObjCRuntime.Class.GetHandle ("PropertyTests");

	/// <summary>The Objective-C class handle for this class.</summary>
	/// <value>The pointer to the Objective-C class.</value>
	/// <remarks>
	///     Each managed class mirrors an unmanaged Objective-C class.
	///     This value contains the pointer to the Objective-C class.
	///     It is similar to calling the managed <see cref=\"ObjCRuntime.Class.GetHandle(string)\" /> or the native <see href=\"https://developer.apple.com/documentation/objectivec/1418952-objc_getclass\">objc_getClass</see> method with the type name.
	/// </remarks>
	public override global::ObjCRuntime.NativeHandle ClassHandle => class_ptr;

	/// <summary>Creates a new <see cref="PropertyTests" /> with default values.</summary>
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[DesignatedInitializer]
	[Export ("init")]
	public PropertyTests () : base (global::Foundation.NSObjectFlag.Empty)
	{
		if (IsDirectBinding)
			InitializeHandle (global::ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
		else
			InitializeHandle (global::ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
	}

	/// <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
	/// <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
	/// <remarks>
	///     <para>
	///         This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the <see cref="Foundation.NSObject" />.
	///         This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.
	///         When developers invoke this constructor, they take advantage of a direct path that goes all the way up to <see cref="Foundation.NSObject" /> to merely allocate the object's memory and bind the Objective-C and C# objects together.
	///         The actual initialization of the object is up to the developer.
	///     </para>
	///     <para>
	///         This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.
	///         Once the allocation has taken place, the constructor has to initialize the object.
	///         With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
	///     </para>
	///     <para>It is the developer's responsibility to completely initialize the object if they chain up using this constructor chain.</para>
	///     <para>
	///         In general, if the developer's constructor invokes the corresponding base implementation, then it should also call an Objective-C init method.
	///         If this is not the case, developers should instead chain to the proper constructor in their class.
	///     </para>
	///     <para>
	///         The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic <see cref="Foundation.NSObject" /> allocation and runtime type registration.
	///         Typically the chaining would look like this:
	///     </para>
	///     <example>
	///             <code lang="csharp lang-csharp"><![CDATA[
	/// //
	/// // The NSObjectFlag constructor merely allocates the object and registers the C# class with the Objective-C runtime if necessary.
	/// // No actual initXxx method is invoked, that is done later in the constructor
	/// //
	/// // This is taken from the iOS SDK's source code for the UIView class:
	/// //
	/// [Export ("initWithFrame:")]
	/// public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
	/// {
	///     // Invoke the init method now.
	///     var initWithFrame = new Selector ("initWithFrame:").Handle;
	///     if (IsDirectBinding) {
	///         Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	///     } else {
	///         Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
	///     }
	/// }
	/// ]]></code>
	///     </example>
	/// </remarks>
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Advanced)]
	protected PropertyTests (global::Foundation.NSObjectFlag t) : base (t) {}

	/// <summary>A constructor used when creating managed representations of unmanaged objects. Called by the runtime.</summary>
	/// <param name="handle">Pointer (handle) to the unmanaged object.</param>
	/// <remarks>
	///     <para>
	///         This constructor is invoked by the runtime infrastructure (<see cref="ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.
	///         Developers should not invoke this method directly, instead they should call <see cref="ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" /> as it will prevent two instances of a managed object pointing to the same native object.
	///     </para>
	/// </remarks>
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Advanced)]
	protected internal PropertyTests (global::ObjCRuntime.NativeHandle handle) : base (handle) {}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	object? __mt_Alphanumerics_var = null;

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public static partial global::Foundation.NSCharacterSet Alphanumerics
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::Foundation.NSCharacterSet ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Runtime.GetNSObject<global::Foundation.NSCharacterSet> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("alphanumericCharacterSet")))!;
			} else {
				ret = global::ObjCRuntime.Runtime.GetNSObject<global::Foundation.NSCharacterSet> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("alphanumericCharacterSet")))!;
			}
			global::System.GC.KeepAlive (this);
			MarkDirty ();
			__mt_Alphanumerics_var = ret;
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			var value__handle__ = value!.GetNonNullHandle (nameof (value));
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setAlphanumericCharacterSet:"), value__handle__);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setAlphanumericCharacterSet:"), value__handle__);
			}
			global::System.GC.KeepAlive (this);
			global::System.GC.KeepAlive (value);
			MarkDirty ();
			__mt_Alphanumerics_var = value;
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	object? __mt_AttributedStringByInflectingString_var = null;

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::Foundation.NSAttributedString AttributedStringByInflectingString
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::Foundation.NSAttributedString ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Runtime.GetNSObject<global::Foundation.NSAttributedString> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("attributedStringByInflectingString")))!;
			} else {
				ret = global::ObjCRuntime.Runtime.GetNSObject<global::Foundation.NSAttributedString> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("attributedStringByInflectingString")))!;
			}
			global::System.GC.KeepAlive (this);
			MarkDirty ();
			__mt_AttributedStringByInflectingString_var = ret;
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			var value__handle__ = value!.GetNonNullHandle (nameof (value));
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setAttributedStringByInflectingString:"), value__handle__);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setAttributedStringByInflectingString:"), value__handle__);
			}
			global::System.GC.KeepAlive (this);
			global::System.GC.KeepAlive (value);
			MarkDirty ();
			__mt_AttributedStringByInflectingString_var = value;
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial bool CanDraw
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			bool ret;
			if (IsDirectBinding) {
				ret = global::Foundation.NSNumber.ToBool (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("canDraw")));
			} else {
				ret = global::Foundation.NSNumber.ToBool (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("canDraw")));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			using var nsb_value = global::Foundation.NSNumber.FromBoolean (value);
			var nsb_value__handle__ = nsb_value!.GetNonNullHandle (nameof (nsb_value));
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCanDraw:"), nsb_value__handle__);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCanDraw:"), nsb_value__handle__);
			}
			global::System.GC.KeepAlive (this);
			global::System.GC.KeepAlive (nsb_value);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::CoreGraphics.CGPoint Center
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::CoreGraphics.CGPoint ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.CGPoint_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("Center"));
			} else {
				ret = global::ObjCRuntime.Messaging.CGPoint_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("Center"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_CGPoint (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCenter:"), value);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_CGPoint (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCenter:"), value);
			}
			global::System.GC.KeepAlive (this);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial bool ContainsAttachments
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			bool ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.bool_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("containsAttachments")) != 0;
			} else {
				ret = global::ObjCRuntime.Messaging.bool_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("containsAttachments")) != 0;
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_bool (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setContainsAttachments:"), value ? (byte) 1 : (byte) 0);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_bool (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setContainsAttachments:"), value ? (byte) 1 : (byte) 0);
			}
			global::System.GC.KeepAlive (this);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::System.UIntPtr Count
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::System.UIntPtr ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.UIntPtr_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("count"));
			} else {
				ret = global::ObjCRuntime.Messaging.UIntPtr_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("count"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_UIntPtr (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCount:"), value);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_UIntPtr (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCount:"), value);
			}
			global::System.GC.KeepAlive (this);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial bool ForPersonMassUse
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			bool ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.bool_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("isForPersonMassUse")) != 0;
			} else {
				ret = global::ObjCRuntime.Messaging.bool_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("isForPersonMassUse")) != 0;
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_bool (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setForPersonMassUse:"), value ? (byte) 1 : (byte) 0);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_bool (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setForPersonMassUse:"), value ? (byte) 1 : (byte) 0);
			}
			global::System.GC.KeepAlive (this);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial bool IsLenient
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			bool ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.bool_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("isLenient")) != 0;
			} else {
				ret = global::ObjCRuntime.Messaging.bool_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("isLenient")) != 0;
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_bool (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setLenient:"), value ? (byte) 1 : (byte) 0);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_bool (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setLenient:"), value ? (byte) 1 : (byte) 0);
			}
			global::System.GC.KeepAlive (this);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::System.Runtime.InteropServices.NFloat LineSpacing
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::System.Runtime.InteropServices.NFloat ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.nfloat_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("lineSpacing"));
			} else {
				ret = global::ObjCRuntime.Messaging.nfloat_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("lineSpacing"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_nfloat (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setLineSpacing:"), value);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_nfloat (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setLineSpacing:"), value);
			}
			global::System.GC.KeepAlive (this);
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	object? __mt_Locale_var = null;

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	internal virtual partial global::Foundation.NSLocale Locale
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::Foundation.NSLocale ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Runtime.GetNSObject<global::Foundation.NSLocale> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("locale")))!;
			} else {
				ret = global::ObjCRuntime.Runtime.GetNSObject<global::Foundation.NSLocale> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("locale")))!;
			}
			global::System.GC.KeepAlive (this);
			MarkDirty ();
			__mt_Locale_var = ret;
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			var value__handle__ = value!.GetNonNullHandle (nameof (value));
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setLocale:"), value__handle__);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setLocale:"), value__handle__);
			}
			global::System.GC.KeepAlive (this);
			global::System.GC.KeepAlive (value);
			MarkDirty ();
			__mt_Locale_var = value;
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::CoreGraphics.CGPoint[] Location
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::CoreGraphics.CGPoint[] ret;
			if (IsDirectBinding) {
				ret = global::Foundation.NSArray.ArrayFromHandleFunc<global::CoreGraphics.CGPoint> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("Center")), global::Foundation.NSValue.ToCGPoint, false);
			} else {
				ret = global::Foundation.NSArray.ArrayFromHandleFunc<global::CoreGraphics.CGPoint> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("Center")), global::Foundation.NSValue.ToCGPoint, false);
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (value is null)
				global::ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (value));
			using var nsa_value = global::Foundation.NSArray.FromNSObjects (value);
			var nsb_value__handle__ = nsb_value!.GetNonNullHandle (nameof (nsb_value));
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCenter:"), nsa_value__handle__);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCenter:"), nsa_value__handle__);
			}
			global::System.GC.KeepAlive (this);
			global::System.GC.KeepAlive (nsb_value);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial string Name
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			string ret;
			if (IsDirectBinding) {
				ret = global::CoreFoundation.CFString.FromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("name")), false)!;
			} else {
				ret = global::CoreFoundation.CFString.FromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("name")), false)!;
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (value is null)
				global::ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (value));
			var nsvalue = global::CoreFoundation.CFString.CreateNative (value);
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setName:"), nsvalue);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setName:"), nsvalue);
			}
			global::System.GC.KeepAlive (this);
			global::CoreFoundation.CFString.ReleaseNative (nsvalue);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial string[] Names
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			string[] ret;
			if (IsDirectBinding) {
				ret = global::CoreFoundation.CFArray.StringArrayFromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("surnames")), false)!;
			} else {
				ret = global::CoreFoundation.CFArray.StringArrayFromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("surnames")), false)!;
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (value is null)
				global::ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (value));
			using var nsa_value = global::Foundation.NSArray.FromStrings (value);
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setSurnames:"), nsa_value.Handle);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setSurnames:"), nsa_value.Handle);
			}
			global::System.GC.KeepAlive (this);
			global::System.GC.KeepAlive (nsa_value);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial string? OtherName
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			string? ret;
			if (IsDirectBinding) {
				ret = global::CoreFoundation.CFString.FromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("name")), false);
			} else {
				ret = global::CoreFoundation.CFString.FromHandle (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("name")), false);
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			var nsvalue = global::CoreFoundation.CFString.CreateNative (value);
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setName:"), nsvalue);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setName:"), nsvalue);
			}
			global::System.GC.KeepAlive (this);
			global::CoreFoundation.CFString.ReleaseNative (nsvalue);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::AVFoundation.AVCaptureReactionType ReactionType
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::AVFoundation.AVCaptureReactionType ret;
			if (IsDirectBinding) {
				ret = global::AVFoundation.AVCaptureReactionTypeExtensions.GetValue (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("canDraw")));
			} else {
				ret = global::AVFoundation.AVCaptureReactionTypeExtensions.GetValue (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("canDraw")));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			using var nsb_value = value.GetConstant ();
			var nsb_value__handle__ = nsb_value!.GetNonNullHandle (nameof (nsb_value));
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCanDraw:"), nsb_value__handle__);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setCanDraw:"), nsb_value__handle__);
			}
			global::System.GC.KeepAlive (this);
			global::System.GC.KeepAlive (nsb_value);
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	object? __mt_Results_var = null;

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::Foundation.NSMetadataItem[] Results
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::Foundation.NSMetadataItem[] ret;
			if (IsDirectBinding) {
				ret = global::CoreFoundation.CFArray.ArrayFromHandle<global::Foundation.NSMetadataItem> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("results")))!;
			} else {
				ret = global::CoreFoundation.CFArray.ArrayFromHandle<global::Foundation.NSMetadataItem> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("results")))!;
			}
			global::System.GC.KeepAlive (this);
			MarkDirty ();
			__mt_Results_var = ret;
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (value is null)
				global::ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (value));
			using var nsa_value = global::Foundation.NSArray.FromNSObjects (value);
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setResults:"), nsa_value.Handle);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setResults:"), nsa_value.Handle);
			}
			global::System.GC.KeepAlive (this);
			global::System.GC.KeepAlive (nsa_value);
			MarkDirty ();
			__mt_Results_var = value;
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::CoreGraphics.CGSize Size
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::CoreGraphics.CGSize ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.CGSize_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("size"));
			} else {
				ret = global::ObjCRuntime.Messaging.CGSize_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("size"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_CGSize (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setSize:"), value);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_CGSize (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setSize:"), value);
			}
			global::System.GC.KeepAlive (this);
		}
	}

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::System.UIntPtr[] Sizes
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::System.UIntPtr[] ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("sizes"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("sizes"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			if (value is null)
				global::ObjCRuntime.ThrowHelper.ThrowArgumentNullException (nameof (value));
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setSizes:"), value);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setSizes:"), value);
			}
			global::System.GC.KeepAlive (this);
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	object? __mt_WeakDelegate_var = null;

	[SupportedOSPlatform ("macos")]
	[SupportedOSPlatform ("ios")]
	[SupportedOSPlatform ("tvos")]
	[SupportedOSPlatform ("maccatalyst13.1")]
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public virtual partial global::Foundation.NSObject? WeakDelegate
	{
		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		get
		{
			global::Foundation.NSObject? ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Runtime.GetNSObject<global::Foundation.NSObject> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("delegate")));
			} else {
				ret = global::ObjCRuntime.Runtime.GetNSObject<global::Foundation.NSObject> (global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("delegate")));
			}
			global::System.GC.KeepAlive (this);
			MarkDirty ();
			__mt_WeakDelegate_var = ret;
			return ret;
		}

		[SupportedOSPlatform ("macos")]
		[SupportedOSPlatform ("ios")]
		[SupportedOSPlatform ("tvos")]
		[SupportedOSPlatform ("maccatalyst13.1")]
		set
		{
			var value__handle__ = value?.GetHandle ();
			if (IsDirectBinding) {
				global::ObjCRuntime.Messaging.void_objc_msgSend_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setDelegate:"), value__handle__);
			} else {
				global::ObjCRuntime.Messaging.void_objc_msgSendSuper_NativeHandle (this.Handle, global::ObjCRuntime.Selector.GetHandle ("setDelegate:"), value__handle__);
			}
			global::System.GC.KeepAlive (this);
			global::System.GC.KeepAlive (value);
			MarkDirty ();
			__mt_WeakDelegate_var = value;
		}
	}

	public virtual partial global::Foundation.INSUserActivityDelegate? Delegate
	{
		get
		{
			return WeakDelegate as global::Foundation.INSUserActivityDelegate;
		}
		set
		{
			var rvalue = value as NSObject;
			if (!(value is null) && rvalue is null) {
				throw new ArgumentException ($"The object passed of type {value.GetType ()} does not derive from NSObject");
			}
			WeakDelegate = rvalue;
		}
	}
	// TODO: add binding code here
}
