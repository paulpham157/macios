// <auto-generated />

#nullable enable

using AudioUnit;
using AVFoundation;
using CoreGraphics;
using CoreImage;
using Foundation;
using ObjCBindings;
using ObjCRuntime;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;
using System.Threading.Tasks;

namespace Microsoft.Macios.Generator.Tests.Classes.Data.TestNamespace;

[Register ("TrampolinePropertyTests", true)]
public partial class TrampolinePropertyTests
{
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selCreateObjectHandlerX = "createObjectHandler";
	static readonly global::ObjCRuntime.NativeHandle selCreateObjectHandlerXHandle = global::ObjCRuntime.Selector.GetHandle ("createObjectHandler");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetCreateObjectHandler_X = "setCreateObjectHandler:";
	static readonly global::ObjCRuntime.NativeHandle selSetCreateObjectHandler_XHandle = global::ObjCRuntime.Selector.GetHandle ("setCreateObjectHandler:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selCompletionHandlerX = "completionHandler";
	static readonly global::ObjCRuntime.NativeHandle selCompletionHandlerXHandle = global::ObjCRuntime.Selector.GetHandle ("completionHandler");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetCompletionHandler_X = "setCompletionHandler:";
	static readonly global::ObjCRuntime.NativeHandle selSetCompletionHandler_XHandle = global::ObjCRuntime.Selector.GetHandle ("setCompletionHandler:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selDuplicateCompletionHandlerX = "duplicateCompletionHandler";
	static readonly global::ObjCRuntime.NativeHandle selDuplicateCompletionHandlerXHandle = global::ObjCRuntime.Selector.GetHandle ("duplicateCompletionHandler");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetDuplicateCompletionHandler_X = "setDuplicateCompletionHandler:";
	static readonly global::ObjCRuntime.NativeHandle selSetDuplicateCompletionHandler_XHandle = global::ObjCRuntime.Selector.GetHandle ("setDuplicateCompletionHandler:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selImageGeneratorCompletionHandlerX = "imageGeneratorCompletionHandler";
	static readonly global::ObjCRuntime.NativeHandle selImageGeneratorCompletionHandlerXHandle = global::ObjCRuntime.Selector.GetHandle ("imageGeneratorCompletionHandler");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetImageGeneratorCompletionHandler_X = "setImageGeneratorCompletionHandler:";
	static readonly global::ObjCRuntime.NativeHandle selSetImageGeneratorCompletionHandler_XHandle = global::ObjCRuntime.Selector.GetHandle ("setImageGeneratorCompletionHandler:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selKernelRoiCallbackX = "kernelRoiCallback";
	static readonly global::ObjCRuntime.NativeHandle selKernelRoiCallbackXHandle = global::ObjCRuntime.Selector.GetHandle ("kernelRoiCallback");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetKernelRoiCallback_X = "setKernelRoiCallback:";
	static readonly global::ObjCRuntime.NativeHandle selSetKernelRoiCallback_XHandle = global::ObjCRuntime.Selector.GetHandle ("setKernelRoiCallback:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selStringActionHandlerX = "stringActionHandler";
	static readonly global::ObjCRuntime.NativeHandle selStringActionHandlerXHandle = global::ObjCRuntime.Selector.GetHandle ("stringActionHandler");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetStringActionHandler_X = "setStringActionHandler:";
	static readonly global::ObjCRuntime.NativeHandle selSetStringActionHandler_XHandle = global::ObjCRuntime.Selector.GetHandle ("setStringActionHandler:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selIntActionHandlerX = "intActionHandler";
	static readonly global::ObjCRuntime.NativeHandle selIntActionHandlerXHandle = global::ObjCRuntime.Selector.GetHandle ("intActionHandler");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetIntActionHandler_X = "setIntActionHandler:";
	static readonly global::ObjCRuntime.NativeHandle selSetIntActionHandler_XHandle = global::ObjCRuntime.Selector.GetHandle ("setIntActionHandler:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selBoolActionHandlerX = "boolActionHandler";
	static readonly global::ObjCRuntime.NativeHandle selBoolActionHandlerXHandle = global::ObjCRuntime.Selector.GetHandle ("boolActionHandler");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetBoolActionHandler_X = "setBoolActionHandler:";
	static readonly global::ObjCRuntime.NativeHandle selSetBoolActionHandler_XHandle = global::ObjCRuntime.Selector.GetHandle ("setBoolActionHandler:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selManualRenderingCallbackX = "manualRenderingCallback";
	static readonly global::ObjCRuntime.NativeHandle selManualRenderingCallbackXHandle = global::ObjCRuntime.Selector.GetHandle ("manualRenderingCallback");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetManualRenderingCallback_X = "setManualRenderingCallback:";
	static readonly global::ObjCRuntime.NativeHandle selSetManualRenderingCallback_XHandle = global::ObjCRuntime.Selector.GetHandle ("setManualRenderingCallback:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selInternalRenderBlockHandlerX = "internalRenderBlockHandler";
	static readonly global::ObjCRuntime.NativeHandle selInternalRenderBlockHandlerXHandle = global::ObjCRuntime.Selector.GetHandle ("internalRenderBlockHandler");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	const string selSetInternalRenderBlockHandler_X = "setInternalRenderBlockHandler:";
	static readonly global::ObjCRuntime.NativeHandle selSetInternalRenderBlockHandler_XHandle = global::ObjCRuntime.Selector.GetHandle ("setInternalRenderBlockHandler:");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	static readonly global::ObjCRuntime.NativeHandle class_ptr = global::ObjCRuntime.Class.GetHandle ("TrampolinePropertyTests");

	/// <summary>The Objective-C class handle for this class.</summary>
	/// <value>The pointer to the Objective-C class.</value>
	/// <remarks>
	///     Each managed class mirrors an unmanaged Objective-C class.
	///     This value contains the pointer to the Objective-C class.
	///     It is similar to calling the managed <see cref=\"ObjCRuntime.Class.GetHandle(string)\" /> or the native <see href=\"https://developer.apple.com/documentation/objectivec/1418952-objc_getclass\">objc_getClass</see> method with the type name.
	/// </remarks>
	public override global::ObjCRuntime.NativeHandle ClassHandle => class_ptr;

	/// <summary>Creates a new <see cref="TrampolinePropertyTests" /> with default values.</summary>
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[DesignatedInitializer]
	[Export ("init")]
	public TrampolinePropertyTests () : base (global::Foundation.NSObjectFlag.Empty)
	{
		if (IsDirectBinding)
			InitializeHandle (global::ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
		else
			InitializeHandle (global::ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
	}

	/// <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
	/// <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
	/// <remarks>
	///     <para>
	///         This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the <see cref="Foundation.NSObject" />.
	///         This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.
	///         When developers invoke this constructor, they take advantage of a direct path that goes all the way up to <see cref="Foundation.NSObject" /> to merely allocate the object's memory and bind the Objective-C and C# objects together.
	///         The actual initialization of the object is up to the developer.
	///     </para>
	///     <para>
	///         This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.
	///         Once the allocation has taken place, the constructor has to initialize the object.
	///         With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
	///     </para>
	///     <para>It is the developer's responsibility to completely initialize the object if they chain up using this constructor chain.</para>
	///     <para>
	///         In general, if the developer's constructor invokes the corresponding base implementation, then it should also call an Objective-C init method.
	///         If this is not the case, developers should instead chain to the proper constructor in their class.
	///     </para>
	///     <para>
	///         The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic <see cref="Foundation.NSObject" /> allocation and runtime type registration.
	///         Typically the chaining would look like this:
	///     </para>
	///     <example>
	///             <code lang="csharp lang-csharp"><![CDATA[
	/// //
	/// // The NSObjectFlag constructor merely allocates the object and registers the C# class with the Objective-C runtime if necessary.
	/// // No actual initXxx method is invoked, that is done later in the constructor
	/// //
	/// // This is taken from the iOS SDK's source code for the UIView class:
	/// //
	/// [Export ("initWithFrame:")]
	/// public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
	/// {
	///     // Invoke the init method now.
	///     var initWithFrame = new Selector ("initWithFrame:").Handle;
	///     if (IsDirectBinding) {
	///         Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	///     } else {
	///         Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
	///     }
	/// }
	/// ]]></code>
	///     </example>
	/// </remarks>
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Advanced)]
	protected TrampolinePropertyTests (global::Foundation.NSObjectFlag t) : base (t) {}

	/// <summary>A constructor used when creating managed representations of unmanaged objects. Called by the runtime.</summary>
	/// <param name="handle">Pointer (handle) to the unmanaged object.</param>
	/// <remarks>
	///     <para>
	///         This constructor is invoked by the runtime infrastructure (<see cref="ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.
	///         Developers should not invoke this method directly, instead they should call <see cref="ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" /> as it will prevent two instances of a managed object pointing to the same native object.
	///     </para>
	/// </remarks>
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Advanced)]
	protected internal TrampolinePropertyTests (global::ObjCRuntime.NativeHandle handle) : base (handle) {}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::System.Action<bool> BoolActionHandler
	{
		get
		{
			global::System.Action<bool> ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("boolActionHandler"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("boolActionHandler"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::System.Action CompletionHandler
	{
		get
		{
			global::System.Action ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("completionHandler"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("completionHandler"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::Microsoft.Macios.Generator.Tests.Classes.Data.TestNamespace.TrampolinePropertyTests.CreateObject CreateObjectHandler
	{
		get
		{
			global::Microsoft.Macios.Generator.Tests.Classes.Data.TestNamespace.TrampolinePropertyTests.CreateObject ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("createObjectHandler"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("createObjectHandler"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::System.Action DuplicateCompletionHandler
	{
		get
		{
			global::System.Action ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("duplicateCompletionHandler"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("duplicateCompletionHandler"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::AVFoundation.AVAssetImageGenerator.AsynchronouslyForTimeCompletionHandler ImageGeneratorCompletionHandler
	{
		get
		{
			global::AVFoundation.AVAssetImageGenerator.AsynchronouslyForTimeCompletionHandler ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging._objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("imageGeneratorCompletionHandler"));
			} else {
				ret = global::ObjCRuntime.Messaging._objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("imageGeneratorCompletionHandler"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::AVFoundation.AVAssetImageGenerateAsynchronouslyForTimeCompletionHandler ImageGeneratorCompletionHandler
	{
		get
		{
			global::AVFoundation.AVAssetImageGenerateAsynchronouslyForTimeCompletionHandler ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("imageGeneratorCompletionHandler"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("imageGeneratorCompletionHandler"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::System.Action<int> IntActionHandler
	{
		get
		{
			global::System.Action<int> ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("intActionHandler"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("intActionHandler"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::AudioUnit.AUInternalRenderBlock InternalRenderBlockHandler
	{
		get
		{
			global::AudioUnit.AUInternalRenderBlock ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("internalRenderBlockHandler"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("internalRenderBlockHandler"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::CoreImage.CIKernelRoiCallback KernelRoiCallback
	{
		get
		{
			global::CoreImage.CIKernelRoiCallback ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("kernelRoiCallback"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("kernelRoiCallback"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::CoreImage.CIKernelRoiCallback KernelRoiCallback
	{
		get
		{
			global::CoreImage.CIKernelRoiCallback ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("kernelRoiCallback"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("kernelRoiCallback"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::AVFoundation.AVAudioEngineManualRenderingBlock ManualRendering
	{
		get
		{
			global::AVFoundation.AVAudioEngineManualRenderingBlock ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("manualRenderingCallback"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("manualRenderingCallback"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	public partial global::System.Action<string> StringActionHandler
	{
		get
		{
			global::System.Action<string> ret;
			if (IsDirectBinding) {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("stringActionHandler"));
			} else {
				ret = global::ObjCRuntime.Messaging.NativeHandle_objc_msgSendSuper (this.Handle, global::ObjCRuntime.Selector.GetHandle ("stringActionHandler"));
			}
			global::System.GC.KeepAlive (this);
			return ret;
		}

		set
		{
			throw new NotImplementedException();
		}
	}
	// TODO: add binding code here
}
