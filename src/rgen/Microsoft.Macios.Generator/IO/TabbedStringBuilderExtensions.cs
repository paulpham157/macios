// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using System.ComponentModel;
using System.IO;
using Microsoft.Macios.Generator.DataModel;
using static Microsoft.Macios.Generator.Emitters.BindingSyntaxFactory;

namespace Microsoft.Macios.Generator.IO;

static class TabbedStringBuilderExtensions {
	/// <summary>
	/// Append the generated code attribute to the current string builder. Added for convenience.
	/// </summary>
	/// <param name="self">A tabbed string builder.</param>
	/// <param name="optimizable">If the binding is Optimizable or not.</param>
	/// <returns>The current builder.</returns>
	public static TabbedWriter<StringWriter> AppendGeneratedCodeAttribute (this TabbedWriter<StringWriter> self, bool optimizable = true)
	{
		if (optimizable) {
			const string attr = "[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]";
			self.WriteLine (attr);
		} else {
			const string attr = "[BindingImpl (BindingImplOptions.GeneratedCode)]";
			self.WriteLine (attr);
		}

		return self;
	}

	/// <summary>
	/// Append the notification advice attribute to the current string builder. Added for convenience.
	/// </summary>
	/// <param name="self">A tabbed string builder.</param>
	/// <param name="className">The class that contains the notification.</param>
	/// <param name="notification">The name of the notification.</param>
	/// <returns></returns>
	public static TabbedWriter<StringWriter> AppendNotificationAdvice (this TabbedWriter<StringWriter> self, in string className, in string notification)
	{
		string attr =
			$"[Advice (\"Use '{className}.Notifications.{notification}' helper method instead.\")]";
		self.WriteLine (attr);
		return self;
	}

	/// <summary>
	/// Append a EditorBrowsable attribute. Added for convenience.
	/// </summary>
	/// <param name="self">A tabbed string builder.</param>
	/// <returns>The current builder.</returns>
	public static TabbedWriter<StringWriter> AppendEditorBrowsableAttribute (this TabbedWriter<StringWriter> self, EditorBrowsableState state)
	{
		string attr = $"[EditorBrowsable (EditorBrowsableState.{state})]";
		self.WriteLine (attr);
		return self;
	}

	/// <summary>
	/// Append the designated initializer attribute to the current string builder. Added for convenience. 
	/// </summary>
	/// <param name="self">A tabbed string builder.</param>
	/// <returns>The current builder.</returns>
	public static TabbedWriter<StringWriter> AppendDesignatedInitializer (this TabbedWriter<StringWriter> self)
	{
		const string attr = "[DesignatedInitializer]";
		self.WriteLine (attr);
		return self;
	}

	/// <summary>
	/// Writes the autogenerated header and other pragmas.
	/// </summary>
	/// <param name="self">A tabbed string builder.</param>
	/// <returns>The current builder.</returns>
	public static TabbedWriter<StringWriter> WriteHeader (this TabbedWriter<StringWriter> self)
	{
		// let people know this is generated code
		self.WriteLine ("// <auto-generated />");

		// enable nullable!
		self.WriteLine ();
		self.WriteLine ("#nullable enable");
		self.WriteLine ();
		return self;
	}

	/// <summary>
	/// Appends a `[return: DelegateProxy]` attribute to the current writer.
	/// This attribute is used for properties that return a delegate, and it points to the static bridge class
	/// generated for the specified delegate type.
	/// </summary>
	/// <param name="self">A tabbed string writer.</param>
	/// <param name="typeInfo">The <see cref="TypeInfo"/> of the delegate.</param>
	/// <returns>The current writer.</returns>
	public static TabbedWriter<StringWriter> AppendDelegateProxyReturn (this TabbedWriter<StringWriter> self,
		in TypeInfo typeInfo)
	{
		var staticBridge =
			Nomenclator.GetTrampolineClassName (typeInfo, Nomenclator.TrampolineClassType.StaticBridgeClass);
		self.WriteLine ($"[return: DelegateProxy (typeof ({Trampolines}.{staticBridge}))]");
		return self;
	}

	/// <summary>
	/// Appends a `[param: BlockProxy]` attribute to the current writer.
	/// This attribute is used for parameters that are delegates (blocks), and it points to the native invocation class
	/// generated for the specified delegate type.
	/// </summary>
	/// <param name="self">A tabbed string writer.</param>
	/// <param name="typeInfo">The <see cref="TypeInfo"/> of the delegate.</param>
	/// <returns>The current writer.</returns>
	public static TabbedWriter<StringWriter> AppendDelegateParameter (this TabbedWriter<StringWriter> self,
		in TypeInfo typeInfo)
	{
		var nativeInvoker =
			Nomenclator.GetTrampolineClassName (typeInfo, Nomenclator.TrampolineClassType.NativeInvocationClass);
		self.WriteLine ($"[param: BlockProxy (typeof ({Trampolines}.{nativeInvoker}))]");
		return self;
	}
}
