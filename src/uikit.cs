//
// This file describes the API that the generator will produce
//
// Authors:
//   Geoff Norton
//   Miguel de Icaza
//   Alex Soto <alexsoto@microsoft.com>
//
// Copyright 2009-2011, Novell, Inc.
// Copyrigh 2011-2013, Xamarin Inc.
// Copyrigh 2019, Microsoft Corporation.
//
using ObjCRuntime;
using Foundation;
using CoreGraphics;
using CoreLocation;
using UIKit;
using CloudKit;
#if !TVOS
using Contacts;
#else
using CNContact = System.Object;
#endif
using MediaPlayer;
using CoreImage;
using CoreAnimation;
using CoreData;
using UserNotifications;
using UniformTypeIdentifiers;
using Symbols;

#if IOS
using FileProvider;
using LinkPresentation;
#endif // IOS
#if TVOS
using LPLinkMetadata = Foundation.NSObject;
#endif // TVOS
using Intents;

// Unfortunately this file is a mix of #if's andso we list
// some classes untilis used instead of #if's directives
// to avoid the usage of more #if's

#if !IOS
using UIPointerAccessoryPosition = Foundation.NSObject;
#endif // !IOS

#if __MACCATALYST__
using AppKit;
#else
using NSTouchBarProvider = Foundation.NSObject;
using NSTouchBar = Foundation.NSObject;
using NSToolbar = Foundation.NSObject;
using NSToolbarItem = Foundation.NSObject;
#endif

using System;
using System.ComponentModel;

#nullable enable

namespace UIKit {

	/// <summary>A flagging enumeration for specifying the direction in which focus is moving.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Native]
	[Flags]
	public enum UIFocusHeading : ulong {
		/// <summary>There is no known focus heading.</summary>
		None = 0,
		/// <summary>The focus is moving towards the top of the screen.</summary>
		Up = 1 << 0,
		/// <summary>The focus is moving towards the bottom of the screen.</summary>
		Down = 1 << 1,
		/// <summary>The focus is moving towards the user's left.</summary>
		Left = 1 << 2,
		/// <summary>The focus is moving to  the user's right.</summary>
		Right = 1 << 3,
		/// <summary>The focus is moving forward through the collection.</summary>
		Next = 1 << 4,
		/// <summary>The focus is moving backwards through the collection.</summary>
		Previous = 1 << 5,
		[iOS (15, 0), TV (15, 0), MacCatalyst (15, 0)]
		First = 1uL << 8,
		[iOS (15, 0), TV (15, 0), MacCatalyst (15, 0)]
		Last = 1uL << 9,
	}

	/// <summary>An enumeration whose values reflect the status of a background refresh. Available from <see cref="UIKit.UIApplication.BackgroundRefreshStatus" />.</summary>
	/// <remarks>To be added.</remarks>
	[Native] // NSInteger -> UIApplication.h
	[MacCatalyst (13, 1)]
	public enum UIBackgroundRefreshStatus : long {
		/// <summary>Indicates that backgrounding is implicitly restricted and cannot be enabled (e.g., due to parental restrictions).</summary>
		Restricted,
		/// <summary>Indicates that the application user has explicitly disabled backgrounding capability.</summary>
		Denied,
		/// <summary>Indicates that background processing is allowed.</summary>
		Available,
	}

	/// <summary>An enumeration whose values specify the results of a <see cref="UIKit.UIApplicationDelegate.DidReceiveRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary,System.Action{UIKit.UIBackgroundFetchResult})" /> completion handler.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Native] // NSUInteger -> UIApplication.h
	public enum UIBackgroundFetchResult : ulong {
		/// <summary>New data was downloaded successfully.</summary>
		NewData,
		/// <summary>There was no new data to download.</summary>
		NoData,
		/// <summary>The attempt to download data failed.</summary>
		Failed,
	}

	/// <include file="../docs/api/UIKit/UIApplicationShortcutIconType.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIApplicationShortcutIconType']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[Native]
	public enum UIApplicationShortcutIconType : long {
		/// <summary>Icon for a "Compose" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Compose.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Compose,
		/// <summary>Icon for a "Play" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Play.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Play,
		/// <summary>Icon for a "Pause" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Pause.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Pause,
		/// <summary>Icon for a "Add" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Add.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Add,
		/// <summary>Icon for a "Location" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Location.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Location,
		/// <summary>Icon for a "Search" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Search.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Search,
		/// <summary>Icon for a "Share" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Share.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Share,
		// iOS 9.1 
		/// <summary>Icon for a "Prohibit" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Prohibit.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Prohibit,
		/// <summary>Icon for a "Contact" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Contact.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Contact,
		/// <summary>Icon for a "Home" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Home.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Home,
		/// <summary>Icon for a "MarkLocation" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.MarkLocation.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		MarkLocation,
		/// <summary>Icon for a "Favorite" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Favorite.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Favorite,
		/// <summary>Icon for a "Love" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Love.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Love,
		/// <summary>Icon for a "Cloud" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Cloud.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Cloud,
		/// <summary>Icon for a "Invitation" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Invitation.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Invitation,
		/// <summary>Icon for a "Confirmation" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Confirmation.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Confirmation,
		/// <summary>Icon for a "Mail" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Mail.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Mail,
		/// <summary>Icon for a "Message" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Message.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Message,
		/// <summary>Icon for a "Date" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Date.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Date,
		/// <summary>Icon for a "Time" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Time.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Time,
		/// <summary>Icon for a "CapturePhoto" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.CapturePhoto.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		CapturePhoto,
		/// <summary>Icon for a "CaptureVideo" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.CaptureVideo.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		CaptureVideo,
		/// <summary>Icon for a "Task" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Task.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Task,
		/// <summary>Icon for a "TaskCompleted" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.TaskCompleted.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		TaskCompleted,
		/// <summary>Icon for a "Alarm" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Alarm.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Alarm,
		/// <summary>Icon for a "Bookmark" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Bookmark.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Bookmark,
		/// <summary>Icon for a "Shuffle" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Shuffle.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Shuffle,
		/// <summary>Icon for a "Audio" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Audio.png" alt="Application shortcut icon." />
		///           </para>
		///         </remarks>
		Audio,
		/// <summary>Icon for a "Update" Quick Action</summary>
		///         <remarks>
		///           <para>
		///             <img href="~/UIKit/_images/UIKit.UIApplicationShortcutIconType.Update.png" alt="Shortcut icon for update" />
		///           </para>
		///         </remarks>
		Update,
	}

	/// <summary>Enumerates the mass of the objects used by the <see cref="UIKit.UIImpactFeedbackGenerator" /> class.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Native]
	public enum UIImpactFeedbackStyle : long {
		/// <summary>A light impact.</summary>
		Light,
		/// <summary>A moderate impact.</summary>
		Medium,
		/// <summary>A strong impact.</summary>
		Heavy,
		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		Soft,
		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		Rigid,
	}

	/// <summary>Enumerates the types of notification provided by <see cref="UIKit.UINotificationFeedbackGenerator" />.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Native]
	public enum UINotificationFeedbackType : long {
		/// <summary>A task has succeeded.</summary>
		Success,
		/// <summary>A task has produced a warning.</summary>
		Warning,
		/// <summary>A task has failed.</summary>
		Error,
	}

	[Native]
	[ErrorDomain ("UIGuidedAccessErrorDomain")]
	[NoTV]
	[MacCatalyst (13, 1)]
	public enum UIGuidedAccessErrorCode : long {
		/// <summary>To be added.</summary>
		PermissionDenied,
		/// <summary>To be added.</summary>
		Failed = long.MaxValue,
	}

	[Flags, NoTV]
	[MacCatalyst (13, 1)]
	[Native]
	public enum UIGuidedAccessAccessibilityFeature : ulong {
		/// <summary>To be added.</summary>
		VoiceOver = 1uL << 0,
		/// <summary>To be added.</summary>
		Zoom = 1uL << 1,
		/// <summary>To be added.</summary>
		AssistiveTouch = 1uL << 2,
		/// <summary>To be added.</summary>
		InvertColors = 1uL << 3,
		/// <summary>To be added.</summary>
		GrayscaleDisplay = 1uL << 4,
	}

	[NoTV, iOS (14, 5)]
	[MacCatalyst (14, 5)]
	[Native]
	public enum UIPrintRenderingQuality : long {
		Best,
		Responsive,
	}

	[TV (14, 5), iOS (14, 5)]
	[MacCatalyst (14, 5)]
	[Native]
	public enum UISplitViewControllerDisplayModeButtonVisibility : long {
		Automatic,
		Never,
		Always,
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UIButtonConfigurationIndicator : long {
		Automatic,
		None,
		Popup,
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UISearchControllerScopeBarActivation : long {
		Automatic,
		Manual,
		OnTextEntry,
		OnSearchActivation,
	}

	/// <param name="finished">
	///       <see langword="true" /> if the calculation concluded successfully.</param>
	/// <summary>A strongly-typed delegate called at completion of certain lengthy calculations.</summary>
	/// <remarks>
	///       <para>
	///         This strongly-typed delegate is called at the end of certain lengthy calculations. It's <paramref name="finished" /> parameter will be <see langword="true" /> if the calculation finished without interruption.
	///       </para>
	///     </remarks>
	/// <altmember cref="UIKit.UICollectionView.PerformBatchUpdates" />
	/// <altmember cref="UIKit.UIPageViewController.SetViewControllers" />
	/// <altmember cref="UIKit.UIView.AnimateNotify" />
	/// <altmember cref="UIKit.UIView.TransitionNotify" />
	/// <altmember cref="UIKit.UIViewController.Transition" />
	delegate void UICompletionHandler (bool finished);
	/// <param name="success">Typically, <see langword="true" /> if the associated method completed successfully.</param>
	///     <summary>A delegate used at the completion of operations.</summary>
	delegate void UIOperationHandler (bool success);
	/// <param name="completed">To be added.</param>
	/// <param name="finished">To be added.</param>
	/// <summary>A delegate used as the completion handler for <see cref="UIKit.UICollectionView.StartInteractiveTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayoutInteractiveTransitionCompletion)" />.</summary>
	/// <remarks>To be added.</remarks>
	delegate void UICollectionViewLayoutInteractiveTransitionCompletion (bool completed, bool finished);
	/// <param name="available">
	///       <see langword="true" /> if the printer is available for printing.</param>
	///     <summary>Completion handler used with <see cref="UIKit.UIPrinter.ContactPrinter(UIKit.UIPrinterContactPrinterHandler)" />.</summary>
	delegate void UIPrinterContactPrinterHandler (bool available);
	/// <summary>Completion handler used with various <see cref="UIKit.UIPrinterPickerController" /> presentation methods.</summary>
	delegate void UIPrinterPickerCompletionHandler ([NullAllowed] UIPrinterPickerController printerPickerController, bool userDidSelect, [NullAllowed] NSError error);

	delegate UISplitViewControllerDisplayMode UISplitViewControllerFetchTargetForActionHandler (UISplitViewController svc);
	delegate bool UISplitViewControllerDisplayEvent (UISplitViewController splitViewController, UIViewController vc, NSObject sender);
	delegate UIViewController UISplitViewControllerGetViewController (UISplitViewController splitViewController);
	delegate bool UISplitViewControllerCanCollapsePredicate (UISplitViewController splitViewController, UIViewController secondaryViewController, UIViewController primaryViewController);
	delegate UIViewController UISplitViewControllerGetSecondaryViewController (UISplitViewController splitViewController, UIViewController primaryViewController);
	/// <summary>The callback executed after a <see cref="UIKit.UIActivityViewController" /> is dismissed.</summary>
	delegate void UIActivityViewControllerCompletion ([NullAllowed] NSString activityType, bool completed, [NullAllowed] NSExtensionItem [] returnedItems, [NullAllowed] NSError error);

	// In the hopes that the parameter is self document: this array  can contain either UIDocuments or UIResponders
	/// <param name="uidocumentOrResponderObjects">To be added.</param>
	/// <summary>Delegate of <see cref="UIKit.UIApplicationDelegate.ContinueUserActivity(UIKit.UIApplication,Foundation.NSUserActivity,UIKit.UIApplicationRestorationHandler)" /> method. Can manipulate objects created or retrieved by the activity.</summary>
	/// <remarks>
	///       <para>Must be called from the main thread.</para>
	///     </remarks>
	delegate void UIApplicationRestorationHandler (NSObject [] uidocumentOrResponderObjects);

	/// <summary>Abstract base class for classes that generate feedback hints, such as haptics.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[DisableDefaultCtor]
	[Abstract] // abstract class that should not be used directly
	[BaseType (typeof (NSObject))]
	interface UIFeedbackGenerator : UIInteraction {

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Static]
		[Export ("feedbackGeneratorForView:")]
		UIFeedbackGenerator GetFeedbackGenerator (UIView forView);

		[Export ("prepare")]
		void Prepare ();
	}

	/// <summary>A <see cref="UIKit.UIFeedbackGenerator" /> that creates haptics simulating impacts.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[DisableDefaultCtor]
	[BaseType (typeof (UIFeedbackGenerator))]
	interface UIImpactFeedbackGenerator {

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Static]
		[Export ("feedbackGeneratorWithStyle:forView:")]
		UIImpactFeedbackGenerator GetFeedbackGenerator (UIImpactFeedbackStyle style, UIView view);

		[Deprecated (PlatformName.iOS, 17, 5, message: "Use 'GetFeedbackGenerator' method instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 5, message: "Use 'GetFeedbackGenerator' method instead.")]
		[Export ("initWithStyle:")]
		NativeHandle Constructor (UIImpactFeedbackStyle style);

		[Export ("impactOccurred")]
		void ImpactOccurred ();

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Export ("impactOccurredAtLocation:")]
		void ImpactOccurred (CGPoint atLocation);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("impactOccurredWithIntensity:")]
		void ImpactOccurred (nfloat intensity);

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Export ("impactOccurredWithIntensity:atLocation:")]
		void ImpactOccurred (nfloat intensity, CGPoint location);

		[iOS (17, 5), MacCatalyst (17, 5)]
		[New] // kind of overloading a static member, make it return 'instancetype'
		[Static]
		[Export ("feedbackGeneratorForView:")]
		UIImpactFeedbackGenerator GetFeedbackGenerator (UIView forView);
	}

	/// <summary>A <see cref="UIKit.UIFeedbackGenerator" /> that generates haptics relating to successes, failures, and warnings.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIFeedbackGenerator))]
	interface UINotificationFeedbackGenerator {

		[Export ("notificationOccurred:")]
		void NotificationOccurred (UINotificationFeedbackType notificationType);

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Export ("notificationOccurred:atLocation:")]
		void NotificationOccurred (UINotificationFeedbackType notificationType, CGPoint location);

		[iOS (17, 5), MacCatalyst (17, 5)]
		[New] // kind of overloading a static member, make it return 'instancetype'
		[Static]
		[Export ("feedbackGeneratorForView:")]
		UINotificationFeedbackGenerator GetFeedbackGenerator (UIView forView);
	}

	/// <summary>A <see cref="UIKit.UIFeedbackGenerator" /> that produces haptic feedback.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIFeedbackGenerator))]
	interface UISelectionFeedbackGenerator {

		[Export ("selectionChanged")]
		void SelectionChanged ();

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Export ("selectionChangedAtLocation:")]
		void SelectionChanged (CGPoint location);

		[iOS (17, 5), MacCatalyst (17, 5)]
		[New] // kind of overloading a static member, make it return 'instancetype'
		[Static]
		[Export ("feedbackGeneratorForView:")]
		UISelectionFeedbackGenerator GetFeedbackGenerator (UIView forView);
	}

	interface IUISheetPresentationControllerDelegate { }

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	[Protocol, Model]
	interface UISheetPresentationControllerDelegate : UIAdaptivePresentationControllerDelegate {

		[Export ("sheetPresentationControllerDidChangeSelectedDetentIdentifier:")]
		void DidChangeSelectedDetentIdentifier (UISheetPresentationController sheetPresentationController);
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (UIPresentationController))]
	[DisableDefaultCtor]
	interface UISheetPresentationController {

		[Export ("initWithPresentedViewController:presentingViewController:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIViewController presentedViewController, [NullAllowed] UIViewController presentingViewController);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUISheetPresentationControllerDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[NullAllowed, Export ("sourceView", ArgumentSemantic.Strong)]
		UIView SourceView { get; set; }

		[Export ("prefersEdgeAttachedInCompactHeight")]
		bool PrefersEdgeAttachedInCompactHeight { get; set; }

		[Export ("widthFollowsPreferredContentSizeWhenEdgeAttached")]
		bool WidthFollowsPreferredContentSizeWhenEdgeAttached { get; set; }

		[Export ("prefersGrabberVisible")]
		bool PrefersGrabberVisible { get; set; }

		[Export ("preferredCornerRadius")]
		nfloat PreferredCornerRadius { get; set; }

		[Export ("detents", ArgumentSemantic.Copy)]
		UISheetPresentationControllerDetent [] Detents { get; set; }

		[BindAs (typeof (UISheetPresentationControllerDetentIdentifier))]
		[NullAllowed, Export ("selectedDetentIdentifier")]
		NSString SelectedDetentIdentifier { get; set; }

		[BindAs (typeof (UISheetPresentationControllerDetentIdentifier))]
		[NullAllowed, Export ("largestUndimmedDetentIdentifier")]
		NSString LargestUndimmedDetentIdentifier { get; set; }

		[Export ("prefersScrollingExpandsWhenScrolledToEdge")]
		bool PrefersScrollingExpandsWhenScrolledToEdge { get; set; }

		[Export ("animateChanges:")]
		void AnimateChanges (Action changes);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("invalidateDetents")]
		void InvalidateDetents ();

		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("prefersPageSizing")]
		bool PrefersPageSizing { get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UICloudSharingControllerDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UICloudSharingControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UICloudSharingControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UICloudSharingControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUICloudSharingControllerDelegate { }

	/// <summary>Delegate object for the CloudKit sharing controller.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/reference/UIKit/UICloudSharingControllerDelegate">Apple documentation for <c>UICloudSharingControllerDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UICloudSharingControllerDelegate {
		/// <param name="csc">To be added.</param>
		/// <param name="error">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("cloudSharingController:failedToSaveShareWithError:")]
		void FailedToSaveShare (UICloudSharingController csc, NSError error);

		/// <param name="csc">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("itemTitleForCloudSharingController:")]
		[return: NullAllowed]
		string GetItemTitle (UICloudSharingController csc);

		/// <param name="csc">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("itemThumbnailDataForCloudSharingController:")]
		[return: NullAllowed]
		NSData GetItemThumbnailData (UICloudSharingController csc);

		/// <param name="csc">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("itemTypeForCloudSharingController:")]
		[return: NullAllowed]
		string GetItemType (UICloudSharingController csc);

		/// <param name="csc">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("cloudSharingControllerDidSaveShare:")]
		void DidSaveShare (UICloudSharingController csc);

		/// <param name="csc">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("cloudSharingControllerDidStopSharing:")]
		void DidStopSharing (UICloudSharingController csc);
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	delegate void UICloudSharingControllerPreparationHandler (UICloudSharingController controller, [BlockCallback] UICloudSharingControllerPreparationCompletionHandler completion);

	[NoTV]
	[MacCatalyst (13, 1)]
	delegate void UICloudSharingControllerPreparationCompletionHandler ([NullAllowed] CKShare share, [NullAllowed] CKContainer container, [NullAllowed] NSError error);

	/// <summary>Standard <see cref="UIKit.UIViewController" /> for adding or removing people from a CloudKit share record.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/reference/UIKit/UICloudSharingController">Apple documentation for <c>UICloudSharingController</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	interface UICloudSharingController {

		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Deprecated (PlatformName.iOS, 17, 0, message: "Use the 'UIActivityViewController' class instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Use the 'UIActivityViewController' class instead.")]
		[Export ("initWithPreparationHandler:")]
		NativeHandle Constructor (UICloudSharingControllerPreparationHandler preparationHandler);

		[Export ("initWithShare:container:")]
		NativeHandle Constructor (CKShare share, CKContainer container);

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		IUICloudSharingControllerDelegate Delegate { get; set; }

		[NullAllowed, Export ("share", ArgumentSemantic.Strong)]
		CKShare Share { get; }

		[Export ("availablePermissions", ArgumentSemantic.Assign)]
		UICloudSharingPermissionOptions AvailablePermissions { get; set; }

		[Export ("activityItemSource")]
		IUIActivityItemSource ActivityItemSource { get; }
	}

	/// <summary>Defines an extension method for <see cref="Foundation.NSAttributedString" />.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Category]
	[BaseType (typeof (NSAttributedString))]
	interface NSAttributedString_NSAttributedStringKitAdditions {
		/// <param name="range">To be added.</param>
		/// <summary>Returns <see langword="true" /> if the current <see cref="Foundation.NSAttributedString" /> contains attachments in the specified <paramref name="range" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("containsAttachmentsInRange:")]
		bool ContainsAttachments (NSRange range);
	}

	/// <summary>Provides an extension method for <see cref="Foundation.NSMutableAttributedString" /> that cleans up inconsistencies that develop after several edits.</summary>
	/// <remarks>To be added.</remarks>
	/// <altmember cref="Foundation.NSMutableAttributedString" />
	[Category, BaseType (typeof (NSMutableAttributedString))]
	interface NSMutableAttributedStringKitAdditions {
		/// <param name="range">To be added.</param>
		/// <summary>Cleans up inconsistencies that can accumulate over many edits.</summary>
		/// <remarks>
		///           <para>After edits, <see cref="Foundation.NSMutableAttributedString" />s may accumulate inconsistencies. For instance, paragraph styles must apply to entire paragraphs, scripts may be assigned to fonts that support them, and deleting attachment characters requires the corresponding attachment objects to be released. This method performs necessary cleanup.</para>
		///         </remarks>
		[Export ("fixAttributesInRange:")]
		void FixAttributesInRange (NSRange range);
	}

	/// <summary>Defined the <see cref="UIKit.NSIdentifier.Identifier(UIKit.NSLayoutConstraint)" /> extension property on <see cref="UIKit.NSLayoutConstraint" /> objects.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Category, BaseType (typeof (NSLayoutConstraint))]
	interface NSIdentifier {
		/// <summary>Returns an identifier that can be used to request an item.</summary>
		[Export ("identifier")]
		string GetIdentifier ();

		/// <param name="id">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setIdentifier:")]
		void SetIdentifier ([NullAllowed] string id);
	}

	/// <summary>A set of <see cref="Foundation.NSCoder" /> extension methods that add encoding of geometry-based data for use in UIKit.</summary>
	/// <remarks>To be added.</remarks>
	[Category]
	[BaseType (typeof (NSCoder))]
	interface NSCoder_UIGeometryKeyedCoding {
		/// <param name="point">To be added.</param>
		/// <param name="forKey">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("encodeCGPoint:forKey:")]
		void Encode (CGPoint point, string forKey);

		/// <param name="vector">The specified vector.</param>
		/// <param name="forKey">Designated key in the receiver archive.</param>
		/// <summary>Encodes the vector and also associates it with the designated key.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("encodeCGVector:forKey:")]
		void Encode (CGVector vector, string forKey);

		/// <param name="size">To be added.</param>
		/// <param name="forKey">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("encodeCGSize:forKey:")]
		void Encode (CGSize size, string forKey);

		/// <param name="rect">To be added.</param>
		/// <param name="forKey">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("encodeCGRect:forKey:")]
		void Encode (CGRect rect, string forKey);

		/// <param name="transform">The specified affine transform.</param>
		/// <param name="forKey">Designated key in the receiver archive.</param>
		/// <summary>Encodes the affine transform and also associates it with the designated key.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("encodeCGAffineTransform:forKey:")]
		void Encode (CGAffineTransform transform, string forKey);

		/// <param name="edgeInsets">The specified edge insets.</param>
		/// <param name="forKey">Designated key in the receiver archive.</param>
		/// <summary>Encodes the edge insets and also associates them with the designated key.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("encodeUIEdgeInsets:forKey:")]
		void Encode (UIEdgeInsets edgeInsets, string forKey);

		/// <param name="directionalEdgeInsets">To be added.</param>
		/// <param name="forKey">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("encodeDirectionalEdgeInsets:forKey:")]
		void Encode (NSDirectionalEdgeInsets directionalEdgeInsets, string forKey);

		/// <param name="uiOffset">The specified offset.</param>
		/// <param name="forKey">Designated key in the receiver archive.</param>
		/// <summary>Encodes the offset and also associates it with the designated key.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("encodeUIOffset:forKey:")]
		void Encode (UIOffset uiOffset, string forKey);

		/// <param name="key">Key that is identified with the point.</param>
		/// <summary>Decodes and then returns the point structure that is associated with the designated key.</summary>
		/// <returns>The point structure that is associated with the designated key.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("decodeCGPointForKey:")]
		CGPoint DecodeCGPoint (string key);

		/// <param name="key">Key that is identified with the vector.</param>
		/// <summary>Decodes and then returns the vector structure that is associated with the designated key.</summary>
		/// <returns>The vector structure that is associated with the designated key.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("decodeCGVectorForKey:")]
		CGVector DecodeCGVector (string key);

		/// <param name="key">Key that is identified with the rect.</param>
		/// <summary>Decodes and then returns the size structure that is associated with the designated key.</summary>
		/// <returns>The size structure that is associated with the designated key.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("decodeCGSizeForKey:")]
		CGSize DecodeCGSize (string key);

		/// <param name="key">Key that is identified with the affine transform.</param>
		/// <summary>Decodes and then returns the rectangle structure that is associated with the designated key.</summary>
		/// <returns>The rectangle structure that is associated with the designated key.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("decodeCGRectForKey:")]
		CGRect DecodeCGRect (string key);

		/// <param name="key">Key identified with the affine transform.</param>
		/// <summary>Decodes and then returns the affine transform structure that is associated with the designated key.</summary>
		/// <returns>The affine transform structure that is associated with the designated key.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("decodeCGAffineTransformForKey:")]
		CGAffineTransform DecodeCGAffineTransform (string key);

		/// <param name="key">Key that is identified with the edge insets.</param>
		/// <summary>Decodes and then returns the edge insets that are associated with the designated key.</summary>
		/// <returns>The edge insets that are associated with the designated key.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("decodeUIEdgeInsetsForKey:")]
		UIEdgeInsets DecodeUIEdgeInsets (string key);

		/// <param name="key">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("decodeDirectionalEdgeInsetsForKey:")]
		NSDirectionalEdgeInsets DecodeDirectionalEdgeInsets (string key);

		/// <param name="key">Key that is identified with the offset.</param>
		/// <summary>Decodes and then returns the offset that is associated with the designated key.</summary>
		/// <returns>The offset that is associated with the designated key</returns>
		/// <remarks>To be added.</remarks>
		[Export ("decodeUIOffsetForKey:")]
		UIOffset DecodeUIOffsetForKey (string key);
	}

	/// <include file="../docs/api/UIKit/UIAcceleration.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIAcceleration']/*" />
	[NoTV]
	[BaseType (typeof (NSObject))]
	[Deprecated (PlatformName.iOS, 5, 0, message: "Use 'CoreMotion' instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'CoreMotion' instead.")]
	interface UIAcceleration {
		[Export ("timestamp")]
		double Time { get; }

		[Export ("x")]
		double X { get; }

		[Export ("y")]
		double Y { get; }

		[Export ("z")]
		double Z { get; }
	}

	/// <include file="../docs/api/UIKit/UIAccelerometer.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIAccelerometer']/*" />
	[NoTV]
	[BaseType (typeof (NSObject), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIAccelerometerDelegate) })]
	[Deprecated (PlatformName.iOS, 5, 0, message: "Use 'CoreMotion' instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'CoreMotion' instead.")]
	interface UIAccelerometer {
		[Static]
		[Export ("sharedAccelerometer")]
		UIAccelerometer SharedAccelerometer { get; }

		[Export ("updateInterval")]
		double UpdateInterval { get; set; }

		/// <summary>An instance of the UIKit.IUIAccelerometerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIAccelerometerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIAccelerometerDelegate Delegate { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIAccelerometerDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIAccelerometerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIAccelerometerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIAccelerometerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIAccelerometerDelegate { }

	/// <summary>A class used to receive notifications from the <see cref="UIKit.UIAccelerometer" />.</summary>
	///     <remarks>
	///       <para>To use this class, you must derive from it and override its methods to respond to events.</para>
	///       <para>
	/// Alternatively, you can just use C# events to subscribe to <see cref="UIKit.UIAccelerometer.Acceleration" />. 
	/// </para>
	///     </remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAccelerometerDelegate_Protocol/index.html">Apple documentation for <c>UIAccelerometerDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIAccelerometerDelegate {
#pragma warning disable 618
		/// <param name="accelerometer">To be added.</param>
		/// <param name="acceleration">To be added.</param>
		/// <summary>Indicates that an acceleration measurement has occurred.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("accelerometer:didAccelerate:"), EventArgs ("UIAccelerometer", XmlDocs = """
			<summary>This event is raised when a new acceleration event is ready.</summary>
			<remarks>Use this event if you want to subscribe to notifications without having to create a UIAccelerometerDelegate class.</remarks>
			"""), EventName ("Acceleration")]
		void DidAccelerate (UIAccelerometer accelerometer, UIAcceleration acceleration);
#pragma warning restore 618
	}

	interface UIAccessibility {
		[Export ("isAccessibilityElement")]
		bool IsAccessibilityElement { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("accessibilityLabel", ArgumentSemantic.Copy)]
		string AccessibilityLabel { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("accessibilityAttributedLabel", ArgumentSemantic.Copy)]
		NSAttributedString AccessibilityAttributedLabel { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("accessibilityHint", ArgumentSemantic.Copy)]
		string AccessibilityHint { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("accessibilityAttributedHint", ArgumentSemantic.Copy)]
		NSAttributedString AccessibilityAttributedHint { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("accessibilityValue", ArgumentSemantic.Copy)]
		string AccessibilityValue { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("accessibilityAttributedValue", ArgumentSemantic.Copy)]
		NSAttributedString AccessibilityAttributedValue { get; set; }

		[Export ("accessibilityTraits")]
		UIAccessibilityTrait AccessibilityTraits { get; set; }

		[Export ("accessibilityFrame")]
		CGRect AccessibilityFrame { get; set; }

		[Export ("accessibilityActivationPoint")]
		CGPoint AccessibilityActivationPoint { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("accessibilityLanguage", ArgumentSemantic.Retain)]
		string AccessibilityLanguage { get; set; }

		[Export ("accessibilityElementsHidden")]
		bool AccessibilityElementsHidden { get; set; }

		[Export ("accessibilityViewIsModal")]
		bool AccessibilityViewIsModal { get; set; }

		[Export ("shouldGroupAccessibilityChildren")]
		bool ShouldGroupAccessibilityChildren { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("accessibilityNavigationStyle")]
		UIAccessibilityNavigationStyle AccessibilityNavigationStyle { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("accessibilityRespondsToUserInteraction")]
		bool AccessibilityRespondsToUserInteraction { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("accessibilityUserInputLabels", ArgumentSemantic.Strong)]
		string [] AccessibilityUserInputLabels { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("accessibilityAttributedUserInputLabels", ArgumentSemantic.Copy)]
		NSAttributedString [] AccessibilityAttributedUserInputLabels { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("accessibilityTextualContext", ArgumentSemantic.Strong)]
		string AccessibilityTextualContext { get; set; }

#if !XAMCORE_5_0
		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element has no traits.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitNone")]
		long TraitNone { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element should be treated as a button.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitButton")]
		long TraitButton { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element should be considered a link.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitLink")]
		long TraitLink { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element is a header that divides content into sections.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitHeader")]
		long TraitHeader { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element should be considered a search field.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitSearchField")]
		long TraitSearchField { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element should be treated as an image.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitImage")]
		long TraitImage { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element is selected.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitSelected")]
		long TraitSelected { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> elements plays its own sound when activated.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitPlaysSound")]
		long TraitPlaysSound { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element acts like a keyboard key.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitKeyboardKey")]
		long TraitKeyboardKey { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element should be treated as static text.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitStaticText")]
		long TraitStaticText { get; }

		/// <summary>Gets a trait that provides summary information when an application starts.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitSummaryElement")]
		long TraitSummaryElement { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element is not enabled.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitNotEnabled")]
		long TraitNotEnabled { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element updates its <see cref="UIKit.UIImage.AccessibilityLabel" /> or <see cref="UIKit.UIImage.AccessibilityValue" />.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitUpdatesFrequently")]
		long TraitUpdatesFrequently { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element starts a media session when it is activated.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitStartsMediaSession")]
		long TraitStartsMediaSession { get; }

		/// <summary>Gets a trait that allows continuous adjustment of an accessibility element through a range of values.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitAdjustable")]
		long TraitAdjustable { get; }

		/// <summary>Gets a trait that allows direct touch interaction for users.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitAllowsDirectInteraction")]
		long TraitAllowsDirectInteraction { get; }

		/// <summary>Gets a trait that indicates that <c>this</c> <see cref="UIKit.IUIAccessibilityIdentification" /> element should turn the page when VoiceOver finishes that page.</summary>
		/// <value>The value to be set for the trait.</value>
		/// <remarks>To be added.</remarks>
		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[Field ("UIAccessibilityTraitCausesPageTurn")]
		long TraitCausesPageTurn { get; }

		[Obsolete ("Use 'UIAccessibilityTraits' enum instead.")]
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilityTraitTabBar")]
		long TraitTabBar { get; }
#endif // !XAMCORE_5_0

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.AnnouncementDidFinishNotification']/*" />
		[Field ("UIAccessibilityAnnouncementDidFinishNotification")]
		[Notification (typeof (UIAccessibilityAnnouncementFinishedEventArgs))]
		NSString AnnouncementDidFinishNotification { get; }

		/// <summary>Developers should not use this deprecated property. Developers should use 'VoiceOverStatusDidChangeNotification' instead.</summary>
		/// <value>
		///         </value>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 11, 0, message: "Use 'VoiceOverStatusDidChangeNotification' instead.")]
		[Deprecated (PlatformName.TvOS, 11, 0, message: "Use 'VoiceOverStatusDidChangeNotification' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'VoiceOverStatusDidChangeNotification' instead.")]
		[Field ("UIAccessibilityVoiceOverStatusChanged")]
		NSString VoiceOverStatusChanged { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.VoiceOverStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilityVoiceOverStatusDidChangeNotification")]
		[Notification]
		NSString VoiceOverStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.MonoAudioStatusDidChangeNotification']/*" />
		[Field ("UIAccessibilityMonoAudioStatusDidChangeNotification")]
		[Notification]
		NSString MonoAudioStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.ClosedCaptioningStatusDidChangeNotification']/*" />
		[Field ("UIAccessibilityClosedCaptioningStatusDidChangeNotification")]
		[Notification]
		NSString ClosedCaptioningStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.InvertColorsStatusDidChangeNotification']/*" />
		[Field ("UIAccessibilityInvertColorsStatusDidChangeNotification")]
		[Notification]
		NSString InvertColorsStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.GuidedAccessStatusDidChangeNotification']/*" />
		[Field ("UIAccessibilityGuidedAccessStatusDidChangeNotification")]
		[Notification]
		NSString GuidedAccessStatusDidChangeNotification { get; }

		/// <summary>Gets the notification posted by an application that a new view appears that includes a major portion of the screen.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Field ("UIAccessibilityScreenChangedNotification")]
		int ScreenChangedNotification { get; } // This is int, not nint

		/// <summary>Gets the notification posted by an application that the layout of a screen has changed.</summary>
		/// <value>The layer that the view is being rendered on.</value>
		/// <remarks>To be added.</remarks>
		[Field ("UIAccessibilityLayoutChangedNotification")]
		int LayoutChangedNotification { get; } // This is int, not nint

		/// <summary>Gets the notification posted by an application that an announcement requires assistive technology.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Field ("UIAccessibilityAnnouncementNotification")]
		int AnnouncementNotification { get; } // This is int, not nint

		/// <summary>Gets the notification posted by an application that a scroll action has finished.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Field ("UIAccessibilityPageScrolledNotification")]
		int PageScrolledNotification { get; } // This is int, not nint

		[NullAllowed] // by default this property is null
		[Export ("accessibilityPath", ArgumentSemantic.Copy)]
		UIBezierPath AccessibilityPath { get; set; }

		[Export ("accessibilityActivate")]
		bool AccessibilityActivate ();

		/// <summary>Gets a value to be interpreted as a <see langword="bool" /> that determines whether the punctuation in a string is pronounced.</summary>
		/// <value>String indicating whether punctuation is pronounced.</value>
		/// <remarks>To be added.</remarks>
		[Field ("UIAccessibilitySpeechAttributePunctuation")]
		NSString SpeechAttributePunctuation { get; }

		/// <summary>Gets a BCP-47 language code.</summary>
		/// <value>A BCP-47 language code.</value>
		/// <remarks>To be added.</remarks>
		[Field ("UIAccessibilitySpeechAttributeLanguage")]
		NSString SpeechAttributeLanguage { get; }

		/// <summary>Gets the value from 0.0 to 2.0 that determines the pitch for a spoken string.</summary>
		/// <value>Values range from 0.0 (low pitch) to 2.0 (high pitch).</value>
		/// <remarks>To be added.</remarks>
		[Field ("UIAccessibilitySpeechAttributePitch")]
		NSString SpeechAttributePitch { get; }

		[iOS (17, 0), TV (17, 0), MacCatalyst (17, 0)]
		[Field ("UIAccessibilitySpeechAttributeAnnouncementPriority")]
		NSString SpeechAttributeAnnouncementPriority { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.BoldTextStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityBoldTextStatusDidChangeNotification")]
		NSString BoldTextStatusDidChangeNotification { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Notification]
		[Field ("UIAccessibilityButtonShapesEnabledStatusDidChangeNotification")]
		NSString ButtonShapesEnabledStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.DarkerSystemColorsStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityDarkerSystemColorsStatusDidChangeNotification")]
		NSString DarkerSystemColorsStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.GrayscaleStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityGrayscaleStatusDidChangeNotification")]
		NSString GrayscaleStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.ReduceMotionStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityReduceMotionStatusDidChangeNotification")]
		NSString ReduceMotionStatusDidChangeNotification { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Notification]
		[Field ("UIAccessibilityPrefersCrossFadeTransitionsStatusDidChangeNotification")]
		NSString PrefersCrossFadeTransitionsStatusDidChangeNotification { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityVideoAutoplayStatusDidChangeNotification")]
		NSString VideoAutoplayStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.ReduceTransparencyStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityReduceTransparencyStatusDidChangeNotification")]
		NSString ReduceTransparencyStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.SwitchControlStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilitySwitchControlStatusDidChangeNotification")]
		NSString SwitchControlStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.NotificationSwitchControlIdentifier']/*" />
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilityNotificationSwitchControlIdentifier")]
		NSString NotificationSwitchControlIdentifier { get; }


		// Chose int because this should be UIAccessibilityNotifications type
		// just like UIAccessibilityAnnouncementNotification field
		/// <summary>Pauses assistive technology notifications.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		//[Notification] // int ScreenChangedNotification doesn't use this attr either
		[Field ("UIAccessibilityPauseAssistiveTechnologyNotification")]
		int PauseAssistiveTechnologyNotification { get; } // UIAccessibilityNotifications => uint32_t

		// Chose int because this should be UIAccessibilityNotifications type
		// just like UIAccessibilityAnnouncementNotification field
		/// <summary>Resumes assistive technology notifications.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		//[Notification] // int ScreenChangedNotification doesn't use this attr either
		[Field ("UIAccessibilityResumeAssistiveTechnologyNotification")]
		int ResumeAssistiveTechnologyNotification { get; } // UIAccessibilityNotifications => uint32_t

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.SpeakScreenStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilitySpeakScreenStatusDidChangeNotification")]
		NSString SpeakScreenStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.SpeakSelectionStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilitySpeakSelectionStatusDidChangeNotification")]
		NSString SpeakSelectionStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.ShakeToUndoDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityShakeToUndoDidChangeNotification")]
		NSString ShakeToUndoDidChangeNotification { get; }

		// FIXME: we only used this on a few types before, none of them available on tvOS
		// but a new member was added to the platform... 
		[NoiOS]
		[NoMacCatalyst]
		[NullAllowed, Export ("accessibilityHeaderElements", ArgumentSemantic.Copy)]
		NSObject [] AccessibilityHeaderElements { get; set; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.ElementFocusedNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityElementFocusedNotification")]
		NSString ElementFocusedNotification { get; }

		/// <summary>A string constant used by accessibility APIs (see <see cref="UIKit.UIAccessibility.FocusedElement(System.String)" />) to identify the focused element.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityFocusedElementKey")]
		NSString FocusedElementKey { get; }

		/// <summary>A string constant used by accessibility APIs (see <see cref="UIKit.UIAccessibility.FocusedElement(System.String)" />) to identify the previously focused element.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityUnfocusedElementKey")]
		NSString UnfocusedElementKey { get; }

		/// <summary>The string "UIAccessibilityAssistiveTechnologyKey" which can be used to distinguish accessibility notifications.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityAssistiveTechnologyKey")]
		NSString AssistiveTechnologyKey { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.NotificationVoiceOverIdentifier']/*" />
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilityNotificationVoiceOverIdentifier")]
		NSString NotificationVoiceOverIdentifier { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.HearingDevicePairedEarDidChangeNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityHearingDevicePairedEarDidChangeNotification")]
		NSString HearingDevicePairedEarDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIBarItem.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIBarItem.AssistiveTouchStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityAssistiveTouchStatusDidChangeNotification")]
		NSString AssistiveTouchStatusDidChangeNotification { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification")]
		NSString ShouldDifferentiateWithoutColorDidChangeNotification { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIAccessibilityOnOffSwitchLabelsDidChangeNotification")]
		NSString OnOffSwitchLabelsDidChangeNotification { get; }

		/// <summary>Key for option that spoken text interrupt existing spoken content.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilitySpeechAttributeQueueAnnouncement")]
		NSString SpeechAttributeQueueAnnouncement { get; }

		/// <summary>Returns the IPA notation for the accessibility attributed string.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilitySpeechAttributeIPANotation")]
		NSString SpeechAttributeIpaNotation { get; }

		/// <summary>Key for option of the accessibility text's heading level.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilityTextAttributeHeadingLevel")]
		NSString TextAttributeHeadingLevel { get; }

		/// <summary>Key for option that custom attributes be applied to the accessibility text.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilityTextAttributeCustom")]
		NSString TextAttributeCustom { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilityTextAttributeContext")]
		NSString TextAttributeContext { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilitySpeechAttributeSpellOut")]
		NSString SpeechAttributeSpellOut { get; }

		[iOS (17, 0), TV (17, 0), MacCatalyst (17, 0)]
		[Export ("accessibilityDirectTouchOptions", ArgumentSemantic.Assign)]
		UIAccessibilityDirectTouchOptions AccessibilityDirectTouchOptions { get; set; }

		[TV (18, 0), Mac (15, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("accessibilityExpandedStatus", ArgumentSemantic.Assign)]
		UIAccessibilityExpandedStatus AccessibilityExpandedStatus { get; set; }
	}

	interface UIAccessibilityAnnouncementFinishedEventArgs {
		/// <summary>The announcement that has finished.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("UIAccessibilityAnnouncementKeyStringValue")]
		string Announcement { get; }

		/// <summary>Whether the announcement was successfully delivered. </summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("UIAccessibilityAnnouncementKeyWasSuccessful")]
		bool WasSuccessful { get; }
	}

	/// <summary>Base interface for the UIAccessibilityContainer protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol (IsInformal = true)]
	interface UIAccessibilityContainer {
		/// <summary>Returns the number of elements in the accessibility container.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("accessibilityElementCount")]
		nint AccessibilityElementCount ();

		/// <param name="index">The index of the item to get.</param>
		/// <summary>Returns the element at <paramref name="index" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("accessibilityElementAtIndex:")]
		NSObject GetAccessibilityElementAt (nint index);

		/// <param name="element">The element whose index to get.</param>
		/// <summary>Returns the index of <paramref name="element" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("indexOfAccessibilityElement:")]
		nint GetIndexOfAccessibilityElement (NSObject element);

		/// <summary>Returns the elements in the accessibility container.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("accessibilityElements")]
		[MacCatalyst (13, 1)]
		NSObject GetAccessibilityElements ();

		/// <param name="elements">To be added.</param>
		/// <summary>Assigns <paramref name="elements" /> to the contents of the accessibilty container.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("setAccessibilityElements:")]
		void SetAccessibilityElements ([NullAllowed] NSObject elements);

		/// <summary>A value that tells whether the container is a table, or list, or etc.</summary>
		[MacCatalyst (13, 1)]
		[Export ("accessibilityContainerType", ArgumentSemantic.Assign)]
		UIAccessibilityContainerType AccessibilityContainerType { get; set; }
	}

	interface IUIAccessibilityContainerDataTableCell { }

	/// <summary>Contains the row spand and column span of a cell.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIAccessibilityContainerDataTableCell {
		/// <summary>Returns the number of rows that the cell spans.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("accessibilityRowRange")]
		NSRange GetAccessibilityRowRange ();

		/// <summary>Returns the number of columns that the cell spans.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("accessibilityColumnRange")]
		NSRange GetAccessibilityColumnRange ();
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIAccessibilityContainerDataTable" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIAccessibilityContainerDataTable" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIAccessibilityContainerDataTable" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIAccessibilityContainerDataTable_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIAccessibilityContainerDataTable {
		/// <param name="row">The row that contains the desired element.</param>
		/// <param name="column">The column that contains the desired element.</param>
		/// <summary>Returns a description of the row span and column span for the cell that is located at the specified <parmref name="row" /> and <paramref name="column" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("accessibilityDataTableCellElementForRow:column:")]
		[return: NullAllowed]
		IUIAccessibilityContainerDataTableCell GetAccessibilityDataTableCellElement (nuint row, nuint column);

		/// <summary>Gets the number of rows in the table.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("accessibilityRowCount")]
		nuint AccessibilityRowCount { get; }

		/// <summary>Gets the number of columns in the table.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("accessibilityColumnCount")]
		nuint AccessibilityColumnCount { get; }

		/// <param name="row">The desired row.</param>
		/// <summary>Returns an array of description of the row span and column span for the header cells for the specified <paramref name="row" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("accessibilityHeaderElementsForRow:")]
		[return: NullAllowed]
		IUIAccessibilityContainerDataTableCell [] GetAccessibilityHeaderElementsForRow (nuint row);

		/// <param name="column">The desired column.</param>
		/// <summary>Returns an array of description of the row span and column span for the header cells for the specified <paramref name="column" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("accessibilityHeaderElementsForColumn:")]
		[return: NullAllowed]
		IUIAccessibilityContainerDataTableCell [] GetAccessibilityHeaderElementsForColumn (nuint column);
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	delegate bool UIAccessibilityCustomActionHandler (UIAccessibilityCustomAction customAction);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor] // NSInvalidArgumentException Please use the designated initializer
	partial interface UIAccessibilityCustomAction {
		[Export ("initWithName:target:selector:")]
		NativeHandle Constructor (string name, NSObject target, Selector selector);

		[MacCatalyst (13, 1)]
		[Export ("initWithAttributedName:target:selector:")]
		NativeHandle Constructor (NSAttributedString attributedName, [NullAllowed] NSObject target, Selector selector);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("initWithName:actionHandler:")]
		NativeHandle Constructor (string name, [NullAllowed] UIAccessibilityCustomActionHandler actionHandler);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("initWithAttributedName:actionHandler:")]
		NativeHandle Constructor (NSAttributedString attributedName, [NullAllowed] UIAccessibilityCustomActionHandler actionHandler);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithName:image:target:selector:")]
		NativeHandle Constructor (string name, [NullAllowed] UIImage image, [NullAllowed] NSObject target, Selector selector);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithAttributedName:image:target:selector:")]
		NativeHandle Constructor (NSAttributedString attributedName, [NullAllowed] UIImage image, [NullAllowed] NSObject target, Selector selector);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithName:image:actionHandler:")]
		NativeHandle Constructor (string name, [NullAllowed] UIImage image, UIAccessibilityCustomActionHandler actionHandler);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithAttributedName:image:actionHandler:")]
		NativeHandle Constructor (NSAttributedString attributedName, [NullAllowed] UIImage image, UIAccessibilityCustomActionHandler actionHandler);

		[NullAllowed] // by default this property is null
		[Export ("name")]
		string Name { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("attributedName", ArgumentSemantic.Copy)]
		NSAttributedString AttributedName { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("target", ArgumentSemantic.Weak)]
		NSObject Target { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("selector", ArgumentSemantic.UnsafeUnretained)]
		Selector Selector { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("actionHandler", ArgumentSemantic.Copy)]
		UIAccessibilityCustomActionHandler ActionHandler { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; set; }

		[TV (18, 0), Mac (15, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("category", ArgumentSemantic.Copy), NullAllowed]
		string Category { get; set; }

		[TV (18, 0), Mac (15, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Field ("UIAccessibilityCustomActionCategoryEdit")]
		NSString CategoryEdit { get; }
	}

	[return: NullAllowed]
	delegate UIAccessibilityCustomRotorItemResult UIAccessibilityCustomRotorSearch (UIAccessibilityCustomRotorSearchPredicate predicate);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIAccessibilityCustomRotor {

		[Export ("initWithName:itemSearchBlock:")]
		NativeHandle Constructor (string name, UIAccessibilityCustomRotorSearch itemSearchHandler);

		[MacCatalyst (13, 1)]
		[Export ("initWithAttributedName:itemSearchBlock:")]
		NativeHandle Constructor (NSAttributedString attributedName, UIAccessibilityCustomRotorSearch itemSearchBlock);

		[MacCatalyst (13, 1)]
		[Export ("initWithSystemType:itemSearchBlock:")]
		NativeHandle Constructor (UIAccessibilityCustomSystemRotorType type, UIAccessibilityCustomRotorSearch itemSearchBlock);

		[Export ("name")]
		string Name { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("attributedName", ArgumentSemantic.Copy)]
		NSAttributedString AttributedName { get; set; }

		[Export ("itemSearchBlock", ArgumentSemantic.Copy)]
		UIAccessibilityCustomRotorSearch ItemSearchHandler { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("systemRotorType")]
		UIAccessibilityCustomSystemRotorType SystemRotorType { get; }
	}

	/// <summary>Extension method for <see cref="Foundation.NSObject" /> that provides access to the <see cref="UIKit.UIAccessibilityCustomRotor" /> array.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Category]
	[BaseType (typeof (NSObject))]
	interface NSObject_UIAccessibilityCustomRotor {

		/// <summary>Gets the array of <see cref="UIKit.UIAccessibilityCustomRotor" /> objects appropriate for <see langword="this" /> object.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("accessibilityCustomRotors")]
		[return: NullAllowed]
		UIAccessibilityCustomRotor [] GetAccessibilityCustomRotors ();

		/// <param name="customRotors">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Sets the array of <see cref="UIKit.UIAccessibilityCustomRotor" /> objects appropriate for <see langword="this" /> object.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setAccessibilityCustomRotors:")]
		void SetAccessibilityCustomRotors ([NullAllowed] UIAccessibilityCustomRotor [] customRotors);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIAccessibilityCustomRotorItemResult {

		[Export ("initWithTargetElement:targetRange:")]
		NativeHandle Constructor (NSObject targetElement, [NullAllowed] UITextRange targetRange);

		[NullAllowed, Export ("targetElement", ArgumentSemantic.Weak)]
		NSObject TargetElement { get; set; }

		[NullAllowed, Export ("targetRange", ArgumentSemantic.Retain)]
		UITextRange TargetRange { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIAccessibilityCustomRotorSearchPredicate {

		[Export ("currentItem", ArgumentSemantic.Retain)]
		UIAccessibilityCustomRotorItemResult CurrentItem { get; set; }

		[Export ("searchDirection", ArgumentSemantic.Assign)]
		UIAccessibilityCustomRotorDirection SearchDirection { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIResponder))]
	// only happens on the simulator (not devices) on iOS8 (still make sense)
	[DisableDefaultCtor] // NSInvalidArgumentException Reason: Use initWithAccessibilityContainer:
	interface UIAccessibilityElement : UIAccessibilityIdentification {
		[Export ("initWithAccessibilityContainer:")]
		NativeHandle Constructor (NSObject container);

		[NullAllowed] // by default this property is null
		[Export ("accessibilityContainer", ArgumentSemantic.UnsafeUnretained)]
		NSObject AccessibilityContainer { get; set; }

		[Export ("isAccessibilityElement", ArgumentSemantic.UnsafeUnretained)]
		bool IsAccessibilityElement { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("accessibilityLabel", ArgumentSemantic.Retain)]
		string AccessibilityLabel { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("accessibilityHint", ArgumentSemantic.Retain)]
		string AccessibilityHint { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("accessibilityValue", ArgumentSemantic.Retain)]
		string AccessibilityValue { get; set; }

		[Export ("accessibilityFrame", ArgumentSemantic.UnsafeUnretained)]
		CGRect AccessibilityFrame { get; set; }

		[Export ("accessibilityTraits", ArgumentSemantic.UnsafeUnretained)]
		ulong AccessibilityTraits { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("accessibilityFrameInContainerSpace", ArgumentSemantic.Assign)]
		CGRect AccessibilityFrameInContainerSpace { get; set; }
	}

	[MacCatalyst (13, 1)]
	interface UIAccessibilityFocus {
		[Export ("accessibilityElementDidBecomeFocused")]
		void AccessibilityElementDidBecomeFocused ();

		[Export ("accessibilityElementDidLoseFocus")]
		void AccessibilityElementDidLoseFocus ();

		[Export ("accessibilityElementIsFocused")]
		bool AccessibilityElementIsFocused ();

		[MacCatalyst (13, 1)]
		[Export ("accessibilityAssistiveTechnologyFocusedIdentifiers")]
		NSSet<NSString> AccessibilityAssistiveTechnologyFocusedIdentifiers { get; }
	}

	[MacCatalyst (13, 1)]
	interface UIAccessibilityAction {
		[Export ("accessibilityIncrement")]
		void AccessibilityIncrement ();

		[Export ("accessibilityDecrement")]
		void AccessibilityDecrement ();

		[Export ("accessibilityScroll:")]
		bool AccessibilityScroll (UIAccessibilityScrollDirection direction);

		[Export ("accessibilityPerformEscape")]
		bool AccessibilityPerformEscape ();

		[NoMacCatalyst]
		[Export ("accessibilityPerformMagicTap")]
		bool AccessibilityPerformMagicTap ();

		[MacCatalyst (13, 1)]
		[Export ("accessibilityCustomActions"), NullAllowed]
		UIAccessibilityCustomAction [] AccessibilityCustomActions { get; set; }
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	// NSObject category inlined in UIResponder
	interface UIAccessibilityDragging {
		[NullAllowed, Export ("accessibilityDragSourceDescriptors", ArgumentSemantic.Copy)]
		UIAccessibilityLocationDescriptor [] AccessibilityDragSourceDescriptors { get; set; }

		[NullAllowed, Export ("accessibilityDropPointDescriptors", ArgumentSemantic.Copy)]
		UIAccessibilityLocationDescriptor [] AccessibilityDropPointDescriptors { get; set; }
	}

	/// <summary>An object that provides an accessible description of a location.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIAccessibilityLocationDescriptor {
		[Export ("initWithName:view:")]
		NativeHandle Constructor (string name, UIView view);

		[Export ("initWithName:point:inView:")]
		NativeHandle Constructor (string name, CGPoint point, UIView view);

		[Export ("initWithAttributedName:point:inView:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSAttributedString attributedName, CGPoint point, UIView view);

		[NullAllowed, Export ("view", ArgumentSemantic.Weak)]
		UIView View { get; }

		[Export ("point")]
		CGPoint Point { get; }

		[Export ("name", ArgumentSemantic.Strong)]
		string Name { get; }

		[Export ("attributedName", ArgumentSemantic.Strong)]
		NSAttributedString AttributedName { get; }
	}

	/// <summary>Defines methods for images that can scale in reaction to accessibility requirements.</summary>
	/// <remarks>To be added.</remarks>
	[NoMac]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIAccessibilityContentSizeCategoryImageAdjusting {
		/// <summary>Returns <see langword="true" /> if the image can adjust size in reaction to accessibility requirements.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("adjustsImageSizeForAccessibilityContentSizeCategory")]
		bool AdjustsImageSizeForAccessibilityContentSizeCategory { get; set; }
	}

	/// <include file="../docs/api/UIKit/UIActionSheet.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIActionSheet']/*" />
	[NoTV]
	[BaseType (typeof (UIView), KeepRefUntil = "Dismissed", Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIActionSheetDelegate) })]
	[Deprecated (PlatformName.iOS, 8, 3, message: "Use 'UIAlertController' with 'UIAlertControllerStyle.ActionSheet' instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIAlertController' with 'UIAlertControllerStyle.ActionSheet' instead.")]
	interface UIActionSheet {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'UIAlertController' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIAlertController' instead.")]
		[Export ("initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:")]
		[Internal]
		[PostGet ("WeakDelegate")]
		NativeHandle Constructor ([NullAllowed] string title, [NullAllowed] IUIActionSheetDelegate Delegate, [NullAllowed] string cancelTitle, [NullAllowed] string destroy, [NullAllowed] string other);

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIActionSheetDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIActionSheetDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIActionSheetDelegate Delegate { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("title", ArgumentSemantic.Copy)]
		string Title { get; set; }

		[Export ("actionSheetStyle")]
		UIActionSheetStyle Style { get; set; }

		[Export ("addButtonWithTitle:")]
		nint AddButton (string title);

		/// <param name="index">The index of a button to retrieve the title of.</param>
		/// <summary>Retrieves the title of a button at a specified index.</summary>
		/// <returns>The title of a button at a given index.</returns>
		/// <remarks>Button indices are zero based. They start at zero and increment by one for each button that is added.</remarks>
		[Export ("buttonTitleAtIndex:")]
		string ButtonTitle (nint index);

		[Export ("numberOfButtons")]
		nint ButtonCount { get; }

		[Export ("cancelButtonIndex")]
		nint CancelButtonIndex { get; set; }

		[Export ("destructiveButtonIndex")]
		nint DestructiveButtonIndex { get; set; }

		[Export ("firstOtherButtonIndex")]
		nint FirstOtherButtonIndex { get; }

		/// <summary>A property indicating if the action sheet is displayed.</summary>
		///         <value>If <see langword="true" /> then the action sheet is displayed. Read-only.</value>
		///         <remarks>To be added.</remarks>
		[Export ("visible")]
		bool Visible { [Bind ("isVisible")] get; }

		[Export ("showFromToolbar:")]
		void ShowFromToolbar (UIToolbar view);

		[Export ("showFromTabBar:")]
		void ShowFromTabBar (UITabBar view);

		[Export ("showInView:")]
		void ShowInView (UIView view);

		/// <param name="buttonIndex">To be added.</param>
		/// <param name="animated">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dismissWithClickedButtonIndex:animated:")]
		void DismissWithClickedButtonIndex (nint buttonIndex, bool animated);

		[Export ("showFromBarButtonItem:animated:")]
		void ShowFrom (UIBarButtonItem item, bool animated);

		[Export ("showFromRect:inView:animated:")]
		void ShowFrom (CGRect rect, UIView inView, bool animated);
	}

	delegate void UIActionHandler (UIAction action);

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIMenuElement))]
	[DisableDefaultCtor]
	interface UIAction : UIMenuLeaf {

		[Export ("title")]
		new string Title { get; set; }

		[NullAllowed, Export ("image", ArgumentSemantic.Copy)]
		new UIImage Image { get; set; }

		[NullAllowed, Export ("discoverabilityTitle")]
		new string DiscoverabilityTitle { get; set; }

		[Export ("identifier")]
		string Identifier { get; }

		[Export ("attributes", ArgumentSemantic.Assign)]
		new UIMenuElementAttributes Attributes { get; set; }

		[Export ("state", ArgumentSemantic.Assign)]
		new UIMenuElementState State { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed]
		[Export ("sender")]
		new NSObject Sender { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Static]
		[Export ("actionWithHandler:")]
		UIAction Create (UIActionHandler handler);

		[Static]
		[Export ("actionWithTitle:image:identifier:handler:")]
		UIAction Create (string title, [NullAllowed] UIImage image, [NullAllowed] string identifier, UIActionHandler handler);

		// From UIAction (UICaptureTextFromCameraSupporting) category

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("captureTextFromCameraActionForResponder:identifier:")]
		UIAction CaptureTextFromCameraAction (IUIKeyInput responder, [NullAllowed] string identifier);

	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIActionSheetDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIActionSheetDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIActionSheetDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIActionSheetDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIActionSheetDelegate { }

	/// <summary>A class used to receive notifications from a <see cref="UIKit.UIActionSheet" />.</summary>
	///     <remarks>A strongly typed implementation of a class that can be used to respond to events raised by the <see cref="UIKit.UIActionSheet" />.</remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIModalViewDelegate_Protocol/index.html">Apple documentation for <c>UIActionSheetDelegate</c></related>
	[NoTV]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	[Deprecated (PlatformName.iOS, 8, 3)]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1)]
	interface UIActionSheetDelegate {

		/// <param name="actionSheet">To be added.</param>
		/// <param name="buttonIndex">To be added.</param>
		/// <summary>Indicates that the button at the buttonIndex was clicked.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("actionSheet:clickedButtonAtIndex:"), EventArgs ("UIButton", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Clicked (UIActionSheet actionSheet, nint buttonIndex);

		/// <param name="actionSheet">To be added.</param>
		/// <summary>Indicates that the UIActionSheet was canceled.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("actionSheetCancel:"), EventArgs ("UIActionSheet", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Canceled (UIActionSheet actionSheet);

		/// <param name="actionSheet">To be added.</param>
		/// <summary>Indicates that the action sheet is about to be presented.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("willPresentActionSheet:"), EventArgs ("UIActionSheet", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillPresent (UIActionSheet actionSheet);

		/// <param name="actionSheet">To be added.</param>
		/// <summary>Indicates that the action sheet was presented to the user.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("didPresentActionSheet:"), EventArgs ("UIActionSheet", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Presented (UIActionSheet actionSheet);

		/// <param name="actionSheet">To be added.</param>
		/// <param name="buttonIndex">To be added.</param>
		/// <summary>Indicates that the action sheet will shortly be dismissed due to pushing of the button at buttonIndex.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("actionSheet:willDismissWithButtonIndex:"), EventArgs ("UIButton", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillDismiss (UIActionSheet actionSheet, nint buttonIndex);

		/// <param name="actionSheet">To be added.</param>
		/// <param name="buttonIndex">To be added.</param>
		/// <summary>Indicates that the action was dismissed from the screen due to pushing of the button at buttonIndex.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("actionSheet:didDismissWithButtonIndex:"), EventArgs ("UIButton", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Dismissed (UIActionSheet actionSheet, nint buttonIndex);
	}

	/// <include file="../docs/api/UIKit/UIActivity.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIActivity']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIActivity {
		[Export ("activityType")]
		[NullAllowed]
		NSString Type { get; }

		[Export ("activityTitle")]
		[NullAllowed]
		string Title { get; }

		[Export ("activityImage")]
		UIImage Image { get; }

		[Export ("canPerformWithActivityItems:")]
		bool CanPerform (NSObject [] activityItems);

		[Export ("prepareWithActivityItems:")]
		void Prepare (NSObject [] activityItems);

		[Export ("activityViewController")]
		UIViewController ViewController { get; }

		[Export ("performActivity")]
		void Perform ();

		[Export ("activityDidFinish:")]
		void Finished (bool completed);

		[Export ("activityCategory"), Static]
		UIActivityCategory Category { get; }
	}

	/// <include file="../docs/api/UIKit/UIActivityType.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIActivityType']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[Static]
	interface UIActivityType {
		/// <summary>Represents the value associated with the constant UIActivityTypePostToFacebook</summary>
		///         <value />
		///         <remarks>To be added.</remarks>
		[Field ("UIActivityTypePostToFacebook")]
		NSString PostToFacebook { get; }

		/// <summary>Represents the value associated with the constant UIActivityTypePostToTwitter</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIActivityTypePostToTwitter")]
		NSString PostToTwitter { get; }

		/// <summary>Represents the value associated with the constant UIActivityTypePostToWeibo</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIActivityTypePostToWeibo")]
		NSString PostToWeibo { get; }

		/// <summary>Represents the value associated with the constant UIActivityTypeMessage</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIActivityTypeMessage")]
		NSString Message { get; }

		/// <summary>Sends the provided content by email.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		/// 	  The object must hold an individual <see cref="Foundation.NSString" />, <see cref="Foundation.NSUrl" /> (pointing to a local file) or a <see cref="UIKit.UIImage" />.  
		/// 	</remarks>
		[Field ("UIActivityTypeMail")]
		NSString Mail { get; }

		/// <summary>Used to print the provided object.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		/// 	  The object must hold an individual <see cref="Foundation.NSData" />, <see cref="Foundation.NSUrl" /> (pointing to a local resource), <see cref="UIKit.UIImage" />,  <see cref="UIKit.UIPrintPageRenderer" />, <see cref="UIKit.UIPrintFormatter" /> or <see cref="UIKit.UIPrintInfo" />.
		/// 	</remarks>
		[Field ("UIActivityTypePrint")]
		NSString Print { get; }

		/// <summary>Makes the object available on the pasteboard.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		/// 	  The object must hold an individual <see cref="Foundation.NSString" />, <see cref="Foundation.NSUrl" />, <see cref="UIKit.UIColor" />, <see cref="UIKit.UIImage" />.  Or you can provide a
		/// 	  collection of those objects by passing an NSDictionary with those objects.
		/// 	</remarks>
		[Field ("UIActivityTypeCopyToPasteboard")]
		NSString CopyToPasteboard { get; }

		/// <summary>Assigns a UIImage to a contact.</summary>
		///         <value>
		///         </value>
		///         <remarks>The value provided must be a <see cref="UIKit.UIImage" />.</remarks>
		[Field ("UIActivityTypeAssignToContact")]
		NSString AssignToContact { get; }

		/// <summary>Represents the value associated with the constant UIActivityTypeSaveToCameraRoll</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIActivityTypeSaveToCameraRoll")]
		NSString SaveToCameraRoll { get; }

		/// <summary>This activity adds a URL to the Safari Reading List.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Field ("UIActivityTypeAddToReadingList")]
		NSString AddToReadingList { get; }

		/// <summary>Represents the value associated with the constant UIActivityTypePostToFlickr</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIActivityTypePostToFlickr")]
		NSString PostToFlickr { get; }

		/// <summary>Represents the value associated with the constant UIActivityTypePostToVimeo</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIActivityTypePostToVimeo")]
		NSString PostToVimeo { get; }

		/// <summary>Represents the value associated with the constant UIActivityTypePostToTencentWeibo</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIActivityTypePostToTencentWeibo")]
		NSString PostToTencentWeibo { get; }

		/// <summary>Makes the provided object available over AirDrop.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		/// 	  The object must hold an individual <see cref="AssetsLibrary.ALAsset" />, <see cref="Foundation.NSAttributedString" />, <see cref="Foundation.NSString" />, <see cref="Foundation.NSUrl" />, <see cref="UIKit.UIImage" />.  Or you can provide a
		/// 	  collection of those objects by passing an NSDictionary or an
		/// 	  NSArray with those objects.
		/// 	</remarks>
		[Field ("UIActivityTypeAirDrop")]
		NSString AirDrop { get; }

		/// <summary>Indicates the activity of opening a document in iBooks.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIActivityTypeOpenInIBooks")]
		NSString OpenInIBooks { get; }

		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIActivityTypeMarkupAsPDF")]
		NSString MarkupAsPdf { get; }

		[iOS (15, 4), MacCatalyst (15, 4)]
		[Field ("UIActivityTypeSharePlay")]
		NSString UIActivityTypeSharePlay { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Field ("UIActivityTypeCollaborationInviteWithLink")]
		NSString CollaborationInviteWithLink { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Field ("UIActivityTypeCollaborationCopyLink")]
		NSString CollaborationCopyLink { get; }

		[NoTV, iOS (16, 4), MacCatalyst (16, 4)]
		[Field ("UIActivityTypeAddToHomeScreen")]
		NSString AddToHomeScreen { get; }
	}

	//
	// You're supposed to implement this protocol in your UIView subclasses, not provide
	// a implementation for only this protocol, which is why there is no model to subclass.
	//
	/// <summary>Interface that, together with the <see cref="UIKit.UIInputViewAudioFeedback_Extensions" /> class, comprise the UIInputViewAudioFeedback protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIInputViewAudioFeedback {
		/// <summary>Gets a value that tells whether input clicks are enabled.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("enableInputClicksWhenVisible")]
		bool EnableInputClicksWhenVisible { get; }
	}

	/// <include file="../docs/api/UIKit/UIActivityItemProvider.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIActivityItemProvider']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSOperation))]
	[ThreadSafe]
	[DisableDefaultCtor] // NSInternalInconsistencyException Reason: Use initWithPlaceholderItem: to instantiate an instance of UIActivityItemProvider
	interface UIActivityItemProvider : UIActivityItemSource {
		[DesignatedInitializer]
		[Export ("initWithPlaceholderItem:")]
		[PostGet ("PlaceholderItem")]
		NativeHandle Constructor (NSObject placeholderItem);

		[Export ("placeholderItem", ArgumentSemantic.Retain)]
		[NullAllowed]
		NSObject PlaceholderItem { get; }

		[Export ("activityType")]
		[NullAllowed]
		NSString ActivityType { get; }

		[Export ("item")]
		NSObject Item { get; }

	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIActivityItemSource" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIActivityItemSource" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIActivityItemSource" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIActivityItemSource_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIActivityItemSource { }

	/// <summary>Abstract class that, when implemented, provides data for use by a <see cref="UIKit.UIActivityViewController" /></summary>
	///     <remarks>
	///       <para>This class should not be used for complex processing, as it is called on the main UI thread. Applications that require complex processing of data before passing it to <see cref="UIKit.UIActivity" /> objects should implement <see cref="UIKit.UIActivityItemProvider" />.</para>
	///     </remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActivityItemSource_protocol/index.html">Apple documentation for <c>UIActivityItemSource</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIActivityItemSource {
		/// <param name="activityViewController">To be added.</param>
		/// <summary>Returns data that can be used as a placeholder for real data.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("activityViewControllerPlaceholderItem:")]
		NSObject GetPlaceholderData (UIActivityViewController activityViewController);

		/// <param name="activityViewController">To be added.</param>
		/// <param name="activityType">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>The data to be acted upon by the specified actitivtyType.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("activityViewController:itemForActivityType:")]
		[return: NullAllowed]
		NSObject GetItemForActivity (UIActivityViewController activityViewController, [NullAllowed] NSString activityType);

		/// <param name="activityViewController">To be added.</param>
		/// <param name="activityType">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>If the specified  provides NSData, this method returns the Uniform Type Identifier (UTI) of the item.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("activityViewController:dataTypeIdentifierForActivityType:")]
		string GetDataTypeIdentifierForActivity (UIActivityViewController activityViewController, [NullAllowed] NSString activityType);

		/// <param name="activityViewController">To be added.</param>
		/// <param name="activityType">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Returns the subject for the specified  .</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("activityViewController:subjectForActivityType:")]
		string GetSubjectForActivity (UIActivityViewController activityViewController, [NullAllowed] NSString activityType);

		/// <param name="activityViewController">To be added.</param>
		/// <param name="activityType">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <param name="suggestedSize">To be added.</param>
		/// <summary>Returns the preview image for the specified .</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("activityViewController:thumbnailImageForActivityType:suggestedSize:")]
		UIImage GetThumbnailImageForActivity (UIActivityViewController activityViewController, [NullAllowed] NSString activityType, CGSize suggestedSize);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("activityViewControllerLinkMetadata:")]
		[return: NullAllowed]
		LPLinkMetadata GetLinkMetadata (UIActivityViewController activityViewController);

		[iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("activityViewControllerShareRecipients:")]
		INPerson [] GetShareRecipients (UIActivityViewController activityViewController);
	}

	/// <include file="../docs/api/UIKit/UIActivityViewController.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIActivityViewController']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	[DisableDefaultCtor] // NSInternalInconsistencyException Reason: Use initWithActivityItems:applicationActivities: to instantiate an instance of UIActivityViewController
	interface UIActivityViewController {
		[DesignatedInitializer]
		[Export ("initWithActivityItems:applicationActivities:")]
		NativeHandle Constructor (NSObject [] activityItems, [NullAllowed] UIActivity [] applicationActivities);

		/// <summary>The handler that runs when the activity view is dismissed.</summary>
		[NullAllowed] // by default this property is null
		[Export ("completionHandler", ArgumentSemantic.Copy)]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use the 'CompletionWithItemsHandler' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use the 'CompletionWithItemsHandler' property instead.")]
		Action<NSString, bool> CompletionHandler { get; set; }

		[Export ("excludedActivityTypes", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSString [] ExcludedActivityTypes { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("completionWithItemsHandler", ArgumentSemantic.Copy)]
		UIActivityViewControllerCompletion CompletionWithItemsHandler { get; set; }

		[iOS (15, 4), MacCatalyst (15, 4)]
		[Export ("allowsProminentActivity")]
		bool AllowsProminentActivity { get; set; }

		// UIActivityViewController (UIActivityItemsConfiguration) category

		[iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithActivityItemsConfiguration:")]
		NativeHandle Constructor (IUIActivityItemsConfigurationReading activityItemsConfiguration);

		[iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("excludedActivitySectionTypes")]
		UIActivitySectionTypes ExcludedActivitySectionTypes { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	partial interface UIAlertAction : NSCopying, UIAccessibilityIdentification {
		[Export ("title")]
		[NullAllowed]
		string Title { get; }

		[Export ("style")]
		UIAlertActionStyle Style { get; }

		/// <summary>Gets a value that tells whether the user can expect the action to run when its button is tapped.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Static, Export ("actionWithTitle:style:handler:")]
		UIAlertAction Create (string title, UIAlertActionStyle style, [NullAllowed] Action<UIAlertAction> handler);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	partial interface UIAlertController
#if IOS
		: UISpringLoadedInteractionSupporting
#endif
	{
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("actions")]
		UIAlertAction [] Actions { get; }

		[Export ("textFields")]
		UITextField [] TextFields { get; }

		[Export ("title", ArgumentSemantic.Copy), NullAllowed]
		string Title { get; set; }

		[Export ("message", ArgumentSemantic.Copy), NullAllowed]
		string Message { get; set; }

		[Export ("preferredStyle")]
		UIAlertControllerStyle PreferredStyle { get; }

		[Static, Export ("alertControllerWithTitle:message:preferredStyle:")]
		UIAlertController Create ([NullAllowed] string title, [NullAllowed] string message, UIAlertControllerStyle preferredStyle);

		[Export ("addAction:")]
		void AddAction (UIAlertAction action);

		[Export ("addTextFieldWithConfigurationHandler:")]
		void AddTextField (Action<UITextField> configurationHandler);

		[MacCatalyst (13, 1)]
		[Export ("preferredAction")]
		[NullAllowed]
		UIAlertAction PreferredAction { get; set; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("severity", ArgumentSemantic.Assign)]
		UIAlertControllerSeverity Severity { get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIAlertViewDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIAlertViewDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIAlertViewDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIAlertViewDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIAlertViewDelegate { }

	/// <include file="../docs/api/UIKit/UIAlertView.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIAlertView']/*" />
	[NoTV]
	[BaseType (typeof (UIView), KeepRefUntil = "Dismissed", Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIAlertViewDelegate) })]
	[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'UIAlertController' with a 'UIAlertControllerStyle.Alert' type instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIAlertController' with a 'UIAlertControllerStyle.Alert' type instead.")]
	interface UIAlertView : NSCoding {
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Sealed]
		[Export ("initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:", IsVariadic = true)]
		[Internal]
		[PostGet ("WeakDelegate")]
		// The native function takes a variable number of arguments (otherButtonTitles), terminated with a nil value.
		// Unfortunately iOS/ARM64 (not the general ARM64 ABI as published by ARM) has a different calling convention for varargs methods
		// than regular methods: all variable arguments are passed on the stack, no matter how many normal arguments there are.
		// Normally 8 arguments are passed in registers, then the subsequent ones are passed on the stack, so what we do is to provide
		// 9 arguments, where the 9th is nil (this is the 'mustAlsoBeNull' argument). Remember that Objective-C always has two hidden
		// arguments (id, SEL), which means we only need 7 more. And 'mustAlsoBeNull' is that 7th argument.
		// So on ARM64 the 8th argument ('mustBeNull') is ignored, and iOS sees the 9th argument ('mustAlsoBeNull') as the 8th argument.
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'UIAlertController' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIAlertController' instead.")]
		NativeHandle Constructor ([NullAllowed] string title, [NullAllowed] string message, [NullAllowed] IUIAlertViewDelegate viewDelegate, [NullAllowed] string cancelButtonTitle, IntPtr otherButtonTitles, IntPtr mustBeNull, IntPtr mustAlsoBeNull);

		/// <summary>An instance of the UIKit.IUIAlertViewDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIAlertViewDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIAlertViewDelegate Delegate { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("title", ArgumentSemantic.Copy)]
		string Title { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("message", ArgumentSemantic.Copy)]
		string Message { get; set; }

		[Export ("addButtonWithTitle:")]
		nint AddButton ([NullAllowed] string title);

		/// <param name="index">The index of the button to return the title for.</param>
		/// <summary>Returns a button title by index.</summary>
		/// <returns>The title of the button for the given index.</returns>
		/// <remarks>Allows retrieval of button title by index, where the indices start at 0.</remarks>
		[Export ("buttonTitleAtIndex:")]
		string ButtonTitle (nint index);

		[Export ("numberOfButtons")]
		nint ButtonCount { get; }

		[Export ("cancelButtonIndex")]
		nint CancelButtonIndex { get; set; }

		[Export ("firstOtherButtonIndex")]
		nint FirstOtherButtonIndex { get; }

		/// <summary>Used to determine if the alert view is currently being displayed.</summary>
		///         <value>
		///         </value>
		///         <remarks>Indicates if the alert view is currently displayed to the user.</remarks>
		[Export ("visible")]
		bool Visible { [Bind ("isVisible")] get; }

		[Export ("show")]
		void Show ();

		/// <param name="index">To be added.</param>
		/// <param name="animated">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dismissWithClickedButtonIndex:animated:")]
		void DismissWithClickedButtonIndex (nint index, bool animated);

		[Export ("alertViewStyle", ArgumentSemantic.Assign)]
		UIAlertViewStyle AlertViewStyle { get; set; }

		/// <param name="textFieldIndex">The index of the text field to return</param>
		/// <summary>Returns a text field for specified index.</summary>
		/// <returns>A text field for specified index.</returns>
		/// <remarks>The text fields available in the alert view depend upon what <see cref="UIKit.UIAlertViewStyle" /> is used.</remarks>
		[Export ("textFieldAtIndex:")]
		UITextField GetTextField (nint textFieldIndex);
	}

	/// <summary>A class used to receive notifications from a <see cref="UIKit.UIAlertView" />.</summary>
	///     <remarks>
	///       <para>A strongly typed implementation of a class that can be used to respond to events raised by the <see cref="UIKit.UIAlertView" />.</para>
	///     </remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAlertViewDelegate_Protocol/index.html">Apple documentation for <c>UIAlertViewDelegate</c></related>
	[NoTV]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	[Deprecated (PlatformName.iOS, 9, 0)]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1)]
	interface UIAlertViewDelegate {
		/// <param name="alertview">To be added.</param>
		/// <param name="buttonIndex">To be added.</param>
		/// <summary>Indicates that the user has clicked a button in this UIAlertView.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("alertView:clickedButtonAtIndex:"), EventArgs ("UIButton", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Clicked (UIAlertView alertview, nint buttonIndex);

		/// <param name="alertView">To be added.</param>
		/// <summary>Indicates that this UIAlertView is about to be canceled.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("alertViewCancel:"), EventArgs ("UIAlertView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Canceled (UIAlertView alertView);

		/// <param name="alertView">To be added.</param>
		/// <summary>Indicates that this UIAlertView will shortly be presented to the application user.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("willPresentAlertView:"), EventArgs ("UIAlertView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillPresent (UIAlertView alertView);

		/// <param name="alertView">To be added.</param>
		/// <summary>Indicates that this UIAlertView has been presented to the application user.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("didPresentAlertView:"), EventArgs ("UIAlertView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Presented (UIAlertView alertView);

		/// <param name="alertView">To be added.</param>
		/// <param name="buttonIndex">To be added.</param>
		/// <summary>Indicates that this UIAlertView will shortly be dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("alertView:willDismissWithButtonIndex:"), EventArgs ("UIButton", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillDismiss (UIAlertView alertView, nint buttonIndex);

		/// <param name="alertView">To be added.</param>
		/// <param name="buttonIndex">To be added.</param>
		/// <summary>Indicates that this UIAlertView has been dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("alertView:didDismissWithButtonIndex:"), EventArgs ("UIButton", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Dismissed (UIAlertView alertView, nint buttonIndex);

		/// <param name="alertView">To be added.</param>
		/// <summary>Whether the first non-cancel button in this UIAlertView should be enabled.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>If the first other button should be enabled or not.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("alertViewShouldEnableFirstOtherButton:"), DelegateName ("UIAlertViewPredicate"), DefaultValue (true)]
		bool ShouldEnableFirstOtherButton (UIAlertView alertView);
	}

	//
	// This is an empty class, we manually bind the couple of static methods
	// but it is used as a flag on handful of classes to generate the
	// UIAppearance binding.
	//
	// When a new class adopts UIAppearance, merely list it as one of the
	// base interfaces, this will generate the stubs for it.
	//
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIAppearance" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIAppearance" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIAppearance" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIAppearance_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[DisableDefaultCtor]
	[Protocol]
	interface UIAppearance {
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UIStackView {
		[Export ("initWithFrame:")]
		[DesignatedInitializer]
		NativeHandle Constructor (CGRect frame);

		[Export ("initWithArrangedSubviews:")]
		NativeHandle Constructor (UIView [] views);

		[Export ("arrangedSubviews")]
		UIView [] ArrangedSubviews { get; }

		[Export ("axis")]
		UILayoutConstraintAxis Axis { get; set; }

		[Export ("distribution")]
		UIStackViewDistribution Distribution { get; set; }

		[Export ("alignment")]
		UIStackViewAlignment Alignment { get; set; }

		[Export ("spacing")]
		nfloat Spacing { get; set; }

		/// <summary>Whether the vertical spacing between subviews is measured from their baselines.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("baselineRelativeArrangement")]
		bool BaselineRelativeArrangement { [Bind ("isBaselineRelativeArrangement")] get; set; }

		/// <summary>Whether subviews are arranged relative to this <see cref="UIKit.UIStackView" />'s <see cref="UIKit.UIView.LayoutMargin" />.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("layoutMarginsRelativeArrangement")]
		bool LayoutMarginsRelativeArrangement { [Bind ("isLayoutMarginsRelativeArrangement")] get; set; }

		[Export ("addArrangedSubview:")]
		void AddArrangedSubview (UIView view);

		[Export ("removeArrangedSubview:")]
		void RemoveArrangedSubview (UIView view);

		/// <param name="view">The <see cref="UIKit.UIView" /> to be added.</param>
		/// <param name="stackIndex">The zero-based index at which to insert the <paramref name="view" />.</param>
		/// <summary>Adds <paramref name="view" /> to the stack at the specified <paramref name="stackIndex" />.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("insertArrangedSubview:atIndex:")]
		void InsertArrangedSubview (UIView view, nuint stackIndex);

		/// <param name="spacing">The spacing to set.</param>
		/// <param name="arrangedSubview">The arranged subview for which to set the custom spacing.</param>
		/// <summary>Sets the spacing to use after the specified <paramref name="arrangedSubview" />.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("setCustomSpacing:afterView:")]
		void SetCustomSpacing (nfloat spacing, UIView arrangedSubview);

		[MacCatalyst (13, 1)]
		[Export ("customSpacingAfterView:")]
		nfloat GetCustomSpacing (UIView arrangedSubview);
	}

	/// <summary>Holds a key for restoring storyboards.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Static]
	interface UIStateRestoration {
		/// <include file="../docs/api/UIKit/UIStateRestoration.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIStateRestoration.ViewControllerStoryboardKey']/*" />
		[Field ("UIStateRestorationViewControllerStoryboardKey")]
		NSString ViewControllerStoryboardKey { get; }

	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIStateRestoring" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIStateRestoring" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIStateRestoring" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIStateRestoring_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIStateRestoring {
		/// <summary>Gets the parent of the object to restore.</summary>
		[Export ("restorationParent")]
		IUIStateRestoring RestorationParent { get; }

		/// <summary>Gets the class that recreates the restored object.</summary>
		[Export ("objectRestorationClass")]
		[NullAllowed]
		Class ObjectRestorationClass { get; }

		/// <param name="coder">To be added.</param>
		/// <summary>Encodes state-related information.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("encodeRestorableStateWithCoder:")]
		void EncodeRestorableState (NSCoder coder);

		/// <param name="coder">To be added.</param>
		/// <summary>Decodes and restores state.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("decodeRestorableStateWithCoder:")]
		void DecodeRestorableState (NSCoder coder);

		/// <summary>Indicates that the application has finished restoring state.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("applicationFinishedRestoringState")]
		void ApplicationFinishedRestoringState ();
	}

	interface IUIStateRestoring { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIObjectRestoration" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIObjectRestoration" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIObjectRestoration" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIObjectRestoration_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	[MacCatalyst (13, 1)]
	interface UIObjectRestoration {
#if false
		// a bit hard to support *static* as part of an interface / extension methods
		[Static][Export ("objectWithRestorationIdentifierPath:coder:")]
		IUIStateRestoring GetStateRestorationObjectFromPath (NSString [] identifierComponents, NSCoder coder);
#endif
	}

	interface IUIViewAnimating { }

	/// <summary>Interface defining methods for custom animator objects.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIViewAnimating {
		/// <summary>The current <see cref="UIKit.UIViewAnimatingState" /> of the animation.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("state")]
		UIViewAnimatingState State { get; }

		/// <summary>Whether the animation is currently running.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("running")]
		bool Running { [Bind ("isRunning")] get; }

		/// <summary>Gets or sets the direction of the animation.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("reversed")]
		bool Reversed { [Bind ("isReversed")] get; set; }

		/// <summary>Gets or sets the percentage of the property's animation completion.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("fractionComplete")]
		nfloat FractionComplete { get; set; }

		/// <summary>Begins the animation.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("startAnimation")]
		void StartAnimation ();

		/// <param name="delay">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("startAnimationAfterDelay:")]
		void StartAnimation (double delay);

		/// <summary>Pauses the animation.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("pauseAnimation")]
		void PauseAnimation ();

		/// <param name="withoutFinishing">To be added.</param>
		/// <summary>Stops the animation at the current position.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("stopAnimation:")]
		void StopAnimation (bool withoutFinishing);

		/// <param name="finalPosition">To be added.</param>
		/// <summary>Finishes the animation. Must be preceded by call to <see cref="UIKit.UIViewPropertyAnimator.CreateRunningPropertyAnimator(System.Double,System.Double,UIKit.UIViewAnimationOptions,System.Action,System.Action{UIKit.UIViewAnimatingPosition})" />.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("finishAnimationAtPosition:")]
		void FinishAnimation (UIViewAnimatingPosition finalPosition);
	}

	interface IUIViewImplicitlyAnimating { }
	/// <summary>Interface that defines methods for animations that can be modified while they are running.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIViewImplicitlyAnimating : UIViewAnimating {
		/// <param name="animation">To be added.</param>
		/// <param name="delayFactor">To be added.</param>
		/// <summary>Appends the specified <paramref name="animation" /><see cref="System.Action" /> to the callback list.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("addAnimations:delayFactor:")]
		void AddAnimations (Action animation, nfloat delayFactor);

		/// <param name="animation">To be added.</param>
		/// <summary>Appends the specified <paramref name="animation" /><see cref="System.Action" /> to the callback list.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("addAnimations:")]
		void AddAnimations (Action animation);

		/// <param name="completion">To be added.</param>
		/// <summary>Adds the <paramref name="completion" /> to run when the animation(s) end.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("addCompletion:")]
		void AddCompletion (Action<UIViewAnimatingPosition> completion);

		/// <param name="parameters">New timing information.</param>
		/// <param name="durationFactor">A multiplier applied to the animation's original duration.</param>
		/// <summary>Changes the timing of the animation.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("continueAnimationWithTimingParameters:durationFactor:")]
		void ContinueAnimation ([NullAllowed] IUITimingCurveProvider parameters, nfloat durationFactor);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIViewPropertyAnimator : UIViewImplicitlyAnimating, NSCopying {
		[NullAllowed, Export ("timingParameters", ArgumentSemantic.Copy)]
		IUITimingCurveProvider TimingParameters { get; }

		[Export ("duration")]
		double Duration { get; }

		[Export ("delay")]
		double Delay { get; }

		/// <summary>Gets or sets whether the user can interact with the animation.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("userInteractionEnabled")]
		bool UserInteractionEnabled { [Bind ("isUserInteractionEnabled")] get; set; }

		/// <summary>Gets or sets whether the app manages hit-testing while the animation is in progress.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("manualHitTestingEnabled")]
		bool ManualHitTestingEnabled { [Bind ("isManualHitTestingEnabled")] get; set; }

		[Export ("interruptible")]
		bool Interruptible { [Bind ("isInterruptible")] get; set; }

		[MacCatalyst (13, 1)]
		[Export ("scrubsLinearly")]
		bool ScrubsLinearly { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("pausesOnCompletion")]
		bool PausesOnCompletion { get; set; }

		[Export ("initWithDuration:timingParameters:")]
		[DesignatedInitializer]
		NativeHandle Constructor (double duration, IUITimingCurveProvider parameters);

		[Export ("initWithDuration:curve:animations:")]
		NativeHandle Constructor (double duration, UIViewAnimationCurve curve, [NullAllowed] Action animations);

		[Export ("initWithDuration:controlPoint1:controlPoint2:animations:")]
		NativeHandle Constructor (double duration, CGPoint point1, CGPoint point2, [NullAllowed] Action animations);

		/// <param name="duration">To be added.</param>
		/// <param name="ratio">Values must be in the range [0,1]. Values closer to 0 have less damping.</param>
		/// <param name="animations">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Constructs a new <see cref="UIKit.UIViewPropertyAnimator" /> with spring-based timing based on the <paramref name="ratio" />.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("initWithDuration:dampingRatio:animations:")]
		NativeHandle Constructor (double duration, nfloat ratio, [NullAllowed] Action animations);

		[Static]
		[Export ("runningPropertyAnimatorWithDuration:delay:options:animations:completion:")]
		UIViewPropertyAnimator CreateRunningPropertyAnimator (double duration, double delay, UIViewAnimationOptions options, Action animations, [NullAllowed] Action<UIViewAnimatingPosition> completion);
	}

	interface IUIViewControllerPreviewing { }

	/// <include file="../docs/api/UIKit/IUIViewControllerPreviewing.xml" path="/Documentation/Docs[@DocId='T:UIKit.IUIViewControllerPreviewing']/*" />
	[Protocol]
	[MacCatalyst (13, 1)]
	interface UIViewControllerPreviewing {

		/// <summary>Developers override this method to return a <see cref="UIKit.UIGestureRecognizer" /> that can prevent the preview press from interfering with the app's other gesture recognizers.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Abstract]
		[Export ("previewingGestureRecognizerForFailureRelationship")]
		UIGestureRecognizer PreviewingGestureRecognizerForFailureRelationship { get; }

		/// <summary>A weak reference to an object that responds to the delegate protocol for this type.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Abstract]
		[Export ("delegate", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakDelegate {
			get; // readonly
		}

		[Wrap ("WeakDelegate")]
		IUIViewControllerPreviewingDelegate Delegate { get; }

		/// <summary>Developers override this method to return the <see cref="UIKit.UIView" /> that contains the <see cref="UIKit.IUIViewControllerPreviewing.SourceRect" /> that stays sharp during the previewing press.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Abstract]
		[Export ("sourceView")]
		UIView SourceView { get; }

		/// <summary>Developers override this method to return the section of their view that stays sharp while the surrounding content blurs.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Abstract]
		[Export ("sourceRect")]
		CGRect SourceRect { get; set; }
	}

	interface IUIViewControllerPreviewingDelegate { }

	/// <summary>Delegate object whose methods are called in reaction to "3D Touch" on supported hardware</summary>
	/// <remarks>To be added.</remarks>
	/// <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewControllerPreviewingDelegate_Protocol/index.html">Apple documentation for <c>UIViewControllerPreviewingDelegate</c></related>
	[Protocol]
	[Model]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIViewControllerPreviewingDelegate {
		/// <param name="previewingContext">The context in which the 3D Touch is occurring..</param>
		/// <param name="location">The location where the 3D touch is occurring.</param>
		/// <summary>Method that is called when the user has pressed a source view, blurring the remainder of the screen, so that a preview view controller can be returned.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Abstract]
		[Export ("previewingContext:viewControllerForLocation:")]
		UIViewController GetViewControllerForPreview (IUIViewControllerPreviewing previewingContext, CGPoint location);

		/// <param name="previewingContext">The context in which the 3D Touch is occurring.</param>
		/// <param name="viewControllerToCommit">The  to which the app should transfer control.</param>
		/// <summary>Method that is called to allow the developer to prepare the commit view.</summary>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Abstract]
		[Export ("previewingContext:commitViewController:")]
		void CommitViewController (IUIViewControllerPreviewing previewingContext, UIViewController viewControllerToCommit);
	}

	/// <summary>Interface that, together with the <see cref="UIKit.UIViewControllerRestoration_Extensions" /> class, comprise the UIViewControllerRestoration protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIViewControllerRestoration {
#if false
		/* we don't generate anything for static members in protocols now, so just keep this out */
		[Static]
		[Export ("viewControllerWithRestorationIdentifierPath:coder:")]
		UIViewController GetStateRestorationViewController (NSString [] identifierComponents, NSCoder coder);
#endif
	}

	/// <summary>Provides data for the  event.</summary>
	[MacCatalyst (13, 1)]
	interface UIStatusBarFrameChangeEventArgs {
		/// <summary>The RectangleF defining the Frame of the UIStatusBar.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("UIApplicationStatusBarFrameUserInfoKey")]
		CGRect StatusBarFrame { get; }
	}

	/// <summary>Provides data for the  event.</summary>
	[MacCatalyst (13, 1)]
	interface UIStatusBarOrientationChangeEventArgs {
		/// <summary>The new orientation of the <see cref="UIKit.UIStatusBar" />.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("UIApplicationStatusBarOrientationUserInfoKey")]
		UIInterfaceOrientation StatusBarOrientation { get; }
	}

	[MacCatalyst (13, 1)]
	interface UIApplicationLaunchEventArgs {
		/// <summary>The URL that this app was launched to handle.</summary>
		///         <value>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>To be added.</remarks>
		[NullAllowed]
		[Export ("UIApplicationLaunchOptionsURLKey")]
		NSUrl Url { get; }

		/// <summary>The bundle ID of the app that launched this app.</summary>
		///         <value>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>To be added.</remarks>
		[NullAllowed]
		[Export ("UIApplicationLaunchOptionsSourceApplicationKey")]
		string SourceApplication { get; }

		/// <summary>A dictionary whose payload is a remote notification for the app to process.</summary>
		///         <value>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed]
		[Export ("UIApplicationLaunchOptionsRemoteNotificationKey")]
		NSDictionary RemoteNotifications { get; }

		/// <summary>Whether the app was launched due to user interaction (as opposed to opening due to a notification or to handle a URL).</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[ProbePresence]
		[Export ("UIApplicationLaunchOptionsLocationKey")]
		bool LocationLaunch { get; }
	}

	/// <summary>A <see cref="Foundation.DictionaryContainer" /> that holds options for use with calls to <see cref="UIApplication.OpenURL" />.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[StrongDictionary ("UIApplicationOpenUrlOptionKeys")]
	interface UIApplicationOpenUrlOptions {
		/// <summary>A property-list object.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		NSObject Annotation { get; set; }
		/// <summary>The application that generated the open request.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		string SourceApplication { get; set; }
		/// <summary>Whether the URL should be opened in place.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		bool OpenInPlace { get; set; }

		/// <summary>Gets or sets whether URLs must be universal links.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		bool UniversalLinksOnly { get; set; }
	}

	[MacCatalyst (13, 1)]
	[Static]
	[Internal] // we'll make it public if there's a need for them (beside the strong dictionary we provide)
	interface UIApplicationOpenUrlOptionKeys {
		[Field ("UIApplicationOpenURLOptionsAnnotationKey")]
		NSString AnnotationKey { get; }

		[Field ("UIApplicationOpenURLOptionsSourceApplicationKey")]
		NSString SourceApplicationKey { get; }

		[Field ("UIApplicationOpenURLOptionsOpenInPlaceKey")]
		NSString OpenInPlaceKey { get; }

		[NoTV, iOS (14, 5)]
		[MacCatalyst (14, 5)]
		[Field ("UIApplicationOpenURLOptionsEventAttributionKey")]
		NSString OpenUrlOptionsEventAttributionKey { get; }

		[MacCatalyst (13, 1)]
		[Field ("UIApplicationOpenURLOptionUniversalLinksOnly")]
		NSString UniversalLinksOnlyKey { get; }

		[NoTV, iOS (14, 5)]
		[MacCatalyst (14, 5)]
		[Field ("UIApplicationOpenExternalURLOptionsEventAttributionKey")]
		NSString OpenExternalUrlOptionsEventAttributionKey { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIResponder))]
	interface UIApplication : UIAccessibility {
		[Static, ThreadSafe]
		[Export ("sharedApplication")]
		UIApplication SharedApplication { get; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[ThreadSafe, NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIApplicationDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIApplicationDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIApplicationDelegate Delegate { get; set; }

		[Deprecated (PlatformName.iOS, 13, 0, message: "Use UIView's 'UserInteractionEnabled' property instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use UIView's 'UserInteractionEnabled' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use UIView's 'UserInteractionEnabled' property instead.")]
		[Export ("beginIgnoringInteractionEvents")]
		void BeginIgnoringInteractionEvents ();

		[Deprecated (PlatformName.iOS, 13, 0, message: "Use UIView's 'UserInteractionEnabled' property instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use UIView's 'UserInteractionEnabled' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use UIView's 'UserInteractionEnabled' property instead.")]
		[Export ("endIgnoringInteractionEvents")]
		void EndIgnoringInteractionEvents ();

		/// <summary>Whether the receiver is ignoring touch events.</summary>
		///         <value>
		///           <see langword="true" /> if there have been more calls to <see cref="UIKit.UIApplication.BeginIgnoringInteractionEvents" /> than calls to <see cref="UIKit.UIApplication.EndIgnoringInteractionEvents" />.</value>
		///         <remarks>
		///         </remarks>
		///         <altmember cref="UIKit.UIApplication.BeginIgnoringInteractionEvents" />
		///         <altmember cref="UIKit.UIApplication.EndIgnoringInteractionEvents" />
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use UIView's 'UserInteractionEnabled' property instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use UIView's 'UserInteractionEnabled' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use UIView's 'UserInteractionEnabled' property instead.")]
		[Export ("isIgnoringInteractionEvents")]
		bool IsIgnoringInteractionEvents { get; }

		/// <summary>If <see langword="true" />, indicates that the screen should not dim even when no input is occurring.</summary>
		///         <value>The default value is <see langword="false" />.</value>
		///         <remarks>
		///           <para>The idle timer dims the screen after some amount of time has passed without user interaction. Application developers who wish to keep the screen fully powered can set this property to <see langword="true" />. For instance, games whose input is restricted to the accelerometer may set this value to <see langword="true" />.</para>
		///         </remarks>
		[Export ("idleTimerDisabled")]
		bool IdleTimerDisabled { [Bind ("isIdleTimerDisabled")] get; set; }

		[Deprecated (PlatformName.iOS, 10, 0, message: "Please use the overload instead.")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Please use the overload instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the overload instead.")]
		[Export ("openURL:")]
		bool OpenUrl (NSUrl url);

		[MacCatalyst (13, 1)]
		[Export ("openURL:options:completionHandler:")]
		void OpenUrl (NSUrl url, NSDictionary options, [NullAllowed] Action<bool> completion);

		/// <param name="url">The URL to be opened.</param>
		///         <param name="options">Launch options.</param>
		///         <param name="completion">
		///           <para>Asynchronously called after launch.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		///         <summary>Opens the specified URL, launching the app that is registered to handle the scheme.</summary>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Wrap ("OpenUrl (url, options.GetDictionary ()!, completion)")]
		[Async (XmlDocs = """
			<param name="url">The URL to be opened.</param>
			<param name="options">Launch options.</param>
			<summary>Asynchronously opens the specified URL, launching the app that is registered to handle the scheme, and returns a task the represents success or failure.</summary>
			<returns>To be added.</returns>
			<remarks>To be added.</remarks>
			""")]
		void OpenUrl (NSUrl url, UIApplicationOpenUrlOptions options, [NullAllowed] Action<bool> completion);

		[Export ("canOpenURL:")]
		[PrologueSnippet ("if (url is null) return false;", Optimizable = true)] // null not really allowed (but it's a behaviour change with known bug reports)
		bool CanOpenUrl (NSUrl url);

		[Export ("sendEvent:")]
		void SendEvent (UIEvent uievent);

		[Deprecated (PlatformName.iOS, 13, 0, message: "Should not be used for applications that support multiple scenes because it returns a key window across all connected scenes.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Should not be used for applications that support multiple scenes because it returns a key window across all connected scenes.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Should not be used for applications that support multiple scenes because it returns a key window across all connected scenes.")]
		[NullAllowed]
		[Export ("keyWindow")]
		[Transient]
		UIWindow KeyWindow { get; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Use 'UIWindowScene.Windows' in the desired window scene object instead.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Use 'UIWindowScene.Windows' in the desired window scene object instead.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Use 'UIWindowScene.Windows' in the desired window scene object instead.")]
		[Export ("windows")]
		[Transient]
		UIWindow [] Windows { get; }

		[Export ("sendAction:to:from:forEvent:")]
		bool SendAction (Selector action, [NullAllowed] NSObject target, [NullAllowed] NSObject sender, [NullAllowed] UIEvent forEvent);

		/// <summary>Controls the status of the network activity indicator on the device.</summary>
		///         <value>A Boolean that switches the indicator of network activity on or off.</value>
		///         <remarks>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Provide a custom UI in your app instead if needed.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Provide a custom UI in your app instead if needed.")]
		[Export ("networkActivityIndicatorVisible"), ThreadSafe]
		bool NetworkActivityIndicatorVisible { [Bind ("isNetworkActivityIndicatorVisible")] get; set; }

		[NoTV]
		[Export ("statusBarStyle")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'UIViewController.PreferredStatusBarStyle' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIViewController.PreferredStatusBarStyle' instead.")]
		UIStatusBarStyle StatusBarStyle { get; set; }

		[NoTV]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'UIViewController.PreferredStatusBarStyle' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIViewController.PreferredStatusBarStyle' instead.")]
		[Export ("setStatusBarStyle:animated:")]
		void SetStatusBarStyle (UIStatusBarStyle statusBarStyle, bool animated);

		/// <summary>Whether the status bar is visible.</summary>
		///         <value>Boolean that determines whether the status bar is hidden.</value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[Export ("statusBarHidden")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'UIViewController.PrefersStatusBarHidden' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIViewController.PrefersStatusBarHidden' instead.")]
		bool StatusBarHidden { [Bind ("isStatusBarHidden")] get; set; }

		[NoTV]
		[Export ("setStatusBarHidden:withAnimation:")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'UIViewController.PrefersStatusBarHidden' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIViewController.PrefersStatusBarHidden' instead.")]
		void SetStatusBarHidden (bool state, UIStatusBarAnimation animation);

		[NoTV]
		[Export ("setStatusBarHidden:animated:")]
		[Deprecated (PlatformName.iOS, 3, 2, message: "Use 'SetStatusBarHidden (bool, UIStatusBarAnimation)' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'SetStatusBarHidden (bool, UIStatusBarAnimation)' instead.")]
		void SetStatusBarHidden (bool hidden, bool animated);

		[NoTV]
		[Export ("statusBarOrientation")]
		[Deprecated (PlatformName.iOS, 9, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		UIInterfaceOrientation StatusBarOrientation { get; set; }

		[NoTV]
		[Export ("setStatusBarOrientation:animated:")]
		[Deprecated (PlatformName.iOS, 9, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void SetStatusBarOrientation (UIInterfaceOrientation orientation, bool animated);

		[NoTV]
		[Export ("statusBarOrientationAnimationDuration")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use the 'InterfaceOrientation' property of the window scene instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use the 'InterfaceOrientation' property of the window scene instead.")]
		double StatusBarOrientationAnimationDuration { get; }

		[NoTV]
		[Export ("statusBarFrame")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use the 'StatusBarManager' property of the window scene instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use the 'StatusBarManager' property of the window scene instead.")]
		CGRect StatusBarFrame { get; }

		[Deprecated (PlatformName.iOS, 17, 0, message: "Use 'UNUserNotificationCenter.SetBadge' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Use 'UNUserNotificationCenter.SetBadge' instead.")]
		[Deprecated (PlatformName.TvOS, 17, 0, message: "Use 'UNUserNotificationCenter.SetBadge' instead.")]
		[MacCatalyst (13, 1)]
		[Export ("applicationIconBadgeNumber")]
		nint ApplicationIconBadgeNumber { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("applicationSupportsShakeToEdit")]
		bool ApplicationSupportsShakeToEdit { get; set; }

		// From @interface UIApplication (UIRemoteNotifications)
		[NoTV]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'RegisterUserNotifications', 'RegisterForNotifications'  or 'UNUserNotificationCenter.RequestAuthorization' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'RegisterUserNotifications', 'RegisterForNotifications'  or 'UNUserNotificationCenter.RequestAuthorization' instead.")]
		[Export ("registerForRemoteNotificationTypes:")]
		void RegisterForRemoteNotificationTypes (UIRemoteNotificationType types);

		// From @interface UIApplication (UIRemoteNotifications)
		[Export ("unregisterForRemoteNotifications")]
		void UnregisterForRemoteNotifications ();

		// From @interface UIApplication (UIRemoteNotifications)
		[NoTV]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'CurrentUserNotificationSettings' or 'UNUserNotificationCenter.GetNotificationSettings' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'CurrentUserNotificationSettings' or 'UNUserNotificationCenter.GetNotificationSettings' instead.")]
		[Export ("enabledRemoteNotificationTypes")]
		UIRemoteNotificationType EnabledRemoteNotificationTypes { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.DidFinishLaunchingNotification']/*" />
		[Field ("UIApplicationDidFinishLaunchingNotification")]
		[Notification (typeof (UIApplicationLaunchEventArgs))]
		NSString DidFinishLaunchingNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.DidBecomeActiveNotification']/*" />
		[Field ("UIApplicationDidBecomeActiveNotification")]
		[Notification]
		NSString DidBecomeActiveNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.WillResignActiveNotification']/*" />
		[Field ("UIApplicationWillResignActiveNotification")]
		[Notification]
		NSString WillResignActiveNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.DidReceiveMemoryWarningNotification']/*" />
		[Field ("UIApplicationDidReceiveMemoryWarningNotification")]
		[Notification]
		NSString DidReceiveMemoryWarningNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.WillTerminateNotification']/*" />
		[Field ("UIApplicationWillTerminateNotification")]
		[Notification]
		NSString WillTerminateNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.SignificantTimeChangeNotification']/*" />
		[Field ("UIApplicationSignificantTimeChangeNotification")]
		[Notification]
		NSString SignificantTimeChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.WillChangeStatusBarOrientationNotification']/*" />
		[NoTV]
		[Field ("UIApplicationWillChangeStatusBarOrientationNotification")]
		[Notification (typeof (UIStatusBarOrientationChangeEventArgs))]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		NSString WillChangeStatusBarOrientationNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.DidChangeStatusBarOrientationNotification']/*" />
		[NoTV]
		[Field ("UIApplicationDidChangeStatusBarOrientationNotification")]
		[Notification (typeof (UIStatusBarOrientationChangeEventArgs))]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		NSString DidChangeStatusBarOrientationNotification { get; }

		/// <summary>Represents the value associated with the constant UIApplicationStatusBarOrientationUserInfoKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[Field ("UIApplicationStatusBarOrientationUserInfoKey")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		NSString StatusBarOrientationUserInfoKey { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.WillChangeStatusBarFrameNotification']/*" />
		[NoTV]
		[Field ("UIApplicationWillChangeStatusBarFrameNotification")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		[Notification (typeof (UIStatusBarFrameChangeEventArgs))]
		NSString WillChangeStatusBarFrameNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.DidChangeStatusBarFrameNotification']/*" />
		[NoTV]
		[Field ("UIApplicationDidChangeStatusBarFrameNotification")]
		[Notification (typeof (UIStatusBarFrameChangeEventArgs))]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		NSString DidChangeStatusBarFrameNotification { get; }

		/// <summary>Represents the value associated with the constant UIApplicationStatusBarFrameUserInfoKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[Field ("UIApplicationStatusBarFrameUserInfoKey")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		NSString StatusBarFrameUserInfoKey { get; }

		/// <summary>Launch Options Key: the application was launched in response to open a URL.  the value associated with the key contains the URL to open.</summary>
		///         <value>Represents the value associated with the constant UIApplicationLaunchOptionsURLKey.
		///         </value>
		///         <remarks>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[Field ("UIApplicationLaunchOptionsURLKey")]
		NSString LaunchOptionsUrlKey { get; }

		/// <summary>Launch Options Key: the value associated with the key is the bundle-id of the application that launched this application.</summary>
		///         <value>Represents the value associated with the constant UIApplicationLaunchOptionsSourceApplicationKey
		///         </value>
		///         <remarks>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[Field ("UIApplicationLaunchOptionsSourceApplicationKey")]
		NSString LaunchOptionsSourceApplicationKey { get; }

		/// <summary>Notification constant for LaunchOptionsRemoteNot</summary>
		///         <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
		///         <remarks>
		///           <para>The value associated with this key will be an NSDictionary with the payload from the remote notification that was received. </para>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationLaunchOptionsRemoteNotificationKey")]
		NSString LaunchOptionsRemoteNotificationKey { get; }

		/// <summary>Launch Options Key: Use this key to find out if custom data was passed to the program by the opening application. The value of this key will be a property list. </summary>
		///         <value>
		///           Represents the value associated with the constant UIApplicationLaunchOptionsAnnotationKey
		///         </value>
		///         <remarks>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[Field ("UIApplicationLaunchOptionsAnnotationKey")]
		NSString LaunchOptionsAnnotationKey { get; }

		[Export ("applicationState")]
		UIApplicationState ApplicationState { get; }

		[ThreadSafe]
		[Export ("backgroundTimeRemaining")]
		double BackgroundTimeRemaining { get; }

		[ThreadSafe]
		[RequiresSuper]
		[Export ("beginBackgroundTaskWithExpirationHandler:")]
		nint BeginBackgroundTask ([NullAllowed] Action backgroundTimeExpired);

		/// <param name="taskId">The value returned by the matching <see cref="UIKit.UIApplication.BeginBackgroundTask(System.String,System.Action)" /> method.</param>
		/// <summary>Indicates to the system that background processing has ended for the <paramref name="taskId" />.</summary>
		/// <remarks>
		///           <para>This method, with <see cref="UIKit.UIApplication.BeginBackgroundTask(System.String,System.Action)" />, bookends code that should be allowed to run in the background. It does not affect the actual state of any threads. (See <see cref="UIKit.UIApplication.BeginBackgroundTask(System.String,System.Action)" /> for discussion.)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[RequiresSuper]
		[Export ("endBackgroundTask:")]
		void EndBackgroundTask (nint taskId);

		[NoTV]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'PushKit' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'PushKit' instead.")]
		[Export ("setKeepAliveTimeout:handler:")]
		bool SetKeepAliveTimeout (double timeout, [NullAllowed] Action handler);

		[NoTV]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'PushKit' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'PushKit' instead.")]
		[Export ("clearKeepAliveTimeout")]
		void ClearKeepAliveTimeout ();

		/// <summary>Whether content protection is available.</summary>
		///         <value>
		///           <see langword="true" /> if data protection is enabled and the device is locked. Otherwise, <see langword="false" />.</value>
		///         <remarks>
		///           <para>If this method returns <see langword="false" />, the application will not be allowed to read or write files whose <see cref="Foundation.NSFileManager.FileProtectionKey" /> is <see cref="Foundation.NSFileManager.FileProtectionComplete" /> or <see cref="Foundation.NSFileManager.FileProtectionCompleteUnlessOpen" />.</para>
		///         </remarks>
		///         <altmember cref="UIKit.UIApplication.ProtectedDataDidBecomeAvailable" />
		[Export ("protectedDataAvailable")]
		bool ProtectedDataAvailable { [Bind ("isProtectedDataAvailable")] get; }

		// from @interface UIApplication (UILocalNotifications)
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenter.AddNotificationRequest' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenter.AddNotificationRequest' instead.")]
		[Export ("presentLocalNotificationNow:")]
		void PresentLocalNotificationNow (UILocalNotification notification);

		// from @interface UIApplication (UILocalNotifications)
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenter.AddNotificationRequest' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenter.AddNotificationRequest' instead.")]
		[Export ("scheduleLocalNotification:")]
		void ScheduleLocalNotification (UILocalNotification notification);

		// from @interface UIApplication (UILocalNotifications)
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenter.RemovePendingNotificationRequests' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenter.RemovePendingNotificationRequests' instead.")]
		[Export ("cancelLocalNotification:")]
		void CancelLocalNotification (UILocalNotification notification);

		// from @interface UIApplication (UILocalNotifications)
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenter.RemoveAllPendingNotificationRequests' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenter.RemoveAllPendingNotificationRequests' instead.")]
		[Export ("cancelAllLocalNotifications")]
		void CancelAllLocalNotifications ();

		// from @interface UIApplication (UILocalNotifications)
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenter.GetPendingNotificationRequests' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenter.GetPendingNotificationRequests' instead.")]
		[Export ("scheduledLocalNotifications", ArgumentSemantic.Copy)]
		UILocalNotification [] ScheduledLocalNotifications { get; set; }

		// from @interface UIApplication (UIRemoteControlEvents)
		[Export ("beginReceivingRemoteControlEvents")]
		void BeginReceivingRemoteControlEvents ();

		// from @interface UIApplication (UIRemoteControlEvents)
		[Export ("endReceivingRemoteControlEvents")]
		void EndReceivingRemoteControlEvents ();

		/// <summary>Represents the value associated with the constant UIBackgroundTaskInvalid</summary>
		///         <value>Returns a token that indicates an invalid task request.
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIBackgroundTaskInvalid")]
		nint BackgroundTaskInvalid { get; }

		/// <summary>Represents the value associated with the constant UIMinimumKeepAliveTimeout</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'PushKit' for Voice Over IP applications.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'PushKit' for Voice Over IP applications.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'PushKit' for Voice Over IP applications.")]
		[Field ("UIMinimumKeepAliveTimeout")]
		double /* NSTimeInternal */ MinimumKeepAliveTimeout { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.ProtectedDataWillBecomeUnavailable']/*" />
		[Field ("UIApplicationProtectedDataWillBecomeUnavailable")]
		[Notification]
		NSString ProtectedDataWillBecomeUnavailable { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.ProtectedDataDidBecomeAvailable']/*" />
		[Field ("UIApplicationProtectedDataDidBecomeAvailable")]
		[Notification]
		NSString ProtectedDataDidBecomeAvailable { get; }

		/// <summary>Launch Options Key: Application was started up in response to a location event.</summary>
		///         <value>Represents the value associated with the constant UIApplicationLaunchOptionsLocationKey</value>
		///         <remarks>
		///           <para>The value of this key will be an NSNumber.   The application should respond by creating a <see cref="CoreLocation.CLLocationManager" /> instance to and get the information from that object.</para>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" />.</para>
		///         </remarks>
		[Field ("UIApplicationLaunchOptionsLocationKey")]
		NSString LaunchOptionsLocationKey { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.DidEnterBackgroundNotification']/*" />
		[Field ("UIApplicationDidEnterBackgroundNotification")]
		[Notification]
		NSString DidEnterBackgroundNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.WillEnterForegroundNotification']/*" />
		[Field ("UIApplicationWillEnterForegroundNotification")]
		[Notification]
		NSString WillEnterForegroundNotification { get; }

		/// <summary>Notification constant for LaunchOptionsLocalNot</summary>
		///         <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
		///         <remarks>
		///           <para>
		///             The value of this key will be a <see cref="UIKit.UILocalNotification" /> instance.
		///           </para>
		///           <para>
		///             This key will be present on the launch options if a local notification was delivered and the application was not running.
		///           </para>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[Field ("UIApplicationLaunchOptionsLocalNotificationKey")]
		NSString LaunchOptionsLocalNotificationKey { get; }

		[Export ("userInterfaceLayoutDirection")]
		UIUserInterfaceLayoutDirection UserInterfaceLayoutDirection { get; }

		// from @interface UIApplication (UINewsstand)
		[NoTV]
		[Deprecated (PlatformName.iOS, 9, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("setNewsstandIconImage:")]
		void SetNewsstandIconImage ([NullAllowed] UIImage image);

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.LaunchOptionsNewsstandDownloadsKey']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationLaunchOptionsNewsstandDownloadsKey")]
		NSString LaunchOptionsNewsstandDownloadsKey { get; }

		/// <summary>Represents the value associated with the constant UIApplicationLaunchOptionsBluetoothCentralsKey</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[Field ("UIApplicationLaunchOptionsBluetoothCentralsKey")]
		NSString LaunchOptionsBluetoothCentralsKey { get; }

		/// <summary>Represents the value associated with the constant UIApplicationLaunchOptionsBluetoothPeripheralsKey</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[Field ("UIApplicationLaunchOptionsBluetoothPeripheralsKey")]
		NSString LaunchOptionsBluetoothPeripheralsKey { get; }

		/// <summary>The presence of this key indicates that the application was launched via a shortcut item.</summary>
		///         <value>To be added.</value>
		///         <remarks>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationLaunchOptionsShortcutItemKey")]
		NSString LaunchOptionsShortcutItemKey { get; }

		[NoTV, iOS (14, 5)]
		[MacCatalyst (14, 5)]
		[Field ("UIApplicationLaunchOptionsEventAttributionKey")]
		NSString LaunchOptionsEventAttributionKey { get; }

		//
		// 6.0
		//
		// from @interface UIApplication (UIStateRestoration)
		[Export ("extendStateRestoration")]
		void ExtendStateRestoration ();

		// from @interface UIApplication (UIStateRestoration)
		[Export ("completeStateRestoration")]
		void CompleteStateRestoration ();

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("supportedInterfaceOrientationsForWindow:")]
		UIInterfaceOrientationMask SupportedInterfaceOrientationsForWindow ([NullAllowed][Transient] UIWindow window);

		/// <summary>Represents the value associated with the constant UITrackingRunLoopMode</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UITrackingRunLoopMode")]
		NSString UITrackingRunLoopMode { get; }

		/// <summary>Represents the value associated with the constant UIApplicationStateRestorationBundleVersionKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIApplicationStateRestorationBundleVersionKey")]
		NSString StateRestorationBundleVersionKey { get; }

		/// <summary>Represents the value associated with the constant UIApplicationStateRestorationUserInterfaceIdiomKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIApplicationStateRestorationUserInterfaceIdiomKey")]
		NSString StateRestorationUserInterfaceIdiomKey { get; }

		//
		// 7.0
		//
		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.ContentSizeCategoryChangedNotification']/*" />
		[Field ("UIContentSizeCategoryDidChangeNotification")]
		[Notification (typeof (UIContentSizeCategoryChangedEventArgs))]
		NSString ContentSizeCategoryChangedNotification { get; }

		[ThreadSafe]
		[RequiresSuper]
		[Export ("beginBackgroundTaskWithName:expirationHandler:")]
		nint BeginBackgroundTask ([NullAllowed] string taskName, [NullAllowed] Action expirationHandler);

		/// <summary>Represents the value associated with the constant UIApplicationBackgroundFetchIntervalMinimum</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationBackgroundFetchIntervalMinimum")]
		double BackgroundFetchIntervalMinimum { get; }

		/// <summary>Represents the value associated with the constant UIApplicationBackgroundFetchIntervalNever</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationBackgroundFetchIntervalNever")]
		double BackgroundFetchIntervalNever { get; }

		[Export ("setMinimumBackgroundFetchInterval:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use a 'BGAppRefreshTask' from 'BackgroundTasks' framework.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use a 'BGAppRefreshTask' from 'BackgroundTasks' framework.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use a 'BGAppRefreshTask' from 'BackgroundTasks' framework.")]
		void SetMinimumBackgroundFetchInterval (double minimumBackgroundFetchInterval);

		[EditorBrowsable (EditorBrowsableState.Advanced)]
		[Export ("preferredContentSizeCategory")]
		NSString PreferredContentSizeCategory { get; }

		[Wrap ("UIContentSizeCategoryExtensions.GetValue (SharedApplication.PreferredContentSizeCategory)")]
		UIContentSizeCategory GetPreferredContentSizeCategory ();

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("connectedScenes")]
		NSSet<UIScene> ConnectedScenes { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("openSessions")]
		NSSet<UISceneSession> OpenSessions { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("supportsMultipleScenes")]
		bool SupportsMultipleScenes { get; }

		[Deprecated (PlatformName.iOS, 17, 0, message: "Please use 'ActivateSceneSession' instead.")]
		[Deprecated (PlatformName.TvOS, 17, 0, message: "Please use 'ActivateSceneSession' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Please use 'ActivateSceneSession' instead.")]
		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("requestSceneSessionActivation:userActivity:options:errorHandler:")]
		void RequestSceneSessionActivation ([NullAllowed] UISceneSession sceneSession, [NullAllowed] NSUserActivity userActivity, [NullAllowed] UISceneActivationRequestOptions options, [NullAllowed] Action<NSError> errorHandler);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("requestSceneSessionDestruction:options:errorHandler:")]
		void RequestSceneSessionDestruction (UISceneSession sceneSession, [NullAllowed] UISceneDestructionRequestOptions options, [NullAllowed] Action<NSError> errorHandler);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("requestSceneSessionRefresh:")]
		void RequestSceneSessionRefresh (UISceneSession sceneSession);

		// from @interface UIApplication (UIStateRestoration)
		[Export ("ignoreSnapshotOnNextApplicationLaunch")]
		void IgnoreSnapshotOnNextApplicationLaunch ();

		// from @interface UIApplication (UIStateRestoration)
		[Export ("registerObjectForStateRestoration:restorationIdentifier:")]
		[Static]
		void RegisterObjectForStateRestoration (IUIStateRestoring uistateRestoringObject, string restorationIdentifier);

		/// <summary>Represents the value associated with the constant UIApplicationStateRestorationTimestampKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIApplicationStateRestorationTimestampKey")]
		NSString StateRestorationTimestampKey { get; }

		/// <summary>Represents the value associated with the constant UIApplicationStateRestorationSystemVersionKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIApplicationStateRestorationSystemVersionKey")]
		NSString StateRestorationSystemVersionKey { get; }

		[MacCatalyst (13, 1)]
		[Export ("backgroundRefreshStatus")]
		UIBackgroundRefreshStatus BackgroundRefreshStatus { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.BackgroundRefreshStatusDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIApplicationBackgroundRefreshStatusDidChangeNotification")]
		NSString BackgroundRefreshStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIApplication.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIApplication.UserDidTakeScreenshotNotification']/*" />
		[Notification]
		[Field ("UIApplicationUserDidTakeScreenshotNotification")]
		NSString UserDidTakeScreenshotNotification { get; }

		// 
		// 8.0
		//
		/// <summary>Represents the value associated with the constant UIApplicationOpenSettingsURLString</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationOpenSettingsURLString")]
		NSString OpenSettingsUrlString { get; }

		[iOS (15, 4), MacCatalyst (15, 4), TV (15, 4)]
		[Field ("UIApplicationOpenNotificationSettingsURLString")]
		NSString OpenNotificationSettingsUrl { get; }

		// from @interface UIApplication (UIUserNotificationSettings)
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenter.GetNotificationSettings' and 'UNUserNotificationCenter.GetNotificationCategories' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenter.GetNotificationSettings' and 'UNUserNotificationCenter.GetNotificationCategories' instead.")]
		[Export ("currentUserNotificationSettings")]
		UIUserNotificationSettings CurrentUserNotificationSettings { get; }

		// from @interface UIApplication (UIRemoteNotifications)
		/// <summary>Indicates whether app is registered for remote notifications.</summary>
		///         <value>A Boolean that indicates whether the app is currently registered for remote notifications.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("isRegisteredForRemoteNotifications")]
		bool IsRegisteredForRemoteNotifications { get; }

		// from @interface UIApplication (UIRemoteNotifications)
		[MacCatalyst (13, 1)]
		[Export ("registerForRemoteNotifications")]
		void RegisterForRemoteNotifications ();

		// from @interface UIApplication (UIUserNotificationSettings)
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenter.RequestAuthorization' and 'UNUserNotificationCenter.SetNotificationCategories' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenter.RequestAuthorization' and 'UNUserNotificationCenter.SetNotificationCategories' instead.")]
		[Export ("registerUserNotificationSettings:")]
		void RegisterUserNotificationSettings (UIUserNotificationSettings notificationSettings);

		/// <summary>Represents the value associated with the constant UIApplicationLaunchOptionsUserActivityDictionaryKey</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationLaunchOptionsUserActivityDictionaryKey")]
		NSString LaunchOptionsUserActivityDictionaryKey { get; }

		/// <summary>Represents the value associated with the constant UIApplicationLaunchOptionsUserActivityTypeKey</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <para>This key is used with the <see cref="Foundation.NSDictionary" /> passed to <see cref="UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication, Foundation.NSDictionary)" /></para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationLaunchOptionsUserActivityTypeKey")]
		NSString LaunchOptionsUserActivityTypeKey { get; }

		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationLaunchOptionsCloudKitShareMetadataKey")]
		NSString LaunchOptionsCloudKitShareMetadataKey { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("shortcutItems", ArgumentSemantic.Copy)]
		UIApplicationShortcutItem [] ShortcutItems { get; set; }

		//
		// 10.0
		//
		// from @interface UIApplication (UIAlternateApplicationIcons)

		[MacCatalyst (13, 1)]
		[Export ("supportsAlternateIcons")]
		bool SupportsAlternateIcons { get; }

		[MacCatalyst (13, 1)]
		[Async (XmlDocs = """
			<param name="alternateIconName">The name of the new alternate icon. This parameter can be .This parameter can be .</param>
			<summary>Sets the name of the alternate icon.</summary>
			<returns>A task that represents the asynchronous SetAlternateIconName operation</returns>
			<remarks>
			          <para copied="true">The SetAlternateIconNameAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		[Export ("setAlternateIconName:completionHandler:")]
		void SetAlternateIconName ([NullAllowed] string alternateIconName, [NullAllowed] Action<NSError> completionHandler);

		[MacCatalyst (13, 1)]
		[Export ("alternateIconName"), NullAllowed]
		string AlternateIconName { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("activateSceneSessionForRequest:errorHandler:")]
		void ActivateSceneSession (UISceneSessionActivationRequest request, [NullAllowed] Action<NSError> errorHandler);

		[iOS (18, 2), MacCatalyst (18, 2), TV (18, 2)]
		[Field ("UIApplicationOpenDefaultApplicationsSettingsURLString")]
		NSString UIApplicationOpenDefaultApplicationsSettingsUrlString { get; }
	}

	/// <summary>Icon for a Quick Action shortcut, which appears in response to user-applied pressure.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationShortcutIcon_Class/index.html">Apple documentation for <c>UIApplicationShortcutIcon</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIApplicationShortcutIcon : NSCopying {
		[Static]
		[Export ("iconWithType:")]
		UIApplicationShortcutIcon FromType (UIApplicationShortcutIconType type);

		[Static]
		[Export ("iconWithTemplateImageName:")]
		UIApplicationShortcutIcon FromTemplateImageName (string templateImageName);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("iconWithSystemImageName:")]
		UIApplicationShortcutIcon FromSystemImageName (string systemImageName);

		// This is inside ContactsUI.framework
		/// <param name="contact">To be added.</param>
		///         <summary>Creates and returns a new shortcut icon for the provided contact.</summary>
		///         <returns>To be added.</returns>
		///         <remarks>To be added.</remarks>
		[NoMac]
		[NoTV]
		[NoMacCatalyst]
		[Static, Export ("iconWithContact:")]
		UIApplicationShortcutIcon FromContact (CNContact contact);
	}

	/// <summary>A Quick Action shortcut, which appears in response to user-applied pressure.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationShortcutItem_class/index.html">Apple documentation for <c>UIApplicationShortcutItem</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIApplicationShortcutItem : NSMutableCopying {
		[Export ("initWithType:localizedTitle:localizedSubtitle:icon:userInfo:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string type, string localizedTitle, [NullAllowed] string localizedSubtitle, [NullAllowed] UIApplicationShortcutIcon icon, [NullAllowed] NSDictionary<NSString, NSObject> userInfo);

		[Export ("initWithType:localizedTitle:")]
		NativeHandle Constructor (string type, string localizedTitle);

		[Export ("type")]
		string Type { get; [NotImplemented] set; }

		[Export ("localizedTitle")]
		string LocalizedTitle { get; [NotImplemented] set; }

		[NullAllowed, Export ("localizedSubtitle")]
		string LocalizedSubtitle { get; [NotImplemented] set; }

		[NullAllowed, Export ("icon", ArgumentSemantic.Copy)]
		UIApplicationShortcutIcon Icon { get; [NotImplemented] set; }

		[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> UserInfo { get; [NotImplemented] set; }

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("targetContentIdentifier", ArgumentSemantic.Copy)]
		NSObject TargetContentIdentifier { get; [NotImplemented] set; }
	}

	/// <summary>A mutable "quick action" available on the Home screen.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/reference/UIKit/UIMutableApplicationShortcutItem">Apple documentation for <c>UIMutableApplicationShortcutItem</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIApplicationShortcutItem))]
	[DisableDefaultCtor] // NSInvalidArgumentException Reason: Don't call -[UIApplicationShortcutItem init].
	interface UIMutableApplicationShortcutItem {
		// inlined
		[Export ("initWithType:localizedTitle:localizedSubtitle:icon:userInfo:")]
		NativeHandle Constructor (string type, string localizedTitle, [NullAllowed] string localizedSubtitle, [NullAllowed] UIApplicationShortcutIcon icon, [NullAllowed] NSDictionary<NSString, NSObject> userInfo);

		// inlined
		[Export ("initWithType:localizedTitle:")]
		NativeHandle Constructor (string type, string localizedTitle);

		[Export ("type")]
		[Override]
		string Type { get; set; }

		[Export ("localizedTitle")]
		[Override]
		string LocalizedTitle { get; set; }

		[NullAllowed, Export ("localizedSubtitle")]
		[Override]
		string LocalizedSubtitle { get; set; }

		[NullAllowed, Export ("icon", ArgumentSemantic.Copy)]
		[Override]
		UIApplicationShortcutIcon Icon { get; set; }

		[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
		[Override]
		NSDictionary<NSString, NSObject> UserInfo { get; set; }

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("targetContentIdentifier", ArgumentSemantic.Copy)]
		NSObject TargetContentIdentifier { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDynamicBehavior))]
	[DisableDefaultCtor] // Objective-C exception thrown.  Name: NSInvalidArgumentException Reason: init is undefined for objects of type UIAttachmentBehavior
	interface UIAttachmentBehavior {
		[Export ("items", ArgumentSemantic.Copy)]
		IUIDynamicItem [] Items { get; }

		[Export ("attachedBehaviorType")]
		UIAttachmentBehaviorType AttachedBehaviorType { get; }

		[Export ("anchorPoint")]
		CGPoint AnchorPoint { get; set; }

		[Export ("length")]
		nfloat Length { get; set; }

		[Export ("damping")]
		nfloat Damping { get; set; }

		[Export ("frequency")]
		nfloat Frequency { get; set; }

		[Export ("initWithItem:attachedToAnchor:")]
		NativeHandle Constructor (IUIDynamicItem item, CGPoint anchorPoint);

		[DesignatedInitializer]
		[Export ("initWithItem:offsetFromCenter:attachedToAnchor:")]
		NativeHandle Constructor (IUIDynamicItem item, UIOffset offset, CGPoint anchorPoint);

		[Export ("initWithItem:attachedToItem:")]
		NativeHandle Constructor (IUIDynamicItem item, IUIDynamicItem attachedToItem);

		[DesignatedInitializer]
		[Export ("initWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:")]
		NativeHandle Constructor (IUIDynamicItem item, UIOffset offsetFromCenter, IUIDynamicItem attachedToItem, UIOffset attachOffsetFromCenter);

		[Static]
		[MacCatalyst (13, 1)]
		[Export ("slidingAttachmentWithItem:attachedToItem:attachmentAnchor:axisOfTranslation:")]
		UIAttachmentBehavior CreateSlidingAttachment (IUIDynamicItem item1, IUIDynamicItem item2, CGPoint attachmentAnchor, CGVector translationAxis);

		[Static]
		[MacCatalyst (13, 1)]
		[Export ("slidingAttachmentWithItem:attachmentAnchor:axisOfTranslation:")]
		UIAttachmentBehavior CreateSlidingAttachment (IUIDynamicItem item, CGPoint attachmentAnchor, CGVector translationAxis);

		// +(instancetype __nonnull)limitAttachmentWithItem:(id<UIDynamicItem> __nonnull)item1 offsetFromCenter:(UIOffset)offset1 attachedToItem:(id<UIDynamicItem> __nonnull)item2 offsetFromCenter:(UIOffset)offset2;
		[Static]
		[MacCatalyst (13, 1)]
		[Export ("limitAttachmentWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:")]
		UIAttachmentBehavior CreateLimitAttachment (IUIDynamicItem item1, UIOffset offsetFromCenter, IUIDynamicItem item2, UIOffset offsetFromCenter2);

		[Static]
		[MacCatalyst (13, 1)]
		[Export ("fixedAttachmentWithItem:attachedToItem:attachmentAnchor:")]
		UIAttachmentBehavior CreateFixedAttachment (IUIDynamicItem item1, IUIDynamicItem item2, CGPoint attachmentAnchor);

		[Static]
		[MacCatalyst (13, 1)]
		[Export ("pinAttachmentWithItem:attachedToItem:attachmentAnchor:")]
		UIAttachmentBehavior CreatePinAttachment (IUIDynamicItem item1, IUIDynamicItem item2, CGPoint attachmentAnchor);

		[Export ("attachmentRange")]
		[MacCatalyst (13, 1)]
		UIFloatRange AttachmentRange { get; set; }

		[Export ("frictionTorque")]
		[MacCatalyst (13, 1)]
		nfloat FrictionTorque { get; set; }
	}

	/// <summary>Allows elements to adjust to dynamic traits.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIContentSizeCategoryAdjusting {
		/// <summary>To be added.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[MacCatalyst (13, 1)]
		[Export ("adjustsFontForContentSizeCategory")]
		bool AdjustsFontForContentSizeCategory { get; set; }
	}

	[MacCatalyst (13, 1)]
	interface UIContentSizeCategoryChangedEventArgs {
		/// <summary>The new size of the content, e.g., the new font size, in points.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("UIContentSizeCategoryNewValueKey")]
		NSString WeakNewValue { get; }
	}

	/// <include file="../docs/api/UIKit/UIContentSizeCategory.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIContentSizeCategory']/*" />
	[Static]
	[MacCatalyst (13, 1)]
	public enum UIContentSizeCategory {
		/// <summary>To be added.</summary>
		[MacCatalyst (13, 1)]
		[Field ("UIContentSizeCategoryUnspecified")]
		Unspecified,

		/// <summary>Quite small.</summary>
		[Field ("UIContentSizeCategoryExtraSmall")]
		ExtraSmall,

		/// <summary>A small font.</summary>
		[Field ("UIContentSizeCategorySmall")]
		Small,

		/// <summary>A medium-sized font.</summary>
		[Field ("UIContentSizeCategoryMedium")]
		Medium,

		/// <summary>A large font.</summary>
		[Field ("UIContentSizeCategoryLarge")]
		Large,

		/// <summary>An extra-large font.</summary>
		[Field ("UIContentSizeCategoryExtraLarge")]
		ExtraLarge,

		/// <summary>A font that's larger than ExtraLarge.</summary>
		[Field ("UIContentSizeCategoryExtraExtraLarge")]
		ExtraExtraLarge,

		/// <summary>A font that's larger than ExtraExtraLarge.</summary>
		[Field ("UIContentSizeCategoryExtraExtraExtraLarge")]
		ExtraExtraExtraLarge,

		/// <summary>A medium font reflecting the current accessibility settings.</summary>
		[Field ("UIContentSizeCategoryAccessibilityMedium")]
		AccessibilityMedium,

		/// <summary>A medium font reflecting the current accessibility settings.</summary>
		[Field ("UIContentSizeCategoryAccessibilityLarge")]
		AccessibilityLarge,

		/// <summary>A medium font reflecting the current accessibility settings.</summary>
		[Field ("UIContentSizeCategoryAccessibilityExtraLarge")]
		AccessibilityExtraLarge,

		/// <summary>A medium font reflecting the current accessibility settings.</summary>
		[Field ("UIContentSizeCategoryAccessibilityExtraExtraLarge")]
		AccessibilityExtraExtraLarge,

		/// <summary>A medium font reflecting the current accessibility settings.</summary>
		[Field ("UIContentSizeCategoryAccessibilityExtraExtraExtraLarge")]
		AccessibilityExtraExtraExtraLarge,
	}

	[iOS (16, 0), MacCatalyst (16, 0), TV (16, 0)]
	[Native]
	public enum UIAlertControllerSeverity : long {
		Default = 0,
		Critical,
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UICalendarViewDecorationSize : long {
		Small = 0,
		Medium = 1,
		Large = 2,
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UICollectionViewSelfSizingInvalidation : long {
		Disabled,
		Enabled,
		EnabledIncludingConstraints,
	}

	[TV (17, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UIContextMenuConfigurationElementOrder : long {
		Automatic = 0,
		Priority,
		Fixed,
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UIEditMenuArrowDirection : long {
		Automatic = 0,
		Up = 1,
		Down = 2,
		Left = 3,
		Right = 4,
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UIFindSessionSearchResultDisplayStyle : long {
		CurrentAndTotal,
		Total,
		None,
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UIMenuElementSize : long {
		Small = 0,
		Medium,
		Large,
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		Automatic = -1,
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UINavigationBarNSToolbarSection : long {
		None,
		Sidebar,
		Supplementary,
		Content,
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UINavigationItemSearchBarPlacement : long {
		Automatic,
		Inline,
		Stacked,
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UINavigationItemStyle : long {
		Navigator,
		Browser,
		Editor,
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UINSToolbarItemPresentationSize : long {
		Unspecified = -1,
		Regular = 0,
		Small = 1,
		Large = 3,
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UIPageControlDirection : long {
		Natural = 0,
		LeftToRight = 1,
		RightToLeft = 2,
		TopToBottom = 3,
		BottomToTop = 4,
	}

#if XAMCORE_5_0
	[TV (16, 0), iOS (16, 0), NoMacCatalyst]
#else
	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Obsoleted (PlatformName.MacCatalyst, 17, 4, message: Constants.ApiRemovedGeneral)]
#endif
	[Native]
	public enum UIPasteControlDisplayMode : ulong {
		IconAndLabel,
		IconOnly,
		LabelOnly,
		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		ArrowAndLabel,
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UIScreenReferenceDisplayModeStatus : long {
		NotSupported,
		NotEnabled,
		Limited,
		Enabled,
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UITableViewSelfSizingInvalidation : long {
		Disabled,
		Enabled,
		EnabledIncludingConstraints,
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UITextSearchFoundTextStyle : long {
		Normal,
		Found,
		Highlighted,
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Native]
	public enum UITextSearchMatchMethod : long {
		Contains,
		StartsWith,
		FullWord,
	}

	[return: NullAllowed]
	delegate UIViewController UIContextMenuContentPreviewProvider ();
	[return: NullAllowed]
	delegate UIMenu UIContextMenuActionProvider (UIMenuElement [] suggestedActions);

	[TV (17, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIContextMenuConfiguration {

		[Export ("identifier")]
		INSCopying Identifier { get; }

		[Static]
		[Export ("configurationWithIdentifier:previewProvider:actionProvider:")]
		UIContextMenuConfiguration Create ([NullAllowed] INSCopying identifier, [NullAllowed] UIContextMenuContentPreviewProvider previewProvider, [NullAllowed] UIContextMenuActionProvider actionProvider);

		[iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("secondaryItemIdentifiers", ArgumentSemantic.Copy)]
		NSSet<INSCopying> SecondaryItemIdentifiers { get; set; }

		[iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("badgeCount")]
		nint BadgeCount { get; set; }

		[iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("preferredMenuElementOrder", ArgumentSemantic.Assign)]
		UIContextMenuConfigurationElementOrder PreferredMenuElementOrder { get; set; }
	}

	interface IUIContextMenuInteractionDelegate { }

	[TV (17, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIContextMenuInteractionDelegate {

		[Abstract]
		[Export ("contextMenuInteraction:configurationForMenuAtLocation:")]
		[return: NullAllowed]
		UIContextMenuConfiguration GetConfigurationForMenu (UIContextMenuInteraction interaction, CGPoint location);

		[NoTV]
		[Deprecated (PlatformName.iOS, 16, 0)]
		[Deprecated (PlatformName.MacCatalyst, 16, 0)]
		[Export ("contextMenuInteraction:previewForHighlightingMenuWithConfiguration:")]
		[return: NullAllowed]
		UITargetedPreview GetPreviewForHighlightingMenu (UIContextMenuInteraction interaction, UIContextMenuConfiguration configuration);

		[NoTV]
		[Deprecated (PlatformName.iOS, 16, 0)]
		[Deprecated (PlatformName.MacCatalyst, 16, 0)]
		[Export ("contextMenuInteraction:previewForDismissingMenuWithConfiguration:")]
		[return: NullAllowed]
		UITargetedPreview GetPreviewForDismissingMenu (UIContextMenuInteraction interaction, UIContextMenuConfiguration configuration);

		[NoTV]
		[Export ("contextMenuInteraction:willPerformPreviewActionForMenuWithConfiguration:animator:")]
		void WillPerformPreviewAction (UIContextMenuInteraction interaction, UIContextMenuConfiguration configuration, IUIContextMenuInteractionCommitAnimating animator);

		[Export ("contextMenuInteraction:willDisplayMenuForConfiguration:animator:")]
		void WillDisplayMenu (UIContextMenuInteraction interaction, UIContextMenuConfiguration configuration, [NullAllowed] IUIContextMenuInteractionAnimating animator);

		[Export ("contextMenuInteraction:willEndForConfiguration:animator:")]
		void WillEnd (UIContextMenuInteraction interaction, UIContextMenuConfiguration configuration, [NullAllowed] IUIContextMenuInteractionAnimating animator);

		[iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("contextMenuInteraction:configuration:highlightPreviewForItemWithIdentifier:")]
		[return: NullAllowed]
		UITargetedPreview GetHighlightPreview (UIContextMenuInteraction interaction, UIContextMenuConfiguration configuration, INSCopying identifier);

		[iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("contextMenuInteraction:configuration:dismissalPreviewForItemWithIdentifier:")]
		[return: NullAllowed]
		UITargetedPreview GetDismissalPreview (UIContextMenuInteraction interaction, UIContextMenuConfiguration configuration, INSCopying identifier);
	}

	[TV (17, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIContextMenuInteraction : UIInteraction {
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIContextMenuInteractionDelegate Delegate { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("menuAppearance")]
		UIContextMenuInteractionAppearance MenuAppearance { get; }

		[Export ("initWithDelegate:")]
		[DesignatedInitializer]
		[PostSnippet ("MarkDirty ();\n__mt_WeakDelegate_var = @delegate;", Optimizable = true)] // passing in the delegate as a parameter is basically the same as setting the property, so we also need to store it in a local field.
		NativeHandle Constructor (IUIContextMenuInteractionDelegate @delegate);

		[Export ("locationInView:")]
		CGPoint GetLocation ([NullAllowed] UIView inView);

		[iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("updateVisibleMenuWithBlock:")]
		void UpdateVisibleMenu (Func<UIMenu, UIMenu> handler);

		[iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("dismissMenu")]
		void DismissMenu ();
	}

	interface IUIContextMenuInteractionCommitAnimating { }

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIContextMenuInteractionCommitAnimating : UIContextMenuInteractionAnimating {
		[Abstract]
		[Export ("preferredCommitStyle", ArgumentSemantic.Assign)]
		UIContextMenuInteractionCommitStyle PreferredCommitStyle { get; set; }
	}

	interface IUICoordinateSpace { }

	/// <summary>A frame of reference on the screen.</summary>
	/// <remarks>To be added.</remarks>
	/// <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICoordinateSpace_protocol/index.html">Apple documentation for <c>UICoordinateSpace</c></related>
	[Protocol]
	[Model]
	[BaseType (typeof (NSObject))]
	[Abstract]
	[MacCatalyst (13, 1)]
	[NoMac]
	interface UICoordinateSpace {
		/// <summary>Gets the bounding rectangle of the object in its own coordinate space.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("bounds")]
		CGRect Bounds { get; }

		/// <param name="point">To be added.</param>
		/// <param name="coordinateSpace">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("convertPoint:toCoordinateSpace:")]
		CGPoint ConvertPointToCoordinateSpace (CGPoint point, IUICoordinateSpace coordinateSpace);

		/// <param name="point">To be added.</param>
		/// <param name="coordinateSpace">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("convertPoint:fromCoordinateSpace:")]
		CGPoint ConvertPointFromCoordinateSpace (CGPoint point, IUICoordinateSpace coordinateSpace);

		/// <param name="rect">To be added.</param>
		/// <param name="coordinateSpace">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("convertRect:toCoordinateSpace:")]
		CGRect ConvertRectToCoordinateSpace (CGRect rect, IUICoordinateSpace coordinateSpace);

		/// <param name="rect">To be added.</param>
		/// <param name="coordinateSpace">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("convertRect:fromCoordinateSpace:")]
		CGRect ConvertRectFromCoordinateSpace (CGRect rect, IUICoordinateSpace coordinateSpace);
	}

	interface IUIApplicationDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIApplicationDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIApplicationDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIApplicationDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIApplicationDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[BaseType (typeof (NSObject))]
	[Model]
	[NoMac]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIApplicationDelegate {

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>The application has finished launching.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("applicationDidFinishLaunching:")]
		void FinishedLaunching (UIApplication application);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="launchOptions">An NSDictionary with the launch options, can be null.   Possible key values are UIApplication's LaunchOption static properties.</param>
		/// <summary>Indicates that launching has finished and the app will shortly begin running.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("application:didFinishLaunchingWithOptions:")]
		bool FinishedLaunching (UIApplication application, [NullAllowed] NSDictionary launchOptions);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>The app has moved from the inactive to actie state.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("applicationDidBecomeActive:")]
		void OnActivated (UIApplication application);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>The app is about to move from the active state to the inactive state.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("applicationWillResignActive:")]
		void OnResignActivation (UIApplication application);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="url">To be added.</param>
		/// <summary>Developers should use <see cref="UIKit.UIApplicationDelegate.OpenUrl" /> rather than this deprecated method.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Override 'OpenUrl (UIApplication, NSUrl, NSDictionary)'. The later will be called if both are implemented.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Override 'OpenUrl (UIApplication, NSUrl, NSDictionary)'. The later will be called if both are implemented.")]
		[Export ("application:handleOpenURL:")]
#if XAMCORE_5_0
		bool HandleOpenUrl (UIApplication application, NSUrl url);
#else
		bool HandleOpenURL (UIApplication application, NSUrl url);
#endif

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>The app has received a low-memory warning from the system.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("applicationDidReceiveMemoryWarning:")]
		void ReceiveMemoryWarning (UIApplication application);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>Indicates that the app is about to terminate.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("applicationWillTerminate:")]
		void WillTerminate (UIApplication application);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>Indicates a significant change in time, such as midnight, change to Daylight Savings, or a shift in timezone.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("applicationSignificantTimeChange:")]
		void ApplicationSignificantTimeChange (UIApplication application);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="newStatusBarOrientation">To be added.</param>
		/// <param name="duration">To be added.</param>
		/// <summary>Indicates that the orientation of the status bar is about to change.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Export ("application:willChangeStatusBarOrientation:duration:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		void WillChangeStatusBarOrientation (UIApplication application, UIInterfaceOrientation newStatusBarOrientation, double duration);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="oldStatusBarOrientation">The status bar's previous orientation.</param>
		/// <summary>Indicates that the orientation of the status bar has changed.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Export ("application:didChangeStatusBarOrientation:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		void DidChangeStatusBarOrientation (UIApplication application, UIInterfaceOrientation oldStatusBarOrientation);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="newStatusBarFrame">To be added.</param>
		/// <summary>Indicates that the frame of the status bar is about to change.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Export ("application:willChangeStatusBarFrame:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		void WillChangeStatusBarFrame (UIApplication application, CGRect newStatusBarFrame);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="oldStatusBarFrame">The status bar's previous Frame.</param>
		/// <summary>Indicates that the frame of the status bar has changed.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Export ("application:didChangeStatusBarFrame:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ViewWillTransitionToSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ViewWillTransitionToSize' instead.")]
		void ChangedStatusBarFrame (UIApplication application, CGRect oldStatusBarFrame);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="deviceToken">To be added.</param>
		/// <summary>Indicates that the device successfully registered with Apple Push Service.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("application:didRegisterForRemoteNotificationsWithDeviceToken:")]
		void RegisteredForRemoteNotifications (UIApplication application, NSData deviceToken);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="error">To be added.</param>
		/// <summary>Indicates that Apple Push Service did not successfully compete the registration process.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("application:didFailToRegisterForRemoteNotificationsWithError:")]
		void FailedToRegisterForRemoteNotifications (UIApplication application, NSError error);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="userInfo">A dictionary whose "aps" key contains information related to the notification</param>
		/// <summary>Indicates that the app received a remote notification.</summary>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenterDelegate.WillPresentNotification/DidReceiveNotificationResponse' for user visible notifications and 'ReceivedRemoteNotification' for silent remote notifications.")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use 'UNUserNotificationCenterDelegate.WillPresentNotification/DidReceiveNotificationResponse' for user visible notifications and 'ReceivedRemoteNotification' for silent remote notifications.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenterDelegate.WillPresentNotification/DidReceiveNotificationResponse' for user visible notifications and 'ReceivedRemoteNotification' for silent remote notifications.")]
		[Export ("application:didReceiveRemoteNotification:")]
		void ReceivedRemoteNotification (UIApplication application, NSDictionary userInfo);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="notification">To be added.</param>
		/// <summary>Indicates that the app received a local notification.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenterDelegate.WillPresentNotification/DidReceiveNotificationResponse' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenterDelegate.WillPresentNotification/DidReceiveNotificationResponse' instead.")]
		[Export ("application:didReceiveLocalNotification:")]
		void ReceivedLocalNotification (UIApplication application, UILocalNotification notification);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>Indicates that the application has entered the background.</summary>
		/// <remarks>
		///           <para>Apps should complete processing this method in approximately 5 seconds. If more time is necessary, applications can call <see cref="UIKit.UIApplication.BeginBackgroundTask(System.String,System.Action)" />.</para>
		///         </remarks>
		[Export ("applicationDidEnterBackground:")]
		void DidEnterBackground (UIApplication application);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>Indicates that the application is about to enter the foreground.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("applicationWillEnterForeground:")]
		void WillEnterForeground (UIApplication application);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>Indicates that protected files are about to be encrypted and unavailable for reading.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("applicationProtectedDataWillBecomeUnavailable:")]
		void ProtectedDataWillBecomeUnavailable (UIApplication application);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <summary>Protected files are now available.</summary>
		/// <remarks>
		///           <para>Content protection encrypts and restricts access to protected files in certain situations, such as when the device is locked. This method will be called when the device is unlocked and the files are available for reading.</para>
		///         </remarks>
		[Export ("applicationProtectedDataDidBecomeAvailable:")]
		void ProtectedDataDidBecomeAvailable (UIApplication application);

		/// <param name="application">Reference to this application (<see cref="UIKit.UIApplication.SharedApplication" />).</param>
		/// <param name="url">The <see cref="Foundation.NSUrl" /> specified by the calling application.</param>
		/// <param name="sourceApplication">The bundle ID of the calling application.</param>
		/// <param name="annotation">Optional property-list data passed by the calling application.</param>
		/// <summary>Loads a resource from the specified URL.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Override 'OpenUrl (UIApplication, NSUrl, NSDictionary)'. The later will be called if both are implemented.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Override 'OpenUrl (UIApplication, NSUrl, NSDictionary)'. The later will be called if both are implemented.")]
		[Export ("application:openURL:sourceApplication:annotation:")]
		bool OpenUrl (UIApplication application, NSUrl url, string sourceApplication, NSObject annotation);

		/// <param name="app">To be added.</param>
		/// <param name="url">To be added.</param>
		/// <param name="options">To be added.</param>
		/// <summary>Indicates that the application should open the specified <paramref name="url" /> with context from <paramref name="options" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("application:openURL:options:")]
		bool OpenUrl (UIApplication app, NSUrl url, NSDictionary options);

		/// <param name="app">To be added.</param>
		///         <param name="url">To be added.</param>
		///         <param name="options">To be added.</param>
		///         <summary>Indicates that the application should open the specified <paramref name="url" /> according to <paramref name="options" />.</summary>
		///         <returns>To be added.</returns>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Wrap ("OpenUrl(app, url, options.GetDictionary ())")]
		bool OpenUrl (UIApplication app, NSUrl url, UIApplicationOpenUrlOptions options);

		/// <summary>Gets or sets the <see cref="UIKit.UIWindow" /> for the application.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("window", ArgumentSemantic.Retain), NullAllowed]
		UIWindow Window { get; set; }

		//
		// 6.0
		//
		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="launchOptions">An NSDictionary with the launch options, can be null.   Possible key values are UIApplication's LaunchOption static properties.</param>
		/// <summary>Indicates that the app is about to finish its launching procedures.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("application:willFinishLaunchingWithOptions:")]
		bool WillFinishLaunching (UIApplication application, [NullAllowed] NSDictionary launchOptions);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="forWindow">To be added.</param>
		/// <summary>The interface orientations supported by the app.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("application:supportedInterfaceOrientationsForWindow:")]
		UIInterfaceOrientationMask GetSupportedInterfaceOrientations (UIApplication application, [NullAllowed][Transient] UIWindow forWindow);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="restorationIdentifierComponents">An array of identifiers that identify the path to the desired view controller, which should be last.</param>
		/// <param name="coder">To be added.</param>
		/// <summary>Retrieves the UIViewController identified by the last value in the restorationIdentifierComponents parameter.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[return: NullAllowed]
		[Export ("application:viewControllerWithRestorationIdentifierPath:coder:")]
		UIViewController GetViewController (UIApplication application, string [] restorationIdentifierComponents, NSCoder coder);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="coder">To be added.</param>
		/// <summary>Whether the application should save application state information.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 2, message: "Use 'ShouldSaveSecureApplicationState' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 2, message: "Use 'ShouldSaveSecureApplicationState' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ShouldSaveSecureApplicationState' instead.")]
		[Export ("application:shouldSaveApplicationState:")]
		bool ShouldSaveApplicationState (UIApplication application, NSCoder coder);

		[iOS (13, 2)]
		[TV (13, 2)]
		[MacCatalyst (13, 1)]
		[Export ("application:shouldSaveSecureApplicationState:")]
		bool ShouldSaveSecureApplicationState (UIApplication application, NSCoder coder);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="coder">To be added.</param>
		/// <summary>Whether the application should restore saved state information.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 2, message: "Use 'ShouldRestoreSecureApplicationState' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 2, message: "Use 'ShouldRestoreSecureApplicationState' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ShouldRestoreSecureApplicationState' instead.")]
		[Export ("application:shouldRestoreApplicationState:")]
		bool ShouldRestoreApplicationState (UIApplication application, NSCoder coder);

		[iOS (13, 2)]
		[TV (13, 2)]
		[MacCatalyst (13, 1)]
		[Export ("application:shouldRestoreSecureApplicationState:")]
		bool ShouldRestoreSecureApplicationState (UIApplication application, NSCoder coder);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="coder">To be added.</param>
		/// <summary>Indicates that the app is about to store application state data.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("application:willEncodeRestorableStateWithCoder:")]
		void WillEncodeRestorableState (UIApplication application, NSCoder coder);

		/// <param name="application">Reference to the UIApplication that invoked this delegate method.</param>
		/// <param name="coder">To be added.</param>
		/// <summary>Indicates that the app should restore highest-level state.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("application:didDecodeRestorableStateWithCoder:")]
		void DidDecodeRestorableState (UIApplication application, NSCoder coder);

		// special case from UIAccessibilityAction. we added it (completly) on UIResponser but magic tap is also:
		// "If you’d like the Magic Tap gesture to perform the same action from anywhere within your app, it is more 
		// appropriate to implement the accessibilityPerformMagicTap method in your app delegate."
		// ref: http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/Accessibility/AccessibilityfromtheViewControllersPerspective.html
		/// <summary>Performs the most important action of the app. Often, this is toggling the most important state of the app.</summary>
		/// <returns>
		///           <see langword="true" /> if the action succeeded.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[NoMacCatalyst]
		[Export ("accessibilityPerformMagicTap")]
		bool AccessibilityPerformMagicTap ();

		/// <param name="application">Handle to the UIApplication.</param>
		/// <param name="userInfo">To be added.</param>
		/// <param name="completionHandler">Callback to invoke to notify the operating system of the result of the background fetch operation.</param>
		/// <summary>Indicates that the app received a remote notification.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("application:didReceiveRemoteNotification:fetchCompletionHandler:")]
		void DidReceiveRemoteNotification (UIApplication application, NSDictionary userInfo, Action<UIBackgroundFetchResult> completionHandler);

		/// <param name="application">To be added.</param>
		/// <param name="sessionIdentifier">To be added.</param>
		/// <param name="completionHandler">To be added.</param>
		/// <summary>Raised when events relating to a background <see cref="UIKit.NSUrlSession" /> are waiting to be processed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("application:handleEventsForBackgroundURLSession:completionHandler:")]
		void HandleEventsForBackgroundUrl (UIApplication application, string sessionIdentifier, Action completionHandler);

		/// <param name="application">Handle to the UIApplication.</param>
		/// <param name="completionHandler">Callback to invoke to notify the operating system of the result of the background fetch operation.</param>
		/// <summary>Indicates that the application can begin a fetch operation if it has data to download.</summary>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use a 'BGAppRefreshTask' from 'BackgroundTasks' framework.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use a 'BGAppRefreshTask' from 'BackgroundTasks' framework.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use a 'BGAppRefreshTask' from 'BackgroundTasks' framework.")]
		[Export ("application:performFetchWithCompletionHandler:")]
		void PerformFetch (UIApplication application, Action<UIBackgroundFetchResult> completionHandler);

		// 
		// 8.0
		//
		/// <param name="application">The <see cref="UIKit.UIApplication" /> singleton.</param>
		/// <param name="userActivity">The user activity identifier.</param>
		/// <param name="completionHandler">System-provided callback that can be called with appropriate <see cref="UIKit.UIResponder" /> or <see cref="UIKit.UIDocument" /> objects.</param>
		/// <summary>Informs the app that there is data associated with continuing a task specified as a <see cref="Foundation.NSUserActivity" /> object, and then returns whether the app continued the activity.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("application:continueUserActivity:restorationHandler:")]
		bool ContinueUserActivity (UIApplication application, NSUserActivity userActivity, UIApplicationRestorationHandler completionHandler);

		/// <param name="application">To be added.</param>
		/// <param name="userActivityType">To be added.</param>
		/// <param name="error">To be added.</param>
		/// <summary>Informs the app that the activity of the <paramref name="userActivityType" /> type could not be continued, and specifies a <paramref name="error" /> as the reason for the failure.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("application:didFailToContinueUserActivityWithType:error:")]
		void DidFailToContinueUserActivity (UIApplication application, string userActivityType, NSError error);

		/// <param name="application">To be added.</param>
		/// <param name="notificationSettings">To be added.</param>
		/// <summary>Developers should not use this deprecated method. Developers should use 'UNUserNotificationCenter.RequestAuthorization' instead.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenter.RequestAuthorization' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenter.RequestAuthorization' instead.")]
		[Export ("application:didRegisterUserNotificationSettings:")]
		void DidRegisterUserNotificationSettings (UIApplication application, UIUserNotificationSettings notificationSettings);

		/// <param name="application">To be added.</param>
		/// <param name="actionIdentifier">To be added.</param>
		/// <param name="localNotification">To be added.</param>
		/// <param name="completionHandler">To be added.</param>
		/// <summary>Informs the app that the user selected an action identified by the <paramref name="actionIdentifier" /> value from an alert of a <see cref="UIKit.UILocalNotification" /> object, and executes the <paramref name="completionHandler" /> block after it completes the action.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[Export ("application:handleActionWithIdentifier:forLocalNotification:completionHandler:")]
		void HandleAction (UIApplication application, string actionIdentifier, UILocalNotification localNotification, Action completionHandler);

		/// <param name="application">To be added.</param>
		/// <param name="actionIdentifier">To be added.</param>
		/// <param name="localNotification">To be added.</param>
		/// <param name="responseInfo">To be added.</param>
		/// <param name="completionHandler">To be added.</param>
		/// <summary>Informs the app of a custom action to perform based on a local notification, and includes the <paramref name="actionIdentifier" /> value, <paramref name="responseInfo" /> data from the notification, and <paramref name="completionHandler" /> for the app developer to run after performing the action.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[Export ("application:handleActionWithIdentifier:forLocalNotification:withResponseInfo:completionHandler:")]
		void HandleAction (UIApplication application, string actionIdentifier, UILocalNotification localNotification, NSDictionary responseInfo, Action completionHandler);

		/// <param name="application">To be added.</param>
		/// <param name="actionIdentifier">To be added.</param>
		/// <param name="remoteNotificationInfo">To be added.</param>
		/// <param name="completionHandler">To be added.</param>
		/// <summary>Informs the app of a custom action to perform based on a push notification, and includes the <paramref name="actionIdentifier" /> value, <paramref name="remoteNotificationInfo" /> data from the notification, and <paramref name="completionHandler" /> for the app developer to run after performing the action.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[Export ("application:handleActionWithIdentifier:forRemoteNotification:completionHandler:")]
		void HandleAction (UIApplication application, string actionIdentifier, NSDictionary remoteNotificationInfo, Action completionHandler);

		/// <param name="application">To be added.</param>
		/// <param name="actionIdentifier">To be added.</param>
		/// <param name="remoteNotificationInfo">To be added.</param>
		/// <param name="responseInfo">To be added.</param>
		/// <param name="completionHandler">To be added.</param>
		/// <summary>Informs the app of a custom action to perform based on a remote notification, and includes the <paramref name="actionIdentifier" /> value, <paramref name="remoteNotificationInfo" /> data from the notification, and <paramref name="completionHandler" /> for the app developer to run after performing the action.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNUserNotificationCenterDelegate.DidReceiveNotificationResponse' instead.")]
		[Export ("application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:")]
		void HandleAction (UIApplication application, string actionIdentifier, NSDictionary remoteNotificationInfo, NSDictionary responseInfo, Action completionHandler);

		/// <param name="application">To be added.</param>
		/// <param name="shortcutItem">To be added.</param>
		/// <param name="completionHandler">To be added.</param>
		/// <summary>Called by the system when the user initiates a Home screen quick action, unless the interaction was handled in <see cref="UIKit.UIApplicationDelegate.WillFinishLaunching(UIKit.UIApplication,Foundation.NSDictionary)" /> or <see cref="UIKit.UIApplicationDelegate.DidFinishLaunching" />.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("application:performActionForShortcutItem:completionHandler:")]
		void PerformActionForShortcutItem (UIApplication application, UIApplicationShortcutItem shortcutItem, UIOperationHandler completionHandler);

		/// <param name="application">The <see cref="UIKit.UIApplication" /> singleton for the app.</param>
		/// <param name="userActivityType">The user activity identifier.</param>
		/// <summary>Informs the app that the user is attempting to continue a <paramref name="userActivityType" /> action for which data might not be available, and returns to notify the user that the app will continue the activity.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("application:willContinueUserActivityWithType:")]
		bool WillContinueUserActivity (UIApplication application, string userActivityType);

		/// <param name="application">To be added.</param>
		/// <param name="userActivity">To be added.</param>
		/// <summary>Informs the app that the <see cref="Foundation.NSUserActivity" /> object in <paramref name="userActivity" /> has been updated.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("application:didUpdateUserActivity:")]
		void UserActivityUpdated (UIApplication application, NSUserActivity userActivity);

		/// <param name="application">To be added.</param>
		/// <param name="extensionPointIdentifier">To be added.</param>
		/// <summary>Requests permission from the app to run app extensions based on the extension point identified by <paramref name="extensionPointIdentifier" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("application:shouldAllowExtensionPointIdentifier:")]
		bool ShouldAllowExtensionPointIdentifier (UIApplication application, NSString extensionPointIdentifier);

		/// <param name="application">To be added.</param>
		/// <param name="userInfo">To be added.</param>
		/// <param name="reply">To be added.</param>
		/// <summary>A watchkit extension has made a request.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("application:handleWatchKitExtensionRequest:reply:")]
		void HandleWatchKitExtensionRequest (UIApplication application, [NullAllowed] NSDictionary userInfo, Action<NSDictionary> reply);

		/// <param name="application">To be added.</param>
		/// <summary>The system calls this method when the developer's app should ask the user for access to HealthKit data.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("applicationShouldRequestHealthAuthorization:")]
		void ShouldRequestHealthAuthorization (UIApplication application);

		/// <param name="application">To be added.</param>
		/// <param name="cloudKitShareMetadata">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("application:userDidAcceptCloudKitShareWithMetadata:")]
		void UserDidAcceptCloudKitShare (UIApplication application, CKShareMetadata cloudKitShareMetadata);

		/// <param name="application">The application that created the intent.</param>
		/// <param name="intent">The intent.</param>
		/// <param name="completionHandler">A handler to run after the operation completes.</param>
		/// <summary>The system is requesting that the application handle the specified <paramref name="intent" />.</summary>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 14, 0, message: "Use 'GetHandlerForIntent' instead.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0, message: "Use 'GetHandlerForIntent' instead.")]
		[Export ("application:handleIntent:completionHandler:")]
		void HandleIntent (UIApplication application, INIntent intent, Action<INIntentResponse> completionHandler);

		[iOS (14, 0), TV (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("application:handlerForIntent:")]
		[return: NullAllowed]
		NSObject GetHandlerForIntent (UIApplication application, INIntent intent);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("application:configurationForConnectingSceneSession:options:")]
		UISceneConfiguration GetConfiguration (UIApplication application, UISceneSession connectingSceneSession, UISceneConnectionOptions options);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("application:didDiscardSceneSessions:")]
		void DidDiscardSceneSessions (UIApplication application, NSSet<UISceneSession> sceneSessions);

		[iOS (15, 0), TV (15, 0), MacCatalyst (15, 0)]
		[Export ("applicationShouldAutomaticallyLocalizeKeyCommands:")]
		bool ShouldAutomaticallyLocalizeKeyCommands (UIApplication application);
	}

	/// <summary>Class that identifies keyboard types to disallow.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Static]
	interface UIExtensionPointIdentifier {
		/// <summary>Represents the value associated with the constant UIApplicationKeyboardExtensionPointIdentifier</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIApplicationKeyboardExtensionPointIdentifier")]
		NSString Keyboard { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	interface UIBarItem : NSCoding, UIAppearance, UIAccessibility, UIAccessibilityIdentification {
		/// <summary>Whether this UIBarItem is enabled.</summary>
		///         <value>If <see langword="true" />,then this UIBarItem is enabled.</value>
		///         <remarks>To be added.</remarks>
		[Export ("enabled")]
		[Abstract]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[NullAllowed]
		[Export ("title", ArgumentSemantic.Copy)]
		[Abstract]
		string Title { get; set; }

		[NullAllowed]
		[Export ("image", ArgumentSemantic.Retain)]
		[Abstract]
		UIImage Image { get; set; }

		[Export ("imageInsets")]
		[Abstract]
		UIEdgeInsets ImageInsets { get; set; }

		[Export ("tag")]
		[Abstract]
		nint Tag { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed] // by default this property is null
		[Export ("landscapeImagePhone", ArgumentSemantic.Retain)]
		UIImage LandscapeImagePhone { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("landscapeImagePhoneInsets")]
		UIEdgeInsets LandscapeImagePhoneInsets { get; set; }

		[Export ("setTitleTextAttributes:forState:"), Internal]
		[Appearance]
		void _SetTitleTextAttributes ([NullAllowed] NSDictionary attributes, UIControlState state);

		[Export ("titleTextAttributesForState:"), Internal]
		[Appearance]
		[return: NullAllowed]
		NSDictionary _GetTitleTextAttributes (UIControlState state);

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("largeContentSizeImage", ArgumentSemantic.Strong)]
		UIImage LargeContentSizeImage { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("largeContentSizeImageInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets LargeContentSizeImageInsets { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIBarItem))]
	[DesignatedDefaultCtor]
	interface UIBarButtonItem : NSCoding
#if IOS
		, UISpringLoadedInteractionSupporting, UIPopoverPresentationControllerSourceItem
#endif
	 {
		[Export ("initWithImage:style:target:action:")]
		[PostGet ("Image")]
		[PostGet ("Target")]
		NativeHandle Constructor ([NullAllowed] UIImage image, UIBarButtonItemStyle style, [NullAllowed] NSObject target, [NullAllowed] Selector action);

		[Export ("initWithTitle:style:target:action:")]
		[PostGet ("Target")]
		NativeHandle Constructor ([NullAllowed] string title, UIBarButtonItemStyle style, [NullAllowed] NSObject target, [NullAllowed] Selector action);

		[Export ("initWithBarButtonSystemItem:target:action:")]
		[PostGet ("Target")]
		NativeHandle Constructor (UIBarButtonSystemItem systemItem, [NullAllowed] NSObject target, [NullAllowed] Selector action);

		[Export ("initWithCustomView:")]
		[PostGet ("CustomView")]
		NativeHandle Constructor (UIView customView);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithBarButtonSystemItem:primaryAction:")]
		NativeHandle Constructor (UIBarButtonSystemItem systemItem, [NullAllowed] UIAction primaryAction);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithPrimaryAction:")]
		NativeHandle Constructor ([NullAllowed] UIAction primaryAction);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithBarButtonSystemItem:menu:")]
		NativeHandle Constructor (UIBarButtonSystemItem systemItem, [NullAllowed] UIMenu menu);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithTitle:menu:")]
		NativeHandle Constructor ([NullAllowed] string title, [NullAllowed] UIMenu menu);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithImage:menu:")]
		NativeHandle Constructor ([NullAllowed] UIImage image, [NullAllowed] UIMenu menu);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("initWithPrimaryAction:menu:")]
		NativeHandle Constructor ([NullAllowed] UIAction primaryAction, [NullAllowed] UIMenu menu);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("initWithBarButtonSystemItem:primaryAction:menu:")]
		NativeHandle Constructor (UIBarButtonSystemItem systemItem, [NullAllowed] UIAction primaryAction, [NullAllowed] UIMenu menu);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("initWithTitle:image:target:action:menu:")]
		NativeHandle Constructor ([NullAllowed] string title, [NullAllowed] UIImage image, [NullAllowed] NSObject target, [NullAllowed] Selector action, [NullAllowed] UIMenu menu);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Static]
		[Export ("fixedSpaceItemOfWidth:")]
		UIBarButtonItem GetFixedSpaceItem (nfloat width);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Static]
		[Export ("flexibleSpaceItem")]
		UIBarButtonItem FlexibleSpaceItem { get; }

		[Export ("style")]
		UIBarButtonItemStyle Style { get; set; }

		[Export ("width")]
		nfloat Width { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("possibleTitles", ArgumentSemantic.Copy)]
		NSSet PossibleTitles { get; set; }

		[Export ("customView", ArgumentSemantic.Retain), NullAllowed]
		UIView CustomView { get; set; }

		[Export ("action")]
		[NullAllowed]
		Selector Action { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("target", ArgumentSemantic.Assign)]
		NSObject Target { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed]
		[Export ("primaryAction", ArgumentSemantic.Copy)]
		UIAction PrimaryAction { get; set; }

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed]
		[Export ("menu", ArgumentSemantic.Copy)]
		UIMenu Menu { get; set; }

		[TV (17, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("changesSelectionAsPrimaryAction")]
		bool ChangesSelectionAsPrimaryAction { get; set; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("selected")]
		bool Selected { [Bind ("isSelected")] get; set; }

		/// <summary>Allows control over whether a UIBarButtonItem is enabled or disabled.</summary>
		///         <value>True if the UIBarButtonItem is enabled. False if it is disabled.</value>
		///         <remarks>If a UIBarButtonItem is enabled, it can be interacted with. If it is disabled, it still appears, but cannot be interacted with.</remarks>
		[Export ("enabled")]
		[Override]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[NullAllowed]
		[Export ("title", ArgumentSemantic.Copy)]
		[Override]
		string Title { get; set; }

		[NullAllowed]
		[Export ("image", ArgumentSemantic.Retain)]
		[Override]
		UIImage Image { get; set; }

		[Export ("imageInsets")]
		[Override]
		UIEdgeInsets ImageInsets { get; set; }

		[Export ("tag")]
		[Override]
		nint Tag { get; set; }

		/// <summary>The color used for tinting.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("tintColor", ArgumentSemantic.Retain), NullAllowed]
		[Appearance]
		UIColor TintColor { get; set; }

		[Export ("initWithImage:landscapeImagePhone:style:target:action:"), PostGet ("Image")]
#if !TVOS
		[PostGet ("LandscapeImagePhone")]
#endif
		[PostGet ("Target")]
		NativeHandle Constructor ([NullAllowed] UIImage image, [NullAllowed] UIImage landscapeImagePhone, UIBarButtonItemStyle style, [NullAllowed] NSObject target, [NullAllowed] Selector action);

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Specifies the background UIImage to use for the specified UIControlState and UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setBackgroundImage:forState:barMetrics:")]
		[Appearance]
		void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarMetrics barMetrics);

		/// <param name="state">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>The background image for the specified UIControlState and UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundImageForState:barMetrics:")]
		[Appearance]
		UIImage GetBackgroundImage (UIControlState state, UIBarMetrics barMetrics);

		/// <param name="adjustment">To be added.</param>
		/// <param name="forBarMetrics">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>
		///           <para id="tool-remark">This member participates in the <see cref="UIKit.UIAppearance" /> styling system.  See the <see cref="UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="UIKit.UIBarButtonItem.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
		///         </remarks>
		[Export ("setBackgroundVerticalPositionAdjustment:forBarMetrics:")]
		[Appearance]
		void SetBackgroundVerticalPositionAdjustment (nfloat adjustment, UIBarMetrics forBarMetrics);

		/// <param name="forBarMetrics">To be added.</param>
		/// <summary>The background's vertical position adjustment for the specified UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundVerticalPositionAdjustmentForBarMetrics:")]
		[Appearance]
		nfloat GetBackgroundVerticalPositionAdjustment (UIBarMetrics forBarMetrics);

		/// <param name="adjustment">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Specifies the adjustment of the title's position for the specified UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setTitlePositionAdjustment:forBarMetrics:")]
		[Appearance]
		void SetTitlePositionAdjustment (UIOffset adjustment, UIBarMetrics barMetrics);

		/// <param name="barMetrics">To be added.</param>
		/// <summary>The title's position adjustment for the specified UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("titlePositionAdjustmentForBarMetrics:")]
		[Appearance]
		UIOffset GetTitlePositionAdjustment (UIBarMetrics barMetrics);

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="forState">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Specifies the UIImage to be used as a background for the specified UIControlState and UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setBackButtonBackgroundImage:forState:barMetrics:")]
		[Appearance]
		void SetBackButtonBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState forState, UIBarMetrics barMetrics);

		/// <param name="forState">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>The background image used for the back button.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("backButtonBackgroundImageForState:barMetrics:")]
		[Appearance]
		UIImage GetBackButtonBackgroundImage (UIControlState forState, UIBarMetrics barMetrics);

		/// <param name="adjustment">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Specifies the back button's title's position adjustment for the specified UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setBackButtonTitlePositionAdjustment:forBarMetrics:")]
		[Appearance]
		void SetBackButtonTitlePositionAdjustment (UIOffset adjustment, UIBarMetrics barMetrics);

		/// <param name="barMetrics">To be added.</param>
		/// <summary>The back button's title's position adjustment for the specified UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("backButtonTitlePositionAdjustmentForBarMetrics:")]
		[Appearance]
		UIOffset GetBackButtonTitlePositionAdjustment (UIBarMetrics barMetrics);

		/// <param name="adjustment">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>
		///           <para id="tool-remark">This member participates in the <see cref="UIKit.UIAppearance" /> styling system.  See the <see cref="UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="UIKit.UIBarButtonItem.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:")]
		[Appearance]
		void SetBackButtonBackgroundVerticalPositionAdjustment (nfloat adjustment, UIBarMetrics barMetrics);

		/// <param name="barMetrics">To be added.</param>
		/// <summary>The back button's vertical position offset for the specified UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:")]
		[Appearance]
		nfloat GetBackButtonBackgroundVerticalPositionAdjustment (UIBarMetrics barMetrics);

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <param name="style">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Specifies the background image to use for the specified UIControlState, UIBarButtonItemStyle, and UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("setBackgroundImage:forState:style:barMetrics:")]
		void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarButtonItemStyle style, UIBarMetrics barMetrics);

		/// <param name="state">To be added.</param>
		/// <param name="style">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>The background image for the specified UIControlState, UIBarButtonItemStyle, and UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("backgroundImageForState:style:barMetrics:")]
		UIImage GetBackgroundImage (UIControlState state, UIBarButtonItemStyle style, UIBarMetrics barMetrics);

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("buttonGroup", ArgumentSemantic.Weak)]
		UIBarButtonItemGroup ButtonGroup { get; }

		[TV (17, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("preferredMenuElementOrder", ArgumentSemantic.Assign)]
		UIContextMenuConfigurationElementOrder PreferredMenuElementOrder { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("hidden")]
		bool Hidden { [Bind ("isHidden")] get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("menuRepresentation", ArgumentSemantic.Copy)]
		[NullAllowed]
		UIMenuElement MenuRepresentation { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("creatingFixedGroup")]
		UIBarButtonItemGroup CreatingFixedGroup { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("creatingMovableGroupWithCustomizationIdentifier:")]
		UIBarButtonItemGroup CreatingMovableGroup (string customizationIdentifier);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("creatingOptionalGroupWithCustomizationIdentifier:inDefaultCustomization:")]
		UIBarButtonItemGroup CreatingOptionalGroup (string customizationIdentifier, bool inDefaultCustomization);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("addSymbolEffect:")]
		void AddSymbolEffect (NSSymbolEffect symbolEffect);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("addSymbolEffect:options:")]
		void AddSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("addSymbolEffect:options:animated:")]
		void AddSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options, bool animated);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeSymbolEffectOfType:options:")]
		void RemoveSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeSymbolEffectOfType:options:animated:")]
		void RemoveSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options, bool animated);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeAllSymbolEffects")]
		void RemoveAllSymbolEffects ();

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeAllSymbolEffectsWithOptions:")]
		void RemoveAllSymbolEffects (NSSymbolEffectOptions options);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeAllSymbolEffectsWithOptions:animated:")]
		void RemoveAllSymbolEffects (NSSymbolEffectOptions options, bool animated);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("setSymbolImage:withContentTransition:")]
		void SetSymbolImage (UIImage symbolImage, NSSymbolContentTransition transition);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("setSymbolImage:withContentTransition:options:")]
		void SetSymbolImage (UIImage symbolImage, NSSymbolContentTransition transition, NSSymbolEffectOptions options);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("symbolAnimationEnabled")]
		bool SymbolAnimationEnabled { [Bind ("isSymbolAnimationEnabled")] get; set; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeSymbolEffectOfType:")]
		void RemoveSymbolEffect (NSSymbolEffect symbolEffect);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIBarButtonItemGroup : NSCoding {
		[DesignatedInitializer]
		[Export ("initWithBarButtonItems:representativeItem:")]
		NativeHandle Constructor (UIBarButtonItem [] barButtonItems, [NullAllowed] UIBarButtonItem representativeItem);

		[Export ("barButtonItems", ArgumentSemantic.Copy)]
		UIBarButtonItem [] BarButtonItems { get; set; }

		[NullAllowed, Export ("representativeItem", ArgumentSemantic.Strong)]
		UIBarButtonItem RepresentativeItem { get; set; }

		/// <summary>Gets a Boolean value that tells whether the representative item is being displayed.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("displayingRepresentativeItem")]
		bool DisplayingRepresentativeItem { [Bind ("isDisplayingRepresentativeItem")] get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("alwaysAvailable")]
		bool AlwaysAvailable { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("hidden")]
		bool Hidden { [Bind ("isHidden")] get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("menuRepresentation", ArgumentSemantic.Copy)]
		[NullAllowed]
		UIMenuElement MenuRepresentation { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("optionalGroupWithCustomizationIdentifier:inDefaultCustomization:representativeItem:items:")]
		UIBarButtonItemGroup GetOptionalGroup (string customizationIdentifier, bool inDefaultCustomization, [NullAllowed] UIBarButtonItem representativeItem, UIBarButtonItem [] items);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("movableGroupWithCustomizationIdentifier:representativeItem:items:")]
		UIBarButtonItemGroup GetMovableGroup (string customizationIdentifier, [NullAllowed] UIBarButtonItem representativeItem, UIBarButtonItem [] items);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("fixedGroupWithRepresentativeItem:items:")]
		UIBarButtonItemGroup GetFixedGroup ([NullAllowed] UIBarButtonItem representativeItem, UIBarButtonItem [] items);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UICollectionReusableView {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("reuseIdentifier", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSString ReuseIdentifier { get; }

		[RequiresSuper]
		[Export ("prepareForReuse")]
		void PrepareForReuse ();

		[Export ("applyLayoutAttributes:")]
		void ApplyLayoutAttributes ([NullAllowed] UICollectionViewLayoutAttributes layoutAttributes);

		[Export ("willTransitionFromLayout:toLayout:")]
		void WillTransition (UICollectionViewLayout oldLayout, UICollectionViewLayout newLayout);

		[Export ("didTransitionFromLayout:toLayout:")]
		void DidTransition (UICollectionViewLayout oldLayout, UICollectionViewLayout newLayout);

		[MacCatalyst (13, 1)]
		[Export ("preferredLayoutAttributesFittingAttributes:")]
		UICollectionViewLayoutAttributes PreferredLayoutAttributesFittingAttributes (UICollectionViewLayoutAttributes layoutAttributes);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIScrollView))]
	// Objective-C exception thrown.  Name: NSInvalidArgumentException Reason: UICollectionView must be initialized with a non-nil layout parameter
	[DisableDefaultCtor]
	interface UICollectionView : NSCoding, UIDataSourceTranslating
#if IOS
		, UISpringLoadedInteractionSupporting
#endif
	{
		[DesignatedInitializer]
		[Export ("initWithFrame:collectionViewLayout:"), PostGet ("CollectionViewLayout")]
		NativeHandle Constructor (CGRect frame, UICollectionViewLayout layout);

		[Export ("collectionViewLayout", ArgumentSemantic.Retain)]
		UICollectionViewLayout CollectionViewLayout { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUICollectionViewDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUICollectionViewDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUICollectionViewDelegate Delegate { get; set; }

		[Export ("dataSource", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakDataSource { get; set; }

		/// <summary>The <see cref="UIKit.UICollectionViewDataSource" /> responsible for populating this <see cref="UIKit.UICollectionView" />.</summary>
		///         <value>
		///           <para>The default value is <see langword="null" />.</para>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>    </remarks>
		///         <altmember cref="UIKit.UICollectionView.Source" />
		[Wrap ("WeakDataSource")]
		IUICollectionViewDataSource DataSource { get; set; }

		[Export ("backgroundView", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView BackgroundView { get; set; }

		[Export ("allowsSelection")]
		bool AllowsSelection { get; set; }

		[Export ("allowsMultipleSelection")]
		bool AllowsMultipleSelection { get; set; }

		[Export ("registerClass:forCellWithReuseIdentifier:"), Internal]
		void RegisterClassForCell (IntPtr /* Class */cellClass, NSString reuseIdentifier);

		[Export ("registerNib:forCellWithReuseIdentifier:")]
		void RegisterNibForCell ([NullAllowed] UINib nib, NSString reuseIdentifier);

		[Export ("registerClass:forSupplementaryViewOfKind:withReuseIdentifier:"), Protected]
		void RegisterClassForSupplementaryView (IntPtr /*Class*/ viewClass, NSString kind, NSString reuseIdentifier);

		[Export ("registerNib:forSupplementaryViewOfKind:withReuseIdentifier:")]
		void RegisterNibForSupplementaryView ([NullAllowed] UINib nib, NSString kind, NSString reuseIdentifier);

		[Export ("dequeueReusableCellWithReuseIdentifier:forIndexPath:")]
		UICollectionReusableView DequeueReusableCell (NSString reuseIdentifier, NSIndexPath indexPath);

		[Export ("dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:")]
		UICollectionReusableView DequeueReusableSupplementaryView (NSString kind, NSString identifier, NSIndexPath indexPath);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("dequeueConfiguredReusableCellWithRegistration:forIndexPath:item:")]
		UICollectionViewCell DequeueConfiguredReusableCell (UICollectionViewCellRegistration registration, NSIndexPath indexPath, NSObject item);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("dequeueConfiguredReusableSupplementaryViewWithRegistration:forIndexPath:")]
		UICollectionReusableView DequeueConfiguredReusableSupplementaryView (UICollectionViewSupplementaryRegistration registration, NSIndexPath indexPath);

		[Export ("indexPathsForSelectedItems")]
		[return: NullAllowed]
		NSIndexPath [] GetIndexPathsForSelectedItems ();

		[Export ("selectItemAtIndexPath:animated:scrollPosition:")]
		void SelectItem ([NullAllowed] NSIndexPath indexPath, bool animated, UICollectionViewScrollPosition scrollPosition);

		[Export ("deselectItemAtIndexPath:animated:")]
		void DeselectItem (NSIndexPath indexPath, bool animated);

		[Export ("reloadData")]
		void ReloadData ();

		[Export ("setCollectionViewLayout:animated:")]
		void SetCollectionViewLayout (UICollectionViewLayout layout, bool animated);

		[Export ("numberOfSections")]
		nint NumberOfSections ();

		/// <param name="section">The index of the section.</param>
		/// <summary>Returns the number of items in the specified section.</summary>
		/// <returns>The number of items in the specified section.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("numberOfItemsInSection:")]
		nint NumberOfItemsInSection (nint section);

		[Export ("layoutAttributesForItemAtIndexPath:")]
		[return: NullAllowed]
		UICollectionViewLayoutAttributes GetLayoutAttributesForItem (NSIndexPath indexPath);

		[Export ("layoutAttributesForSupplementaryElementOfKind:atIndexPath:")]
		[return: NullAllowed]
		UICollectionViewLayoutAttributes GetLayoutAttributesForSupplementaryElement (NSString elementKind, NSIndexPath indexPath);

		[Export ("indexPathForItemAtPoint:")]
		[return: NullAllowed]
		NSIndexPath IndexPathForItemAtPoint (CGPoint point);

		[Export ("indexPathForCell:")]
		[return: NullAllowed]
		NSIndexPath IndexPathForCell (UICollectionViewCell cell);

		[Export ("cellForItemAtIndexPath:")]
		[return: NullAllowed]
		UICollectionViewCell CellForItem (NSIndexPath indexPath);

		[Export ("visibleCells")]
		UICollectionViewCell [] VisibleCells { get; }

		[Export ("indexPathsForVisibleItems")]
		NSIndexPath [] IndexPathsForVisibleItems { get; }

		[Export ("scrollToItemAtIndexPath:atScrollPosition:animated:")]
		void ScrollToItem (NSIndexPath indexPath, UICollectionViewScrollPosition scrollPosition, bool animated);

		[Export ("insertSections:")]
		void InsertSections (NSIndexSet sections);

		[Export ("deleteSections:")]
		void DeleteSections (NSIndexSet sections);

		[Export ("reloadSections:")]
		void ReloadSections (NSIndexSet sections);

		/// <param name="section">The index of the section to move.</param>
		/// <param name="newSection">The new index of thesection.</param>
		/// <summary>Moves a section from one location to another within the <see cref="UIKit.UICollectionView" />, animating as necessary.</summary>
		/// <remarks>
		///           <para>If this method is called within the <see cref="System.Action" /> delegate passed to the <see cref="UIKit.UICollectionView.PerformBatchUpdates(System.Action,UIKit.UICompletionHandler)" /> method, the animation will occur simultaneously with those of other manipulations of the <see cref="UIKit.UICollectionView" />.</para>
		///         </remarks>
		[Export ("moveSection:toSection:")]
		void MoveSection (nint section, nint newSection);

		[Export ("insertItemsAtIndexPaths:")]
		void InsertItems (NSIndexPath [] indexPaths);

		[Export ("deleteItemsAtIndexPaths:")]
		void DeleteItems (NSIndexPath [] indexPaths);

		[Export ("reloadItemsAtIndexPaths:")]
		void ReloadItems (NSIndexPath [] indexPaths);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("reconfigureItemsAtIndexPaths:")]
		void ReconfigureItems (NSIndexPath [] indexPaths);

		[Export ("moveItemAtIndexPath:toIndexPath:")]
		void MoveItem (NSIndexPath indexPath, NSIndexPath newIndexPath);

		[Export ("performBatchUpdates:completion:")]
		[Async (XmlDocs = """
			<param name="updates">An  delegate specifying the updates to apply.</param>
			<summary>Applies and simultaneously animates multiple manipulations of the <see cref="UIKit.UICollectionView" />.</summary>
			<returns>
			          <para>A task that represents the asynchronous PerformBatchUpdates operation.   The value of the TResult parameter is a <see cref="UIKit.UICompletionHandler" />.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""")]
		void PerformBatchUpdates ([NullAllowed] Action updates, [NullAllowed] UICompletionHandler completed);

		//
		// 7.0
		//
		[Export ("startInteractiveTransitionToCollectionViewLayout:completion:")]
		[Async (ResultTypeName = "UICollectionViewTransitionResult", XmlDocs = """
			<param name="newCollectionViewLayout">The new layout object for the collected views.</param>
			<summary>Changes the UICollectionView's layout using an interactive transition.</summary>
			<returns>
			          <para>A task that represents the asynchronous <see cref="UIKit.UICollectionView.StartInteractiveTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayoutInteractiveTransitionCompletion)" /> operation.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""",
			XmlDocsWithOutParameter = """
			<param name="newCollectionViewLayout">The new layout object for the collected views.</param>
			<param name="result">Action executed when the layout transition finishes.</param>
			<summary>Asynchronously starts an interactive transition to the new layout, with a reference to the result.</summary>
			<returns>A task that represents the asynchronous <see cref="UIKit.UICollectionView.StartInteractiveTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayoutInteractiveTransitionCompletion)" /> operation.</returns>
			<remarks>To be added.</remarks>
			""")]
		UICollectionViewTransitionLayout StartInteractiveTransition (UICollectionViewLayout newCollectionViewLayout,
										 [NullAllowed] UICollectionViewLayoutInteractiveTransitionCompletion completion);

		[Export ("setCollectionViewLayout:animated:completion:")]
		[Async (XmlDocs = """
			<param name="layout">The new .</param>
			<param name="animated"> if the transition to the new layout should be animated.</param>
			<summary>Sets the layout used by this <see cref="UIKit.UICollectionView" />.</summary>
			<returns>
			          <para>A task that represents the asynchronous SetCollectionViewLayout operation.   The value of the TResult parameter is a <see cref="UIKit.UICompletionHandler" />.</para>
			        </returns>
			<remarks>
			          <para copied="true">The SetCollectionViewLayoutAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		void SetCollectionViewLayout (UICollectionViewLayout layout, bool animated, [NullAllowed] UICompletionHandler completion);

		[Export ("finishInteractiveTransition")]
		void FinishInteractiveTransition ();

		[Export ("cancelInteractiveTransition")]
		void CancelInteractiveTransition ();

		[MacCatalyst (13, 1)]
		[Export ("beginInteractiveMovementForItemAtIndexPath:")]
		bool BeginInteractiveMovementForItem (NSIndexPath indexPath);

		[MacCatalyst (13, 1)]
		[Export ("updateInteractiveMovementTargetPosition:")]
		void UpdateInteractiveMovement (CGPoint targetPosition);

		[MacCatalyst (13, 1)]
		[Export ("endInteractiveMovement")]
		void EndInteractiveMovement ();

		[MacCatalyst (13, 1)]
		[Export ("cancelInteractiveMovement")]
		void CancelInteractiveMovement ();


		[MacCatalyst (13, 1)]
		[return: NullAllowed]
		[Export ("supplementaryViewForElementKind:atIndexPath:")]
		UICollectionReusableView GetSupplementaryView (NSString elementKind, NSIndexPath indexPath);

		[MacCatalyst (13, 1)]
		[Export ("visibleSupplementaryViewsOfKind:")]
		UICollectionReusableView [] GetVisibleSupplementaryViews (NSString elementKind);

		[MacCatalyst (13, 1)]
		[Export ("indexPathsForVisibleSupplementaryElementsOfKind:")]
		NSIndexPath [] GetIndexPathsForVisibleSupplementaryElements (NSString elementKind);

		[MacCatalyst (13, 1)]
		[Export ("remembersLastFocusedIndexPath")]
		bool RemembersLastFocusedIndexPath { get; set; }

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("selectionFollowsFocus")]
		bool SelectionFollowsFocus { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("allowsFocus")]
		bool AllowsFocus { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("allowsFocusDuringEditing")]
		bool AllowsFocusDuringEditing { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("prefetchDataSource", ArgumentSemantic.Weak)]
		IUICollectionViewDataSourcePrefetching PrefetchDataSource { get; set; }

		/// <summary>Gets or sets whether prefecting is enabled. If <see langword="true" />, <see cref="UIKit.UICollectionView.PrefetchDataSource" /> must be set.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("prefetchingEnabled")]
		bool PrefetchingEnabled { [Bind ("isPrefetchingEnabled")] get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("dragDelegate", ArgumentSemantic.Weak)]
		IUICollectionViewDragDelegate DragDelegate { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("dropDelegate", ArgumentSemantic.Weak)]
		IUICollectionViewDropDelegate DropDelegate { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("dragInteractionEnabled")]
		bool DragInteractionEnabled { get; set; }

		[TV (17, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("contextMenuInteraction")]
		UIContextMenuInteraction ContextMenuInteraction { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("reorderingCadence", ArgumentSemantic.Assign)]
		UICollectionViewReorderingCadence ReorderingCadence { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("hasUncommittedUpdates")]
		bool HasUncommittedUpdates { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hasActiveDrag")]
		bool HasActiveDrag { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hasActiveDrop")]
		bool HasActiveDrop { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("allowsSelectionDuringEditing")]
		bool AllowsSelectionDuringEditing { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("allowsMultipleSelectionDuringEditing")]
		bool AllowsMultipleSelectionDuringEditing { get; set; }

		[TV (16, 0), iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("selfSizingInvalidation", ArgumentSemantic.Assign)]
		UICollectionViewSelfSizingInvalidation SelfSizingInvalidation { get; set; }

		[TV (18, 0), Mac (15, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("indexPathForSupplementaryView:")]
		[return: NullAllowed]
		NSIndexPath GetIndexPathForSupplementaryView (UICollectionReusableView supplementaryView);
	}

	interface IUICollectionViewDataSourcePrefetching { }

	/// <summary>Interface defining methods for collection view data source's that may prefetch data.</summary>
	/// <remarks>To be added.</remarks>
	[Protocol]
	[MacCatalyst (13, 1)]
	interface UICollectionViewDataSourcePrefetching {

		/// <param name="collectionView">To be added.</param>
		/// <param name="indexPaths">To be added.</param>
		/// <summary>Developers override this method to prefetch the data at the specified <paramref name="indexPaths" />.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("collectionView:prefetchItemsAtIndexPaths:")]
		void PrefetchItems (UICollectionView collectionView, NSIndexPath [] indexPaths);

		/// <param name="collectionView">To be added.</param>
		/// <param name="indexPaths">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:cancelPrefetchingForItemsAtIndexPaths:")]
		void CancelPrefetching (UICollectionView collectionView, NSIndexPath [] indexPaths);
	}

	//
	// Combined version of UICollectionViewDataSource, UICollectionViewDelegate
	//
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UICollectionViewSource" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UICollectionViewSource" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UICollectionViewSource" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UICollectionViewSource_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Model]
	[BaseType (typeof (NSObject))]
	[Protocol (IsInformal = true)]
	interface UICollectionViewSource : UICollectionViewDataSource, UICollectionViewDelegate {

	}

	interface IUICollectionViewDataSource { }

	/// <include file="../docs/api/UIKit/UICollectionViewDataSource.xml" path="/Documentation/Docs[@DocId='T:UIKit.UICollectionViewDataSource']/*" />
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UICollectionViewDataSource {
		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="section">To be added.</param>
		/// <summary>Returns the number of items in the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("collectionView:numberOfItemsInSection:")]
		nint GetItemsCount (UICollectionView collectionView, nint section);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Gets a cell.</summary>
		/// <returns>A collection view cell.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("collectionView:cellForItemAtIndexPath:")]
		UICollectionViewCell GetCell (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <summary>The number of sections in this UICollectionViewDataSource.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("numberOfSectionsInCollectionView:")]
		nint NumberOfSections (UICollectionView collectionView);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="elementKind">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>The reusable view used for the supplementary element at the specified indexPath.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:viewForSupplementaryElementOfKind:atIndexPath:")]
		UICollectionReusableView GetViewForSupplementaryElement (UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("collectionView:canMoveItemAtIndexPath:")]
		bool CanMoveItem (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="sourceIndexPath">To be added.</param>
		/// <param name="destinationIndexPath">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("collectionView:moveItemAtIndexPath:toIndexPath:")]
		void MoveItem (UICollectionView collectionView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <summary>Requests the index titles for the items in the specified collection view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[return: NullAllowed]
		[Export ("indexTitlesForCollectionView:")]
		string [] GetIndexTitles (UICollectionView collectionView);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="title">The title of the item.</param>
		/// <param name="atIndex">The index into the index titles for which to retrieve the index path.</param>
		/// <summary>Requests the index path for the item in the collection view at the specified index with the specified title.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[return: NullAllowed]
		[Export ("collectionView:indexPathForIndexTitle:atIndex:")]
		NSIndexPath GetIndexPath (UICollectionView collectionView, string title, nint atIndex);
	}

	interface IUICollectionViewDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UICollectionViewDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UICollectionViewDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UICollectionViewDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UICollectionViewDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Model]
	[Protocol]
	[BaseType (typeof (NSObject))]
	interface UICollectionViewDelegate : UIScrollViewDelegate {
		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Whether the cell at the specified indexPath should allow itself to be highlighted.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:shouldHighlightItemAtIndexPath:")]
		bool ShouldHighlightItem (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Indicates that the cell at the specified indexPath has been highlighted.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:didHighlightItemAtIndexPath:")]
		void ItemHighlighted (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Indicates that the cell at the specified indexPath has been unhighlighted.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:didUnhighlightItemAtIndexPath:")]
		void ItemUnhighlighted (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Whether the cell at the specified indexPath allows itself to be selected.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:shouldSelectItemAtIndexPath:")]
		bool ShouldSelectItem (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Whether the cell at the specified indexPath should allow itself to be deselected.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:shouldDeselectItemAtIndexPath:")]
		bool ShouldDeselectItem (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Indicates that the cell at the specified indexPath has been selected.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:didSelectItemAtIndexPath:")]
		void ItemSelected (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Indicates that the cell at the specified indexPath has been deselected.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:didDeselectItemAtIndexPath:")]
		void ItemDeselected (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="cell">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>The <paramref name="cell" /> is about to be displayed.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("collectionView:willDisplayCell:forItemAtIndexPath:")]
		void WillDisplayCell (UICollectionView collectionView, UICollectionViewCell cell, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="view">To be added.</param>
		/// <param name="elementKind">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>The supplementary <paramref name="view" /> is about to be displayed.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:")]
		void WillDisplaySupplementaryView (UICollectionView collectionView, UICollectionReusableView view, string elementKind, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="cell">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Indicates that the cell at the specified indexPath has been removed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:didEndDisplayingCell:forItemAtIndexPath:")]
		void CellDisplayingEnded (UICollectionView collectionView, UICollectionViewCell cell, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="view">To be added.</param>
		/// <param name="elementKind">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Indicates that the supplementary view at the specified indexPath has been removed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:")]
		void SupplementaryViewDisplayingEnded (UICollectionView collectionView, UICollectionReusableView view, NSString elementKind, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Whether the cell at the specified indexPath should show an Action menu.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Export ("collectionView:shouldShowMenuForItemAtIndexPath:")]
		bool ShouldShowMenu (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="action">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <param name="sender">To be added.</param>
		/// <summary>Whether the cell at the specified <paramref name="indexPath" /> supports the specified action.</summary>
		/// <returns>The default value is <see langword="false" />.</returns>
		/// <remarks>
		///           <para>This method is called after <see cref="UIKit.UICollectionViewDelegate_Extensions.ShouldShowMenu(UIKit.IUICollectionViewDelegate,UIKit.UICollectionView,Foundation.NSIndexPath)" /> and allows the developer to remove particular menu items from the displayed editing menu.</para>
		///         </remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Export ("collectionView:canPerformAction:forItemAtIndexPath:withSender:")]
		bool CanPerformAction (UICollectionView collectionView, Selector action, NSIndexPath indexPath, NSObject sender);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="action">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <param name="sender">To be added.</param>
		/// <summary>Whether the cell at the specified indexPath supports the specified Copy or Paste action.</summary>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Export ("collectionView:performAction:forItemAtIndexPath:withSender:")]
		void PerformAction (UICollectionView collectionView, Selector action, NSIndexPath indexPath, NSObject sender);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="fromLayout">To be added.</param>
		/// <param name="toLayout">To be added.</param>
		/// <summary>The UICollectionViewTransitionLayout to be used when moving from the specified fromLayout to the toLayout.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:transitionLayoutForOldLayout:newLayout:")]
		UICollectionViewTransitionLayout TransitionLayout (UICollectionView collectionView, UICollectionViewLayout fromLayout, UICollectionViewLayout toLayout);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="originalIndexPath">To be added.</param>
		/// <param name="proposedIndexPath">To be added.</param>
		/// <summary>When overridden, allows the developer to modify the final location of a moved item. (For instance, to disallow a move to a particular <paramref name="proposedIndexPath" />.)</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 15, 0, message: "Use 'GetTargetIndexPathForMoveOfItemFromOriginalIndexPath' instead.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Use 'GetTargetIndexPathForMoveOfItemFromOriginalIndexPath' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Use 'GetTargetIndexPathForMoveOfItemFromOriginalIndexPath' instead.")]
		[Export ("collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:")]
		NSIndexPath GetTargetIndexPathForMove (UICollectionView collectionView, NSIndexPath originalIndexPath, NSIndexPath proposedIndexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="proposedContentOffset">To be added.</param>
		/// <summary>When overridden, allows the developer to modify the content offset for layout and animation changes.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("collectionView:targetContentOffsetForProposedContentOffset:")]
		CGPoint GetTargetContentOffset (UICollectionView collectionView, CGPoint proposedContentOffset);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("collectionView:canEditItemAtIndexPath:")]
		bool CanEditItem (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The <see cref="UIKit.UICollectionView" /> is associated with <c>this</c>.</param>
		/// <param name="indexPath">The <see cref="Foundation.NSIndexPath" /> of the item being checked.</param>
		/// <summary>Whether the item at <paramref name="indexPath" /> can be focused.</summary>
		/// <returns>Returns <see langword="true" /> if the item can be focused.</returns>
		/// <remarks>
		///           <para>If this method is not implemented, the item's <see cref="UIKit.UIView.CanBecomeFocused" /> property will be checked.</para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Export ("collectionView:canFocusItemAtIndexPath:")]
		bool CanFocusItem (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="context">To be added.</param>
		/// <summary>When overridden, allows the developer to prevent the focus change specified in <paramref name="context" />.</summary>
		/// <returns>
		///           <see langword="true" /> if the focus specified in <paramref name="context" /> is allowed.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("collectionView:shouldUpdateFocusInContext:")]
		bool ShouldUpdateFocus (UICollectionView collectionView, UICollectionViewFocusUpdateContext context);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="context">Metadata for the focus change.</param>
		/// <param name="coordinator">The <see cref="UIKit.UIFocusAnimationController" /> coordinating the focus-change animations.</param>
		/// <summary>Indicates that the focus changed as detailed in the <paramref name="context" />.</summary>
		/// <remarks>
		///           <para>The values of <see cref="UIKit.UICollectionViewFocusUpdateContext.PreviouslyFocusedIndexPath" /> and <see cref="UIKit.UICollectionViewFocusUpdateContext.NextFocusedIndexPath" /> may be <see langword="null" /> if focus was previously not within, or just departed, the <paramref name="collectionView" />.</para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Export ("collectionView:didUpdateFocusInContext:withAnimationCoordinator:")]
		void DidUpdateFocus (UICollectionView collectionView, UICollectionViewFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <summary>When overridden, allows the developer to specify the item that should initially receive focus.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>The value returned by this method will be ignored on re-entry if the <paramref name="collectionView" /> object's <see cref="UIKit.UICollectionView.RemembersLastFocusedIndexPath" /> is <see langword="true" />. </para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Export ("indexPathForPreferredFocusedViewInCollectionView:")]
		[return: NullAllowed]
		NSIndexPath GetIndexPathForPreferredFocusedView (UICollectionView collectionView);

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("collectionView:selectionFollowsFocusForItemAtIndexPath:")]
		bool GetSelectionFollowsFocusForItem (UICollectionView collectionView, NSIndexPath indexPath);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("collectionView:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:")]
		NSIndexPath GetTargetIndexPathForMoveOfItemFromOriginalIndexPath (UICollectionView collectionView, NSIndexPath originalIndexPath, NSIndexPath currentIndexPath, NSIndexPath proposedIndexPath);

		/// <param name="collectionView">The collection view that originated the request.</param>
		/// <param name="indexPath">The index path to the item.</param>
		/// <param name="context">The spring-loaded interaction context.</param>
		/// <summary>Method that is called to indicate whether the identified item should springload in the specified context.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("collectionView:shouldSpringLoadItemAtIndexPath:withContext:")]
		bool ShouldSpringLoadItem (UICollectionView collectionView, NSIndexPath indexPath, IUISpringLoadedInteractionContext context);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("collectionView:shouldBeginMultipleSelectionInteractionAtIndexPath:")]
		bool ShouldBeginMultipleSelectionInteraction (UICollectionView collectionView, NSIndexPath indexPath);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("collectionView:didBeginMultipleSelectionInteractionAtIndexPath:")]
		void DidBeginMultipleSelectionInteraction (UICollectionView collectionView, NSIndexPath indexPath);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("collectionViewDidEndMultipleSelectionInteraction:")]
		void DidEndMultipleSelectionInteraction (UICollectionView collectionView);

		[Deprecated (PlatformName.iOS, 16, 0)]
		[Deprecated (PlatformName.MacCatalyst, 16, 0)]
		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("collectionView:contextMenuConfigurationForItemAtIndexPath:point:")]
		[return: NullAllowed]
		UIContextMenuConfiguration GetContextMenuConfiguration (UICollectionView collectionView, NSIndexPath indexPath, CGPoint point);

		[Deprecated (PlatformName.iOS, 16, 0)]
		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 16, 0)]
		[Export ("collectionView:previewForHighlightingContextMenuWithConfiguration:")]
		[return: NullAllowed]
		UITargetedPreview GetPreviewForHighlightingContextMenu (UICollectionView collectionView, UIContextMenuConfiguration configuration);

		[Deprecated (PlatformName.iOS, 16, 0)]
		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 16, 0)]
		[Export ("collectionView:previewForDismissingContextMenuWithConfiguration:")]
		[return: NullAllowed]
		UITargetedPreview GetPreviewForDismissingContextMenu (UICollectionView collectionView, UIContextMenuConfiguration configuration);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("collectionView:willPerformPreviewActionForMenuWithConfiguration:animator:")]
		void WillPerformPreviewAction (UICollectionView collectionView, UIContextMenuConfiguration configuration, IUIContextMenuInteractionCommitAnimating animator);

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("collectionView:willDisplayContextMenuWithConfiguration:animator:")]
		void WillDisplayContextMenu (UICollectionView collectionView, UIContextMenuConfiguration configuration, [NullAllowed] IUIContextMenuInteractionAnimating animator);

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("collectionView:willEndContextMenuInteractionWithConfiguration:animator:")]
		void WillEndContextMenuInteraction (UICollectionView collectionView, UIContextMenuConfiguration configuration, [NullAllowed] IUIContextMenuInteractionAnimating animator);

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("collectionView:sceneActivationConfigurationForItemAtIndexPath:point:")]
		[return: NullAllowed]
		UIWindowSceneActivationConfiguration GetSceneActivationConfigurationForItem (UICollectionView collectionView, NSIndexPath indexPath, CGPoint point);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("collectionView:canPerformPrimaryActionForItemAtIndexPath:")]
		bool CanPerformPrimaryActionForItem (UICollectionView collectionView, NSIndexPath indexPath);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("collectionView:performPrimaryActionForItemAtIndexPath:")]
		void PerformPrimaryActionForItem (UICollectionView collectionView, NSIndexPath indexPath);

		[TV (17, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("collectionView:contextMenuConfigurationForItemsAtIndexPaths:point:")]
		[return: NullAllowed]
		UIContextMenuConfiguration GetContextMenuConfiguration (UICollectionView collectionView, NSIndexPath [] indexPaths, CGPoint point);

		[TV (17, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("collectionView:contextMenuConfiguration:highlightPreviewForItemAtIndexPath:")]
		[return: NullAllowed]
		UITargetedPreview GetContextMenuConfigurationHighlightPreview (UICollectionView collectionView, UIContextMenuConfiguration configuration, NSIndexPath indexPath);

		[TV (17, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("collectionView:contextMenuConfiguration:dismissalPreviewForItemAtIndexPath:")]
		[return: NullAllowed]
		UITargetedPreview GetContextMenuConfigurationDismissalPreview (UICollectionView collectionView, UIContextMenuConfiguration configuration, NSIndexPath indexPath);
	}

	[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
	delegate void UICollectionViewCellConfigurationUpdateHandler (UICollectionViewCell cell, UICellConfigurationState state);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UICollectionReusableView))]
	interface UICollectionViewCell {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("configurationState")]
		UICellConfigurationState ConfigurationState { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("setNeedsUpdateConfiguration")]
		void SetNeedsUpdateConfiguration ();

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("updateConfigurationUsingState:")]
		void UpdateConfiguration (UICellConfigurationState state);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("configurationUpdateHandler", ArgumentSemantic.Copy)]
		UICollectionViewCellConfigurationUpdateHandler ConfigurationUpdateHandler { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("contentConfiguration", ArgumentSemantic.Copy)]
		IUIContentConfiguration ContentConfiguration { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("automaticallyUpdatesContentConfiguration")]
		bool AutomaticallyUpdatesContentConfiguration { get; set; }

		[Export ("contentView")]
		UIView ContentView { get; }

		/// <summary>The selection state of this UICollectionViewCell.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("selected")]
		bool Selected { [Bind ("isSelected")] get; set; }

		/// <summary>The highlight state of this UICollectionViewCell.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("highlighted")]
		bool Highlighted { [Bind ("isHighlighted")] get; set; }

		[NullAllowed] // by default this property is null
		[Export ("backgroundView", ArgumentSemantic.Retain)]
		UIView BackgroundView { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("selectedBackgroundView", ArgumentSemantic.Retain)]
		UIView SelectedBackgroundView { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("dragStateDidChange:")]
		void DragStateDidChange (UICollectionViewCellDragState dragState);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("backgroundConfiguration", ArgumentSemantic.Copy)]
		UIBackgroundConfiguration BackgroundConfiguration { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("automaticallyUpdatesBackgroundConfiguration")]
		bool AutomaticallyUpdatesBackgroundConfiguration { get; set; }

		[TV (16, 0), iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("defaultBackgroundConfiguration")]
		UIBackgroundConfiguration DefaultBackgroundConfiguration { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	interface UICollectionViewController : UICollectionViewSource, NSCoding {
		[DesignatedInitializer]
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("collectionView", ArgumentSemantic.Retain)]
		UICollectionView CollectionView { get; set; }

		[Export ("clearsSelectionOnViewWillAppear")]
		bool ClearsSelectionOnViewWillAppear { get; set; }

		// The PostSnippet is there to ensure that "layout" is alive
		// note: we can't use [PostGet] since it would not work before iOS7 so the hack must remain...
		[DesignatedInitializer]
		[Export ("initWithCollectionViewLayout:")]
		NativeHandle Constructor (UICollectionViewLayout layout);

		[Export ("collectionViewLayout")]
		UICollectionViewLayout Layout { get; }

		[Export ("useLayoutToLayoutNavigationTransitions", ArgumentSemantic.Assign)]
		bool UseLayoutToLayoutNavigationTransitions { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("installsStandardGestureForInteractiveMovement")]
		bool InstallsStandardGestureForInteractiveMovement { get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UICollectionViewDelegateFlowLayout" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UICollectionViewDelegateFlowLayout" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UICollectionViewDelegateFlowLayout" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UICollectionViewDelegateFlowLayout_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UICollectionViewDelegate))]
	[Model]
	[Protocol]
	interface UICollectionViewDelegateFlowLayout {
		/// <param name="collectionView">To be added.</param>
		/// <param name="layout">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>The size of the specified item's cell.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:layout:sizeForItemAtIndexPath:")]
		CGSize GetSizeForItem (UICollectionView collectionView, UICollectionViewLayout layout, NSIndexPath indexPath);

		/// <param name="collectionView">To be added.</param>
		/// <param name="layout">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>The margins to apply to content in the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:layout:insetForSectionAtIndex:")]
		UIEdgeInsets GetInsetForSection (UICollectionView collectionView, UICollectionViewLayout layout, nint section);

		/// <param name="collectionView">To be added.</param>
		/// <param name="layout">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>The spacing between rows or columns of a section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:layout:minimumLineSpacingForSectionAtIndex:")]
		nfloat GetMinimumLineSpacingForSection (UICollectionView collectionView, UICollectionViewLayout layout, nint section);

		/// <param name="collectionView">To be added.</param>
		/// <param name="layout">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>The spacing between items in the rows or columns of a section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:layout:minimumInteritemSpacingForSectionAtIndex:")]
		nfloat GetMinimumInteritemSpacingForSection (UICollectionView collectionView, UICollectionViewLayout layout, nint section);

		/// <param name="collectionView">To be added.</param>
		/// <param name="layout">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>The size of the header view for the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:layout:referenceSizeForHeaderInSection:")]
		CGSize GetReferenceSizeForHeader (UICollectionView collectionView, UICollectionViewLayout layout, nint section);

		/// <param name="collectionView">To be added.</param>
		/// <param name="layout">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>The size of the footer view for the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:layout:referenceSizeForFooterInSection:")]
		CGSize GetReferenceSizeForFooter (UICollectionView collectionView, UICollectionViewLayout layout, nint section);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UICollectionViewLayout))]
	interface UICollectionViewFlowLayout {
		[Export ("minimumLineSpacing")]
		nfloat MinimumLineSpacing { get; set; }

		[Export ("minimumInteritemSpacing")]
		nfloat MinimumInteritemSpacing { get; set; }

		[Export ("itemSize")]
		CGSize ItemSize { get; set; }

		// Default value of this property is CGSize.Zero, setting to any other value causes each cell to be queried
		[MacCatalyst (13, 1)]
		[Export ("estimatedItemSize")]
		CGSize EstimatedItemSize { get; set; }

		[Export ("scrollDirection")]
		UICollectionViewScrollDirection ScrollDirection { get; set; }

		[Export ("headerReferenceSize")]
		CGSize HeaderReferenceSize { get; set; }

		[Export ("footerReferenceSize")]
		CGSize FooterReferenceSize { get; set; }

		[Export ("sectionInset")]
		UIEdgeInsets SectionInset { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("sectionInsetReference", ArgumentSemantic.Assign)]
		UICollectionViewFlowLayoutSectionInsetReference SectionInsetReference { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("sectionHeadersPinToVisibleBounds")]
		bool SectionHeadersPinToVisibleBounds { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("sectionFootersPinToVisibleBounds")]
		bool SectionFootersPinToVisibleBounds { get; set; }

		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UICollectionViewFlowLayoutAutomaticSize")]
		CGSize AutomaticSize { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	interface UICollectionViewLayout : NSCoding {

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Field ("UICollectionViewLayoutAutomaticDimension")]
		nfloat AutomaticDimension { get; }

		[Export ("collectionView")]
		UICollectionView CollectionView { get; }

		[Export ("invalidateLayout")]
		void InvalidateLayout ();

		[Export ("registerClass:forDecorationViewOfKind:"), Internal]
		void RegisterClassForDecorationView (IntPtr classPtr, NSString kind);

		[Export ("registerNib:forDecorationViewOfKind:")]
		void RegisterNibForDecorationView ([NullAllowed] UINib nib, NSString kind);

		//
		// Subclassing methods
		//
		[Export ("prepareLayout")]
		void PrepareLayout ();

		[Export ("layoutAttributesForElementsInRect:")]
		UICollectionViewLayoutAttributes [] LayoutAttributesForElementsInRect (CGRect rect);

		[Export ("layoutAttributesForItemAtIndexPath:")]
		UICollectionViewLayoutAttributes LayoutAttributesForItem (NSIndexPath indexPath);

		[Export ("layoutAttributesForSupplementaryViewOfKind:atIndexPath:")]
		UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView (NSString kind, NSIndexPath indexPath);

		[Export ("layoutAttributesForDecorationViewOfKind:atIndexPath:")]
		UICollectionViewLayoutAttributes LayoutAttributesForDecorationView (NSString kind, NSIndexPath indexPath);

		[Export ("shouldInvalidateLayoutForBoundsChange:")]
		bool ShouldInvalidateLayoutForBoundsChange (CGRect newBounds);

		[Export ("targetContentOffsetForProposedContentOffset:withScrollingVelocity:")]
		CGPoint TargetContentOffset (CGPoint proposedContentOffset, CGPoint scrollingVelocity);

		[Export ("collectionViewContentSize")]
		CGSize CollectionViewContentSize { get; }


		[Export ("prepareForAnimatedBoundsChange:")]
		void PrepareForAnimatedBoundsChange (CGRect oldBounds);

		[MacCatalyst (13, 1)]
		[Export ("invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:")]
		UICollectionViewLayoutInvalidationContext GetInvalidationContext (UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);

		[MacCatalyst (13, 1)]
		[Export ("shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:")]
		bool ShouldInvalidateLayout (UICollectionViewLayoutAttributes preferredAttributes, UICollectionViewLayoutAttributes originalAttributes);


		//
		// Update Support Hooks
		//
		[Export ("prepareForCollectionViewUpdates:")]
		void PrepareForCollectionViewUpdates (UICollectionViewUpdateItem [] updateItems);

		[Export ("finalizeCollectionViewUpdates")]
		void FinalizeCollectionViewUpdates ();

		[Export ("initialLayoutAttributesForAppearingItemAtIndexPath:")]
		UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingItem (NSIndexPath itemIndexPath);

		[Export ("finalLayoutAttributesForDisappearingItemAtIndexPath:")]
		UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingItem (NSIndexPath itemIndexPath);

		[Export ("initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:")]
		UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingSupplementaryElement (NSString elementKind, NSIndexPath elementIndexPath);

		[Export ("finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:")]
		UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingSupplementaryElement (NSString elementKind, NSIndexPath elementIndexPath);

		[Export ("initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:")]
		UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingDecorationElement (NSString elementKind, NSIndexPath decorationIndexPath);

		[Export ("finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:")]
		UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingDecorationElement (NSString elementKind, NSIndexPath decorationIndexPath);

		[Export ("finalizeAnimatedBoundsChange")]
		void FinalizeAnimatedBoundsChange ();

		[Static, Export ("layoutAttributesClass")]
		Class LayoutAttributesClass { get; }

		[Static, Export ("invalidationContextClass")]
		Class InvalidationContextClass ();

		[Export ("invalidationContextForBoundsChange:")]
		UICollectionViewLayoutInvalidationContext GetInvalidationContextForBoundsChange (CGRect newBounds);

		[Export ("indexPathsToDeleteForSupplementaryViewOfKind:")]
		NSIndexPath [] GetIndexPathsToDeleteForSupplementaryView (NSString kind);

		[Export ("indexPathsToDeleteForDecorationViewOfKind:")]
		NSIndexPath [] GetIndexPathsToDeleteForDecorationViewOfKind (NSString kind);

		[Export ("indexPathsToInsertForSupplementaryViewOfKind:")]
		NSIndexPath [] GetIndexPathsToInsertForSupplementaryView (NSString kind);

		[Export ("indexPathsToInsertForDecorationViewOfKind:")]
		NSIndexPath [] GetIndexPathsToInsertForDecorationView (NSString kind);

		[Export ("invalidateLayoutWithContext:")]
		void InvalidateLayout (UICollectionViewLayoutInvalidationContext context);

		[Export ("finalizeLayoutTransition")]
		void FinalizeLayoutTransition ();

		[Export ("prepareForTransitionFromLayout:")]
		void PrepareForTransitionFromLayout (UICollectionViewLayout oldLayout);

		[Export ("prepareForTransitionToLayout:")]
		void PrepareForTransitionToLayout (UICollectionViewLayout newLayout);

		[Export ("targetContentOffsetForProposedContentOffset:")]
		CGPoint TargetContentOffsetForProposedContentOffset (CGPoint proposedContentOffset);

		[MacCatalyst (13, 1)]
		[Export ("targetIndexPathForInteractivelyMovingItem:withPosition:")]
		NSIndexPath GetTargetIndexPathForInteractivelyMovingItem (NSIndexPath previousIndexPath, CGPoint position);

		[MacCatalyst (13, 1)]
		[Export ("layoutAttributesForInteractivelyMovingItemAtIndexPath:withTargetPosition:")]
		UICollectionViewLayoutAttributes GetLayoutAttributesForInteractivelyMovingItem (NSIndexPath indexPath, CGPoint targetPosition);

		[MacCatalyst (13, 1)]
		[Export ("invalidationContextForInteractivelyMovingItems:withTargetPosition:previousIndexPaths:previousPosition:")]
		UICollectionViewLayoutInvalidationContext GetInvalidationContextForInteractivelyMovingItems (NSIndexPath [] targetIndexPaths, CGPoint targetPosition, NSIndexPath [] previousIndexPaths, CGPoint previousPosition);

		[MacCatalyst (13, 1)]
		[Export ("invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths:previousIndexPaths:movementCancelled:")]
		UICollectionViewLayoutInvalidationContext GetInvalidationContextForEndingInteractiveMovementOfItems (NSIndexPath [] finalIndexPaths, NSIndexPath [] previousIndexPaths, bool movementCancelled);

		[MacCatalyst (13, 1)]
		[Export ("developmentLayoutDirection")]
		UIUserInterfaceLayoutDirection DevelopmentLayoutDirection { get; }

		[MacCatalyst (13, 1)]
		[Export ("flipsHorizontallyInOppositeLayoutDirection")]
		bool FlipsHorizontallyInOppositeLayoutDirection { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UICollectionViewLayoutAttributes : UIDynamicItem, NSCopying {
		[Export ("frame")]
		CGRect Frame { get; set; }

		[Export ("center")]
		new CGPoint Center { get; set; }

		[Export ("size")]
		CGSize Size { get; set; }

		[Export ("transform3D")]
		CATransform3D Transform3D { get; set; }

		[Export ("alpha")]
		nfloat Alpha { get; set; }

		[Export ("zIndex")]
		nint ZIndex { get; set; }

		/// <summary>Whether the UICollectionView is hidden or not.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("hidden")]
		bool Hidden { [Bind ("isHidden")] get; set; }

		[Export ("indexPath", ArgumentSemantic.Retain)]
		NSIndexPath IndexPath { get; set; }

		[Export ("representedElementCategory")]
		UICollectionElementCategory RepresentedElementCategory { get; }

		[Export ("representedElementKind")]
		[NullAllowed]
		string RepresentedElementKind { get; }

		[Static]
		[Export ("layoutAttributesForCellWithIndexPath:")]
		UICollectionViewLayoutAttributes CreateForCell (NSIndexPath indexPath);

		[Static]
		[Export ("layoutAttributesForDecorationViewOfKind:withIndexPath:")]
		UICollectionViewLayoutAttributes CreateForDecorationView (NSString kind, NSIndexPath indexPath);

		[Static]
		[Export ("layoutAttributesForSupplementaryViewOfKind:withIndexPath:")]
		UICollectionViewLayoutAttributes CreateForSupplementaryView (NSString kind, NSIndexPath indexPath);

		[Export ("bounds")]
		new CGRect Bounds { get; set; }

		[Export ("transform")]
		new CGAffineTransform Transform { get; set; }

	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UICollectionViewLayoutInvalidationContext {
		[Export ("invalidateDataSourceCounts")]
		bool InvalidateDataSourceCounts { get; }

		[Export ("invalidateEverything")]
		bool InvalidateEverything { get; }

		[MacCatalyst (13, 1)]
		[Export ("invalidatedItemIndexPaths")]
		[NullAllowed]
		NSIndexPath [] InvalidatedItemIndexPaths { get; }

		[MacCatalyst (13, 1)]
		[Export ("invalidatedSupplementaryIndexPaths")]
		[NullAllowed]
		NSDictionary InvalidatedSupplementaryIndexPaths { get; }

		[MacCatalyst (13, 1)]
		[Export ("invalidatedDecorationIndexPaths")]
		[NullAllowed]
		NSDictionary InvalidatedDecorationIndexPaths { get; }

		[MacCatalyst (13, 1)]
		[Export ("contentOffsetAdjustment")]
		CGPoint ContentOffsetAdjustment { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("contentSizeAdjustment")]
		CGSize ContentSizeAdjustment { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("invalidateItemsAtIndexPaths:")]
		void InvalidateItems (NSIndexPath [] indexPaths);

		[MacCatalyst (13, 1)]
		[Export ("invalidateSupplementaryElementsOfKind:atIndexPaths:")]
		void InvalidateSupplementaryElements (NSString elementKind, NSIndexPath [] indexPaths);

		[MacCatalyst (13, 1)]
		[Export ("invalidateDecorationElementsOfKind:atIndexPaths:")]
		void InvalidateDecorationElements (NSString elementKind, NSIndexPath [] indexPaths);

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("previousIndexPathsForInteractivelyMovingItems")]
		NSIndexPath [] PreviousIndexPathsForInteractivelyMovingItems { get; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("targetIndexPathsForInteractivelyMovingItems")]
		NSIndexPath [] TargetIndexPathsForInteractivelyMovingItems { get; }

		[MacCatalyst (13, 1)]
		[Export ("interactiveMovementTarget")]
		CGPoint InteractiveMovementTarget { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UICollectionViewLayoutInvalidationContext))]
	partial interface UICollectionViewFlowLayoutInvalidationContext {
		[Export ("invalidateFlowLayoutDelegateMetrics")]
		bool InvalidateFlowLayoutDelegateMetrics { get; set; }

		[Export ("invalidateFlowLayoutAttributes")]
		bool InvalidateFlowLayoutAttributes { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UICollectionViewLayout))]
	[DisableDefaultCtor] // NSInternalInconsistencyException Reason: -[UICollectionViewTransitionLayout init] is not a valid initializer - use -initWithCurrentLayout:nextLayout: instead
	interface UICollectionViewTransitionLayout : NSCoding {
		[Export ("currentLayout")]
		UICollectionViewLayout CurrentLayout { get; }

		[Export ("nextLayout")]
		UICollectionViewLayout NextLayout { get; }

		[DesignatedInitializer]
		[Export ("initWithCurrentLayout:nextLayout:")]
		[PostGet ("CurrentLayout")]
		[PostGet ("NextLayout")]
		NativeHandle Constructor (UICollectionViewLayout currentLayout, UICollectionViewLayout newLayout);

		/// <param name="value">To be added.</param>
		/// <param name="animatedKey">To be added.</param>
		/// <summary>Sets the animatable key <paramref name="animatedKey" /> to <paramref name="value" />.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("updateValue:forAnimatedKey:")]
		void UpdateValue (nfloat value, string animatedKey);

		[Export ("valueForAnimatedKey:")]
		nfloat GetValueForAnimatedKey (string animatedKey);

		[Export ("transitionProgress", ArgumentSemantic.Assign)]
		nfloat TransitionProgress { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UICollectionViewUpdateItem {
		[NullAllowed]
		[Export ("indexPathBeforeUpdate")]
		NSIndexPath IndexPathBeforeUpdate { get; }

		[NullAllowed]
		[Export ("indexPathAfterUpdate")]
		NSIndexPath IndexPathAfterUpdate { get; }

		[Export ("updateAction")]
		UICollectionUpdateAction UpdateAction { get; }
	}

	/// <summary>Constants relating to <see cref="UIKit.UICollectionElementKindSection" />.</summary>
	/// <remarks>To be added.</remarks>
	/// <altmember cref="UIKit.UICollectionElementKindSection" />
	[MacCatalyst (13, 1)]
	[Static]
	interface UICollectionElementKindSectionKey {
		/// <summary>Represents the value associated with the constant UICollectionElementKindSectionHeader</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UICollectionElementKindSectionHeader")]
		NSString Header { get; }

		/// <summary>Represents the value associated with the constant UICollectionElementKindSectionFooter</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UICollectionElementKindSectionFooter")]
		NSString Footer { get; }
	}

	[BaseType (typeof (NSObject))]
	[ThreadSafe]
	// returns NIL handle causing exceptions in further calls, e.g. ToString
	// Objective-C exception thrown.  Name: NSInvalidArgumentException Reason: *** -CGColor not defined for the UIColor <UIPlaceholderColor: 0x114f5ad0>; need to first convert colorspace.
	[DisableDefaultCtor]
	interface UIColor : NSSecureCoding, NSCopying
#if !TVOS
		, NSItemProviderWriting, NSItemProviderReading
#endif
	{
		/// <param name="white">The grayscale value of the color from 0.0 to 1.0f.</param>
		/// <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
		/// <summary>Creates a grayscale color, based on the current colorspace.</summary>
		/// <returns>
		///         </returns>
		/// <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("colorWithWhite:alpha:")]
		[Static]
		UIColor FromWhiteAlpha (nfloat white, nfloat alpha);

		/// <param name="hue">Hue component value from 0.0 to 1.0f.</param>
		/// <param name="saturation">Saturation component value from 0.0 to 1.0f</param>
		/// <param name="brightness">Brightness component value from 0.0 to 1.0f.</param>
		/// <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
		/// <summary>Creates a color from using the hue, saturation, brightness and alpha components.</summary>
		/// <returns>
		///         </returns>
		/// <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("colorWithHue:saturation:brightness:alpha:")]
		[Static]
		UIColor FromHSBA (nfloat hue, nfloat saturation, nfloat brightness, nfloat alpha);

		/// <param name="red">Red component, 0.0 to 1.0f.</param>
		/// <param name="green">Green component 0.0 to 1.0f.</param>
		/// <param name="blue">Blue component value 0.0 to 1.0f.</param>
		/// <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
		/// <summary>Creates a color with the specified alpha transparency using the red, green and blue components specified.</summary>
		/// <returns>
		///         </returns>
		/// <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("colorWithRed:green:blue:alpha:")]
		[Static]
		UIColor FromRGBA (nfloat red, nfloat green, nfloat blue, nfloat alpha);

		[Export ("colorWithCGColor:")]
		[Static]
		UIColor FromCGColor (CGColor color);

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("colorNamed:")]
		[return: NullAllowed]
		UIColor FromName (string name);

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("colorNamed:inBundle:compatibleWithTraitCollection:")]
		[return: NullAllowed]
		UIColor FromName (string name, [NullAllowed] NSBundle inBundle, [NullAllowed] UITraitCollection compatibleWithTraitCollection);

		/// <param name="red">To be added.</param>
		/// <param name="green">To be added.</param>
		/// <param name="blue">To be added.</param>
		/// <param name="alpha">To be added.</param>
		/// <summary>Creates a new color from the specified values in the P3 color space.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("colorWithDisplayP3Red:green:blue:alpha:")]
		UIColor FromDisplayP3 (nfloat red, nfloat green, nfloat blue, nfloat alpha);

		[Export ("colorWithPatternImage:")]
		[Static]
		UIColor FromPatternImage (UIImage image);

		/// <param name="red">Red component, 0.0 to 1.0f.</param>
		/// <param name="green">Green component 0.0 to 1.0f.</param>
		/// <param name="blue">Blue component value 0.0 to 1.0f.</param>
		/// <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
		/// <summary>UIColor constructor from red, green, blue and alpha components.</summary>
		/// <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("initWithRed:green:blue:alpha:")]
		NativeHandle Constructor (nfloat red, nfloat green, nfloat blue, nfloat alpha);

		[Export ("initWithPatternImage:")]
		NativeHandle Constructor (UIImage patternImage);

		/// <param name="white">To be added.</param>
		/// <param name="alpha">To be added.</param>
		/// <summary>Creates a new color with the grayscale value in <paramref name="white" /> and the opacity value in <paramref name="alpha" />.</summary>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("initWithWhite:alpha:")]
		NativeHandle Constructor (nfloat white, nfloat alpha);

		// [Export ("initWithHue:saturation:brightness:alpha:")]
		// NativeHandle Constructor (nfloat red, nfloat green, nfloat blue, nfloat alpha);
		// 
		// This method is not bound as a constructor because the binding already has a constructor that
		// takes 4 doubles (RGBA constructor) meaning that we would need to use an enum to diff between them making the API
		// uglier when it is not needed. The developer can use colorWithHue:saturation:brightness:alpha:
		// instead.

		[Export ("initWithCGColor:")]
		NativeHandle Constructor (CGColor color);

		[Static]
		[Export ("clearColor")]
		UIColor Clear { get; }

		[Static]
		[Export ("blackColor")]
		UIColor Black { get; }

		[Static]
		[Export ("darkGrayColor")]
		UIColor DarkGray { get; }

		[Static]
		[Export ("lightGrayColor")]
		UIColor LightGray { get; }

		[Static]
		[Export ("whiteColor")]
		UIColor White { get; }

		[Static]
		[Export ("grayColor")]
		UIColor Gray { get; }

		[Static]
		[Export ("redColor")]
		UIColor Red { get; }

		[Static]
		[Export ("greenColor")]
		UIColor Green { get; }

		[Static]
		[Export ("blueColor")]
		UIColor Blue { get; }

		[Static]
		[Export ("cyanColor")]
		UIColor Cyan { get; }

		[Static]
		[Export ("yellowColor")]
		UIColor Yellow { get; }

		[Static]
		[Export ("magentaColor")]
		UIColor Magenta { get; }

		[Static]
		[Export ("orangeColor")]
		UIColor Orange { get; }

		[Static]
		[Export ("purpleColor")]
		UIColor Purple { get; }

		[Static]
		[Export ("brownColor")]
		UIColor Brown { get; }

		[Export ("set")]
		void SetColor ();

		[Export ("setFill")]
		void SetFill ();

		[Export ("setStroke")]
		void SetStroke ();

		/// <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
		/// <summary>Creates a new color with the specified alpha channel from a reference color.</summary>
		/// <returns>A copy of the color, but with a new alpha component value.</returns>
		/// <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("colorWithAlphaComponent:")]
		UIColor ColorWithAlpha (nfloat alpha);

		[Export ("CGColor")]
		CGColor CGColor { get; }

		[MacCatalyst (13, 1)]
		[Export ("CIColor")]
		CIColor CIColor { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("lightTextColor")]
		[Static]
		UIColor LightText { get; }

		/// <summary>The system color for displaying text on a light background.</summary>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("darkTextColor")]
		[Static]
		UIColor DarkText { get; }

		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'SystemGroupedBackground' instead.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'SystemGroupedBackground' instead.")]
		[Export ("groupTableViewBackgroundColor")]
		[Static]
		UIColor GroupTableViewBackground { get; }

		[Deprecated (PlatformName.iOS, 7, 0)]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("viewFlipsideBackgroundColor")]
		[Static]
		UIColor ViewFlipsideBackground { get; }

		[Deprecated (PlatformName.iOS, 7, 0)]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("scrollViewTexturedBackgroundColor")]
		[Static]
		UIColor ScrollViewTexturedBackground { get; }

		[Deprecated (PlatformName.iOS, 7, 0)]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Static, Export ("underPageBackgroundColor")]
		UIColor UnderPageBackground { get; }

		[MacCatalyst (13, 1)]
		[Static, Export ("colorWithCIColor:")]
		UIColor FromCIColor (CIColor color);

		[MacCatalyst (13, 1)]
		[Export ("initWithCIColor:")]
		NativeHandle Constructor (CIColor ciColor);

		/// <param name="white">To be added.</param>
		/// <param name="alpha">To be added.</param>
		/// <summary>The grayscale components of the color.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("getWhite:alpha:")]
		bool GetWhite (out nfloat white, out nfloat alpha);

#if false
		// for testing the managed implementations
		[Export ("getHue:saturation:brightness:alpha:")]
		bool GetHSBA (out nfloat hue, out nfloat saturation, out nfloat brightness, out nfloat alpha);
		
		[Export ("getRed:green:blue:alpha:")]
		bool GetRGBA2 (out nfloat red, out nfloat green, out nfloat blue, out nfloat alpha);
#endif

		// From the NSItemProviderReading protocol, a static method.
		/// <summary>Gets an array of Uniform Type Identifiers (UTIs) that describe the types from which this class can be converted.</summary>
		///         <value>To be added.</value>
		///         <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Static]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("readableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
#if !TVOS
		new
#endif
		string [] ReadableTypeIdentifiers { get; }

		// From the NSItemProviderReading protocol, a static method.
		/// <param name="data">To be added.</param>
		///         <param name="typeIdentifier">To be added.</param>
		///         <param name="outError">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		///         <summary>To be added.</summary>
		///         <returns>To be added.</returns>
		///         <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("objectWithItemProviderData:typeIdentifier:error:")]
		[return: NullAllowed]
#if !TVOS
		new
#endif
		UIColor GetObject (NSData data, string typeIdentifier, [NullAllowed] out NSError outError);

		// From the NSItemProviderWriting protocol, a static method.
		// NSItemProviderWriting doesn't seem to be implemented for tvOS/watchOS, even though the headers say otherwise.
		/// <summary>Gets the array of uniform type identifiers that specify which data types can be loaded into a color.</summary>
		///         <value>To be added.</value>
		///         <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("writableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
#if !TVOS
		new
#endif
		string [] WritableTypeIdentifiers { get; }

		// From UIColor (DynamicColors)

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("colorWithDynamicProvider:")]
		UIColor FromDynamicProvider (Func<UITraitCollection, UIColor> dynamicProvider);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("initWithDynamicProvider:")]
		NativeHandle Constructor (Func<UITraitCollection, UIColor> dynamicProvider);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("resolvedColorWithTraitCollection:")]
		UIColor GetResolvedColor (UITraitCollection traitCollection);

		// From: UIColor (UIColorSystemColors)
		// this probably needs bindings to be moved into from appkit.cs to xkit.cs
		// and adjust accordingly since a lot of those are static properties
		// that cannot be exposed from a [Category]

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemRedColor")]
		UIColor SystemRed { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemGreenColor")]
		UIColor SystemGreen { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemBlueColor")]
		UIColor SystemBlue { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemOrangeColor")]
		UIColor SystemOrange { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemYellowColor")]
		UIColor SystemYellow { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemPinkColor")]
		UIColor SystemPink { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemPurpleColor")]
		UIColor SystemPurple { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemTealColor")]
		UIColor SystemTeal { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemIndigoColor")]
		UIColor SystemIndigo { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("systemBrownColor")]
		UIColor SystemBrown { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("systemMintColor")]
		UIColor SystemMint { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("systemCyanColor")]
		UIColor SystemCyan { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemGrayColor")]
		UIColor SystemGray { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemGray2Color")]
		UIColor SystemGray2 { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemGray3Color")]
		UIColor SystemGray3 { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemGray4Color")]
		UIColor SystemGray4 { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemGray5Color")]
		UIColor SystemGray5 { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemGray6Color")]
		UIColor SystemGray6 { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("tintColor")]
		UIColor Tint { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("labelColor")]
		UIColor Label { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("secondaryLabelColor")]
		UIColor SecondaryLabel { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("tertiaryLabelColor")]
		UIColor TertiaryLabel { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("quaternaryLabelColor")]
		UIColor QuaternaryLabel { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("linkColor")]
		UIColor Link { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("placeholderTextColor")]
		UIColor PlaceholderText { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("separatorColor")]
		UIColor Separator { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("opaqueSeparatorColor")]
		UIColor OpaqueSeparator { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemBackgroundColor")]
		UIColor SystemBackground { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("secondarySystemBackgroundColor")]
		UIColor SecondarySystemBackground { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("tertiarySystemBackgroundColor")]
		UIColor TertiarySystemBackground { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemGroupedBackgroundColor")]
		UIColor SystemGroupedBackground { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("secondarySystemGroupedBackgroundColor")]
		UIColor SecondarySystemGroupedBackground { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("tertiarySystemGroupedBackgroundColor")]
		UIColor TertiarySystemGroupedBackground { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemFillColor")]
		UIColor SystemFill { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("secondarySystemFillColor")]
		UIColor SecondarySystemFill { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("tertiarySystemFillColor")]
		UIColor TertiarySystemFill { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("quaternarySystemFillColor")]
		UIColor QuaternarySystemFill { get; }

		// UIColor (UIAccessibility) Category

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("accessibilityName")]
		string AccessibilityName { get; }

		// Inlined from the ProminenceSupport category
		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("colorWithProminence:")]
		UIColor ApplyProminence (UIColorProminence prominence);

		// Inlined from the ProminenceSupport category
		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("prominence")]
		UIColorProminence Prominence { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDynamicBehavior),
		   Delegates = new string [] { "CollisionDelegate" },
		   Events = new Type [] { typeof (UICollisionBehaviorDelegate) })]
	interface UICollisionBehavior {
		[DesignatedInitializer]
		[Export ("initWithItems:")]
		NativeHandle Constructor ([Params] IUIDynamicItem [] items);

		[Export ("items", ArgumentSemantic.Copy)]
		IUIDynamicItem [] Items { get; }

		[Export ("collisionMode")]
		UICollisionBehaviorMode CollisionMode { get; set; }

		[Export ("translatesReferenceBoundsIntoBoundary")]
		bool TranslatesReferenceBoundsIntoBoundary { get; set; }

		[Export ("boundaryIdentifiers", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSObject [] BoundaryIdentifiers { get; }

		[Export ("collisionDelegate", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakCollisionDelegate { get; set; }

		/// <summary>The delegate object that receives events relating to collisions.</summary>
		///         <value>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Wrap ("WeakCollisionDelegate")]
		IUICollisionBehaviorDelegate CollisionDelegate { get; set; }

		[Export ("addItem:")]
		void AddItem (IUIDynamicItem dynamicItem);

		[Export ("removeItem:")]
		void RemoveItem (IUIDynamicItem dynamicItem);

		[Export ("setTranslatesReferenceBoundsIntoBoundaryWithInsets:")]
		void SetTranslatesReferenceBoundsIntoBoundaryWithInsets (UIEdgeInsets insets);

		[Export ("addBoundaryWithIdentifier:forPath:")]
		[PostGet ("BoundaryIdentifiers")]
		void AddBoundary (NSObject boundaryIdentifier, UIBezierPath bezierPath);

		[Export ("addBoundaryWithIdentifier:fromPoint:toPoint:")]
		[PostGet ("BoundaryIdentifiers")]
		void AddBoundary (NSObject boundaryIdentifier, CGPoint fromPoint, CGPoint toPoint);

		[Export ("boundaryWithIdentifier:")]
		UIBezierPath GetBoundary (NSObject boundaryIdentifier);

		[Export ("removeBoundaryWithIdentifier:")]
		void RemoveBoundary (NSObject boundaryIdentifier);

		[Export ("removeAllBoundaries")]
		void RemoveAllBoundaries ();
	}

	interface IUICollisionBehaviorDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UICollisionBehaviorDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UICollisionBehaviorDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UICollisionBehaviorDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UICollisionBehaviorDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Protocol]
	[Model]
	interface UICollisionBehaviorDelegate {
		/// <param name="behavior">To be added.</param>
		/// <param name="firstItem">To be added.</param>
		/// <param name="secondItem">To be added.</param>
		/// <param name="atPoint">To be added.</param>
		/// <summary>Indicates that contact between dynamic items has begun.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collisionBehavior:beganContactForItem:withItem:atPoint:")]
		[EventArgs ("UICollisionBeganContact", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the CollisionDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void BeganContact (UICollisionBehavior behavior, IUIDynamicItem firstItem, IUIDynamicItem secondItem, CGPoint atPoint);

		/// <param name="behavior">To be added.</param>
		/// <param name="firstItem">To be added.</param>
		/// <param name="secondItem">To be added.</param>
		/// <summary>Indicates that the two dynamic items have stopped contacting each other.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collisionBehavior:endedContactForItem:withItem:")]
		[EventArgs ("UICollisionEndedContact", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the CollisionDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void EndedContact (UICollisionBehavior behavior, IUIDynamicItem firstItem, IUIDynamicItem secondItem);

		/// <param name="behavior">To be added.</param>
		/// <param name="dynamicItem">To be added.</param>
		/// <param name="boundaryIdentifier">The identifier of the boundary collided with. If <see langword="null" />, the collision was with the reference boundary.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
		/// <param name="atPoint">To be added.</param>
		/// <summary>Indicates that boundary contact has begun between the dynamicItem and the boundaryIdentifier.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collisionBehavior:beganContactForItem:withBoundaryIdentifier:atPoint:")]
		[EventArgs ("UICollisionBeganBoundaryContact", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the CollisionDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void BeganBoundaryContact (UICollisionBehavior behavior, IUIDynamicItem dynamicItem, [NullAllowed] NSObject boundaryIdentifier, CGPoint atPoint);

		/// <param name="behavior">To be added.</param>
		/// <param name="dynamicItem">To be added.</param>
		/// <param name="boundaryIdentifier">The identifier of the boundary collided with. If <see langword="null" />, the collision was with the reference boundary.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
		/// <summary>Indicates that the dynamicItem has stopped contacting the boundary.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collisionBehavior:endedContactForItem:withBoundaryIdentifier:")]
		[EventArgs ("UICollisionEndedBoundaryContact", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the CollisionDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void EndedBoundaryContact (UICollisionBehavior behavior, IUIDynamicItem dynamicItem, [NullAllowed] NSObject boundaryIdentifier);
	}

	/// <include file="../docs/api/UIKit/UIDocument.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIDocument']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	// Objective-C exception thrown.  Name: NSInternalInconsistencyException Reason: do not call -[UIDocument init] - the designated initializer is -[UIDocument initWithFileURL:
	[DisableDefaultCtor]
	[ThreadSafe]
	interface UIDocument : NSFilePresenter, NSProgressReporting, UIUserActivityRestoring {
		[Export ("localizedName", ArgumentSemantic.Copy)]
		string LocalizedName { get; }

		[Export ("fileType", ArgumentSemantic.Copy)]
		[NullAllowed]
		string FileType { get; }

		[Export ("fileModificationDate", ArgumentSemantic.Copy)]
		NSDate FileModificationDate { get; set; }

		[Export ("documentState")]
		UIDocumentState DocumentState { get; }

		[DesignatedInitializer]
		[Export ("initWithFileURL:")]
		[PostGet ("FileUrl")]
		NativeHandle Constructor (NSUrl url);

		[Export ("fileURL")]
		NSUrl FileUrl { get; }

		[Export ("openWithCompletionHandler:")]
		[Async (XmlDocs = """
			<summary>Asynchronously opens a document.</summary>
			<returns>
			          <para>A task that represents the asynchronous Open operation. The value of the TResult parameter is a <see cref="UIKit.UIOperationHandler" />.</para>
			        </returns>
			<remarks>
			          <para>
			          </para>
			          <para tool="threads">This can be used from a background thread.</para>
			        </remarks>
			""")]
		void Open ([NullAllowed] UIOperationHandler completionHandler);

		[Export ("closeWithCompletionHandler:")]
		[Async (XmlDocs = """
			<summary>Asynchronously closes the document after saving any changes.</summary>
			<returns>
			          <para>A task that represents the asynchronous Close operation. The value of the TResult parameter is a <see cref="UIKit.UIOperationHandler" />.</para>
			        </returns>
			<remarks>
			          <para>
			          </para>
			          <para tool="threads">This can be used from a background thread.</para>
			        </remarks>
			""")]
		void Close ([NullAllowed] UIOperationHandler completionHandler);

		[Export ("loadFromContents:ofType:error:")]
		bool LoadFromContents (NSObject contents, [NullAllowed] string typeName, out NSError outError);

		[Export ("contentsForType:error:")]
		[return: NullAllowed]
		NSObject ContentsForType (string typeName, out NSError outError);

		[Export ("disableEditing")]
		void DisableEditing ();

		[Export ("enableEditing")]
		void EnableEditing ();

		[Export ("undoManager", ArgumentSemantic.Retain)]
		NSUndoManager UndoManager { get; set; }

		[Export ("hasUnsavedChanges")]
		bool HasUnsavedChanges { get; }

		[Export ("updateChangeCount:")]
		void UpdateChangeCount (UIDocumentChangeKind change);

		[Export ("changeCountTokenForSaveOperation:")]
		NSObject ChangeCountTokenForSaveOperation (UIDocumentSaveOperation saveOperation);

		[Export ("updateChangeCountWithToken:forSaveOperation:")]
		void UpdateChangeCount (NSObject changeCountToken, UIDocumentSaveOperation saveOperation);

		[Export ("saveToURL:forSaveOperation:completionHandler:")]
		[Async (XmlDocs = """
			<param name="url">URL that indicates the location of a document file.</param>
			<param name="saveOperation">This represents a constant indicating if a document file is being written for the first time or being overwritten.</param>
			<summary>Saves the document data to the specified location in the application sandbox.</summary>
			<returns>
			          <para>A task that represents the asynchronous Save operation.   The value of the TResult parameter is a <see cref="UIKit.UIOperationHandler" />.</para>
			        </returns>
			<remarks>
			          <para>
			          </para>
			          <para tool="threads">This can be used from a background thread.</para>
			        </remarks>
			""")]
		void Save (NSUrl url, UIDocumentSaveOperation saveOperation, [NullAllowed] UIOperationHandler completionHandler);

		[Export ("autosaveWithCompletionHandler:")]
		[Async (XmlDocs = """
			<summary>Called by the system immediately prior to automatic saving of UIDocuments with unsaved changes.</summary>
			<returns>
			          <para>A task that represents the asynchronous AutoSave operation. The value of the TResult parameter is a <see cref="UIKit.UIOperationHandler" />.</para>
			        </returns>
			<remarks>
			          <para>
			          </para>
			          <para tool="threads">This can be used from a background thread.</para>
			        </remarks>
			""")]
		void AutoSave ([NullAllowed] UIOperationHandler completionHandler);

		[Export ("savingFileType")]
		[NullAllowed]
		string SavingFileType { get; }

		[Export ("fileNameExtensionForType:saveOperation:")]
		string GetFileNameExtension ([NullAllowed] string typeName, UIDocumentSaveOperation saveOperation);

		[Export ("writeContents:andAttributes:safelyToURL:forSaveOperation:error:")]
		bool WriteContents (NSObject contents, [NullAllowed] NSDictionary additionalFileAttributes, NSUrl url, UIDocumentSaveOperation saveOperation, out NSError outError);

		[Export ("writeContents:toURL:forSaveOperation:originalContentsURL:error:")]
		bool WriteContents (NSObject contents, NSUrl toUrl, UIDocumentSaveOperation saveOperation, [NullAllowed] NSUrl originalContentsURL, out NSError outError);

		[Export ("fileAttributesToWriteToURL:forSaveOperation:error:")]
		[return: NullAllowed]
		NSDictionary GetFileAttributesToWrite (NSUrl forUrl, UIDocumentSaveOperation saveOperation, out NSError outError);

		[Export ("readFromURL:error:")]
		bool Read (NSUrl fromUrl, out NSError outError);

		[Export ("performAsynchronousFileAccessUsingBlock:")]
		[Async (XmlDocs = """
			<summary>Performs an asynchronous file access action.</summary>
			<returns>A task that represents the asynchronous PerformAsynchronousFileAccess operation</returns>
			<remarks>
			          <para>
			          </para>
			          <para tool="threads">This can be used from a background thread.</para>
			        </remarks>
			""")]
		void PerformAsynchronousFileAccess (/* non null*/ Action action);

		[Export ("handleError:userInteractionPermitted:")]
		void HandleError (NSError error, bool userInteractionPermitted);

		[Export ("finishedHandlingError:recovered:")]
		void FinishedHandlingError (NSError error, bool recovered);

		[Export ("userInteractionNoLongerPermittedForError:")]
		void UserInteractionNoLongerPermittedForError (NSError error);

		[Export ("revertToContentsOfURL:completionHandler:")]
		[Async (XmlDocs = """
			<param name="url">URL address that indicates the location of a document file.</param>
			<summary>Reverts the UIDocument to the most recent document data stored on-disk.</summary>
			<returns>
			          <para>A task that represents the asynchronous RevertToContentsOfUrl operation.   The value of the TResult parameter is a <see cref="UIKit.UIOperationHandler" />.</para>
			        </returns>
			<remarks>
			          <para>
			          </para>
			          <para tool="threads">This can be used from a background thread.</para>
			          <para copied="true">The RevertToContentsOfUrlAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para tool="threads" copied="true">This can be used from a background thread.</para>
			        </remarks>
			""")]
		void RevertToContentsOfUrl (NSUrl url, [NullAllowed] UIOperationHandler completionHandler);

		/// <include file="../docs/api/UIKit/UIDocument.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIDocument.StateChangedNotification']/*" />
		[Field ("UIDocumentStateChangedNotification")]
		[Notification]
		NSString StateChangedNotification { get; }

		// ActivityContinuation Category
		[MacCatalyst (13, 1)]
		[Export ("userActivity", ArgumentSemantic.Retain)]
		NSUserActivity UserActivity { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("updateUserActivityState:")]
		void UpdateUserActivityState (NSUserActivity userActivity);

		/// <summary>Gets the key that specifies the document's URL in the <see cref="UIKit.UIDocument.UserActivity" /> property.</summary>
		///         <value>To be added.</value>
		///         <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Field ("NSUserActivityDocumentURLKey")]
		NSString UserActivityDocumentUrlKey { get; }

	}

	interface IUIDynamicAnimatorDelegate { }

	/// <include file="../docs/api/UIKit/IUIDynamicAnimatorDelegate.xml" path="/Documentation/Docs[@DocId='T:UIKit.IUIDynamicAnimatorDelegate']/*" />
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Protocol]
	[Model]
	interface UIDynamicAnimatorDelegate {
		/// <param name="animator">To be added.</param>
		/// <summary>The dynamic animator is about to resume animations.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dynamicAnimatorWillResume:")]
		void WillResume (UIDynamicAnimator animator);

		/// <param name="animator">To be added.</param>
		/// <summary>Called when a pause is required in an animation's dynamic behavior.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dynamicAnimatorDidPause:")]
		void DidPause (UIDynamicAnimator animator);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIDynamicAnimator {
		[DesignatedInitializer]
		[Export ("initWithReferenceView:")]
		NativeHandle Constructor (UIView referenceView);

		[Export ("referenceView")]
		UIView ReferenceView { get; }

		[Export ("behaviors", ArgumentSemantic.Copy)]
		UIDynamicBehavior [] Behaviors { get; }

		/// <summary>Whether the UIDynamicAnimator is running. Read-only.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("running")]
		bool Running { [Bind ("isRunning")] get; }

		[Export ("delegate", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIDynamicAnimatorDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIDynamicAnimatorDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIDynamicAnimatorDelegate Delegate { get; set; }

		[Export ("addBehavior:")]
		[PostGet ("Behaviors")]
		void AddBehavior ([NullAllowed] UIDynamicBehavior behavior);

		[Export ("removeBehavior:")]
		[PostGet ("Behaviors")]
		void RemoveBehavior ([NullAllowed] UIDynamicBehavior behavior);

		[Export ("removeAllBehaviors")]
		[PostGet ("Behaviors")]
		void RemoveAllBehaviors ();

		[Export ("itemsInRect:")]
		IUIDynamicItem [] GetDynamicItems (CGRect rect);

		[Export ("elapsedTime")]
		double ElapsedTime { get; }

		[Export ("updateItemUsingCurrentState:")]
		void UpdateItemUsingCurrentState (IUIDynamicItem uiDynamicItem);

		//
		// From UIDynamicAnimator (UICollectionViewAdditions)
		//
		[Export ("initWithCollectionViewLayout:")]
		NativeHandle Constructor (UICollectionViewLayout layout);

		[Export ("layoutAttributesForCellAtIndexPath:")]
		UICollectionViewLayoutAttributes GetLayoutAttributesForCell (NSIndexPath cellIndexPath);

		[Export ("layoutAttributesForSupplementaryViewOfKind:atIndexPath:")]
		UICollectionViewLayoutAttributes GetLayoutAttributesForSupplementaryView (NSString viewKind, NSIndexPath viewIndexPath);

		[Export ("layoutAttributesForDecorationViewOfKind:atIndexPath:")]
		UICollectionViewLayoutAttributes GetLayoutAttributesForDecorationView (NSString viewKind, NSIndexPath viewIndexPath);

	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDynamicBehavior))]
	interface UIDynamicItemBehavior {
		[DesignatedInitializer]
		[Export ("initWithItems:")]
		NativeHandle Constructor ([Params] IUIDynamicItem [] items);

		[Export ("items", ArgumentSemantic.Copy)]
		IUIDynamicItem [] Items { get; }

		[Export ("elasticity")]
		nfloat Elasticity { get; set; }

		[Export ("friction")]
		nfloat Friction { get; set; }

		[Export ("density")]
		nfloat Density { get; set; }

		[Export ("resistance")]
		nfloat Resistance { get; set; }

		[Export ("angularResistance")]
		nfloat AngularResistance { get; set; }

		[Export ("allowsRotation")]
		bool AllowsRotation { get; set; }

		[Export ("addItem:")]
		[PostGet ("Items")]
		void AddItem (IUIDynamicItem dynamicItem);

		[Export ("removeItem:")]
		[PostGet ("Items")]
		void RemoveItem (IUIDynamicItem dynamicItem);

		[Export ("addLinearVelocity:forItem:")]
		void AddLinearVelocityForItem (CGPoint velocity, IUIDynamicItem dynamicItem);

		[Export ("linearVelocityForItem:")]
		CGPoint GetLinearVelocityForItem (IUIDynamicItem dynamicItem);

		/// <param name="velocity">Change to angular velocity, in radians per second.</param>
		/// <param name="dynamicItem">To be added.</param>
		/// <summary>Adds <paramref name="velocity" />, in radians per second, to the angular velocity of <paramref name="dynamicItem" />.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("addAngularVelocity:forItem:")]
		void AddAngularVelocityForItem (nfloat velocity, IUIDynamicItem dynamicItem);

		[Export ("angularVelocityForItem:")]
		nfloat GetAngularVelocityForItem (IUIDynamicItem dynamicItem);

		[MacCatalyst (13, 1)]
		[Export ("charge", ArgumentSemantic.Assign)]
		nfloat Charge { get; set; }

		/// <summary>Gets or sets a Boolean value that controls whether the item is anchoed to its current position.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("anchored")]
		bool Anchored { [Bind ("isAnchored")] get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIDynamicItem" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIDynamicItem" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIDynamicItem" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIDynamicItem_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Protocol]
	[Model]
	interface UIDynamicItem {
		/// <summary>The center of the dynamic item.</summary>
		/// <value>The center point.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("center")]
		CGPoint Center { get; set; }

		/// <summary>Called in an instance where the dynamic animator requires the bounds of a dynamic item be returned.</summary>
		/// <value>Dynamic item bounds.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("bounds")]
		CGRect Bounds { get; }

		/// <summary>The rotation of the dynamic item.</summary>
		/// <value>Item rotation.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("transform")]
		CGAffineTransform Transform { get; set; }

		/// <summary>Returns a value that tells how collision bounds are specified.</summary>
		[MacCatalyst (13, 1)]
		[Export ("collisionBoundsType")]
		UIDynamicItemCollisionBoundsType CollisionBoundsType { get; }

		/// <summary>Returns the closed path that is used for collision detection.</summary>
		[MacCatalyst (13, 1)]
		[Export ("collisionBoundingPath")]
		UIBezierPath CollisionBoundingPath { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIDynamicItemGroup : UIDynamicItem {
		[Export ("initWithItems:")]
		NativeHandle Constructor (IUIDynamicItem [] items);

		[Export ("items", ArgumentSemantic.Copy)]
		IUIDynamicItem [] Items { get; }
	}


	interface IUIDynamicItem { }

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIDynamicBehavior {
		[Export ("childBehaviors", ArgumentSemantic.Copy)]
		UIDynamicBehavior [] ChildBehaviors { get; }

		[NullAllowed] // by default this property is null
		[Export ("action", ArgumentSemantic.Copy)]
		Action Action { get; set; }

		[Export ("addChildBehavior:")]
		[PostGet ("ChildBehaviors")]
		void AddChildBehavior (UIDynamicBehavior behavior);

		[Export ("removeChildBehavior:")]
		[PostGet ("ChildBehaviors")]
		void RemoveChildBehavior (UIDynamicBehavior behavior);

		[Export ("dynamicAnimator")]
		UIDynamicAnimator DynamicAnimator { get; }

		[Export ("willMoveToAnimator:")]
		void WillMoveToAnimator ([NullAllowed] UIDynamicAnimator targetAnimator);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDynamicBehavior))]
	[DisableDefaultCtor]
	interface UIFieldBehavior {
		[Export ("addItem:")]
		void AddItem (IUIDynamicItem item);

		[Export ("removeItem:")]
		void RemoveItem (IUIDynamicItem item);

		[Export ("items", ArgumentSemantic.Copy)]
		IUIDynamicItem [] Items { get; }

		[Export ("position", ArgumentSemantic.Assign)]
		CGPoint Position { get; set; }

		[Export ("region", ArgumentSemantic.Strong)]
		UIRegion Region { get; set; }

		[Export ("strength", ArgumentSemantic.Assign)]
		nfloat Strength { get; set; }

		[Export ("falloff", ArgumentSemantic.Assign)]
		nfloat Falloff { get; set; }

		[Export ("minimumRadius", ArgumentSemantic.Assign)]
		nfloat MinimumRadius { get; set; }

		[Export ("direction", ArgumentSemantic.Assign)]
		CGVector Direction { get; set; }

		[Export ("smoothness", ArgumentSemantic.Assign)]
		nfloat Smoothness { get; set; }

		[Export ("animationSpeed", ArgumentSemantic.Assign)]
		nfloat AnimationSpeed { get; set; }

		[Static]
		[Export ("dragField")]
		UIFieldBehavior CreateDragField ();

		[Static]
		[Export ("vortexField")]
		UIFieldBehavior CreateVortexField ();

		[Static]
		[Export ("radialGravityFieldWithPosition:")]
		UIFieldBehavior CreateRadialGravityField (CGPoint position);

		[Static]
		[Export ("linearGravityFieldWithVector:")]
		UIFieldBehavior CreateLinearGravityField (CGVector direction);

		[Static]
		[Export ("velocityFieldWithVector:")]
		UIFieldBehavior CreateVelocityField (CGVector direction);

		/// <param name="smoothness">To be added.</param>
		/// <param name="speed">To be added.</param>
		/// <summary>Factory method to create a field with random forces.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>The field vectors of a noise field are dynamic. The following is a snapshot:</para>
		///           <para>
		///             <img href="~/UIKit/_images/UIFieldBehavior.CreateNoiseField.png" alt="Image showing the specified field." />
		///           </para>
		///         </remarks>
		[Static]
		[Export ("noiseFieldWithSmoothness:animationSpeed:")]
		UIFieldBehavior CreateNoiseField (nfloat smoothness, nfloat speed);

		/// <param name="smoothness">To be added.</param>
		/// <param name="speed">To be added.</param>
		/// <summary>Factory method to create a field that simulates turbulence.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Static]
		[Export ("turbulenceFieldWithSmoothness:animationSpeed:")]
		UIFieldBehavior CreateTurbulenceField (nfloat smoothness, nfloat speed);

		[Static]
		[Export ("springField")]
		UIFieldBehavior CreateSpringField ();

		[Static]
		[Export ("electricField")]
		UIFieldBehavior CreateElectricField ();

		[Static]
		[Export ("magneticField")]
		UIFieldBehavior CreateMagneticField ();

		[Static]
		[Export ("fieldWithEvaluationBlock:")]
		UIFieldBehavior CreateCustomField (UIFieldCustomEvaluator evaluator);
	}

	delegate CGVector UIFieldCustomEvaluator (UIFieldBehavior field, CGPoint position, CGVector velocity, nfloat mass, nfloat charge, double deltaTime);

	[Static]
	[MacCatalyst (13, 1)]
	interface UIFontWeightConstants {
		[Field ("UIFontWeightUltraLight")]
		nfloat UltraLight { get; }
		[Field ("UIFontWeightThin")]
		nfloat Thin { get; }
		[Field ("UIFontWeightLight")]
		nfloat Light { get; }
		[Field ("UIFontWeightRegular")]
		nfloat Regular { get; }
		[Field ("UIFontWeightMedium")]
		nfloat Medium { get; }
		[Field ("UIFontWeightSemibold")]
		nfloat Semibold { get; }
		[Field ("UIFontWeightBold")]
		nfloat Bold { get; }
		[Field ("UIFontWeightHeavy")]
		nfloat Heavy { get; }
		[Field ("UIFontWeightBlack")]
		nfloat Black { get; }
	}

	[BaseType (typeof (NSObject))]
	[ThreadSafe]
	[DisableDefaultCtor] // iOS7 -> Objective-C exception thrown.  Name: NSInvalidArgumentException Reason: -[UIFont ctFontRef]: unrecognized selector sent to instance 0x15b283c0
						 // note: because of bug 25511 (managed Dispose / native semi-factory) we need to return a copy of the UIFont for every static method that returns an UIFont
	interface UIFont : NSCopying, NSSecureCoding {
		[Static]
		[Export ("systemFontOfSize:")]
		[Internal] // bug 25511
		IntPtr _SystemFontOfSize (nfloat size);

		[MacCatalyst (13, 1)]
		[EditorBrowsable (EditorBrowsableState.Advanced)] // we prefer to show the one using the enum
		[Internal] // bug 25511
		[Static]
		[Export ("systemFontOfSize:weight:")]
		IntPtr _SystemFontOfSize (nfloat size, nfloat weight);

		[MacCatalyst (13, 1)]
		[EditorBrowsable (EditorBrowsableState.Advanced)] // we prefer to show the one using the enum
		[Internal] // bug 25511
		[Static]
		[Export ("monospacedDigitSystemFontOfSize:weight:")]
		IntPtr _MonospacedDigitSystemFontOfSize (nfloat fontSize, nfloat weight);

		[Static]
		[Export ("boldSystemFontOfSize:")]
		[Internal] // bug 25511
		IntPtr _BoldSystemFontOfSize (nfloat size);

		[Static]
		[Export ("italicSystemFontOfSize:")]
		[Internal] // bug 25511
		IntPtr _ItalicSystemFontOfSize (nfloat size);

		[Static]
		[Export ("fontWithName:size:")]
		[Internal] // bug 25511
		IntPtr _FromName (string name, nfloat size);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Internal] // bug https://xamarin.github.io/bugzilla-archives/25/25511/bug.html
		[Export ("monospacedSystemFontOfSize:weight:")]
		IntPtr _MonospacedSystemFontOfSize (nfloat fontSize, nfloat weight);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("labelFontSize")]
		nfloat LabelFontSize { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("buttonFontSize")]
		nfloat ButtonFontSize { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("smallSystemFontSize")]
		nfloat SmallSystemFontSize { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemFontSize")]
		nfloat SystemFontSize { get; }

		[Export ("fontWithSize:")]
		[Internal] // bug 25511
		IntPtr _WithSize (nfloat size);

		[Export ("familyName", ArgumentSemantic.Retain)]
		string FamilyName { get; }

		[Export ("fontName", ArgumentSemantic.Retain)]
		string Name { get; }

		[Export ("pointSize")]
		nfloat PointSize { get; }

		[Export ("ascender")]
		nfloat Ascender { get; }

		[Export ("descender")]
		nfloat Descender { get; }

		[Export ("leading")]
		nfloat Leading { get; }

		[Export ("capHeight")]
		nfloat CapHeight { get; }

		[Export ("xHeight")]
		nfloat XHeight { get; }

#if !XAMCORE_5_0
		/// <summary>The size of the a lower cased "x", as measured in points.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Obsolete ("Use the 'XHeight' property instead.")]
		[Wrap ("XHeight", IsVirtual = true)]
		nfloat xHeight { get; }
#endif

		[Export ("lineHeight")]
		nfloat LineHeight { get; }

		[Static]
		[Export ("familyNames")]
		string [] FamilyNames { get; }

		[Static]
		[Export ("fontNamesForFamilyName:")]
		string [] FontNamesForFamilyName (string familyName);

		[Export ("fontDescriptor")]
		UIFontDescriptor FontDescriptor { get; }

		[Static, Export ("fontWithDescriptor:size:")]
		[Internal] // bug 25511
		IntPtr _FromDescriptor (UIFontDescriptor descriptor, nfloat pointSize);

		[Static, Export ("preferredFontForTextStyle:")]
		[Internal] // bug 25511
		IntPtr _GetPreferredFontForTextStyle (NSString uiFontTextStyle);

		// FIXME the API is present but UITraitCollection is not exposed / rdar 27785753
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("preferredFontForTextStyle:compatibleWithTraitCollection:")]
		[Internal]
		IntPtr _GetPreferredFontForTextStyle (NSString uiFontTextStyle, [NullAllowed] UITraitCollection traitCollection);

		[iOS (16, 0), TV (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Internal]
		[Export ("systemFontOfSize:weight:width:")]
		IntPtr _SystemFontOfSize (nfloat fontSize, nfloat weight, nfloat width);

	}

	/// <summary>Enumerates font styles for parts of a document.</summary>
	/// <remarks>To be added.</remarks>
	public enum UIFontTextStyle {
		/// <summary>Indicated headline text.</summary>
		[Field ("UIFontTextStyleHeadline")]
		Headline,

		/// <summary>Indicates body text.</summary>
		[Field ("UIFontTextStyleBody")]
		Body,

		/// <summary>Indicates a subheading.</summary>
		[Field ("UIFontTextStyleSubheadline")]
		Subheadline,

		/// <summary>Indicates footnote text.</summary>
		[Field ("UIFontTextStyleFootnote")]
		Footnote,

		/// <summary>Indicates primary captions.</summary>
		[Field ("UIFontTextStyleCaption1")]
		Caption1,

		/// <summary>Indicates alternate captions.</summary>
		[Field ("UIFontTextStyleCaption2")]
		Caption2,

		/// <summary>Indicates a first level heading.</summary>
		[MacCatalyst (13, 1)]
		[Field ("UIFontTextStyleTitle1")]
		Title1,

		/// <summary>Indicates a second level heading.</summary>
		[MacCatalyst (13, 1)]
		[Field ("UIFontTextStyleTitle2")]
		Title2,

		/// <summary>Indicates a third level heading.</summary>
		[MacCatalyst (13, 1)]
		[Field ("UIFontTextStyleTitle3")]
		Title3,

		/// <summary>Indicates callout text.</summary>
		[MacCatalyst (13, 1)]
		[Field ("UIFontTextStyleCallout")]
		Callout,

		/// <summary>Indicates a large title.</summary>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIFontTextStyleLargeTitle")]
		LargeTitle,

		[iOS (17, 0), TV (17, 0), MacCatalyst (17, 0)]
		[Field ("UIFontTextStyleExtraLargeTitle")]
		ExtraLargeTitle,

		[iOS (17, 0), TV (17, 0), MacCatalyst (17, 0)]
		[Field ("UIFontTextStyleExtraLargeTitle2")]
		ExtraLargeTitle2,
	}

	[BaseType (typeof (NSObject))]
	[ThreadSafe]
	partial interface UIFontDescriptor : NSSecureCoding, NSCopying {

		[Export ("postscriptName")]
		string PostscriptName { get; }

		[Export ("pointSize")]
		nfloat PointSize { get; }

		[Export ("matrix")]
		CGAffineTransform Matrix { get; }

		[Export ("symbolicTraits")]
		UIFontDescriptorSymbolicTraits SymbolicTraits { get; }

		[Export ("objectForKey:")]
		[return: NullAllowed]
		NSObject GetObject (NSString anAttribute);

		[Export ("fontAttributes")]
		NSDictionary WeakFontAttributes { get; }

		/// <summary>The font attributes.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Wrap ("WeakFontAttributes")]
		UIFontAttributes FontAttributes { get; }

		[Export ("matchingFontDescriptorsWithMandatoryKeys:")]
		UIFontDescriptor [] GetMatchingFontDescriptors ([NullAllowed] NSSet mandatoryKeys);

		[Static, Export ("fontDescriptorWithFontAttributes:")]
		UIFontDescriptor FromAttributes (NSDictionary attributes);

		/// <param name="attributes">Weak dictionary of font attributes.</param>
		///         <summary>Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
		///         <returns>
		///         </returns>
		///         <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Static, Wrap ("FromAttributes (attributes.GetDictionary ()!)")]
		UIFontDescriptor FromAttributes (UIFontAttributes attributes);

		/// <param name="fontName">Font name.</param>
		/// <param name="size">Font size.</param>
		/// <summary>Creates a UIFontDescriptor using the specified name and font size.</summary>
		/// <returns>
		///         </returns>
		/// <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Static, Export ("fontDescriptorWithName:size:")]
		UIFontDescriptor FromName (string fontName, nfloat size);

		[Static, Export ("fontDescriptorWithName:matrix:")]
		UIFontDescriptor FromName (string fontName, CGAffineTransform matrix);

		[Static, Export ("preferredFontDescriptorWithTextStyle:")]
		UIFontDescriptor GetPreferredDescriptorForTextStyle (NSString uiFontTextStyle);

		/// <param name="uiFontTextStyle">Name of one of the built-in system text styles.</param>
		///         <summary>Weakly-typed version of an API used to retrieve the user's desired font size.</summary>
		///         <returns>To be added.</returns>
		///         <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Static]
		[Wrap ("GetPreferredDescriptorForTextStyle (uiFontTextStyle.GetConstant ()!)")]
		UIFontDescriptor GetPreferredDescriptorForTextStyle (UIFontTextStyle uiFontTextStyle);

		// FIXME the API is present but UITraitCollection is not exposed / rdar #27785753
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:")]
		UIFontDescriptor GetPreferredDescriptorForTextStyle (NSString uiFontTextStyle, [NullAllowed] UITraitCollection traitCollection);

		/// <param name="uiFontTextStyle">Name of one of the built-in system text styles.</param>
		///         <param name="traitCollection">
		///           <para>The trait collection for which to get the preferred font descriptor.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		///         <summary>Returns the preferred font descriptor for the specified style and trait collection.</summary>
		///         <returns>To be added.</returns>
		///         <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Static]
		[Wrap ("GetPreferredDescriptorForTextStyle (uiFontTextStyle.GetConstant ()!, traitCollection)")]
		UIFontDescriptor GetPreferredDescriptorForTextStyle (UIFontTextStyle uiFontTextStyle, [NullAllowed] UITraitCollection traitCollection);

		[DesignatedInitializer]
		[Export ("initWithFontAttributes:")]
		NativeHandle Constructor (NSDictionary attributes);

		/// <param name="attributes">List of desired font attributes.</param>
		/// <summary>Creates a font descriptor using the specified font attributes.</summary>
		/// <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[DesignatedInitializer]
		[Wrap ("this (attributes.GetDictionary ()!)")]
		NativeHandle Constructor (UIFontAttributes attributes);

		[Export ("fontDescriptorByAddingAttributes:")]
		UIFontDescriptor CreateWithAttributes (NSDictionary attributes);

		/// <param name="attributes">dictionary containing the attributes.</param>
		///         <summary>Creates a new UIFontDescriptor based on adding the provided attributes to the current descriptor.</summary>
		///         <returns>New UIFontDescriptor containing the added attributes.</returns>
		///         <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Wrap ("CreateWithAttributes (attributes.GetDictionary ()!)")]
		UIFontDescriptor CreateWithAttributes (UIFontAttributes attributes);

		[Export ("fontDescriptorWithSymbolicTraits:")]
		UIFontDescriptor CreateWithTraits (UIFontDescriptorSymbolicTraits symbolicTraits);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("fontDescriptorWithDesign:")]
		[return: NullAllowed]
		[EditorBrowsable (EditorBrowsableState.Advanced)]
		UIFontDescriptor CreateWithDesign (NSString design);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[return: NullAllowed]
		[Wrap ("CreateWithDesign (design.GetConstant ()!)")]
		UIFontDescriptor CreateWithDesign (UIFontDescriptorSystemDesign design);

		/// <param name="newPointSize">New desired font size for the descriptor.</param>
		/// <summary>Creates a new UIFontDescriptor based on setting a new font size to the current descriptor.</summary>
		/// <returns>New UIFontDescriptor containing the added font size.</returns>
		/// <remarks>
		///           <para>
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("fontDescriptorWithSize:")]
		UIFontDescriptor CreateWithSize (nfloat newPointSize);

		[Export ("fontDescriptorWithMatrix:")]
		UIFontDescriptor CreateWithMatrix (CGAffineTransform matrix);

		[Export ("fontDescriptorWithFace:")]
		UIFontDescriptor CreateWithFace (string newFace);

		[Export ("fontDescriptorWithFamily:")]
		UIFontDescriptor CreateWithFamily (string newFamily);


		//
		// Internal fields
		//
		[Internal, Field ("UIFontDescriptorFamilyAttribute")]
		NSString FamilyAttribute { get; }

		[Internal, Field ("UIFontDescriptorNameAttribute")]
		NSString NameAttribute { get; }

		[Internal, Field ("UIFontDescriptorFaceAttribute")]
		NSString FaceAttribute { get; }

		[Internal, Field ("UIFontDescriptorSizeAttribute")]
		NSString SizeAttribute { get; }

		[Internal, Field ("UIFontDescriptorVisibleNameAttribute")]
		NSString VisibleNameAttribute { get; }

		[Internal, Field ("UIFontDescriptorMatrixAttribute")]
		NSString MatrixAttribute { get; }

		[Internal, Field ("UIFontDescriptorCharacterSetAttribute")]
		NSString CharacterSetAttribute { get; }

		[Internal, Field ("UIFontDescriptorCascadeListAttribute")]
		NSString CascadeListAttribute { get; }

		[Internal, Field ("UIFontDescriptorTraitsAttribute")]
		NSString TraitsAttribute { get; }

		[Internal, Field ("UIFontDescriptorFixedAdvanceAttribute")]
		NSString FixedAdvanceAttribute { get; }

		[Internal, Field ("UIFontDescriptorFeatureSettingsAttribute")]
		NSString FeatureSettingsAttribute { get; }

		[Internal, Field ("UIFontDescriptorTextStyleAttribute")]
		NSString TextStyleAttribute { get; }

		[Internal, Field ("UIFontSymbolicTrait")]
		NSString SymbolicTrait { get; }

		[Internal, Field ("UIFontWeightTrait")]
		NSString WeightTrait { get; }

		[Internal, Field ("UIFontWidthTrait")]
		NSString WidthTrait { get; }

		[Internal, Field ("UIFontSlantTrait")]
		NSString SlantTrait { get; }

		[Internal, Field ("UIFontFeatureSelectorIdentifierKey")]
		NSString UIFontFeatureSelectorIdentifierKey { get; }

		[Internal, Field ("UIFontFeatureTypeIdentifierKey")]
		NSString UIFontFeatureTypeIdentifierKey { get; }

	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIGestureRecognizerDelegate) })]
	[Dispose ("OnDispose ();", Optimizable = true)]
	interface UIGestureRecognizer {
		[DesignatedInitializer]
		[Export ("initWithTarget:action:")]
		NativeHandle Constructor (NSObject target, Selector action);

		[Export ("initWithTarget:action:")]
		[Sealed]
		[Internal]
		NativeHandle Constructor (NSObject target, IntPtr /* SEL */ action);

		[Export ("delegate", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIGestureRecognizerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIGestureRecognizerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIGestureRecognizerDelegate Delegate { get; set; }

		/// <summary>Whether the UIGestureRecognizer is enabled.</summary>
		///         <value>If set to <see langword="true" />, indicates whether the gesture recognizer is enabled. Otherwise set to <see langword="false" />.</value>
		///         <remarks>To be added.</remarks>
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Export ("state")]
		UIGestureRecognizerState State { get; [Advice ("Only subclasses of 'UIGestureRecognizer' can set this property.")] set; }

		[Export ("view")]
		[Transient]
		UIView View { get; }

		[Export ("addTarget:action:")]
		void AddTarget (NSObject target, Selector action);

		[Export ("addTarget:action:")]
		[Internal]
		[Sealed]
		void AddTarget (NSObject target, IntPtr action);

		[Export ("removeTarget:action:")]
		void RemoveTarget ([NullAllowed] NSObject target, [NullAllowed] Selector action);

		[Export ("removeTarget:action:")]
		[Internal]
		[Sealed]
		void RemoveTarget ([NullAllowed] NSObject target, IntPtr action);

		[Export ("locationInView:")]
		CGPoint LocationInView ([NullAllowed] UIView view);

		[Export ("cancelsTouchesInView")]
		bool CancelsTouchesInView { get; set; }

		[Export ("delaysTouchesBegan")]
		bool DelaysTouchesBegan { get; set; }

		[Export ("delaysTouchesEnded")]
		bool DelaysTouchesEnded { get; set; }

		/// <param name="touchIndex">To be added.</param>
		/// <param name="inView">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Gets the location, in the coordinate system of <paramref name="inView" />, of one of the touches in the gesture.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("locationOfTouch:inView:")]
		CGPoint LocationOfTouch (nint touchIndex, [NullAllowed] UIView inView);

		[Export ("numberOfTouches")]
		nint NumberOfTouches { get; }

		[Export ("requireGestureRecognizerToFail:")]
		void RequireGestureRecognizerToFail (UIGestureRecognizer otherGestureRecognizer);

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("name")]
		string Name { get; set; }

		[NoTV, iOS (13, 4)]
		[MacCatalyst (13, 1)]
		[Export ("modifierFlags")]
		UIKeyModifierFlags ModifierFlags { get; }

		[NoTV, iOS (13, 4)]
		[MacCatalyst (13, 1)]
		[Export ("buttonMask")]
		UIEventButtonMask ButtonMask { get; }

		//
		// These come from the UIGestureRecognizerProtected category, and you should only call
		// these methods from a subclass of UIGestureRecognizer, never externally
		//

		[Export ("ignoreTouch:forEvent:")]
		void IgnoreTouch (UITouch touch, UIEvent forEvent);

		/// <param name="button">To be added.</param>
		///         <param name="event">To be added.</param>
		///         <summary>Developers may override this method to tell the gesture recognizer to ignore specific presses.</summary>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Sealed] // Docs: This method is intended to be called, not overridden.
		[Export ("ignorePress:forEvent:")]
		void IgnorePress (UIPress button, UIPressesEvent @event);

		[Export ("reset")]
		void Reset ();

		[Export ("canPreventGestureRecognizer:")]
		bool CanPreventGestureRecognizer (UIGestureRecognizer preventedGestureRecognizer);

		[Export ("canBePreventedByGestureRecognizer:")]
		bool CanBePreventedByGestureRecognizer (UIGestureRecognizer preventingGestureRecognizer);

		[Export ("touchesBegan:withEvent:")]
		void TouchesBegan (NSSet touches, UIEvent evt);

		[Export ("touchesMoved:withEvent:")]
		void TouchesMoved (NSSet touches, UIEvent evt);

		[Export ("touchesEnded:withEvent:")]
		void TouchesEnded (NSSet touches, UIEvent evt);

		[Export ("touchesCancelled:withEvent:")]
		void TouchesCancelled (NSSet touches, UIEvent evt);

		[Export ("shouldRequireFailureOfGestureRecognizer:")]
		bool ShouldRequireFailureOfGestureRecognizer (UIGestureRecognizer otherGestureRecognizer);

		[Export ("shouldBeRequiredToFailByGestureRecognizer:")]
		bool ShouldBeRequiredToFailByGestureRecognizer (UIGestureRecognizer otherGestureRecognizer);

		[iOS (13, 4), TV (13, 4)]
		[MacCatalyst (13, 1)]
		[Export ("shouldReceiveEvent:")]
		bool ShouldReceive (UIEvent @event);

		[MacCatalyst (13, 1)]
		[Export ("touchesEstimatedPropertiesUpdated:")]
		void TouchesEstimatedPropertiesUpdated (NSSet touches);

		// FIXME: likely an array of UITouchType
		[MacCatalyst (13, 1)]
		[Export ("allowedTouchTypes", ArgumentSemantic.Copy)]
		NSNumber [] AllowedTouchTypes { get; set; }

		// FIXME: likely an array of UIPressType
		[MacCatalyst (13, 1)]
		[Export ("allowedPressTypes", ArgumentSemantic.Copy)]
		NSNumber [] AllowedPressTypes { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("requiresExclusiveTouchType")]
		bool RequiresExclusiveTouchType { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("pressesBegan:withEvent:")]
		void PressesBegan (NSSet<UIPress> presses, UIPressesEvent evt);

		[MacCatalyst (13, 1)]
		[Export ("pressesChanged:withEvent:")]
		void PressesChanged (NSSet<UIPress> presses, UIPressesEvent evt);

		[MacCatalyst (13, 1)]
		[Export ("pressesEnded:withEvent:")]
		void PressesEnded (NSSet<UIPress> presses, UIPressesEvent evt);

		[MacCatalyst (13, 1)]
		[Export ("pressesCancelled:withEvent:")]
		void PressesCancelled (NSSet<UIPress> presses, UIPressesEvent evt);
	}

	interface IUIGestureRecognizerDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIGestureRecognizerDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIGestureRecognizerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIGestureRecognizerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIGestureRecognizerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[NoMac]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIGestureRecognizerDelegate {
		/// <param name="recognizer">To be added.</param>
		/// <param name="touch">To be added.</param>
		/// <summary>Whether the recognizer should receive the specified touch.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>
			        </value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("gestureRecognizer:shouldReceiveTouch:"), DefaultValue (true), DelegateName ("UITouchEventArgs")]
		bool ShouldReceiveTouch (UIGestureRecognizer recognizer, UITouch touch);

		/// <param name="gestureRecognizer">To be added.</param>
		/// <param name="otherGestureRecognizer">To be added.</param>
		/// <summary>Whether the two gesture recognizers should be allowed to recognize gestures simultaneously.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>
			        </value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:"), DelegateName ("UIGesturesProbe"), DefaultValue (false)]
		bool ShouldRecognizeSimultaneously (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);

		/// <param name="recognizer">To be added.</param>
		/// <summary>Whether the gesture recognition should begin.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>
			        </value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("gestureRecognizerShouldBegin:"), DelegateName ("UIGestureProbe"), DefaultValue (true)]
		bool ShouldBegin (UIGestureRecognizer recognizer);

		/// <param name="gestureRecognizer">To be added.</param>
		/// <param name="otherGestureRecognizer">To be added.</param>
		/// <summary>Whether there is a dynamic failure requirement between the specified gesture recognizers.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>If set to <see langword="true" />, sets up the failure requirement. Otherwise set to <see langword="false" />.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:"), DelegateName ("UIGesturesProbe"), DefaultValue (false)]
		bool ShouldBeRequiredToFailBy (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);

		/// <param name="gestureRecognizer">To be added.</param>
		/// <param name="otherGestureRecognizer">To be added.</param>
		/// <summary>Whether the specified gestureRecognizer should be required to fail by the otherGestureRecognizer.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>
			        </value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("gestureRecognizer:shouldRequireFailureOfGestureRecognizer:"), DelegateName ("UIGesturesProbe"), DefaultValue (false)]
		bool ShouldRequireFailureOf (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer);

		/// <param name="gestureRecognizer">To be added.</param>
		/// <param name="press">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("gestureRecognizer:shouldReceivePress:"), DelegateName ("UIGesturesPress"), DefaultValue (false)]
		bool ShouldReceivePress (UIGestureRecognizer gestureRecognizer, UIPress press);

		[TV (13, 4), iOS (13, 4)]
		[MacCatalyst (13, 1)]
		[Export ("gestureRecognizer:shouldReceiveEvent:"), DelegateName ("UIGesturesEvent"), DefaultValue (true)]
		bool ShouldReceiveEvent (UIGestureRecognizer gestureRecognizer, UIEvent @event);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIGraphicsRendererFormat : NSCopying {
		[Deprecated (PlatformName.TvOS, 11, 0, message: "Use 'PreferredFormat' instead.")]
		// not deprecated on iOS or Mac Catalyst
		[Static]
		[Export ("defaultFormat")]
		UIGraphicsRendererFormat DefaultFormat { get; }

		[Export ("bounds")]
		CGRect Bounds { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("preferredFormat")]
		UIGraphicsRendererFormat PreferredFormat { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIGraphicsRendererContext {
		[Export ("CGContext")]
		CGContext CGContext { get; }

		[Export ("format")]
		UIGraphicsRendererFormat Format { get; }

		[Export ("fillRect:")]
		void FillRect (CGRect rect);

		[Export ("fillRect:blendMode:")]
		void FillRect (CGRect rect, CGBlendMode blendMode);

		[Export ("strokeRect:")]
		void StrokeRect (CGRect rect);

		[Export ("strokeRect:blendMode:")]
		void StrokeRect (CGRect rect, CGBlendMode blendMode);

		[Export ("clipToRect:")]
		void ClipToRect (CGRect rect);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Abstract] // quote form headers "An abstract base class for creating graphics renderers. Do not use this class directly."
	interface UIGraphicsRenderer {
		[ThreadSafe]
		[Export ("initWithBounds:")]
		NativeHandle Constructor (CGRect bounds);

		[ThreadSafe]
		[Export ("initWithBounds:format:")]
		[DesignatedInitializer]
		NativeHandle Constructor (CGRect bounds, UIGraphicsRendererFormat format);

		[ThreadSafe]
		[Export ("format")]
		UIGraphicsRendererFormat Format { get; }

		[ThreadSafe]
		[Export ("allowsImageOutput")]
		bool AllowsImageOutput { get; }

		// From UIGraphicsRenderer (UIGraphicsRendererProtected) category

		[ThreadSafe]
		[Static]
		[Export ("rendererContextClass")]
		Class RendererContextClass { get; }

		[ThreadSafe]
		[Static]
		[Export ("contextWithFormat:")]
		[return: NullAllowed]
		CGContext GetContext (UIGraphicsRendererFormat format);

		[ThreadSafe]
		[Static]
		[Export ("prepareCGContext:withRendererContext:")]
		void PrepareContext (CGContext context, UIGraphicsRendererContext rendererContext);

		[ThreadSafe]
		[Export ("runDrawingActions:completionActions:error:")]
		bool Run (Action<UIGraphicsRendererContext> drawingActions, [NullAllowed] Action<UIGraphicsRendererContext> completionActions, [NullAllowed] out NSError error);
	}

	// Not worth it, Action<UIGraphicsImageRendererContext> conveys more data
	//delegate void UIGraphicsImageDrawingActions (UIGraphicsImageRendererContext context);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGraphicsRendererFormat))]
	interface UIGraphicsImageRendererFormat {
		[Export ("scale")]
		nfloat Scale { get; set; }

		[Export ("opaque")]
		bool Opaque { get; set; }

		[Deprecated (PlatformName.iOS, 12, 0, message: "Use the 'PreferredRange' property instead.")]
		[Deprecated (PlatformName.TvOS, 12, 0, message: "Use the 'PreferredRange' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use the 'PreferredRange' property instead.")]
		[Export ("prefersExtendedRange")]
		bool PrefersExtendedRange { get; set; }

		[New] // kind of overloading a static member, make it return `instancetype`
		[Static]
		[Export ("defaultFormat")]
		UIGraphicsImageRendererFormat DefaultFormat { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("formatForTraitCollection:")]
		UIGraphicsImageRendererFormat GetFormat (UITraitCollection traitCollection);

		[MacCatalyst (13, 1)]
		[Export ("preferredRange", ArgumentSemantic.Assign)]
		UIGraphicsImageRendererFormatRange PreferredRange { get; set; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("supportsHighDynamicRange")]
		bool SupportsHighDynamicRange { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGraphicsRendererContext))]
	interface UIGraphicsImageRendererContext {
		[Export ("currentImage")]
		UIImage CurrentImage { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGraphicsRenderer))]
	interface UIGraphicsImageRenderer {
		[ThreadSafe]
		[Export ("initWithSize:")]
		NativeHandle Constructor (CGSize size);

		[ThreadSafe]
		[Export ("initWithSize:format:")]
		[DesignatedInitializer]
		NativeHandle Constructor (CGSize size, UIGraphicsImageRendererFormat format);

		[Export ("initWithBounds:format:")]
		[DesignatedInitializer]
		NativeHandle Constructor (CGRect bounds, UIGraphicsImageRendererFormat format);

		[ThreadSafe]
		[Export ("imageWithActions:")]
		UIImage CreateImage (Action<UIGraphicsImageRendererContext> actions);

		[ThreadSafe]
		[Export ("PNGDataWithActions:")]
		NSData CreatePng (Action<UIGraphicsImageRendererContext> actions);

		/// <param name="compressionQuality">To be added.</param>
		/// <param name="actions">To be added.</param>
		/// <summary>Returns <see cref="Foundation.NSData" /> whose content is a JPEG representation of the current graphics context.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[ThreadSafe]
		[Export ("JPEGDataWithCompressionQuality:actions:")]
		NSData CreateJpeg (nfloat compressionQuality, Action<UIGraphicsImageRendererContext> actions);
	}

	// Not worth it, Action<UIGraphicsImageRendererContext> conveys more data
	//delegate void UIGraphicsPdfDrawingActions (UIGraphicsPdfRendererContext context);
	// Action<UIGraphicsPdfRendererContext>

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGraphicsRendererFormat), Name = "UIGraphicsPDFRendererFormat")]
	interface UIGraphicsPdfRendererFormat {
		[Export ("documentInfo", ArgumentSemantic.Copy)]
		// TODO: add strongly typed binding
		NSDictionary<NSString, NSObject> DocumentInfo { get; set; }

		[New] // kind of overloading a static member, make it return `instancetype`
		[Static]
		[Export ("defaultFormat")]
		UIGraphicsPdfRendererFormat DefaultFormat { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGraphicsRendererContext), Name = "UIGraphicsPDFRendererContext")]
	interface UIGraphicsPdfRendererContext {
		[Export ("pdfContextBounds")]
		CGRect PdfContextBounds { get; }

		[Export ("beginPage")]
		void BeginPage ();

		[Export ("beginPageWithBounds:pageInfo:")]
		void BeginPage (CGRect bounds, NSDictionary<NSString, NSObject> pageInfo);

		[Export ("setURL:forRect:")]
		void SetUrl (NSUrl url, CGRect rect);

		[Export ("addDestinationWithName:atPoint:")]
		void AddDestination (string name, CGPoint point);

		[Export ("setDestinationWithName:forRect:")]
		void SetDestination (string name, CGRect rect);
	}


	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGraphicsRenderer), Name = "UIGraphicsPDFRenderer")]
	interface UIGraphicsPdfRenderer {
		[ThreadSafe]
		[Export ("initWithBounds:format:")]
		[DesignatedInitializer]
		NativeHandle Constructor (CGRect bounds, UIGraphicsPdfRendererFormat format);

		[ThreadSafe]
		[Export ("writePDFToURL:withActions:error:")]
		bool WritePdf (NSUrl url, Action<UIGraphicsPdfRendererContext> actions, out NSError error);

		[ThreadSafe]
		[Export ("PDFDataWithActions:")]
		NSData CreatePdf (Action<UIGraphicsPdfRendererContext> actions);
	}

	[BaseType (typeof (UIDynamicBehavior))]
	[MacCatalyst (13, 1)]
	interface UIGravityBehavior {
		[DesignatedInitializer]
		[Export ("initWithItems:")]
		NativeHandle Constructor ([Params] IUIDynamicItem [] items);

		[Export ("items", ArgumentSemantic.Copy)]
		IUIDynamicItem [] Items { get; }

		[Export ("addItem:")]
		[PostGet ("Items")]
		void AddItem (IUIDynamicItem dynamicItem);

		[Export ("removeItem:")]
		[PostGet ("Items")]
		void RemoveItem (IUIDynamicItem dynamicItem);

		[Export ("gravityDirection")]
		CGVector GravityDirection { get; set; }

		[Export ("angle")]
		nfloat Angle { get; set; }

		[Export ("magnitude")]
		nfloat Magnitude { get; set; }

		/// <param name="angle">To be added.</param>
		/// <param name="magnitude">To be added.</param>
		/// <summary>Sets both the angle and magnitude of the gravity vector of this UIGravityBehavior.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setAngle:magnitude:")]
		void SetAngleAndMagnitude (nfloat angle, nfloat magnitude);
	}

	/// <summary>An interface implemented by <see cref="UIKit.UITextField" /> and <see cref="UIKit.UITextView" /> with common input traits.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITextInputTraits {
		/// <summary>The <see cref="UIKit.UITextAutocapitalizationType" /> used by the <see cref="UIKit.IUITextInput" />.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("autocapitalizationType")]
		UITextAutocapitalizationType AutocapitalizationType { get; set; }

		/// <summary>The <see cref="UIKit.UITextAutocorrectionType" /> used by the <see cref="UIKit.IUITextInput" />.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("autocorrectionType")]
		UITextAutocorrectionType AutocorrectionType { get; set; }

		/// <summary>The <see cref="UIKit.UIKeyboardType" /> used by the <see cref="UIKit.IUITextInput" />.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("keyboardType")]
		UIKeyboardType KeyboardType { get; set; }

		/// <summary>The <see cref="UIKit.UIKeyboardAppearance" /> used by the <see cref="UIKit.IUITextInput" /></summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("keyboardAppearance")]
		UIKeyboardAppearance KeyboardAppearance { get; set; }

		/// <summary>The form of the return key for the <see cref="UIKit.IUITextInput" />.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("returnKeyType")]
		UIReturnKeyType ReturnKeyType { get; set; }

		/// <summary>Whether the return key is automatically enabled.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("enablesReturnKeyAutomatically")]
		bool EnablesReturnKeyAutomatically { get; set; }

		/// <summary>Whether the entered text should be hidden.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("secureTextEntry")]
		bool SecureTextEntry { [Bind ("isSecureTextEntry")] get; set; }

		/// <summary>Gets or sets a value that tells whether spell-checking is on, off, or if spell-checking will be enabled only when auto-complete is enabled (default).</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("spellCheckingType")]
		UITextSpellCheckingType SpellCheckingType { get; set; }

		/// <summary>The semantic of the expected input, which allows the system to, for example, provide custom keyboards.</summary>
		[MacCatalyst (13, 1)]
		[Export ("textContentType")]
		NSString TextContentType { get; set; }

		/// <summary>The smart quotes style.</summary>
		[MacCatalyst (13, 1)]
		[Export ("smartQuotesType", ArgumentSemantic.Assign)]
		UITextSmartQuotesType SmartQuotesType { get; set; }

		/// <summary>The smart dashes style.</summary>
		[MacCatalyst (13, 1)]
		[Export ("smartDashesType", ArgumentSemantic.Assign)]
		UITextSmartDashesType SmartDashesType { get; set; }

		/// <summary>The smart insert style.</summary>
		[MacCatalyst (13, 1)]
		[Export ("smartInsertDeleteType", ArgumentSemantic.Assign)]
		UITextSmartInsertDeleteType SmartInsertDeleteType { get; set; }

		/// <summary>The password entry rules.</summary>
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("passwordRules", ArgumentSemantic.Copy)]
		UITextInputPasswordRules PasswordRules { get; set; }

		[iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("inlinePredictionType", ArgumentSemantic.Assign)]
		UITextInlinePredictionType InlinePredictionType { get; set; }

		[iOS (18, 0), MacCatalyst (18, 0), NoTV]
		[Export ("writingToolsBehavior")]
		UIWritingToolsBehavior WritingToolsBehavior { get; set; }

		[iOS (18, 0), MacCatalyst (18, 0), NoTV]
		[Export ("allowedWritingToolsResultOptions", ArgumentSemantic.Assign)]
		UIWritingToolsResultOptions AllowedWritingToolsResultOptions { get; set; }

		[iOS (18, 0), MacCatalyst (18, 0), TV (18, 0)]
		[Export ("mathExpressionCompletionType")]
		UITextMathExpressionCompletionType MathExpressionCompletionType { get; set; }

		[NoTV, NoMacCatalyst, iOS (18, 4)]
		[Export ("conversationContext", ArgumentSemantic.Strong)]
		UIConversationContext ConversationContext { get; set; }
	}

	/// <summary>Provides data for the  event.</summary>
	[MacCatalyst (13, 1)]
	interface UIKeyboardEventArgs {
		/// <summary>The initial frame for the keyboard and accessory input view before the animation starts.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Export ("UIKeyboardFrameBeginUserInfoKey")]
		CGRect FrameBegin { get; }

		/// <summary>The target frame that the keyboard and accessory input view will have when the animation ends.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("UIKeyboardFrameEndUserInfoKey")]
		CGRect FrameEnd { get; }

		/// <summary>The duration in seconds that the animation to show or hide the keyboard will take.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("UIKeyboardAnimationDurationUserInfoKey")]
		double AnimationDuration { get; }

		/// <summary>Describes the animation curve that will be used to animate the keyboard when it appears or disappears.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("UIKeyboardAnimationCurveUserInfoKey")]
		UIViewAnimationCurve AnimationCurve { get; }
	}

	/// <include file="../docs/api/UIKit/UIKeyboard.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIKeyboard']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[Static]
	interface UIKeyboard {
		/// <include file="../docs/api/UIKit/UIKeyboard.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIKeyboard.WillShowNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardWillShowNotification")]
		[Notification (typeof (UIKeyboardEventArgs))]
		NSString WillShowNotification { get; }

		/// <include file="../docs/api/UIKit/UIKeyboard.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIKeyboard.DidShowNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardDidShowNotification")]
		[Notification (typeof (UIKeyboardEventArgs))]
		NSString DidShowNotification { get; }

		/// <include file="../docs/api/UIKit/UIKeyboard.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIKeyboard.WillHideNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardWillHideNotification")]
		[Notification (typeof (UIKeyboardEventArgs))]
		NSString WillHideNotification { get; }

		/// <include file="../docs/api/UIKit/UIKeyboard.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIKeyboard.DidHideNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardDidHideNotification")]
		[Notification (typeof (UIKeyboardEventArgs))]
		NSString DidHideNotification { get; }

		/// <include file="../docs/api/UIKit/UIKeyboard.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIKeyboard.WillChangeFrameNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardWillChangeFrameNotification")]
		[Notification (typeof (UIKeyboardEventArgs))]
		NSString WillChangeFrameNotification { get; }

		/// <include file="../docs/api/UIKit/UIKeyboard.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIKeyboard.DidChangeFrameNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardDidChangeFrameNotification")]
		[Notification (typeof (UIKeyboardEventArgs))]
		NSString DidChangeFrameNotification { get; }

		//
		// Keys
		//
		/// <summary>Represents the value associated with the constant UIKeyboardAnimationCurveUserInfoKey</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardAnimationCurveUserInfoKey")]
		NSString AnimationCurveUserInfoKey { get; }

		/// <summary>Represents the value associated with the constant UIKeyboardAnimationDurationUserInfoKey</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardAnimationDurationUserInfoKey")]
		NSString AnimationDurationUserInfoKey { get; }

		/// <summary>Represents the value associated with the constant UIKeyboardFrameEndUserInfoKey</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardFrameEndUserInfoKey")]
		NSString FrameEndUserInfoKey { get; }

		/// <summary>Represents the value associated with the constant UIKeyboardFrameBeginUserInfoKey</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardFrameBeginUserInfoKey")]
		NSString FrameBeginUserInfoKey { get; }

		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIKeyboardIsLocalUserInfoKey")]
		NSString IsLocalUserInfoKey { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UICommand))]
	[DesignatedDefaultCtor]
	interface UIKeyCommand {

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("title")]
		string Title { get; set; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("image", ArgumentSemantic.Copy)]
		UIImage Image { get; set; }

		[NullAllowed, Export ("input")]
		NSString Input { get; }

		[Export ("modifierFlags")]
		UIKeyModifierFlags ModifierFlags { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("propertyList")]
		NSObject PropertyList { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("attributes", ArgumentSemantic.Assign)]
		UIMenuElementAttributes Attributes { get; set; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("state", ArgumentSemantic.Assign)]
		UIMenuElementState State { get; set; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("alternates")]
		UICommandAlternate [] Alternates { get; }

		[iOS (15, 0), TV (15, 0), MacCatalyst (15, 0)]
		[Export ("wantsPriorityOverSystemBehavior")]
		bool WantsPriorityOverSystemBehavior { get; set; }

		[iOS (15, 0), TV (15, 0), MacCatalyst (15, 0)]
		[Export ("allowsAutomaticLocalization")]
		bool AllowsAutomaticLocalization { get; set; }

		[iOS (15, 0), TV (15, 0), MacCatalyst (15, 0)]
		[Export ("allowsAutomaticMirroring")]
		bool AllowsAutomaticMirroring { get; set; }

		[Static, Export ("keyCommandWithInput:modifierFlags:action:")]
		UIKeyCommand Create (NSString keyCommandInput, UIKeyModifierFlags modifierFlags, Selector action);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("commandWithTitle:image:action:input:modifierFlags:propertyList:")]
		UIKeyCommand Create (string title, [NullAllowed] UIImage image, Selector action, string input, UIKeyModifierFlags modifierFlags, [NullAllowed] NSObject propertyList);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("commandWithTitle:image:action:input:modifierFlags:propertyList:alternates:")]
		UIKeyCommand Create (string title, [NullAllowed] UIImage image, Selector action, string input, UIKeyModifierFlags modifierFlags, [NullAllowed] NSObject propertyList, UICommandAlternate [] alternates);

		/// <summary>Represents the value associated with the constant UIKeyInputUpArrow</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIKeyInputUpArrow")]
		NSString UpArrow { get; }

		/// <summary>Represents the value associated with the constant UIKeyInputDownArrow</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIKeyInputDownArrow")]
		NSString DownArrow { get; }

		/// <summary>Represents the value associated with the constant UIKeyInputLeftArrow</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIKeyInputLeftArrow")]
		NSString LeftArrow { get; }

		/// <summary>Represents the value associated with the constant UIKeyInputRightArrow</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIKeyInputRightArrow")]
		NSString RightArrow { get; }

		/// <summary>Represents the value associated with the constant UIKeyInputEscape</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIKeyInputEscape")]
		NSString Escape { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputPageUp")]
		NSString PageUp { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputPageDown")]
		NSString PageDown { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputHome")]
		NSString Home { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputEnd")]
		NSString End { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF1")]
		NSString F1 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF2")]
		NSString F2 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF3")]
		NSString F3 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF4")]
		NSString F4 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF5")]
		NSString F5 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF6")]
		NSString F6 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF7")]
		NSString F7 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF8")]
		NSString F8 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF9")]
		NSString F9 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF10")]
		NSString F10 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF11")]
		NSString F11 { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[Field ("UIKeyInputF12")]
		NSString F12 { get; }

		[iOS (15, 0), TV (15, 0), MacCatalyst (15, 0)]
		[Field ("UIKeyInputDelete")]
		NSString Delete { get; }

		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'UIKeyCommand.Create (NSString, UIKeyModifierFlags, Selector)' overload instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'UIKeyCommand.Create (NSString, UIKeyModifierFlags, Selector)' overload instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIKeyCommand.Create (NSString, UIKeyModifierFlags, Selector)' overload instead.")]
		[Static]
		[Export ("keyCommandWithInput:modifierFlags:action:discoverabilityTitle:")]
		UIKeyCommand Create (NSString keyCommandInput, UIKeyModifierFlags modifierFlags, Selector action, NSString discoverabilityTitle);

		[MacCatalyst (13, 1)]
		[NullAllowed]
		[Export ("discoverabilityTitle")]
		NSString DiscoverabilityTitle { get; set; }
	}

	interface IUIKeyInput { }

	/// <summary>Interface that, together with the <see cref="UIKit.UIKeyInput_Extensions" /> class, comprise the UIKeyInput protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIKeyInput : UITextInputTraits {
		/// <summary>Gets a value that tells whether the key input has text in it.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("hasText")]
		bool HasText { get; }

		/// <param name="text">To be added.</param>
		/// <summary>Inserts text at the cursor.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("insertText:")]
		void InsertText (string text);

		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("deleteBackward")]
		void DeleteBackward ();
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITextPosition {
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITextRange {
		/// <summary>Whether this UITextRange is empty.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("isEmpty")]
		bool IsEmpty { get; }

		[Export ("start")]
		UITextPosition Start { get; }

		[Export ("end")]
		UITextPosition End { get; }
	}

	interface IUITextInput : INativeObject { }

	/// <summary>IUITextInput works with the inputting of text and allows the manipulaton of features including autocorrection and many other text input features related to document presentation.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITextInput : UIKeyInput {
		/// <summary>The range of a document's selected text.</summary>
		/// <value>If there is no current specified selection, then it is set to <see langword="null" />.</value>
		/// <remarks>If the specified range has length, it specifies currently selected text; if zero length, it specifies only the caret at the insertion point.</remarks>
		[Abstract]
		[NullAllowed] // by default this property is null
					  // This is declared as ArgumentSemantic.Copy, but UITextRange doesn't conform to NSCopying.
					  // Also declaring it as ArgumentSemantic.Copy makes UIKIt crash: https://github.com/dotnet/macios/issues/15677
		[Export ("selectedTextRange")]
		UITextRange SelectedTextRange { get; set; }

		/// <summary>Attribute dictionary describing how text should be drawn.</summary>
		/// <value>Strings indicating style definition.</value>
		/// <remarks>This is marked to indicate the necessity for unique visual treatment in display.</remarks>
		[Abstract]
		[NullAllowed] // by default this property is null
		[Export ("markedTextStyle", ArgumentSemantic.Copy)]
		NSDictionary MarkedTextStyle { get; set; }

		/// <summary>The position of text indicating the beginning of a document.</summary>
		/// <value>Gets the beginning of the document.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("beginningOfDocument")]
		UITextPosition BeginningOfDocument { get; }

		/// <summary>The position of text indicating the beginning of a document.</summary>
		/// <value>Gets the end of the document.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("endOfDocument")]
		UITextPosition EndOfDocument { get; }

		/// <summary>Indicates a weak input delegate.</summary>
		/// <value>Automatically assigned at runtime.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("inputDelegate", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakInputDelegate { get; set; }

		/// <summary>The input delegate object for this <see cref="UIKit.UITextField" />.</summary>
		/// <value>The default value is a system-provided <see cref="UIKit.UITextInputDelegate" />.</value>
		/// <remarks>To be added.</remarks>
		[Wrap ("WeakInputDelegate")]
		IUITextInputDelegate InputDelegate { get; set; }

		/// <summary>Indicates a weak tokenizer.</summary>
		/// <value>Standard units of granularity including characters, words, lines, and paragraphs.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("tokenizer")]
		NSObject WeakTokenizer { get; }

		/// <summary>This property provides information on the tokenizer that would be used to break up the text into units such as characters, words, lines, and paragraphs.</summary>
		/// <value>
		///         </value>
		/// <remarks>To be added.</remarks>
		[Wrap ("WeakTokenizer")]
		IUITextInputTokenizer Tokenizer { get; }

		/// <summary>Returns the input view that provides the coordinate system for geometric operations within the text input.</summary>
		[Export ("textInputView")]
		UIView TextInputView { get; }

		/// <summary>A value that controls whether the cursor is displayed at the start of the last line or end of the second-to-last line of a multiline selection.</summary>
		[Export ("selectionAffinity")]
		UITextStorageDirection SelectionAffinity { get; set; }

		/// <param name="range">A UITextRange object indicating the range of a document's text.</param>
		/// <summary>Gets all the text that is specified within a certain range.</summary>
		/// <returns>Document substring falling within a certain specified range.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("textInRange:")]
		string TextInRange (UITextRange range);

		/// <param name="range">The range of text to be replaced.</param>
		/// <param name="text">A string defining text replacement within a "range".</param>
		/// <summary>Replaces document text within a specified range.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("replaceRange:withText:")]
		void ReplaceText (UITextRange range, string text);

		/// <summary>The currently marked range of text in a given document.</summary>
		/// <value>If there is no text marked, the value is <see langword="null" />; all else  is provisionally inserted requiring user confirmation.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("markedTextRange")]
		UITextRange MarkedTextRange { get; }

		/// <param name="markedText">Text that is to be marked.</param>
		/// <param name="selectedRange">An NSRange object indicating the range of a document's text.</param>
		/// <summary>Sets the marked text and marks it as the current selection.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("setMarkedText:selectedRange:")]
		void SetMarkedText (string markedText, NSRange selectedRange);

		/// <summary>Unmarks all currently marked text within a document</summary>
		/// <remarks>Subsequent to this method being called, the value of "MarkedTextRange" is set to <see langword="null" />.</remarks>
		[Abstract]
		[Export ("unmarkText")]
		void UnmarkText ();

		/// <param name="fromPosition">Initial text position.</param>
		/// <param name="toPosition">Ultimate text position.</param>
		/// <summary>Gets a specified text range.</summary>
		/// <returns>Defined text range.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("textRangeFromPosition:toPosition:")]
		UITextRange GetTextRange (UITextPosition fromPosition, UITextPosition toPosition);

		/// <param name="fromPosition">Initial text position.</param>
		/// <param name="offset">Character offset from the initial position.</param>
		/// <summary>Gets the character offset from the initial position.</summary>
		/// <returns>The specified character offset.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("positionFromPosition:offset:")]
		UITextPosition GetPosition (UITextPosition fromPosition, nint offset);

		/// <param name="fromPosition">Initial text position</param>
		/// <param name="inDirection">A constant indicating either backward or forward direction for storage.</param>
		/// <param name="offset">Character offset from the initial position.</param>
		/// <summary>Gets the character offset from an initial position.</summary>
		/// <returns>The specified character offset.</returns>
		/// <remarks>This can be either a positive or negative value.</remarks>
		[Abstract]
		[Export ("positionFromPosition:inDirection:offset:")]
		UITextPosition GetPosition (UITextPosition fromPosition, UITextLayoutDirection inDirection, nint offset);

		/// <param name="first">First text position.</param>
		/// <param name="second">Second text position.</param>
		/// <summary>Gets a comparison of one position to another.</summary>
		/// <returns>An indication as to whether two text positions are identical or if one is prior to the other.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("comparePosition:toPosition:")]
		NSComparisonResult ComparePosition (UITextPosition first, UITextPosition second);

		/// <param name="fromPosition">Initial text position.</param>
		/// <param name="toPosition">Ultimate text position.</param>
		/// <summary>Gets the number of visible characters between two defined text positions.</summary>
		/// <returns>The number of visible characters between the two specified text positions.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("offsetFromPosition:toPosition:")]
		nint GetOffsetFromPosition (UITextPosition fromPosition, UITextPosition toPosition);

		/// <param name="range">A UITextRange object indicating the range of a document's text.</param>
		/// <param name="direction">A constant indicating direction for storage.</param>
		/// <summary>Gets a position within a specified range.</summary>
		/// <returns>A position within a specified range.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("positionWithinRange:farthestInDirection:")]
		UITextPosition GetPositionWithinRange (UITextRange range, UITextLayoutDirection direction);

		/// <param name="byExtendingPosition">A text positioning object identifying a location in a document.</param>
		/// <param name="direction">Constant indicating layout direction.</param>
		/// <summary>Gets a character range within the limits of a defined direction.</summary>
		/// <returns>Gets a range from a given text position to the ultimate extent in a defined direction.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("characterRangeByExtendingPosition:inDirection:")]
		UITextRange GetCharacterRange (UITextPosition byExtendingPosition, UITextLayoutDirection direction);

		/// <param name="forPosition">A positioning object that indicates a specified location.</param>
		/// <param name="direction">Constant indicating layout direction.</param>
		/// <summary>Gets the base writing direction for a text position.</summary>
		/// <returns>A text-range object that represents the distance from position to the farthest extent in a given direction.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("baseWritingDirectionForPosition:inDirection:")]
		NSWritingDirection GetBaseWritingDirection (UITextPosition forPosition, UITextStorageDirection direction);

		/// <param name="writingDirection">Constant indicating layout direction.</param>
		/// <param name="range">A UITextRange object indicating the range of a document's text.</param>
		/// <summary>Sets a base directon for writing in the specified range of text.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("setBaseWritingDirection:forRange:")]
#if XAMCORE_5_0
		void SetBaseWritingDirection (NSWritingDirection writingDirection, UITextRange range);
#else
		void SetBaseWritingDirectionforRange (NSWritingDirection writingDirection, UITextRange range);
#endif

		/// <param name="range">	
		/// A UITextRange object indicating the range of a document's text.</param>
		/// <summary>Gets the first rectangle enclosing a specified range of document text.</summary>
		/// <returns>The first rectangle enclosing a specified range.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("firstRectForRange:")]
		CGRect GetFirstRectForRange (UITextRange range);

		/// <param name="position">A positioning object that indicates a specified location.</param>
		/// <summary>A rectangle used for drawing a caret at a given insertion point.</summary>
		/// <returns>A rectangle defining an area for drawing a caret.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("caretRectForPosition:")]
		CGRect GetCaretRectForPosition ([NullAllowed] UITextPosition position);

		/// <param name="point">Point in a view where document text is being drawn.</param>
		/// <summary>Gets the closest position in a document that exists to a given point.</summary>
		/// <returns>The closest position to the point. </returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("closestPositionToPoint:")]
		UITextPosition GetClosestPositionToPoint (CGPoint point);

		/// <param name="point">To be added.</param>
		/// <param name="withinRange">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("closestPositionToPoint:withinRange:")]
		UITextPosition GetClosestPositionToPoint (CGPoint point, UITextRange withinRange);

		/// <param name="point">Point in a view where document text is being drawn.</param>
		/// <summary>Gets the character or a range of characters in a document that exists at a given point.</summary>
		/// <returns>Gets the point in a view where the document text is being drawn.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("characterRangeAtPoint:")]
		UITextRange GetCharacterRangeAtPoint (CGPoint point);

		/// <param name="atPosition">To be added.</param>
		/// <param name="inDirection">To be added.</param>
		/// <summary>Returns a dictionary of style properties for text at the <paramref name="atPosition" /> position.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textStylingAtPosition:inDirection:")]
		NSDictionary GetTextStyling (UITextPosition atPosition, UITextStorageDirection inDirection);

		/// <param name="withinRange">To be added.</param>
		/// <param name="atCharacterOffset">To be added.</param>
		/// <summary>Calculates and returns the absolute position in the document that is <paramref name="atCharacterOffset" /> characters into <paramref name="withinRange" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("positionWithinRange:atCharacterOffset:")]
		UITextPosition GetPosition (UITextRange withinRange, nint atCharacterOffset);

		/// <param name="position">To be added.</param>
		/// <param name="range">To be added.</param>
		/// <summary>Calculates and returns the offset into <paramref name="range" /> of the character that is in <paramref name="position" /> in the document.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("characterOffsetOfPosition:withinRange:")]
		nint GetCharacterOffsetOfPosition (UITextPosition position, UITextRange range);

		/// <summary>Developers should not use this deprecated property. Developers should use 'NSAttributedString.BackgroundColorAttributeName'.</summary>
		/// <value>
		///         </value>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'NSAttributedString.BackgroundColorAttributeName'.")]
		[Field ("UITextInputTextBackgroundColorKey")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSAttributedString.BackgroundColorAttributeName'.")]
		NSString TextBackgroundColorKey { get; }

		/// <summary>The property holds the key that should be used to retrieve the value of the text color from a <see cref="Foundation.NSDictionary" />.</summary>
		/// <value>
		///         </value>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'NSAttributedString.ForegroundColorAttributeName'.")]
		[Field ("UITextInputTextColorKey")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSAttributedString.ForegroundColorAttributeName'.")]
		NSString TextColorKey { get; }

		/// <summary>The property holds the key that should be used to retrieve the value of the font for the text from a <see cref="Foundation.NSDictionary" />.</summary>
		/// <value>
		///         </value>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'NSAttributedString.FontAttributeName'.")]
		[Field ("UITextInputTextFontKey")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSAttributedString.FontAttributeName'.")]
		NSString TextFontKey { get; }

		/// <include file="../docs/api/UIKit/UITextField.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITextField.CurrentInputModeDidChangeNotification']/*" />
		[Field ("UITextInputCurrentInputModeDidChangeNotification")]
		[Notification]
		NSString CurrentInputModeDidChangeNotification { get; }

		/// <summary>The recognition of dictation failed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dictationRecognitionFailed")]
		void DictationRecognitionFailed ();

		/// <summary>The recording of dictation ended.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dictationRecordingDidEnd")]
		void DictationRecordingDidEnd ();

		/// <param name="dictationResult">To be added.</param>
		/// <summary>Inserts a dictation result at the current position.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("insertDictationResult:")]
		void InsertDictationResult (NSArray dictationResult);

		/// <param name="range">A UITextRange object indicating the range of a document's text.</param>
		/// <summary>Gets an array of selection rects that corresponds to a text range.</summary>
		/// <returns>An array of selection rects.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("selectionRectsForRange:")]
		UITextSelectionRect [] GetSelectionRects (UITextRange range);

		/// <param name="inRange">To be added.</param>
		/// <param name="replacementText">To be added.</param>
		/// <summary>Asks whether the text in <paramref name="inRange" /> should be replaced with <paramref name="replacementText" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("shouldChangeTextInRange:replacementText:")]
		bool ShouldChangeTextInRange (UITextRange inRange, string replacementText);

		/// <param name="placeholder">To be added.</param>
		/// <summary>Returns the rectangle in which to display the animated dictation result placeholder.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("frameForDictationResultPlaceholder:")]
		CGRect GetFrameForDictationResultPlaceholder (NSObject placeholder);

		/// <summary>Returns the placeholder object to use before dictation results are finished being generated.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("insertDictationResultPlaceholder")]
		NSObject InsertDictationResultPlaceholder ();

		/// <param name="placeholder">To be added.</param>
		/// <param name="willInsertResult">To be added.</param>
		/// <summary>The <paramref name="placeholder" /> is no longer needed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("removeDictationResultPlaceholder:willInsertResult:")]
		void RemoveDictationResultPlaceholder (NSObject placeholder, bool willInsertResult);

		/// <param name="point">To be added.</param>
		/// <summary>Begins displaying the floating cursor at the specified <paramref name="point" />.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("beginFloatingCursorAtPoint:")]
		void BeginFloatingCursor (CGPoint point);

		/// <param name="point">To be added.</param>
		/// <summary>Moves the floating curor to the specified <paramref name="point" />.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("updateFloatingCursorAtPoint:")]
		void UpdateFloatingCursor (CGPoint point);

		/// <summary>Ends display of the floating cursor.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("endFloatingCursor")]
		void EndFloatingCursor ();

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("caretTransformForPosition:")]
		CGAffineTransform GetCaretTransform (UITextPosition forPosition);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("insertText:alternatives:style:")]
		void InsertText (string text, string [] alternatives, UITextAlternativeStyle style);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("setAttributedMarkedText:selectedRange:")]
		void SetAttributedMarkedText ([NullAllowed] NSAttributedString markedText, NSRange selectedRange);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("insertTextPlaceholderWithSize:")]
		UITextPlaceholder InsertTextPlaceholder (CGSize size);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("removeTextPlaceholder:")]
		void RemoveTextPlaceholder (UITextPlaceholder textPlaceholder);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("willPresentEditMenuWithAnimator:")]
		void WillPresentEditMenu (IUIEditMenuInteractionAnimating animator);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("willDismissEditMenuWithAnimator:")]
		void WillDismissEditMenu (IUIEditMenuInteractionAnimating animator);

		[iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("editMenuForTextRange:suggestedActions:")]
		[return: NullAllowed]
		UIMenu GetEditMenu (UITextRange textRange, UIMenuElement [] suggestedActions);

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("supportsAdaptiveImageGlyph")]
		bool SupportsAdaptiveImageGlyph { get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("insertAdaptiveImageGlyph:replacementRange:")]
		void InsertAdaptiveImageGlyph (NSAdaptiveImageGlyph adaptiveImageGlyph, UITextRange replacementRange);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("editable")]
		bool Editable { [Bind ("isEditable")] get; }

		[TV (12, 0), iOS (12, 0), MacCatalyst (13, 1)]
		[Export ("insertAttributedText:")]
		void InsertAttributedText (NSAttributedString text);

		[TV (12, 0), MacCatalyst (13, 1), iOS (12, 0)]
		[Export ("attributedTextInRange:")]
		NSAttributedString GetAttributedText (UITextRange range);

		[TV (13, 0), iOS (13, 0), MacCatalyst (13, 1)]
		[Export ("replaceRange:withAttributedText:")]
		void ReplaceRange (UITextRange range, NSAttributedString attributedText);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("willPresentWritingTools")]
		void WillPresentWritingTools ();

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("didDismissWritingTools")]
		void DidDismissWritingTools ();

		[NoTV, iOS (18, 4), NoMacCatalyst]
		[Export ("insertInputSuggestion:")]
		void InsertInputSuggestion (UIInputSuggestion inputSuggestion);
	}

	/// <summary>A manager for bar button items.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/reference/UIKit/UITextInputAssistantItem">Apple documentation for <c>UITextInputAssistantItem</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITextInputAssistantItem {
		[Export ("allowsHidingShortcuts")]
		bool AllowsHidingShortcuts { get; set; }

		[Export ("leadingBarButtonGroups", ArgumentSemantic.Copy), NullAllowed]
		UIBarButtonItemGroup [] LeadingBarButtonGroups { get; set; }

		[Export ("trailingBarButtonGroups", ArgumentSemantic.Copy), NullAllowed]
		UIBarButtonItemGroup [] TrailingBarButtonGroups { get; set; }
	}

	interface IUITextInputTokenizer { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITextInputTokenizer" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITextInputTokenizer" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITextInputTokenizer" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITextInputTokenizer_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UITextInputTokenizer {
		/// <param name="position">To be added.</param>
		/// <param name="granularity">To be added.</param>
		/// <param name="direction">To be added.</param>
		/// <summary>The range for the text enclosing a text position in a text unit of the specified granularity in the specified direction.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("rangeEnclosingPosition:withGranularity:inDirection:")]
		UITextRange GetRangeEnclosingPosition (UITextPosition position, UITextGranularity granularity, UITextDirection direction);

		/// <param name="probePosition">To be added.</param>
		/// <param name="atBoundary">To be added.</param>
		/// <param name="inDirection">To be added.</param>
		/// <summary>Returns whether the <paramref name="probePosition" /> position is at a <paramref name="atBoundary" /> type of boundary taken from the <paramref name="inDirection" /> direction.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("isPosition:atBoundary:inDirection:")]
		bool ProbeDirection (UITextPosition probePosition, UITextGranularity atBoundary, UITextDirection inDirection);

		/// <param name="fromPosition">To be added.</param>
		/// <param name="toBoundary">To be added.</param>
		/// <param name="inDirection">To be added.</param>
		/// <summary>Returns the next <paramref name="toBoundary" /> type of boundary in the <paramref name="inDirection" /> direction from <paramref name="fromPosition" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("positionFromPosition:toBoundary:inDirection:")]
		UITextPosition GetPosition (UITextPosition fromPosition, UITextGranularity toBoundary, UITextDirection inDirection);

		/// <param name="probePosition">To be added.</param>
		/// <param name="withinTextUnit">To be added.</param>
		/// <param name="inDirection">To be added.</param>
		/// <summary>Returns whether the <paramref name="probePosition" /> position is within a <paramref name="withinTextUnit" /> type of text unit taken from the <paramref name="inDirection" /> direction.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("isPosition:withinTextUnit:inDirection:")]
		bool ProbeDirectionWithinTextUnit (UITextPosition probePosition, UITextGranularity withinTextUnit, UITextDirection inDirection);

	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITextInputStringTokenizer : UITextInputTokenizer {
		[Export ("initWithTextInput:")]
		NativeHandle Constructor (IUITextInput textInput);
	}

	/// <summary>A delegate representing input events in a <see cref="UIKit.UITextField" /> or <see cref="UIKit.UITextView" />.</summary>
	/// <remarks>To be added.</remarks>
	/// <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/SimpleTextInput/">SimpleTextInput</related>
	/// <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextInputDelegate_Protocol/index.html">Apple documentation for <c>UITextInputDelegate</c></related>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UITextInputDelegate {
		/// <param name="uiTextInput">To be added.</param>
		/// <summary>The selection in <paramref name="uiTextInput" /> is about to change.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("selectionWillChange:")]
		void SelectionWillChange (IUITextInput uiTextInput);

		/// <param name="uiTextInput">To be added.</param>
		/// <summary>The selection in <paramref name="uiTextInput" /> changed.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("selectionDidChange:")]
		void SelectionDidChange (IUITextInput uiTextInput);

		/// <param name="textInput">To be added.</param>
		/// <summary>The text in <paramref name="textInput" /> is about to change.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("textWillChange:")]
		void TextWillChange (IUITextInput textInput);

		/// <param name="textInput">To be added.</param>
		/// <summary>The text in <paramref name="textInput" /> changed.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("textDidChange:")]
		void TextDidChange (IUITextInput textInput);

		[NoTV, NoMacCatalyst, iOS (18, 4)]
		[Abstract]
		[Export ("conversationContext:didChange:")]
		void ConversationContextDidChange ([NullAllowed] UIConversationContext context, [NullAllowed] IUITextInput textInput);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITextSelectionRect {
		[Export ("rect")]
		CGRect Rect { get; }

		[Export ("writingDirection")]
		NSWritingDirection WritingDirection { get; }

		[Export ("containsStart")]
		bool ContainsStart { get; }

		[Export ("containsEnd")]
		bool ContainsEnd { get; }

		[Export ("isVertical")]
		bool IsVertical { get; }

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("transform")]
		CGAffineTransform Transform { get; }
	}

	/// <summary>A set of <see cref="UIKit.UILexiconEntry" /> objects derived from a variety of system resources, such as first and last names from the Address Book, text shortcuts, and Apple product names.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILexicon_Class/index.html">Apple documentation for <c>UILexicon</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	partial interface UILexicon : NSCopying {

		[Export ("entries")]
		UILexiconEntry [] Entries { get; }
	}

	/// <summary>When the user types <see cref="UIKit.UILexiconEntry.UserInput" />, an app dev can retrieve the properly spelled or capitalized <see cref="UIKit.UILexiconEntry.DocumentText" />.</summary>
	///     
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILexiconEntry_Class/index.html">Apple documentation for <c>UILexiconEntry</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	partial interface UILexiconEntry : NSCopying {

		[Export ("documentText")]
		string DocumentText { get; }

		[Export ("userInput")]
		string UserInput { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UILocalizedIndexedCollation {
		[Export ("sectionTitles")]
		string [] SectionTitles { get; }

		[Export ("sectionIndexTitles")]
		string [] SectionIndexTitles { get; }

		[Static]
		[Export ("currentCollation")]
		UILocalizedIndexedCollation CurrentCollation ();

		/// <param name="indexTitleIndex">To be added.</param>
		/// <summary>The section index identified by the title for the given indexTitleIndex.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("sectionForSectionIndexTitleAtIndex:")]
		nint GetSectionForSectionIndexTitle (nint indexTitleIndex);

		[Export ("sectionForObject:collationStringSelector:")]
		nint GetSectionForObject (NSObject obj, Selector collationStringSelector);

		[Export ("sortedArrayFromArray:collationStringSelector:")]
		NSObject [] SortedArrayFromArraycollationStringSelector (NSObject [] array, Selector collationStringSelector);
	}

	/// <summary>Creates time-based notifications that the operating system delivers to the user.</summary>
	///     <remarks>
	///       <para>
	///       Local notifications are intended for simple date- and time-related notifications. The application does not need to be running for local notifications to be triggered by the operating system. Applications are limited to 64 local notifications. 
	///       </para>
	///     </remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/iPhone/Reference/UILocalNotification_Class/index.html">Apple documentation for <c>UILocalNotification</c></related>
	[NoTV]
	[BaseType (typeof (NSObject))]
	[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UserNotifications.UNNotificationRequest' instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UserNotifications.UNNotificationRequest' instead.")]
	[DisableDefaultCtor] // designated
	interface UILocalNotification : NSCoding, NSCopying {

		[DesignatedInitializer]
		[Export ("init")]
		NativeHandle Constructor ();

		[Export ("fireDate", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSDate FireDate { get; set; }

		[Export ("timeZone", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSTimeZone TimeZone { get; set; }

		[Export ("repeatInterval")]
		NSCalendarUnit RepeatInterval { get; set; }

		[Export ("repeatCalendar", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSCalendar RepeatCalendar { get; set; }

		[Export ("alertBody", ArgumentSemantic.Copy)]
		[NullAllowed]
		string AlertBody { get; set; }

		[Export ("hasAction")]
		bool HasAction { get; set; }

		[Export ("alertAction", ArgumentSemantic.Copy)]
		[NullAllowed]
		string AlertAction { get; set; }

		[Export ("alertLaunchImage", ArgumentSemantic.Copy)]
		[NullAllowed]
		string AlertLaunchImage { get; set; }

		[Export ("soundName", ArgumentSemantic.Copy)]
		[NullAllowed]
		string SoundName { get; set; }

		[Export ("applicationIconBadgeNumber")]
		nint ApplicationIconBadgeNumber { get; set; }

		[Export ("userInfo", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSDictionary UserInfo { get; set; }

		/// <summary>Developers should not use this deprecated property. Developers should use 'UNNotificationSound.DefaultSound' instead.</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNNotificationSound.DefaultSound' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNNotificationSound.DefaultSound' instead.")]
		[Field ("UILocalNotificationDefaultSoundName")]
		NSString DefaultSoundName { get; }

		[MacCatalyst (13, 1)]
		[NullAllowed] // by default this property is null
		[Export ("region", ArgumentSemantic.Copy)]
		CLRegion Region { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("regionTriggersOnce", ArgumentSemantic.UnsafeUnretained)]
		bool RegionTriggersOnce { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed] // by default this property is null
		[Export ("category")]
		string Category { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed]
		[Export ("alertTitle")]
		string AlertTitle { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGestureRecognizer))]
	interface UILongPressGestureRecognizer {
		[Export ("initWithTarget:action:")]
		NativeHandle Constructor (NSObject target, Selector action);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("numberOfTouchesRequired")]
		nuint NumberOfTouchesRequired { get; set; }

		[Export ("minimumPressDuration")]
		double MinimumPressDuration { get; set; }

		[Export ("allowableMovement")]
		nfloat AllowableMovement { get; set; }

		[Export ("numberOfTapsRequired")]
		nint NumberOfTapsRequired { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGestureRecognizer))]
	interface UITapGestureRecognizer {
		[Export ("initWithTarget:action:")]
		NativeHandle Constructor (NSObject target, Selector action);

		[Export ("numberOfTapsRequired")]
		nuint NumberOfTapsRequired { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("numberOfTouchesRequired")]
		nuint NumberOfTouchesRequired { get; set; }

		[NoTV, iOS (13, 4)]
		[MacCatalyst (13, 1)]
		[Export ("buttonMaskRequired", ArgumentSemantic.Assign)]
		UIEventButtonMask ButtonMaskRequired { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGestureRecognizer))]
	interface UIPanGestureRecognizer {
		[Export ("initWithTarget:action:")]
		NativeHandle Constructor (NSObject target, Selector action);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("minimumNumberOfTouches")]
		nuint MinimumNumberOfTouches { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("maximumNumberOfTouches")]
		nuint MaximumNumberOfTouches { get; set; }

		[Export ("setTranslation:inView:")]
		void SetTranslation (CGPoint translation, [NullAllowed] UIView view);

		[Export ("translationInView:")]
		CGPoint TranslationInView ([NullAllowed] UIView view);

		[Export ("velocityInView:")]
		CGPoint VelocityInView ([NullAllowed] UIView view);

		[NoTV, iOS (13, 4)]
		[MacCatalyst (13, 1)]
		[Export ("allowedScrollTypesMask", ArgumentSemantic.Assign)]
		UIScrollTypeMask AllowedScrollTypesMask { get; set; }
	}

	/// <summary>A <see cref="UIKit.UIPanGestureRecognizer" /> that recognizes a panning gesture moving from the screen edge inward.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIScreenEdgePanGestureRecognizer_class/index.html">Apple documentation for <c>UIScreenEdgePanGestureRecognizer</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIPanGestureRecognizer))]
	interface UIScreenEdgePanGestureRecognizer {

		// inherit .ctor
		[Export ("initWithTarget:action:")]
		NativeHandle Constructor (NSObject target, Selector action);

		[Export ("edges", ArgumentSemantic.Assign)]
		UIRectEdge Edges { get; set; }
	}

	//
	// This class comes with an "init" constructor (which we autogenerate)
	// and does not require us to call this with initWithFrame:
	//
	/// <summary>A <see cref="UIKit.UIControl" /> that displays a control that initiates the refreshing of a <see cref="UIKit.UITableViewController" />.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIRefreshControl_class/index.html">Apple documentation for <c>UIRefreshControl</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIControl))]
	interface UIRefreshControl : UIAppearance {
		/// <summary>Whether the UIRefreshControl is currently refreshing.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("refreshing")]
		bool Refreshing { [Bind ("isRefreshing")] get; }

		/// <summary>The refresh control text as an attributed string.</summary>
		/// <value>
		///         </value>
		/// <remarks>
		///         </remarks>
		[NullAllowed] // by default this property is null
		[Export ("attributedTitle", ArgumentSemantic.Retain)]
		[Appearance]
		NSAttributedString AttributedTitle { get; set; }

		[Export ("beginRefreshing")]
		void BeginRefreshing ();

		[Export ("endRefreshing")]
		void EndRefreshing ();
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIRegion : NSCopying, NSCoding {
		[Static]
		[Export ("infiniteRegion")]
		UIRegion Infinite { get; }

		/// <param name="radius">To be added.</param>
		/// <summary>Creates a circular region with the specified <paramref name="radius" />.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("initWithRadius:")]
		NativeHandle Constructor (nfloat radius);

		[Export ("initWithSize:")]
		NativeHandle Constructor (CGSize size);

		[Export ("inverseRegion")]
		UIRegion Inverse ();

		[Export ("regionByUnionWithRegion:")]
		UIRegion Union (UIRegion region);

		[Export ("regionByDifferenceFromRegion:")]
		UIRegion Difference (UIRegion region);

		[Export ("regionByIntersectionWithRegion:")]
		UIRegion Intersect (UIRegion region);

		[Export ("containsPoint:")]
		bool Contains (CGPoint point);
	}

	/// <summary>A <see cref="UIKit.UIGestureRecognizer" /> that recognizes the two-finger rotation gesture.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIRotateGestureRecognizer_Class/index.html">Apple documentation for <c>UIRotationGestureRecognizer</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGestureRecognizer))]
	interface UIRotationGestureRecognizer {
		[Export ("initWithTarget:action:")]
		NativeHandle Constructor (NSObject target, Selector action);

		[Export ("rotation")]
		nfloat Rotation { get; set; }

		[Export ("velocity")]
		nfloat Velocity { get; }
	}

	/// <summary>Gesture recognizer for pinches.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPinchGestureRecognizer_Class/index.html">Apple documentation for <c>UIPinchGestureRecognizer</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGestureRecognizer))]
	interface UIPinchGestureRecognizer {
		[Export ("initWithTarget:action:")]
		NativeHandle Constructor (NSObject target, Selector action);

		[Export ("scale")]
		nfloat Scale { get; set; }

		[Export ("velocity")]
		nfloat Velocity { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGestureRecognizer))]
	interface UISwipeGestureRecognizer {
		[Export ("initWithTarget:action:")]
		NativeHandle Constructor (NSObject target, Selector action);

		[Export ("direction")]
		UISwipeGestureRecognizerDirection Direction { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("numberOfTouchesRequired")]
		nuint NumberOfTouchesRequired { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UIActivityIndicatorView : NSCoding {
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[DesignatedInitializer]
		[Export ("initWithActivityIndicatorStyle:")]
		NativeHandle Constructor (UIActivityIndicatorViewStyle style);

		[Export ("activityIndicatorViewStyle")]
		UIActivityIndicatorViewStyle ActivityIndicatorViewStyle { get; set; }

		[Export ("hidesWhenStopped")]
		bool HidesWhenStopped { get; set; }

		[Export ("startAnimating")]
		void StartAnimating ();

		[Export ("stopAnimating")]
		void StopAnimating ();

		/// <summary>Returns <see langword="true" /> if the activity is animating, <see langword="false" /> if it is not.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Export ("isAnimating")]
		bool IsAnimating { get; }

		/// <summary>The color of the UIActivityIndicatorView.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("color", ArgumentSemantic.Retain), NullAllowed]
		[Appearance]
		UIColor Color { get; set; }
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIItemProviderPresentationSizeProviding {
		/// <summary>To be added.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("preferredPresentationSizeForItemProvider")]
		CGSize PreferredPresentationSizeForItemProvider { get; }
	}

	[BaseType (typeof (NSObject))]
	interface UIImage : NSSecureCoding
		, UIAccessibility, UIAccessibilityIdentification
#if !TVOS
		, NSItemProviderWriting, NSItemProviderReading, UIItemProviderPresentationSizeProviding
#endif
	{
		[ThreadSafe]
		[Export ("initWithContentsOfFile:")]
		NativeHandle Constructor (string filename);

		[ThreadSafe]
		[Export ("initWithData:")]
		NativeHandle Constructor (NSData data);

		[ThreadSafe]
		[Export ("size")]
		[Autorelease]
		CGSize Size { get; }

		// Thread-safe in iOS 9 or later according to docs.
#if IOS
		// tvOS started with 9.0 code base (and watchOS 2.0 came later)
		[Advice ("This API is thread-safe only on 9.0 and later.")]
#endif
		[ThreadSafe]
		[Static]
		[Export ("imageNamed:")]
		[Autorelease]
		[return: NullAllowed]
		UIImage FromBundle (string name);

		// Thread-safe in iOS 9 or later according to docs.
#if IOS
		// tvOS started with 9.0 code base (and watchOS 2.0 came later)
		[Advice ("This API is thread-safe only on 9.0 and later.")]
#endif
		[ThreadSafe]
		[MacCatalyst (13, 1)]
		[Static, Export ("imageNamed:inBundle:compatibleWithTraitCollection:")]
		[return: NullAllowed]
		UIImage FromBundle (string name, [NullAllowed] NSBundle bundle, [NullAllowed] UITraitCollection traitCollection);

		[Static]
		[Export ("imageWithContentsOfFile:")]
		[Autorelease]
		[ThreadSafe]
		[return: NullAllowed]
		UIImage FromFile (string filename);

		[Static]
		[Export ("imageWithData:")]
		[Autorelease]
		[ThreadSafe]
		[return: NullAllowed]
		UIImage LoadFromData (NSData data);

		[Static]
		[Export ("imageWithCGImage:")]
		[Autorelease]
		[ThreadSafe]
		UIImage FromImage (CGImage image);

		/// <param name="image">To be added.</param>
		/// <param name="scale">To be added.</param>
		/// <param name="orientation">To be added.</param>
		/// <summary>Static factory method to create a <see cref="UIKit.UIImage" /> backed by the specified <paramref name="image" />, scaled and oriented as specified.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Static]
		[Export ("imageWithCGImage:scale:orientation:")]
		[Autorelease]
		[ThreadSafe]
		UIImage FromImage (CGImage image, nfloat scale, UIImageOrientation orientation);

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("imageWithCIImage:")]
		[Autorelease]
		[ThreadSafe]
		UIImage FromImage (CIImage image);

		// From the NSItemProviderReading protocol, a static method.
		/// <summary>Gets the array of Uniform Type Identifiers (UTIs) for the image.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Static]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("readableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
#if !TVOS
		new
#endif
		string [] ReadableTypeIdentifiers { get; }

		// From the NSItemProviderReading protocol, a static method.
		/// <param name="data">To be added.</param>
		///         <param name="typeIdentifier">To be added.</param>
		///         <param name="outError">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		///         <summary>Static factory method to create a <see cref="UIKit.UIImage" /> from <paramref name="data" />, with <paramref name="typeIdentifier" /> being the appropriate UTI.</summary>
		///         <returns>To be added.</returns>
		///         <remarks>To be added.</remarks>
		[Static]
		[Export ("objectWithItemProviderData:typeIdentifier:error:")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[return: NullAllowed]
#if !TVOS
		new
#endif
		UIImage GetObject (NSData data, string typeIdentifier, [NullAllowed] out NSError outError);

		[Export ("renderingMode")]
		[ThreadSafe]
		UIImageRenderingMode RenderingMode { get; }

		[Export ("imageWithRenderingMode:")]
		[ThreadSafe]
		UIImage ImageWithRenderingMode (UIImageRenderingMode renderingMode);

		[Export ("CGImage")]
		[ThreadSafe]
		[NullAllowed]
		CGImage CGImage { get; }

		[Export ("imageOrientation")]
		[ThreadSafe]
		UIImageOrientation Orientation { get; }

		[Export ("drawAtPoint:")]
		[ThreadSafe]
		void Draw (CGPoint point);

		/// <param name="point">To be added.</param>
		/// <param name="blendMode">To be added.</param>
		/// <param name="alpha">To be added.</param>
		/// <summary>Draws the <see cref="UIKit.UIImage" /> into the current graphics context at the specified <paramref name="point" />, with blending mode and alpha as specified.</summary>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("drawAtPoint:blendMode:alpha:")]
		[ThreadSafe]
		void Draw (CGPoint point, CGBlendMode blendMode, nfloat alpha);

		[Export ("drawInRect:")]
		[ThreadSafe]
		void Draw (CGRect rect);

		/// <param name="rect">To be added.</param>
		/// <param name="blendMode">To be added.</param>
		/// <param name="alpha">To be added.</param>
		/// <summary>Draws the <see cref="UIKit.UIImage" /> into the current graphics context in the specified <paramref name="rect" />, with blending mode and alpha as specified.</summary>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("drawInRect:blendMode:alpha:")]
		[ThreadSafe]
		void Draw (CGRect rect, CGBlendMode blendMode, nfloat alpha);

		[Export ("drawAsPatternInRect:")]
		[ThreadSafe]
		void DrawAsPatternInRect (CGRect rect);

		/// <param name="leftCapWidth">Width of the left cap to be left unscaled.</param>
		/// <param name="topCapHeight">Height tof the top cap to be left unscaled.</param>
		/// <summary>Creates a stretchable image with the specified parameters.  Deprecated in iOS 5, but still useful since the replacement is known to have bugs.</summary>
		/// <returns>A stretchable image.</returns>
		/// <remarks>
		///           <para>
		/// 	    The more versatile replacement method that was introduced in iOS 5 crashes under some conditions, for more information, see: https://openradar.appspot.com/11411000.
		/// 	  </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("stretchableImageWithLeftCapWidth:topCapHeight:")]
		[Autorelease]
		[ThreadSafe]
		UIImage StretchableImage (nint leftCapWidth, nint topCapHeight);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("leftCapWidth")]
		[ThreadSafe]
		nint LeftCapWidth { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("topCapHeight")]
		[ThreadSafe]
		nint TopCapHeight { get; }

		[Export ("scale")]
		[ThreadSafe]
		nfloat CurrentScale { get; }

		[Static, Export ("animatedImageNamed:duration:")]
		[Autorelease]
		[ThreadSafe]
		[return: NullAllowed]
		UIImage CreateAnimatedImage (string name, double duration);

		[Static, Export ("animatedImageWithImages:duration:")]
		[Autorelease]
		[ThreadSafe]
		[return: NullAllowed]
		UIImage CreateAnimatedImage (UIImage [] images, double duration);

		[Static, Export ("animatedResizableImageNamed:capInsets:duration:")]
		[Autorelease]
		[ThreadSafe]
		[return: NullAllowed]
		UIImage CreateAnimatedImage (string name, UIEdgeInsets capInsets, double duration);

		[Export ("initWithCGImage:")]
		[ThreadSafe]
		NativeHandle Constructor (CGImage cgImage);

		[MacCatalyst (13, 1)]
		[Export ("initWithCIImage:")]
		[ThreadSafe]
		NativeHandle Constructor (CIImage ciImage);

		/// <param name="cgImage">To be added.</param>
		/// <param name="scale">To be added.</param>
		/// <param name="orientation">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("initWithCGImage:scale:orientation:")]
		[ThreadSafe]
		NativeHandle Constructor (CGImage cgImage, nfloat scale, UIImageOrientation orientation);

		[MacCatalyst (13, 1)]
		[Export ("CIImage")]
		[ThreadSafe]
		[NullAllowed]
		CIImage CIImage { get; }

		[Export ("images")]
		[ThreadSafe]
		[NullAllowed]
		UIImage [] Images { get; }

		[Export ("duration")]
		[ThreadSafe]
		double Duration { get; }

		[Export ("resizableImageWithCapInsets:")]
		[Autorelease]
		[ThreadSafe]
		UIImage CreateResizableImage (UIEdgeInsets capInsets);

		[Export ("capInsets")]
		[ThreadSafe]
		UIEdgeInsets CapInsets { get; }

		//
		// 6.0
		//
		[Export ("alignmentRectInsets")]
		[ThreadSafe]
		UIEdgeInsets AlignmentRectInsets { get; }

		/// <param name="data">The image data to create the image from.</param>
		/// <param name="scale">The scaled image.</param>
		/// <summary>Factory method to create a <see cref="UIKit.UIImage" /> from the provided <paramref name="data" />, at the specified <paramref name="scale" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Static]
		[Export ("imageWithData:scale:")]
		[ThreadSafe, Autorelease]
		[return: NullAllowed]
		UIImage LoadFromData (NSData data, nfloat scale);

		/// <param name="ciImage">To be added.</param>
		/// <param name="scale">To be added.</param>
		/// <param name="orientation">To be added.</param>
		/// <summary>Static factory method to create a <see cref="UIKit.UIImage" /> backed by the specified <paramref name="ciImage" />, scaled and oriented as specified.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("imageWithCIImage:scale:orientation:")]
		[ThreadSafe, Autorelease]
		UIImage FromImage (CIImage ciImage, nfloat scale, UIImageOrientation orientation);

		/// <param name="data">Image data from a file or data that you programmatically create.</param>
		/// <param name="scale">A size of 1.0 produces an image that is full-size relative to the <paramref name="data" />.</param>
		/// <summary>Constructs a <see cref="UIKit.UIImage" /> from the provided <paramref name="data" />, scaled by the <paramref name="scale" /> factor.</summary>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("initWithData:scale:")]
		[ThreadSafe]
		NativeHandle Constructor (NSData data, nfloat scale);

		/// <param name="ciImage">To be added.</param>
		/// <param name="scale">To be added.</param>
		/// <param name="orientation">To be added.</param>
		/// <summary>Constructs a new <see cref="UIKit.UIImage" /> backed by the <paramref name="ciImage" />, scaled and oriented as specified.</summary>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Export ("initWithCIImage:scale:orientation:")]
		[ThreadSafe]
		NativeHandle Constructor (CIImage ciImage, nfloat scale, UIImageOrientation orientation);

		[Export ("resizableImageWithCapInsets:resizingMode:")]
		[ThreadSafe]
		UIImage CreateResizableImage (UIEdgeInsets capInsets, UIImageResizingMode resizingMode);

		[Static]
		[Export ("animatedResizableImageNamed:capInsets:resizingMode:duration:")]
		[ThreadSafe]
		[return: NullAllowed]
		UIImage CreateAnimatedImage (string name, UIEdgeInsets capInsets, UIImageResizingMode resizingMode, double duration);

		[Export ("imageWithAlignmentRectInsets:")]
		[ThreadSafe, Autorelease]
		UIImage ImageWithAlignmentRectInsets (UIEdgeInsets alignmentInsets);

		[Export ("resizingMode")]
		[ThreadSafe]
		UIImageResizingMode ResizingMode { get; }

		[MacCatalyst (13, 1)]
		[Export ("traitCollection")]
		[ThreadSafe]
		UITraitCollection TraitCollection { get; }

		[MacCatalyst (13, 1)]
		[Export ("imageAsset")]
		[ThreadSafe]
		[NullAllowed]
		UIImageAsset ImageAsset { get; }

		[MacCatalyst (13, 1)]
		[Export ("imageFlippedForRightToLeftLayoutDirection")]
		UIImage GetImageFlippedForRightToLeftLayoutDirection ();

		[MacCatalyst (13, 1)]
		[Export ("flipsForRightToLeftLayoutDirection")]
		bool FlipsForRightToLeftLayoutDirection { get; }

		[MacCatalyst (13, 1)]
		[Export ("imageRendererFormat")]
		UIGraphicsImageRendererFormat ImageRendererFormat { get; }

		[MacCatalyst (13, 1)]
		[Export ("imageWithHorizontallyFlippedOrientation")]
		UIImage GetImageWithHorizontallyFlippedOrientation ();

		// From the NSItemProviderWriting protocol, a static method.
		// NSItemProviderWriting doesn't seem to be implemented for tvOS/watchOS, even though the headers say otherwise.
		/// <summary>Gets the array of uniform type identifiers that specify which data types can be loaded into a color.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("writableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
#if !TVOS
		new
#endif
		string [] WritableTypeIdentifiers { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemImageNamed:")]
		[return: NullAllowed]
		UIImage GetSystemImage (string name);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemImageNamed:withConfiguration:")]
		[return: NullAllowed]
		UIImage GetSystemImage (string name, [NullAllowed] UIImageConfiguration configuration);

		[TV (13, 0), iOS (13, 0)] // UITraitCollection is not available on watch, it has been reported before.
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemImageNamed:compatibleWithTraitCollection:")]
		[return: NullAllowed]
		UIImage GetSystemImage (string name, [NullAllowed] UITraitCollection traitCollection);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[ThreadSafe]
		[Export ("imageNamed:inBundle:withConfiguration:")]
		[return: NullAllowed]
		UIImage FromBundle (string name, [NullAllowed] NSBundle bundle, [NullAllowed] UIImageConfiguration configuration);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("symbolImage")]
		bool SymbolImage { [Bind ("isSymbolImage")] get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("baselineOffsetFromBottom")]
		nfloat BaselineOffsetFromBottom { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("hasBaseline")]
		bool HasBaseline { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("imageWithBaselineOffsetFromBottom:")]
		UIImage GetImageFromBottom (nfloat baselineOffset);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("imageWithoutBaseline")]
		UIImage GetImageWithoutBaseline ();

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("configuration", ArgumentSemantic.Copy)]
		[NullAllowed]
		UIImageConfiguration Configuration { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("imageWithConfiguration:")]
		UIImage ApplyConfiguration (UIImageConfiguration configuration);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("symbolConfiguration", ArgumentSemantic.Copy)]
		UIImageSymbolConfiguration SymbolConfiguration { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("imageByApplyingSymbolConfiguration:")]
		[return: NullAllowed]
		UIImage ApplyConfiguration (UIImageSymbolConfiguration configuration);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("imageWithTintColor:")]
		UIImage ApplyTintColor (UIColor color);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("imageWithTintColor:renderingMode:")]
		UIImage ApplyTintColor (UIColor color, UIImageRenderingMode renderingMode);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("imageByPreparingForDisplay")]
		[return: NullAllowed]
		UIImage GetImageByPreparingForDisplay ();

		[Async]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("prepareForDisplayWithCompletionHandler:")]
		void PrepareForDisplay (Action<UIImage> completionHandler);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("imageByPreparingThumbnailOfSize:")]
		[return: NullAllowed]
		UIImage GetImageByPreparingThumbnail (CGSize ofSize);

		[Async]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("prepareThumbnailOfSize:completionHandler:")]
		void PrepareThumbnail (CGSize OfSize, Action<UIImage> completionHandler);

		// Inlined from UIImage (PreconfiguredSystemImages)

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("actionsImage", ArgumentSemantic.Strong)]
		UIImage ActionsImage { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("addImage", ArgumentSemantic.Strong)]
		UIImage AddImage { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("removeImage", ArgumentSemantic.Strong)]
		UIImage RemoveImage { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("checkmarkImage", ArgumentSemantic.Strong)]
		UIImage CheckmarkImage { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("strokedCheckmarkImage", ArgumentSemantic.Strong)]
		UIImage StrokedCheckmarkImage { get; }

		[TV (16, 0), MacCatalyst (16, 0), iOS (16, 0)]
		[Static]
		[Export ("systemImageNamed:variableValue:withConfiguration:")]
		[return: NullAllowed]
		UIImage GetSystemImage (string name, double value, [NullAllowed] UIImageConfiguration configuration);

		[TV (16, 0), MacCatalyst (16, 0), iOS (16, 0)]
		[Static]
		[Export ("imageNamed:inBundle:variableValue:withConfiguration:")]
		[return: NullAllowed]
		UIImage FromBundle (string name, [NullAllowed] NSBundle bundle, double value, [NullAllowed] UIImageConfiguration configuration);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("isHighDynamicRange")]
		bool IsHighDynamicRange { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("imageRestrictedToStandardDynamicRange")]
		UIImage ImageRestrictedToStandardDynamicRange { get; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIImageConfiguration : NSCopying, NSSecureCoding {
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("traitCollection")]
		UITraitCollection TraitCollection { get; }

		[MacCatalyst (13, 1)]
		[Export ("configurationWithTraitCollection:")]
		UIImageConfiguration GetConfiguration ([NullAllowed] UITraitCollection traitCollection);

		[Export ("configurationByApplyingConfiguration:")]
		UIImageConfiguration GetConfiguration ([NullAllowed] UIImageConfiguration otherConfiguration);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[NullAllowed, Export ("locale")]
		NSLocale Locale { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("configurationWithLocale:")]
		UIImageConfiguration GetConfiguration ([NullAllowed] NSLocale locale);

		[Static]
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("configurationWithLocale:")]
		UIImageConfiguration CreateConfiguration ([NullAllowed] NSLocale locale);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("configurationWithTraitCollection:")]
		UIImageConfiguration CreateConfiguration ([NullAllowed] UITraitCollection traitCollection);
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIImageConfiguration))]
	interface UIImageSymbolConfiguration {

		[Static]
		[Export ("unspecifiedConfiguration")]
		UIImageSymbolConfiguration UnspecifiedConfiguration { get; }

		[Static]
		[Export ("configurationWithScale:")]
		UIImageSymbolConfiguration Create (UIImageSymbolScale scale);

		[Static]
		[Export ("configurationWithPointSize:")]
		UIImageSymbolConfiguration Create (nfloat pointSize);

		[Static]
		[Export ("configurationWithWeight:")]
		UIImageSymbolConfiguration Create (UIImageSymbolWeight weight);

		[Static]
		[Export ("configurationWithPointSize:weight:")]
		UIImageSymbolConfiguration Create (nfloat pointSize, UIImageSymbolWeight weight);

		[Static]
		[Export ("configurationWithPointSize:weight:scale:")]
		UIImageSymbolConfiguration Create (nfloat pointSize, UIImageSymbolWeight weight, UIImageSymbolScale scale);

		[Static]
		[Export ("configurationWithTextStyle:")]
		UIImageSymbolConfiguration Create ([BindAs (typeof (UIFontTextStyle))] NSString textStyle);

		[Static]
		[Export ("configurationWithTextStyle:scale:")]
		UIImageSymbolConfiguration Create ([BindAs (typeof (UIFontTextStyle))] NSString textStyle, UIImageSymbolScale scale);

		[Static]
		[Export ("configurationWithFont:")]
		UIImageSymbolConfiguration Create (UIFont font);

		[Static]
		[Export ("configurationWithFont:scale:")]
		UIImageSymbolConfiguration Create (UIFont font, UIImageSymbolScale scale);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("configurationWithHierarchicalColor:")]
		UIImageSymbolConfiguration Create (UIColor hierarchicalColor);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("configurationWithPaletteColors:")]
		UIImageSymbolConfiguration Create (UIColor [] paletteColors);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("configurationPreferringMulticolor")]
		UIImageSymbolConfiguration ConfigurationPreferringMulticolor { get; }

		[Export ("configurationWithoutTextStyle")]
		UIImageSymbolConfiguration ConfigurationWithoutTextStyle { get; }

		[Export ("configurationWithoutScale")]
		UIImageSymbolConfiguration ConfigurationWithoutScale { get; }

		[Export ("configurationWithoutWeight")]
		UIImageSymbolConfiguration ConfigurationWithoutWeight { get; }

		[Export ("configurationWithoutPointSizeAndWeight")]
		UIImageSymbolConfiguration ConfigurationWithoutPointSizeAndWeight { get; }

		[Export ("isEqualToConfiguration:")]
		bool IsEqualTo ([NullAllowed] UIImageSymbolConfiguration otherConfiguration);

		[TV (16, 0), MacCatalyst (16, 0), iOS (16, 0)]
		[Static]
		[Export ("configurationPreferringMonochrome")]
		UIImageSymbolConfiguration GetConfigurationPreferringMonochrome ();
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIMenuElement))]
	[DisableDefaultCtor]
	interface UIMenu {

		[BindAs (typeof (UIMenuIdentifier))]
		[Export ("identifier")]
		NSString Identifier { get; }

		[Export ("options")]
		UIMenuOptions Options { get; }

		[iOS (15, 0), MacCatalyst (15, 0), TV (15, 0)]
		[Export ("selectedElements")]
#if XAMCORE_5_0
		UIMenuElement [] SelectedElements { get; }
#else
		[Internal]
		UIMenuElement [] _SelectedElements { get; }
#endif

		[iOS (17, 4), MacCatalyst (17, 4), TV (17, 4)]
		[NullAllowed]
		[Export ("displayPreferences", ArgumentSemantic.Copy)]
		UIMenuDisplayPreferences DisplayPreferences { get; set; }

		[Export ("children")]
		UIMenuElement [] Children { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Static]
		[Export ("menuWithChildren:")]
		UIMenu Create (UIMenuElement [] children);

		[Static]
		[Export ("menuWithTitle:children:")]
		UIMenu Create (string title, UIMenuElement [] children);

		[Static]
		[Export ("menuWithTitle:image:identifier:options:children:")]
		UIMenu Create (string title, [NullAllowed] UIImage image, [NullAllowed][BindAs (typeof (UIMenuIdentifier))] NSString identifier, UIMenuOptions options, UIMenuElement [] children);

		[Export ("menuByReplacingChildren:")]
		UIMenu GetMenuByReplacingChildren (UIMenuElement [] newChildren);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("preferredElementSize", ArgumentSemantic.Assign)]
		UIMenuElementSize PreferredElementSize { get; set; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIMenuElement : NSCopying, NSSecureCoding, UIAccessibilityIdentification {

		[Export ("title")]
		string Title { get; }

		[iOS (15, 0), TV (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("subtitle")]
		string Subtitle { get; set; }

		[NullAllowed, Export ("image")]
		UIImage Image { get; }
	}

	[TV (17, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	interface UIPreviewParameters : NSCopying {

		[Export ("initWithTextLineRects:")]
		NativeHandle Constructor (NSValue [] textLineRects);

		[NullAllowed, Export ("visiblePath", ArgumentSemantic.Copy)]
		UIBezierPath VisiblePath { get; set; }

		[iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("shadowPath", ArgumentSemantic.Copy)]
		UIBezierPath ShadowPath { get; set; }

		[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Copy)]
		UIColor BackgroundColor { get; set; }
	}

	[TV (17, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPreviewTarget : NSCopying {

		[Export ("initWithContainer:center:transform:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIView container, CGPoint center, CGAffineTransform transform);

		[Export ("initWithContainer:center:")]
		NativeHandle Constructor (UIView container, CGPoint center);

		[Export ("container")]
		UIView Container { get; }

		[Export ("center")]
		CGPoint Center { get; }

		[Export ("transform")]
		CGAffineTransform Transform { get; }
	}

	[TV (17, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITargetedPreview : NSCopying {

		[Export ("initWithView:parameters:target:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIView view, UIPreviewParameters parameters, UIPreviewTarget target);

		[Export ("initWithView:parameters:")]
		NativeHandle Constructor (UIView view, UIPreviewParameters parameters);

		[Export ("initWithView:")]
		NativeHandle Constructor (UIView view);

		[Export ("target")]
		UIPreviewTarget Target { get; }

		[Export ("view")]
		UIView View { get; }

		[Export ("parameters", ArgumentSemantic.Copy)]
		UIPreviewParameters Parameters { get; }

		[Export ("size")]
		CGSize Size { get; }

		[Export ("retargetedPreviewWithTarget:")]
		UITargetedPreview GetRetargetedPreview (UIPreviewTarget newTarget);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	partial interface UIImageAsset : NSSecureCoding {

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("imageWithConfiguration:")]
		UIImage FromConfiguration (UIImageConfiguration configuration);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("registerImage:withConfiguration:")]
		void RegisterImage (UIImage image, UIImageConfiguration configuration);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("unregisterImageWithConfiguration:")]
		void UnregisterImage (UIImageConfiguration configuration);

		[Export ("imageWithTraitCollection:")]
		UIImage FromTraitCollection (UITraitCollection traitCollection);

		[Export ("registerImage:withTraitCollection:")]
		void RegisterImage (UIImage image, UITraitCollection traitCollection);

		[Export ("unregisterImageWithTraitCollection:")]
		void UnregisterImageWithTraitCollection (UITraitCollection traitCollection);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIEvent {
		[Export ("type")]
		UIEventType Type { get; }

		[Export ("subtype")]
		UIEventSubtype Subtype { get; }

		[Export ("timestamp")]
		double Timestamp { get; }

		[TV (13, 4), iOS (13, 4)]
		[MacCatalyst (13, 1)]
		[Export ("modifierFlags")]
		UIKeyModifierFlags ModifierFlags { get; }

		[NoTV, iOS (13, 4)]
		[MacCatalyst (13, 1)]
		[Export ("buttonMask")]
		UIEventButtonMask ButtonMask { get; }

		[Export ("allTouches")]
		[NullAllowed]
		NSSet AllTouches { get; }

		[Export ("touchesForView:")]
		[return: NullAllowed]
		NSSet TouchesForView (UIView view);

		[Export ("touchesForWindow:")]
		[return: NullAllowed]
		NSSet TouchesForWindow (UIWindow window);


		[Export ("touchesForGestureRecognizer:")]
		[return: NullAllowed]
		NSSet TouchesForGestureRecognizer (UIGestureRecognizer window);

		[MacCatalyst (13, 1)]
		[Export ("coalescedTouchesForTouch:")]
		[return: NullAllowed]
		UITouch [] GetCoalescedTouches (UITouch touch);

		[MacCatalyst (13, 1)]
		[Export ("predictedTouchesForTouch:")]
		[return: NullAllowed]
		UITouch [] GetPredictedTouches (UITouch touch);
	}

	// that's one of the few enums based on CGFloat - we expose the [n]float directly in the API
	// but we need a way to give access to the constants to developers
	/// <summary>The layer group to which a <see cref="UIKit.UIWindow" /> belongs. Returned by <see cref="UIKit.UIWindow.WindowLevel" />.</summary>
	/// <remarks>
	///       <para>The z-order of windows is determined first by their window level (Alert and Status Bar windows appear above normal windows) and within the level by their order.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Static]
	interface UIWindowLevel {
		/// <summary>The normal window group (below alert windows).</summary>
		///         <value>The value is 0.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UIWindowLevelNormal")]
		nfloat Normal { get; }

		/// <summary>The alert window group. This is the top-most level.</summary>
		///         <value>The value is 100F.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UIWindowLevelAlert")]
		nfloat Alert { get; }

		/// <summary>The status bar group. This group displays below other groups.</summary>
		///         <value>The value is 1000.</value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIWindowLevelStatusBar")]
		nfloat StatusBar { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UIWindow {

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("initWithWindowScene:")]
		NativeHandle Constructor (UIWindowScene windowScene);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("windowScene", ArgumentSemantic.Weak)]
		UIWindowScene WindowScene { get; set; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("canResizeToFitContent")]
		bool CanResizeToFitContent { get; [Bind ("setCanResizeToFitContent:")] set; }

		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("makeKeyAndVisible")]
		void MakeKeyAndVisible ();

		[Export ("makeKeyWindow")]
		void MakeKeyWindow ();

		[Export ("becomeKeyWindow")]
		void BecomeKeyWindow ();

		[Export ("resignKeyWindow")]
		void ResignKeyWindow ();

		/// <summary>Whether this UIWindow is the key window for the app.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("isKeyWindow")]
		bool IsKeyWindow { get; }

		[Export ("windowLevel")]
		nfloat WindowLevel { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("canBecomeKeyWindow")]
		bool CanBecomeKeyWindow { get; }

		[Export ("convertPoint:fromWindow:")]
		CGPoint ConvertPointFromWindow (CGPoint point, [NullAllowed] UIWindow window);

		[Export ("convertPoint:toWindow:")]
		CGPoint ConvertPointToWindow (CGPoint point, [NullAllowed] UIWindow window);

		[Export ("convertRect:fromWindow:")]
		CGRect ConvertRectFromWindow (CGRect rect, [NullAllowed] UIWindow window);

		[Export ("convertRect:toWindow:")]
		CGRect ConvertRectToWindow (CGRect rect, [NullAllowed] UIWindow window);

		[Export ("sendEvent:")]
		void SendEvent (UIEvent evt);

		[NullAllowed] // by default this property is null
		[Export ("rootViewController", ArgumentSemantic.Retain)]
		UIViewController RootViewController { get; set; }


		[Export ("screen", ArgumentSemantic.Retain)]
		UIScreen Screen {
			get;

			[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'WindowScene' instead.")]
			[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'WindowScene' instead.")]
			[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'WindowScene' instead.")]
			set;
		}

		/// <include file="../docs/api/UIKit/UIWindow.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIWindow.DidBecomeVisibleNotification']/*" />
		[Field ("UIWindowDidBecomeVisibleNotification")]
		[Notification]
		NSString DidBecomeVisibleNotification { get; }

		/// <include file="../docs/api/UIKit/UIWindow.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIWindow.DidBecomeHiddenNotification']/*" />
		[Field ("UIWindowDidBecomeHiddenNotification")]
		[Notification]
		NSString DidBecomeHiddenNotification { get; }

		/// <include file="../docs/api/UIKit/UIWindow.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIWindow.DidBecomeKeyNotification']/*" />
		[Field ("UIWindowDidBecomeKeyNotification")]
		[Notification]
		NSString DidBecomeKeyNotification { get; }

		/// <include file="../docs/api/UIKit/UIWindow.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIWindow.DidResignKeyNotification']/*" />
		[Field ("UIWindowDidResignKeyNotification")]
		[Notification]
		NSString DidResignKeyNotification { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("safeAreaAspectFitLayoutGuide", ArgumentSemantic.Strong)]
		IUILayoutGuideAspectFitting SafeAreaAspectFitLayoutGuide { get; }
	}

	delegate void UIControlEnumerateEventsIteratorHandler ([NullAllowed] UIAction actionHandler, [NullAllowed] NSObject target, [NullAllowed] Selector action, UIControlEvent controlEvents, out bool stop);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UIControl : UIContextMenuInteractionDelegate {
		[Export ("initWithFrame:")]
		[DesignatedInitializer]
		NativeHandle Constructor (CGRect frame);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithFrame:primaryAction:")]
		NativeHandle Constructor (CGRect frame, [NullAllowed] UIAction primaryAction);

		/// <summary>Whether this UIControl is enabled.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		/// <summary>Whether this UIControl is selected.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("selected")]
		bool Selected { [Bind ("isSelected")] get; set; }

		/// <summary>Whether this UIControl is highlighted.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("highlighted")]
		bool Highlighted { [Bind ("isHighlighted")] get; set; }

		[Export ("contentVerticalAlignment")]
		UIControlContentVerticalAlignment VerticalAlignment { get; set; }

		[Export ("contentHorizontalAlignment")]
		UIControlContentHorizontalAlignment HorizontalAlignment { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("effectiveContentHorizontalAlignment")]
		UIControlContentHorizontalAlignment EffectiveContentHorizontalAlignment { get; }

		[Export ("state")]
		UIControlState State { get; }

		/// <summary>Whether this UIControl is tracking touches related to an event. Read-only.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("isTracking")]
		bool Tracking { get; }

		/// <summary>Whether a touch is inside this UIControl. Read-only.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("isTouchInside")]
		bool TouchInside { get; }

		[Export ("beginTrackingWithTouch:withEvent:")]
		bool BeginTracking (UITouch uitouch, [NullAllowed] UIEvent uievent);

		[Export ("continueTrackingWithTouch:withEvent:")]
		bool ContinueTracking (UITouch uitouch, [NullAllowed] UIEvent uievent);

		[Export ("endTrackingWithTouch:withEvent:")]
		void EndTracking (UITouch uitouch, [NullAllowed] UIEvent uievent);

		[Export ("cancelTrackingWithEvent:")]
		void CancelTracking ([NullAllowed] UIEvent uievent);

		[Export ("addTarget:action:forControlEvents:")]
		void AddTarget ([NullAllowed] NSObject target, Selector sel, UIControlEvent events);

		[Sealed]
		[Internal]
		[Export ("addTarget:action:forControlEvents:")]
		void AddTarget ([NullAllowed] NSObject target, IntPtr sel, UIControlEvent events);

		[Export ("removeTarget:action:forControlEvents:")]
		void RemoveTarget ([NullAllowed] NSObject target, [NullAllowed] Selector sel, UIControlEvent events);

		[Sealed]
		[Internal]
		[Export ("removeTarget:action:forControlEvents:")]
		void RemoveTarget ([NullAllowed] NSObject target, IntPtr sel, UIControlEvent events);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("addAction:forControlEvents:")]
		void AddAction (UIAction action, UIControlEvent controlEvents);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("removeAction:forControlEvents:")]
		void RemoveAction (UIAction action, UIControlEvent controlEvents);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("removeActionForIdentifier:forControlEvents:")]
		void RemoveAction (string actionIdentifier, UIControlEvent controlEvents);

		[iOS (17, 4), TV (17, 4), MacCatalyst (17, 4)]
		[Export ("performPrimaryAction")]
		void PerformPrimaryAction ();

		[Export ("allTargets")]
		NSSet AllTargets { get; }

		[Export ("allControlEvents")]
		UIControlEvent AllControlEvents { get; }

		[Export ("actionsForTarget:forControlEvent:")]
		[return: NullAllowed]
		string [] GetActions ([NullAllowed] NSObject target, UIControlEvent events);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("enumerateEventHandlers:")]
		void EnumerateEventHandlers (UIControlEnumerateEventsIteratorHandler iteratorHandler);

		[Export ("sendAction:to:forEvent:")]
		void SendAction (Selector action, [NullAllowed] NSObject target, [NullAllowed] UIEvent uievent);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("sendAction:")]
		void SendAction (UIAction action);

		[Export ("sendActionsForControlEvents:")]
		void SendActionForControlEvents (UIControlEvent events);

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("contextMenuInteraction", ArgumentSemantic.Strong)]
		UIContextMenuInteraction ContextMenuInteraction { get; }

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("contextMenuInteractionEnabled")]
		bool ContextMenuInteractionEnabled { [Bind ("isContextMenuInteractionEnabled")] get; set; }

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("showsMenuAsPrimaryAction")]
		bool ShowsMenuAsPrimaryAction { get; set; }

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("menuAttachmentPointForConfiguration:")]
		CGPoint GetMenuAttachmentPoint (UIContextMenuConfiguration configuration);

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("toolTip")]
		string ToolTip { get; set; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("toolTipInteraction", ArgumentSemantic.Strong)]
		UIToolTipInteraction ToolTipInteraction { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("symbolAnimationEnabled")]
		bool SymbolAnimationEnabled { [Bind ("isSymbolAnimationEnabled")] get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIBarPositioning" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIBarPositioning" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIBarPositioning" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIBarPositioning_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIBarPositioning {
		/// <summary>Gets the bar position.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("barPosition")]
		UIBarPosition BarPosition { get; }
	}

	interface IUIBarPositioning { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIBarPositioningDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIBarPositioningDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIBarPositioningDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIBarPositioningDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIBarPositioningDelegate {
		/// <param name="barPositioning">To be added.</param>
		/// <summary>Returns the position for <paramref name="barPositioning" /> after it has been added to the user interface.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("positionForBar:")]
		[DelegateName ("Func<IUIBarPositioning,UIBarPosition>"), NoDefaultValue]
		UIBarPosition GetPositionForBar (IUIBarPositioning barPositioning);
	}

	[BaseType (typeof (NSObject))]
	[ThreadSafe]
	[DisableDefaultCtor] // designated
	interface UIBezierPath : NSSecureCoding, NSCopying {

		[DesignatedInitializer]
		[Export ("init")]
		NativeHandle Constructor ();

		// initWithFrame: --> unrecognized selector

		[Export ("bezierPath"), Static]
		UIBezierPath Create ();

		/// <param name="center">To be added.</param>
		/// <param name="radius">To be added.</param>
		/// <param name="startAngle">To be added.</param>
		/// <param name="endAngle">To be added.</param>
		/// <param name="clockwise">To be added.</param>
		/// <summary>Static factory method that creates a <see cref="UIKit.UIBezierPath" /> from the arc described by the parameters.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:"), Static]
		UIBezierPath FromArc (CGPoint center, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockwise);

		[Export ("bezierPathWithCGPath:"), Static]
		UIBezierPath FromPath (CGPath path);

		[Export ("bezierPathWithOvalInRect:"), Static]
		UIBezierPath FromOval (CGRect inRect);

		[Export ("bezierPathWithRect:"), Static]
		UIBezierPath FromRect (CGRect rect);

		[Export ("bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:"), Static]
		UIBezierPath FromRoundedRect (CGRect rect, UIRectCorner corners, CGSize radii);

		/// <param name="rect">To be added.</param>
		/// <param name="cornerRadius">To be added.</param>
		/// <summary>Factory method to create a UIBezierPath from a rounded rectangle.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("bezierPathWithRoundedRect:cornerRadius:"), Static]
		UIBezierPath FromRoundedRect (CGRect rect, nfloat cornerRadius);

		[Export ("CGPath")]
		[NullAllowed]
		CGPath CGPath { get; set; }

		[Export ("moveToPoint:")]
		void MoveTo (CGPoint point);

		[Export ("addLineToPoint:")]
		void AddLineTo (CGPoint point);

		[Export ("addCurveToPoint:controlPoint1:controlPoint2:")]
		void AddCurveToPoint (CGPoint endPoint, CGPoint controlPoint1, CGPoint controlPoint2);

		[Export ("addQuadCurveToPoint:controlPoint:")]
		void AddQuadCurveToPoint (CGPoint endPoint, CGPoint controlPoint);

		[Export ("closePath")]
		void ClosePath ();

		[Export ("removeAllPoints")]
		void RemoveAllPoints ();

		[Export ("appendPath:")]
		void AppendPath (UIBezierPath path);

		[Export ("applyTransform:")]
		void ApplyTransform (CGAffineTransform transform);

		/// <summary>Whether the path has any valid elements. Read-only.</summary>
		///         <value>To be added.</value>
		///         <remarks>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("empty")]
		bool Empty { [Bind ("isEmpty")] get; }

		[Export ("bounds")]
		CGRect Bounds { get; }

		[Export ("currentPoint")]
		CGPoint CurrentPoint { get; }

		[Export ("containsPoint:")]
		bool ContainsPoint (CGPoint point);


		[Export ("lineWidth")]
		nfloat LineWidth { get; set; }

		[Export ("lineCapStyle")]
		CGLineCap LineCapStyle { get; set; }

		[Export ("lineJoinStyle")]
		CGLineJoin LineJoinStyle { get; set; }

		[Export ("miterLimit")]
		nfloat MiterLimit { get; set; }

		[Export ("flatness")]
		nfloat Flatness { get; set; }

		[Export ("usesEvenOddFillRule")]
		bool UsesEvenOddFillRule { get; set; }

		[Export ("fill")]
		void Fill ();

		[Export ("stroke")]
		void Stroke ();

		/// <param name="blendMode">To be added.</param>
		/// <param name="alpha">To be added.</param>
		/// <summary>Fills the region enclosed by the path.</summary>
		/// <remarks>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("fillWithBlendMode:alpha:")]
		void Fill (CGBlendMode blendMode, nfloat alpha);

		/// <param name="blendMode">To be added.</param>
		/// <param name="alpha">To be added.</param>
		/// <summary>Draws the path.</summary>
		/// <remarks>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("strokeWithBlendMode:alpha:")]
		void Stroke (CGBlendMode blendMode, nfloat alpha);

		[Export ("addClip")]
		void AddClip ();

		[Internal]
		[Export ("getLineDash:count:phase:")]
		void _GetLineDash (IntPtr pattern, out nint count, out nfloat phase);

		[Internal, Export ("setLineDash:count:phase:")]
		void SetLineDash (IntPtr fvalues, nint count, nfloat phase);

		/// <param name="center">To be added.</param>
		/// <param name="radius">To be added.</param>
		/// <param name="startAngle">To be added.</param>
		/// <param name="endAngle">To be added.</param>
		/// <param name="clockWise">To be added.</param>
		/// <summary>Adds the arc defined by the parameters.</summary>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("addArcWithCenter:radius:startAngle:endAngle:clockwise:")]
		void AddArc (CGPoint center, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockWise);

		[Export ("bezierPathByReversingPath")]
		UIBezierPath BezierPathByReversingPath ();
	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[return: NullAllowed]
	delegate UIPointerStyle UIButtonPointerStyleProvider (UIButton button, UIPointerEffect proposedEffect, UIPointerShape proposedShape);

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	delegate void UIButtonConfigurationUpdateHandler (UIButton button);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIControl))]
	interface UIButton : UIAccessibilityContentSizeCategoryImageAdjusting
#if IOS
		, UISpringLoadedInteractionSupporting
#endif
	{
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithFrame:primaryAction:")]
		NativeHandle Constructor (CGRect frame, [NullAllowed] UIAction primaryAction);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("systemButtonWithImage:target:action:")]
		UIButton GetSystemButton (UIImage image, [NullAllowed] NSObject target, [NullAllowed] Selector action);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Static]
		[Export ("systemButtonWithPrimaryAction:")]
		UIButton GetSystemButton ([NullAllowed] UIAction primaryAction);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Static]
		[Export ("buttonWithType:primaryAction:")]
		UIButton FromType (UIButtonType buttonType, [NullAllowed] UIAction primaryAction);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("buttonWithConfiguration:primaryAction:")]
		UIButton GetButton (UIButtonConfiguration configuration, [NullAllowed] UIAction primaryAction);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("configuration", ArgumentSemantic.Copy)]
		UIButtonConfiguration Configuration { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("setNeedsUpdateConfiguration")]
		void SetNeedsUpdateConfiguration ();

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("updateConfiguration")]
		void UpdateConfiguration ();

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("configurationUpdateHandler", ArgumentSemantic.Copy)]
		UIButtonConfigurationUpdateHandler ConfigurationUpdateHandler { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("automaticallyUpdatesConfiguration")]
		bool AutomaticallyUpdatesConfiguration { get; set; }

		[Export ("buttonWithType:")]
		[Static]
		UIButton FromType (UIButtonType type);

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Appearance]
		[Export ("contentEdgeInsets")]
		UIEdgeInsets ContentEdgeInsets { get; set; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Export ("titleEdgeInsets")]
		UIEdgeInsets TitleEdgeInsets { get; set; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Export ("reversesTitleShadowWhenHighlighted")]
		bool ReverseTitleShadowWhenHighlighted { get; set; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Export ("imageEdgeInsets")]
		UIEdgeInsets ImageEdgeInsets { get; set; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Export ("adjustsImageWhenHighlighted")]
		bool AdjustsImageWhenHighlighted { get; set; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Export ("adjustsImageWhenDisabled")]
		bool AdjustsImageWhenDisabled { get; set; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'UIButtonConfiguration' is used.")]
		[Export ("showsTouchWhenHighlighted")]
		bool ShowsTouchWhenHighlighted { get; set; }

		[Export ("buttonType")]
		UIButtonType ButtonType { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("hovered")]
		bool Hovered { [Bind ("isHovered")] get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("held")]
		bool Held { [Bind ("isHeld")] get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("role", ArgumentSemantic.Assign)]
		UIButtonRole Role { get; set; }

		[NoTV, iOS (13, 4)]
		[MacCatalyst (13, 1)]
		[Export ("pointerInteractionEnabled")]
		bool PointerInteractionEnabled { [Bind ("isPointerInteractionEnabled")] get; set; }

		[NoTV, iOS (13, 4)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("pointerStyleProvider", ArgumentSemantic.Copy)]
		UIButtonPointerStyleProvider PointerStyleProvider { get; set; }

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed]
		[Export ("menu", ArgumentSemantic.Copy)]
		UIMenu Menu { get; set; }

		[TV (17, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("changesSelectionAsPrimaryAction")]
		bool ChangesSelectionAsPrimaryAction { get; set; }

		[Export ("setTitle:forState:")]
		void SetTitle ([NullAllowed] string title, UIControlState forState);

		/// <param name="color">To be added.</param>
		/// <param name="forState">To be added.</param>
		/// <summary>Sets the color for the title in the specified state.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setTitleColor:forState:")]
		[Appearance]
		void SetTitleColor ([NullAllowed] UIColor color, UIControlState forState);

		/// <param name="color">To be added.</param>
		/// <param name="forState">To be added.</param>
		/// <summary>Sets the color of the title's shadow for the specified state.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setTitleShadowColor:forState:")]
		[Appearance]
		void SetTitleShadowColor ([NullAllowed] UIColor color, UIControlState forState);

		/// <param name="image">To be added.</param>
		/// <param name="forState">To be added.</param>
		/// <summary>Sets the UIImage for the specified state.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setImage:forState:")]
		[Appearance]
		void SetImage ([NullAllowed] UIImage image, UIControlState forState);

		/// <param name="image">To be added.</param>
		/// <param name="forState">To be added.</param>
		/// <summary>Sets the background image for the specified state.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setBackgroundImage:forState:")]
		[Appearance]
		void SetBackgroundImage ([NullAllowed] UIImage image, UIControlState forState);

		[Export ("titleForState:")]
		[return: NullAllowed]
		string Title (UIControlState state);

		/// <param name="state">To be added.</param>
		/// <summary>Gets the color for the title in the specified state.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("titleColorForState:")]
		[Appearance]
		UIColor TitleColor (UIControlState state);

		/// <param name="state">To be added.</param>
		/// <summary>Gets the color for the title's shadow in the specified state.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("titleShadowColorForState:")]
		[Appearance]
		UIColor TitleShadowColor (UIControlState state);

		/// <param name="state">To be added.</param>
		/// <summary>The UIImage used for the specified state.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("imageForState:")]
		[Appearance]
		UIImage ImageForState (UIControlState state);

		/// <param name="state">To be added.</param>
		/// <summary>The UIImage displayed in the background for the given UIControlState.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundImageForState:")]
		[Appearance]
		UIImage BackgroundImageForState (UIControlState state);

		[Export ("currentTitle", ArgumentSemantic.Retain)]
		[NullAllowed]
		string CurrentTitle { get; }

		/// <summary>The current color of the title of the button. Read-only.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("currentTitleColor", ArgumentSemantic.Retain)]
		[Appearance]
		UIColor CurrentTitleColor { get; }

		/// <summary>The current color of the title shadow.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("currentTitleShadowColor", ArgumentSemantic.Retain)]
		[Appearance]
		UIColor CurrentTitleShadowColor { get; }

		/// <summary>The current image displayed on the button. Read-only.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("currentImage", ArgumentSemantic.Retain)]
		[Appearance]
		UIImage CurrentImage { get; }

		/// <summary>The active UIImage displayed in the background of the UIButton.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("currentBackgroundImage", ArgumentSemantic.Retain)]
		[Appearance]
		UIImage CurrentBackgroundImage { get; }

		[Export ("titleLabel", ArgumentSemantic.Retain)]
		UILabel TitleLabel { get; }

		[Export ("imageView", ArgumentSemantic.Retain)]
		UIImageView ImageView { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("subtitleLabel", ArgumentSemantic.Strong)]
		UILabel SubtitleLabel { get; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Export ("backgroundRectForBounds:")]
		CGRect BackgroundRectForBounds (CGRect rect);

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Export ("contentRectForBounds:")]
		CGRect ContentRectForBounds (CGRect rect);

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Export ("titleRectForContentRect:")]
		CGRect TitleRectForContentRect (CGRect rect);

		[Deprecated (PlatformName.iOS, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Ignored when 'Configuration' is used, override 'LayoutSubviews', call base, and set position views on your own.")]
		[Export ("imageRectForContentRect:")]
		CGRect ImageRectForContentRect (CGRect rect);

		//
		// 6.0
		//
		[Export ("currentAttributedTitle", ArgumentSemantic.Retain)]
		[NullAllowed]
		NSAttributedString CurrentAttributedTitle { get; }

		[Export ("setAttributedTitle:forState:")]
		void SetAttributedTitle ([NullAllowed] NSAttributedString title, UIControlState state);

		[Export ("attributedTitleForState:")]
		[return: NullAllowed]
		NSAttributedString GetAttributedTitle (UIControlState state);

		[Appearance]
		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("setPreferredSymbolConfiguration:forImageInState:")]
		void SetPreferredSymbolConfiguration ([NullAllowed] UIImageSymbolConfiguration configuration, UIControlState state);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("preferredSymbolConfigurationForImageInState:")]
		[return: NullAllowed]
		UIImageSymbolConfiguration GetPreferredSymbolConfiguration (UIControlState state);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("currentPreferredSymbolConfiguration", ArgumentSemantic.Strong)]
		UIImageSymbolConfiguration CurrentPreferredSymbolConfiguration { get; }

		// From UIButton (UIBehavioralStyle)

		[NoTV, MacCatalyst (15, 0), iOS (15, 0)]
		[Export ("behavioralStyle")]
		UIBehavioralStyle BehavioralStyle { get; }

		[NoTV, MacCatalyst (15, 0), iOS (15, 0)]
		[Export ("preferredBehavioralStyle", ArgumentSemantic.Assign)]
		UIBehavioralStyle PreferredBehavioralStyle { get; set; }

		[TV (17, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("preferredMenuElementOrder", ArgumentSemantic.Assign)]
		UIContextMenuConfigurationElementOrder PreferredMenuElementOrder { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UILabel : UIContentSizeCategoryAdjusting, UILetterformAwareAdjusting {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("text", ArgumentSemantic.Copy)]
		[NullAllowed]
		string Text { get; set; }

		/// <summary>The font used by the UILabel.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("font", ArgumentSemantic.Retain)]
		[Appearance]
		UIFont Font { get; set; }

		/// <summary>The color of the text in the UILabel.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("textColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor TextColor { get; set; }

		/// <summary>The color used for shadowing in the UILabel.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("shadowColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor ShadowColor { get; set; }

		/// <summary>Defines the shadow's offset from the text.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("shadowOffset")]
		[Appearance]
		CGSize ShadowOffset { get; set; }

		[Export ("textAlignment")]
		UITextAlignment TextAlignment { get; set; }

		[Export ("lineBreakMode")]
		UILineBreakMode LineBreakMode { get; set; }

		/// <summary>The color used to highlight text in the UILabel.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("highlightedTextColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor HighlightedTextColor { get; set; }

		/// <summary>Whether this UILabel should be drawn with a highlight.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("highlighted")]
		bool Highlighted { [Bind ("isHighlighted")] get; set; }

		/// <summary>The enabled state to use when drawing this UILabel's Text.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Export ("numberOfLines")]
		nint Lines { get; set; }

		[Export ("adjustsFontSizeToFitWidth")]
		bool AdjustsFontSizeToFitWidth { get; set; }

		[NoTV]
		[Export ("minimumFontSize")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use 'MinimumScaleFactor' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'MinimumScaleFactor' instead.")]
		nfloat MinimumFontSize { get; set; }

		[Export ("baselineAdjustment")]
		UIBaselineAdjustment BaselineAdjustment { get; set; }

		/// <param name="bounds">To be added.</param>
		/// <param name="numberOfLines">To be added.</param>
		/// <summary>The drawing RectangleF for this UILabel's Text.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textRectForBounds:limitedToNumberOfLines:")]
		CGRect TextRectForBounds (CGRect bounds, nint numberOfLines);

		[Export ("drawTextInRect:")]
		void DrawText (CGRect rect);

		//
		// 6.0
		//
		[NullAllowed] // by default this property is null
		[Export ("attributedText", ArgumentSemantic.Copy)]
		NSAttributedString AttributedText { get; set; }

		[NoTV]
		[Export ("adjustsLetterSpacingToFitWidth")]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSKernAttributeName' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSKernAttributeName' instead.")]
		bool AdjustsLetterSpacingToFitWidth { get; set; }

		[Export ("minimumScaleFactor")]
		nfloat MinimumScaleFactor { get; set; }

		[Export ("preferredMaxLayoutWidth")]
		nfloat PreferredMaxLayoutWidth { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("allowsDefaultTighteningForTruncation")]
		bool AllowsDefaultTighteningForTruncation { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("lineBreakStrategy", ArgumentSemantic.Assign)]
		NSLineBreakStrategy LineBreakStrategy { get; set; }

		[NoiOS]
		[NoMacCatalyst]
		[Export ("enablesMarqueeWhenAncestorFocused")]
		bool EnablesMarqueeWhenAncestorFocused { get; set; }

		[MacCatalyst (15, 0), iOS (15, 0), TV (15, 0)]
		[Export ("showsExpansionTextWhenTruncated")]
		bool ShowsExpansionTextWhenTruncated { get; set; }

		[Appearance]
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("preferredVibrancy", ArgumentSemantic.Assign)]
		UILabelVibrancy PreferredVibrancy { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UIImageView
	: UIAccessibilityContentSizeCategoryImageAdjusting {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("initWithImage:")]
		[PostGet ("Image")]
		NativeHandle Constructor ([NullAllowed] UIImage image);

		[Export ("initWithImage:highlightedImage:")]
		[PostGet ("Image")]
		[PostGet ("HighlightedImage")]
		NativeHandle Constructor ([NullAllowed] UIImage image, [NullAllowed] UIImage highlightedImage);

		[Export ("image", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIImage Image { get; set; }

		[Export ("highlightedImage", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIImage HighlightedImage { get; set; }

		/// <summary>Whether the UIImageView is highlighted.</summary>
		///         <value>
		///         </value>
		///         <remarks>This property determines whether the regular or highlighted images are displayed. When Highlighted = true, a non-animated UIImageView will show the <see cref="UIKit.UIImageView.HighlightedImage" /> and an animated UIImageView will display the <see cref="UIKit.UIImageView.HighlightedAnimationImages" />. If both these properties are null or if <see cref="UIKit.UIImageView.Highlighted" /> = false, the <see cref="UIKit.UIImageView.Image" /> and <see cref="UIKit.UIImageView.AnimationImages" /> properties will be used.</remarks>
		[Export ("highlighted")]
		bool Highlighted { [Bind ("isHighlighted")] get; set; }

		[Export ("animationImages", ArgumentSemantic.Copy)]
		[NullAllowed]
		UIImage [] AnimationImages { get; set; }

		[Export ("highlightedAnimationImages", ArgumentSemantic.Copy)]
		[NullAllowed]
		UIImage [] HighlightedAnimationImages { get; set; }

		[Export ("animationDuration")]
		double AnimationDuration { get; set; }

		[Export ("animationRepeatCount")]
		nint AnimationRepeatCount { get; set; }

		[Export ("startAnimating")]
		void StartAnimating ();

		[Export ("stopAnimating")]
		void StopAnimating ();

		/// <summary>Whether the animation is running or not.</summary>
		///         <value>true if the animation is running, otherwise false.</value>
		///         <remarks>
		///         </remarks>
		[Export ("isAnimating")]
		bool IsAnimating { get; }

		[NoiOS] // UIKIT_AVAILABLE_TVOS_ONLY
		[NoMacCatalyst]
		[Export ("adjustsImageWhenAncestorFocused")]
		bool AdjustsImageWhenAncestorFocused { get; set; }

		[NoiOS] // UIKIT_AVAILABLE_TVOS_ONLY
		[NoMacCatalyst]
		[Export ("focusedFrameGuide")]
		UILayoutGuide FocusedFrameGuide { get; }

		[NoiOS]
		[NoMacCatalyst]
		[Export ("overlayContentView", ArgumentSemantic.Strong)]
		UIView OverlayContentView { get; }

		[NoiOS]
		[NoMacCatalyst]
		[Export ("masksFocusEffectToContents")]
		bool MasksFocusEffectToContents { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("preferredSymbolConfiguration", ArgumentSemantic.Strong)]
		UIImageSymbolConfiguration PreferredSymbolConfiguration { get; set; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("preferredImageDynamicRange", ArgumentSemantic.Assign)]
		UIImageDynamicRange PreferredImageDynamicRange { get; set; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("imageDynamicRange", ArgumentSemantic.Assign)]
		UIImageDynamicRange ImageDynamicRange { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("addSymbolEffect:")]
		void AddSymbolEffect (NSSymbolEffect symbolEffect);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("addSymbolEffect:options:")]
		void AddSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("addSymbolEffect:options:animated:")]
		void AddSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options, bool animated);

		[Async]
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("addSymbolEffect:options:animated:completion:")]
		void AddSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options, bool animated, [NullAllowed] Action<UISymbolEffectCompletionContext> completionHandler);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeSymbolEffectOfType:")]
		void RemoveSymbolEffect (NSSymbolEffect symbolEffect);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeSymbolEffectOfType:options:")]
		void RemoveSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeSymbolEffectOfType:options:animated:")]
		void RemoveSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options, bool animated);

		[Async]
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeSymbolEffectOfType:options:animated:completion:")]
		void RemoveSymbolEffect (NSSymbolEffect symbolEffect, NSSymbolEffectOptions options, bool animated, [NullAllowed] Action<UISymbolEffectCompletionContext> completionHandler);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeAllSymbolEffects")]
		void RemoveAllSymbolEffects ();

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeAllSymbolEffectsWithOptions:")]
		void RemoveAllSymbolEffects (NSSymbolEffectOptions options);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("removeAllSymbolEffectsWithOptions:animated:")]
		void RemoveAllSymbolEffects (NSSymbolEffectOptions options, bool animated);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("setSymbolImage:withContentTransition:")]
		void SetSymbolImage (UIImage symbolImage, NSSymbolContentTransition transition);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("setSymbolImage:withContentTransition:options:")]
		void SetSymbolImage (UIImage symbolImage, NSSymbolContentTransition transition, NSSymbolEffectOptions options);

		[Async]
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("setSymbolImage:withContentTransition:options:completion:")]
		void SetSymbolImage (UIImage symbolImage, NSSymbolContentTransition transition, NSSymbolEffectOptions options, [NullAllowed] Action<UISymbolEffectCompletionContext> completionHandler);
	}

	/// <summary>A <see cref="UIKit.UIControl" /> that displays a date picker control.</summary>
	///     <remarks>
	///       <para>The <see cref="UIKit.UIDatePicker" /> control consists of a number of rotating wheels that allow the application user to select a date.</para>
	///       <para>
	///         The <see cref="UIKit.UIDatePicker" /> control can be configured for different modes (including a countdown mode) by setting <see cref="UIKit.UIDatePicker.Mode" />.
	///       </para>
	///     </remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDatePicker_Class/index.html">Apple documentation for <c>UIDatePicker</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIControl))]
	interface UIDatePicker {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("datePickerMode")]
		UIDatePickerMode Mode { get; set; }

		[Export ("locale", ArgumentSemantic.Retain)]
		[NullAllowed]
		NSLocale Locale { get; set; }

		[Export ("timeZone", ArgumentSemantic.Retain)]
		[NullAllowed]
		NSTimeZone TimeZone { get; set; }

		[Export ("calendar", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSCalendar Calendar { get; set; }

		// not fully clear from docs but null is not allowed:
		// Objective-C exception thrown.  Name: NSInternalInconsistencyException Reason: Invalid parameter not satisfying: date
		[Export ("date", ArgumentSemantic.Retain)]
		NSDate Date { get; set; }

		[Export ("minimumDate", ArgumentSemantic.Retain)]
		[NullAllowed]
		NSDate MinimumDate { get; set; }

		[Export ("maximumDate", ArgumentSemantic.Retain)]
		[NullAllowed]
		NSDate MaximumDate { get; set; }

		[Export ("countDownDuration")]
		double CountDownDuration { get; set; }

		[Export ("minuteInterval")]
		nint MinuteInterval { get; set; }

		[Export ("setDate:animated:")]
		void SetDate (NSDate date, bool animated);

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4)]
		[Export ("preferredDatePickerStyle", ArgumentSemantic.Assign)]
		UIDatePickerStyle PreferredDatePickerStyle { get; set; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4)]
		[Export ("datePickerStyle", ArgumentSemantic.Assign)]
		UIDatePickerStyle DatePickerStyle { get; }

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("roundsToMinuteInterval")]
		bool RoundsToMinuteInterval { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[ThreadSafe]
	interface UIDevice {
		[Static]
		[Export ("currentDevice")]
		UIDevice CurrentDevice { get; }

		[Export ("name", ArgumentSemantic.Retain)]
		string Name { get; }

		[Export ("model", ArgumentSemantic.Retain)]
		string Model { get; }

		[Export ("localizedModel", ArgumentSemantic.Retain)]
		string LocalizedModel { get; }

		[Export ("systemName", ArgumentSemantic.Retain)]
		string SystemName { get; }

		[Export ("systemVersion", ArgumentSemantic.Retain)]
		string SystemVersion { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("orientation")]
		UIDeviceOrientation Orientation { get; }

#if false
		[Obsolete ("Deprecated in iOS 5.0")]
		[Export ("uniqueIdentifier", ArgumentSemantic.Retain)]
		string UniqueIdentifier { get; }
#endif

		/// <summary>Determines whether device orientation notifications are posted.</summary>
		///         <value>The default value is based on the device hardware.</value>
		///         <remarks>
		///           <para>Note that if the hardware supports orientation notifications, this value will be <see langword="true" /> even if the user has locked the display orientation of the device. 
		///           </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("generatesDeviceOrientationNotifications")]
		bool GeneratesDeviceOrientationNotifications { [Bind ("isGeneratingDeviceOrientationNotifications")] get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("beginGeneratingDeviceOrientationNotifications")]
		void BeginGeneratingDeviceOrientationNotifications ();

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("endGeneratingDeviceOrientationNotifications")]
		void EndGeneratingDeviceOrientationNotifications ();

		/// <summary>Controls battery monitoring.   When set, you can receive battery level change events.</summary>
		///         <value>The default value is <see langword="false" />.</value>
		///         <remarks>
		///           <para>When set to the default value of <see langword="false" />, applications cannot read the <see cref="UIKit.UIDevice.BatteryLevel" />, <see cref="UIKit.UIDevice.BatteryState" />, or receive battery-state change notifications (<see cref="UIKit.UIDevice.BatteryStateDidChangeNotification" />). </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("batteryMonitoringEnabled")]
		bool BatteryMonitoringEnabled { [Bind ("isBatteryMonitoringEnabled")] get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("batteryState")]
		UIDeviceBatteryState BatteryState { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("batteryLevel")]
		float BatteryLevel { get; } // This is float, not nfloat

		/// <summary>Whether the proximity sensor is available and enabled.</summary>
		///         <value>The default value is <see langword="false" />.</value>
		///         <remarks>
		///           <para>Application developers who wish to monitor proximity should set this property to <see langword="true" /> and then confirm that it has changed. On devices that do not support proximity warning, the setter will execute without raising an exception, but the value will remain <see langword="false" />. </para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("proximityMonitoringEnabled")]
		bool ProximityMonitoringEnabled { [Bind ("isProximityMonitoringEnabled")] get; set; }

		[Export ("proximityState")]
		bool ProximityState { get; }

		[Export ("userInterfaceIdiom")]
		UIUserInterfaceIdiom UserInterfaceIdiom { get; }

		/// <include file="../docs/api/UIKit/UIDevice.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIDevice.OrientationDidChangeNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIDeviceOrientationDidChangeNotification")]
		[Notification]
		NSString OrientationDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIDevice.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIDevice.BatteryStateDidChangeNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIDeviceBatteryStateDidChangeNotification")]
		[Notification]
		NSString BatteryStateDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIDevice.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIDevice.BatteryLevelDidChangeNotification']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UIDeviceBatteryLevelDidChangeNotification")]
		[Notification]
		NSString BatteryLevelDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIDevice.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIDevice.ProximityStateDidChangeNotification']/*" />
		[Field ("UIDeviceProximityStateDidChangeNotification")]
		[Notification]
		NSString ProximityStateDidChangeNotification { get; }

		/// <summary>Determines whether this version of iOS supports multitasking.</summary>
		///         <value>Determined by the hardware.</value>
		///         <remarks>
		///           <para>Unlike the Objective-C version of this method, there is no need to probe whether the operating system supports this selector.   The MonoTouch binding takes care of this automatically.   On older versions of iOS this returns false, in newer versions of iOS, this probes the operating to determine if multi-tasking capabilities are supported.</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[Export ("isMultitaskingSupported")]
		bool IsMultitaskingSupported { get; }

		[Export ("playInputClick")]
		void PlayInputClick ();

		[Export ("identifierForVendor", ArgumentSemantic.Retain)]
		[NullAllowed]
		NSUuid IdentifierForVendor { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIDictationPhrase {
		[Export ("alternativeInterpretations")]
		[NullAllowed]
		string [] AlternativeInterpretations { get; }

		[Export ("text")]
		string Text { get; }
	}

	/// <summary>Supports displaying, preview and opening files stored on the device.</summary>
	///     <remarks>
	///       <para>Application developers can use this class to display and interact with files on the device. Types of interaction include, e.g., previewing, printing, opening, and copying files.</para>
	///     </remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentInteractionController_class/index.html">Apple documentation for <c>UIDocumentInteractionController</c></related>
	[NoTV]
	[MacCatalyst (14, 0)] // doc as 13.0 but throws: NSGenericException Reason: UIDocumentInteractionController not available
	[BaseType (typeof (NSObject), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIDocumentInteractionControllerDelegate) })]
	interface UIDocumentInteractionController {
		[Export ("interactionControllerWithURL:"), Static]
		UIDocumentInteractionController FromUrl (NSUrl url);

		[Export ("delegate", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIDocumentInteractionControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIDocumentInteractionControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIDocumentInteractionControllerDelegate Delegate { get; set; }

		// default value is null but it cannot be set back to null
		// NSInternalInconsistencyException Reason: UIDocumentInteractionController: invalid scheme (null).  Only the file scheme is supported.
		[Export ("URL", ArgumentSemantic.Retain)]
		NSUrl Url { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("UTI", ArgumentSemantic.Copy)]
		string Uti { get; set; }

		[Export ("annotation", ArgumentSemantic.Retain), NullAllowed]
		NSObject Annotation { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("name", ArgumentSemantic.Copy)]
		string Name { get; set; }

		[Export ("icons")]
		UIImage [] Icons { get; }

		[Export ("dismissMenuAnimated:")]
		void DismissMenu (bool animated);

		[Export ("dismissPreviewAnimated:")]
		void DismissPreview (bool animated);

		[Export ("presentOpenInMenuFromBarButtonItem:animated:")]
		bool PresentOpenInMenu (UIBarButtonItem item, bool animated);

		[Export ("presentOpenInMenuFromRect:inView:animated:")]
		bool PresentOpenInMenu (CGRect rect, UIView inView, bool animated);

		[Export ("presentOptionsMenuFromBarButtonItem:animated:")]
		bool PresentOptionsMenu (UIBarButtonItem item, bool animated);

		[Export ("presentOptionsMenuFromRect:inView:animated:")]
		bool PresentOptionsMenu (CGRect rect, UIView inView, bool animated);

		[Export ("presentPreviewAnimated:")]
		bool PresentPreview (bool animated);

		[Export ("gestureRecognizers")]
		UIGestureRecognizer [] GestureRecognizers { get; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIDocumentInteractionControllerDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIDocumentInteractionControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIDocumentInteractionControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIDocumentInteractionControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIDocumentInteractionControllerDelegate { }

	/// <summary>A class used to receive notifications from the <see cref="UIKit.UIDocumentInteractionController" /> class.</summary>
	///     <remarks>Application developers can override methods in this class in order to support different types of interaction with files on the device.</remarks>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentInteractionControllerDelegate_protocol/index.html">Apple documentation for <c>UIDocumentInteractionControllerDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIDocumentInteractionControllerDelegate {
		/// <param name="controller">To be added.</param>
		/// <param name="action">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Developers should not use this deprecated method, which determines whether the specified controller should support the specified action.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 6, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("documentInteractionController:canPerformAction:"), DelegateName ("UIDocumentInteractionProbe"), DefaultValue (false)]
		bool CanPerformAction (UIDocumentInteractionController controller, [NullAllowed] Selector action);

		/// <param name="controller">To be added.</param>
		/// <param name="action">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Developers should not use this deprecated method. </summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 6, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("documentInteractionController:performAction:"), DelegateName ("UIDocumentInteractionProbe"), DefaultValue (false)]
		bool PerformAction (UIDocumentInteractionController controller, [NullAllowed] Selector action);

		/// <param name="controller">To be added.</param>
		/// <param name="application">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Indicates that the controller's document has been handed off to the specified application.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("documentInteractionController:didEndSendingToApplication:")]
		[EventArgs ("UIDocumentSendingToApplication", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidEndSendingToApplication (UIDocumentInteractionController controller, [NullAllowed] string application);

		/// <param name="controller">To be added.</param>
		/// <param name="application">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Indicates that the controller's document is about to be handed off to the specified application.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("documentInteractionController:willBeginSendingToApplication:")]
		[EventArgs ("UIDocumentSendingToApplication", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillBeginSendingToApplication (UIDocumentInteractionController controller, [NullAllowed] string application);

		/// <param name="controller">To be added.</param>
		/// <summary>Indicates that the controller has dismissed its "Open In..." menu.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentInteractionControllerDidDismissOpenInMenu:")]
		void DidDismissOpenInMenu (UIDocumentInteractionController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>Indicates that the controller has dismissed its "Options" menu.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentInteractionControllerDidDismissOptionsMenu:")]
		void DidDismissOptionsMenu (UIDocumentInteractionController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>Indicates that the controller has ended its document preview.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentInteractionControllerDidEndPreview:")]
		void DidEndPreview (UIDocumentInteractionController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>The RectangleF used as the starting point for animating the display of a document preview.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentInteractionControllerRectForPreview:"), DelegateName ("UIDocumentInteractionRectangle"), DefaultValue (null)]
		CGRect RectangleForPreview (UIDocumentInteractionController controller);

		// in 2016 when this binding was done, there was not UIDocumentViewController, with
		// xcode154 apple added a class with the same name :/ 
#if XAMCORE_5_0
		[Export ("documentInteractionControllerViewControllerForPreview:"), DelegateName ("UIDocumentPreviewController"), DefaultValue (null)]
#else
		/// <param name="controller">To be added.</param>
		/// <summary>The UIViewController that provides the document preview.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentInteractionControllerViewControllerForPreview:"), DelegateName ("UIDocumentViewController"), DefaultValue (null)]
#endif
		UIViewController ViewControllerForPreview (UIDocumentInteractionController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>The UIView to use as the starting point for the animation preview. If null, the preview fades into place.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentInteractionControllerViewForPreview:"), DelegateName ("UIDocumentViewForPreview"), DefaultValue (null)]
		UIView ViewForPreview (UIDocumentInteractionController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>Indicates that document preview is about to start.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentInteractionControllerWillBeginPreview:")]
		void WillBeginPreview (UIDocumentInteractionController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>Indicates that the "Open In..." menu is about to be presented to the app user.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentInteractionControllerWillPresentOpenInMenu:")]
		void WillPresentOpenInMenu (UIDocumentInteractionController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>Indicates that the "Options" menu is about to be presented to the app user.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentInteractionControllerWillPresentOptionsMenu:")]
		void WillPresentOptionsMenu (UIDocumentInteractionController controller);
	}

	/// <include file="../docs/api/UIKit/UIImagePickerController.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIImagePickerController']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UINavigationController), Delegates = new string [] { "Delegate" }, Events = new Type [] { typeof (UIImagePickerControllerDelegate) })]
	interface UIImagePickerController {
		[Export ("isSourceTypeAvailable:")]
		[Static]
		bool IsSourceTypeAvailable (UIImagePickerControllerSourceType sourceType);

		[Export ("availableMediaTypesForSourceType:"), Static]
		[return: NullAllowed]
		string [] AvailableMediaTypes (UIImagePickerControllerSourceType sourceType);

		// This is the foundation to implement both id <UINavigationControllerDelegate, UIImagePickerControllerDelegate>
		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject Delegate { get; set; }

		[Export ("sourceType")]
		UIImagePickerControllerSourceType SourceType { get; set; }

		[Export ("mediaTypes", ArgumentSemantic.Copy)]
		string [] MediaTypes { get; set; }

		//
		// 3.1 APIs
		//
		[Export ("allowsEditing")]
		bool AllowsEditing { get; set; }

		[Export ("videoMaximumDuration")]
		double VideoMaximumDuration { get; set; }

		[Export ("videoQuality")]
		UIImagePickerControllerQualityType VideoQuality { get; set; }

		[Export ("showsCameraControls")]
		bool ShowsCameraControls { get; set; }

		[Export ("cameraOverlayView", ArgumentSemantic.Retain)]
		UIView CameraOverlayView { get; set; }

		[Export ("cameraViewTransform")]
		CGAffineTransform CameraViewTransform { get; set; }

		[Export ("takePicture")]
		void TakePicture ();

		[Export ("startVideoCapture")]
		bool StartVideoCapture ();

		[Export ("stopVideoCapture")]
		void StopVideoCapture ();

		[Export ("cameraCaptureMode")]
		UIImagePickerControllerCameraCaptureMode CameraCaptureMode { get; set; }

		[Static]
		[Export ("availableCaptureModesForCameraDevice:")]
		[return: NullAllowed]
		NSNumber [] AvailableCaptureModesForCameraDevice (UIImagePickerControllerCameraDevice cameraDevice);

		[Export ("cameraDevice")]
		UIImagePickerControllerCameraDevice CameraDevice { get; set; }

		[Export ("cameraFlashMode")]
		UIImagePickerControllerCameraFlashMode CameraFlashMode { get; set; }

		[Static, Export ("isCameraDeviceAvailable:")]
		bool IsCameraDeviceAvailable (UIImagePickerControllerCameraDevice cameraDevice);

		[Static, Export ("isFlashAvailableForCameraDevice:")]
		bool IsFlashAvailableForCameraDevice (UIImagePickerControllerCameraDevice cameraDevice);

		[Deprecated (PlatformName.iOS, 14, 0, message: "Use 'PHPicker' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0, message: "Use 'PHPicker' instead.")]
		[Export ("imageExportPreset", ArgumentSemantic.Assign)]
		UIImagePickerControllerImageUrlExportPreset ImageExportPreset { get; set; }

		[Deprecated (PlatformName.iOS, 14, 0, message: "Use 'PHPicker' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0, message: "Use 'PHPicker' instead.")]
		[Export ("videoExportPreset")]
		string VideoExportPreset { get; set; }

		// manually bound (const fields) in monotouch.dll - unlike the newer fields (static properties)

		/// <summary>A string indicating the type of media being picked.</summary>
		///         <value>An array that indicates the media types that are to be accessed by the media picker controller.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UIImagePickerControllerMediaType")]
		NSString MediaType { get; }

		/// <summary>Key for the editing information dictionary; indicates the original, uncropped image selected by the user.</summary>
		///         <value>String key for the editing information dictionary.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UIImagePickerControllerOriginalImage")]
		NSString OriginalImage { get; }

		/// <summary>Key for the editing information dictionary; indicates the image edited by the user.</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIImagePickerControllerEditedImage")]
		NSString EditedImage { get; }

		/// <summary>Key for the editing information dictionary; indicates the cropped rectangle applied to the original image.</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIImagePickerControllerCropRect")]
		NSString CropRect { get; }

		/// <summary>The filesystem URL for a movie.</summary>
		///         <value>String that indicates the URL that is to be accessed by the media picker controller.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UIImagePickerControllerMediaURL")]
		NSString MediaURL { get; }

		/// <summary>Represents the value associated with the constant UIImagePickerControllerReferenceURL</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 11, 0, message: "Use 'UIImagePickerController.PHAsset' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIImagePickerController.PHAsset' instead.")]
		[Field ("UIImagePickerControllerReferenceURL")]
		NSString ReferenceUrl { get; }

		/// <summary>Represents the value associated with the constant UIImagePickerControllerMediaMetadata</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIImagePickerControllerMediaMetadata")]
		NSString MediaMetadata { get; }

		/// <summary>Static <see cref="Foundation.NSString" /> used as a key indicating live photos.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIImagePickerControllerLivePhoto")]
		NSString LivePhoto { get; }

		/// <summary>Represents the value that is associated with the constant UIImagePickerControllerPHAsset.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 14, 0, message: "Use 'PHPicker' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0, message: "Use 'PHPicker' instead.")]
		[Field ("UIImagePickerControllerPHAsset")]
		NSString PHAsset { get; }

		/// <summary>Represents the value that is associated with the constant UIImagePickerControllerImageURL.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIImagePickerControllerImageURL")]
		NSString ImageUrl { get; }
	}

	// UINavigationControllerDelegate, UIImagePickerControllerDelegate
	/// <include file="../docs/api/UIKit/UIImagePickerControllerDelegate.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIImagePickerControllerDelegate']/*" />
	[BaseType (typeof (UINavigationControllerDelegate))]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Model]
	[Protocol]
	interface UIImagePickerControllerDelegate {
		/// <param name="picker">To be added.</param>
		/// <param name="info">To be added.</param>
		/// <summary>Indicates that the user has picked a picture or movie.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("imagePickerController:didFinishPickingMediaWithInfo:"), EventArgs ("UIImagePickerMediaPicked", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void FinishedPickingMedia (UIImagePickerController picker, NSDictionary info);

		/// <param name="picker">To be added.</param>
		/// <summary>Indicates that the user cancelled the media-picking operation.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("imagePickerControllerDidCancel:"), EventArgs ("UIImagePickerController", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Canceled (UIImagePickerController picker);
	}

	/// <summary>A <see cref="UIKit.UIDocument" /> that integrates with Core Data.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIManagedDocument_Class/index.html">Apple documentation for <c>UIManagedDocument</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDocument))]
	// *** Assertion failure in -[UIManagedDocument init], /SourceCache/UIKit_Sim/UIKit-1914.84/UIDocument.m:258
	[DisableDefaultCtor]
	interface UIManagedDocument {
		// note: ctor are not inherited, but this is how the documentation tells you to create an UIManagedDocument
		// https://developer.apple.com/library/ios/#documentation/UIKit/Reference/UIManagedDocument_Class/Reference/Reference.html
		[Export ("initWithFileURL:")]
		[PostGet ("FileUrl")]
		NativeHandle Constructor (NSUrl url);

		[Export ("managedObjectContext", ArgumentSemantic.Retain)]
		NSManagedObjectContext ManagedObjectContext { get; }

		[Export ("managedObjectModel", ArgumentSemantic.Retain)]
		NSManagedObjectModel ManagedObjectModel { get; }

		[Export ("persistentStoreOptions", ArgumentSemantic.Copy)]
		NSDictionary PersistentStoreOptions { get; set; }

		[Export ("modelConfiguration", ArgumentSemantic.Copy)]
		string ModelConfiguration { get; set; }

		[Static]
		[Export ("persistentStoreName")]
		string PersistentStoreName { get; }

		[Export ("configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:")]
		bool ConfigurePersistentStoreCoordinator (NSUrl storeURL, string fileType, string configuration, NSDictionary storeOptions, NSError error);

		[Export ("persistentStoreTypeForFileType:")]
		string GetPersistentStoreType (string fileType);

		[Export ("readAdditionalContentFromURL:error:")]
		bool ReadAdditionalContent (NSUrl absoluteURL, out NSError error);

		[Export ("additionalContentForURL:error:")]
		[return: NullAllowed]
		NSObject AdditionalContent (NSUrl absoluteURL, out NSError error);

		[Export ("writeAdditionalContent:toURL:originalContentsURL:error:")]
		bool WriteAdditionalContent (NSObject content, NSUrl absoluteURL, NSUrl absoluteOriginalContentsURL, out NSError error);
	}

	/// <include file="../docs/api/UIKit/UIMenuController.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIMenuController']/*" />
	[Deprecated (PlatformName.iOS, 16, 0, message: "Use 'UIEditMenuInteraction' instead.")]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 16, 0, message: "Use 'UIEditMenuInteraction' instead.")]
	[BaseType (typeof (NSObject))]
	interface UIMenuController {
		[Static, Export ("sharedMenuController")]
		UIMenuController SharedMenuController { get; }

		[Export ("menuVisible")]
		bool MenuVisible {
			[Bind ("isMenuVisible")]
			get; [Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ShowMenu' or 'HideMenu' instead.")]
			[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ShowMenu' or 'HideMenu' instead.")]
			set;
		}

		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ShowMenu' or 'HideMenu' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ShowMenu' or 'HideMenu' instead.")]
		[Export ("setMenuVisible:animated:")]
		void SetMenuVisible (bool visible, bool animated);

		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ShowMenu' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ShowMenu' instead.")]
		[Export ("setTargetRect:inView:")]
		void SetTargetRect (CGRect rect, UIView inView);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("showMenuFromView:rect:")]
		void ShowMenu (UIView targetView, CGRect targetRect);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("hideMenuFromView:")]
		void HideMenu (UIView targetView);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("hideMenu")]
		void HideMenu ();

		[Export ("update")]
		void Update ();

		[Export ("menuFrame")]
		CGRect MenuFrame { get; }

		[Export ("arrowDirection")]
		UIMenuControllerArrowDirection ArrowDirection { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("menuItems", ArgumentSemantic.Copy)]
		UIMenuItem [] MenuItems { get; set; }

		/// <include file="../docs/api/UIKit/UIMenuController.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIMenuController.WillShowMenuNotification']/*" />
		[Field ("UIMenuControllerWillShowMenuNotification")]
		[Notification]
		NSString WillShowMenuNotification { get; }

		/// <include file="../docs/api/UIKit/UIMenuController.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIMenuController.DidShowMenuNotification']/*" />
		[Field ("UIMenuControllerDidShowMenuNotification")]
		[Notification]
		NSString DidShowMenuNotification { get; }

		/// <include file="../docs/api/UIKit/UIMenuController.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIMenuController.WillHideMenuNotification']/*" />
		[Field ("UIMenuControllerWillHideMenuNotification")]
		[Notification]
		NSString WillHideMenuNotification { get; }

		/// <include file="../docs/api/UIKit/UIMenuController.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIMenuController.DidHideMenuNotification']/*" />
		[Field ("UIMenuControllerDidHideMenuNotification")]
		[Notification]
		NSString DidHideMenuNotification { get; }

		/// <include file="../docs/api/UIKit/UIMenuController.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIMenuController.MenuFrameDidChangeNotification']/*" />
		[Field ("UIMenuControllerMenuFrameDidChangeNotification")]
		[Notification]
		NSString MenuFrameDidChangeNotification { get; }
	}

	/// <include file="../docs/api/UIKit/UIMenuItem.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIMenuItem']/*" />
	[Deprecated (PlatformName.iOS, 16, 0, message: "Use 'UIEditMenuInteraction' instead.")]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 16, 0, message: "Use 'UIEditMenuInteraction' instead.")]
	[BaseType (typeof (NSObject))]
	interface UIMenuItem {
		[DesignatedInitializer] // TODO: Add an overload that takes an Action maybe?
		[Export ("initWithTitle:action:")]
		NativeHandle Constructor (string title, Selector action);

		[NullAllowed] // by default this property is null
		[Export ("title", ArgumentSemantic.Copy)]
		string Title { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("action")]
		Selector Action { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UINavigationBar : UIBarPositioning, NSCoding {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		/// <summary>The <see cref="UIKit.UIBarStyle" /> for the navigation bar.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		// [Appearance] rdar://22818366
		[Appearance]
		[Export ("barStyle", ArgumentSemantic.Assign)]
		UIBarStyle BarStyle { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUINavigationBarDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUINavigationBarDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUINavigationBarDelegate Delegate { get; set; }

		/// <summary>Whether the bar is translucent or not.</summary>
		///         <value>The default value is <see langword="true" />.</value>
		///         <remarks>
		///           <para>If a custom background image has been set with <see cref="UIKit.UINavigationBar.SetBackgroundImage(UIKit.UIImage,UIKit.UIBarPosition,UIKit.UIBarMetrics)" /> and any pixel in that image has an alpha value less than 1.0, this will be <see langword="true" />.</para>
		///           <para id="tool-remark">This member participates in the <see cref="UIKit.UIAppearance" /> styling system.  See the <see cref="UIKit.UINavigationBar.Appearance" /> property and the <see cref="UIKit.UINavigationBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
		///         </remarks>
		[Appearance]
		[Export ("translucent", ArgumentSemantic.Assign)]
		bool Translucent { [Bind ("isTranslucent")] get; set; }

		[Export ("pushNavigationItem:animated:")]
		[PostGet ("Items")] // that will [PostGet] TopItem too
		void PushNavigationItem (UINavigationItem item, bool animated);

		[Export ("popNavigationItemAnimated:")]
		[PostGet ("Items")] // that will [PostGet] TopItem too
		UINavigationItem PopNavigationItem (bool animated);

		[Export ("topItem", ArgumentSemantic.Retain)]
		UINavigationItem TopItem { get; }

		[Export ("backItem", ArgumentSemantic.Retain)]
		UINavigationItem BackItem { get; }

		[Export ("items", ArgumentSemantic.Copy)]
		[PostGet ("TopItem")]
		UINavigationItem [] Items { get; set; }

		[Export ("setItems:animated:")]
		[PostGet ("Items")] // that will [PostGet] TopItem too
		void SetItems (UINavigationItem [] items, bool animated);

		[NullAllowed] // by default this property is null
		[Export ("titleTextAttributes", ArgumentSemantic.Copy), Internal]
		[Appearance]
		NSDictionary _TitleTextAttributes { get; set; }

		/// <summary>Display attributes that are set for the bar’s title text.</summary>
		///         <value>String of title text attributes.</value>
		///         <remarks>
		///           <para id="tool-remark">This member participates in the <see cref="UIKit.UIAppearance" /> styling system.  See the <see cref="UIKit.UINavigationBar.Appearance" /> property and the <see cref="UIKit.UINavigationBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
		///         </remarks>
		[Wrap ("_TitleTextAttributes")]
		[Appearance]
		UIStringAttributes TitleTextAttributes { get; set; }

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Sets the background image for the specified UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setBackgroundImage:forBarMetrics:")]
		[Appearance]
		void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIBarMetrics barMetrics);

		/// <param name="forBarMetrics">To be added.</param>
		/// <summary>The background image used for the specified UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundImageForBarMetrics:")]
		[Appearance]
		UIImage GetBackgroundImage (UIBarMetrics forBarMetrics);

		/// <param name="adjustment">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Vertically changes the position of the title by <paramref name="adjustment" /> for the specified <paramref name="barMetrics" />.</summary>
		/// <remarks>
		///           <para id="tool-remark">This member participates in the <see cref="UIKit.UIAppearance" /> styling system.  See the <see cref="UIKit.UINavigationBar.Appearance" /> property and the <see cref="UIKit.UINavigationBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
		///         </remarks>
		[Export ("setTitleVerticalPositionAdjustment:forBarMetrics:")]
		[Appearance]
		void SetTitleVerticalPositionAdjustment (nfloat adjustment, UIBarMetrics barMetrics);


		/// <param name="barMetrics">To be added.</param>
		/// <summary>The vertical adjustment of the title for the specified UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("titleVerticalPositionAdjustmentForBarMetrics:")]
		[Appearance]
		nfloat GetTitleVerticalPositionAdjustment (UIBarMetrics barMetrics);

		//
		// 6.0
		//
		/// <summary>The shadow image for the navigation bar.</summary>
		/// <value>The default is <see langword="null" />, which produces the default shadow image.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed]
		[Export ("shadowImage", ArgumentSemantic.Retain)]
		UIImage ShadowImage { get; set; }

		//
		// 7.0
		//
		/// <summary>The tint applied to the navigation bar background.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed]
		[Export ("barTintColor", ArgumentSemantic.Retain)]
		UIColor BarTintColor { get; set; }

		/// <summary>The UIImage shown beside the back button.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Appearance]
		[NullAllowed]
		[Export ("backIndicatorImage", ArgumentSemantic.Retain)]
		UIImage BackIndicatorImage { get; set; }

		/// <summary>The UIImage used as a mask for content during push and pop transitions.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Appearance]
		[NullAllowed]
		[Export ("backIndicatorTransitionMaskImage", ArgumentSemantic.Retain)]
		UIImage BackIndicatorTransitionMaskImage { get; set; }

		[Appearance]
		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("standardAppearance", ArgumentSemantic.Copy)]
		UINavigationBarAppearance StandardAppearance { get; set; }

		[Appearance]
		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("compactAppearance", ArgumentSemantic.Copy)]
		UINavigationBarAppearance CompactAppearance { get; set; }

		[Appearance]
		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("scrollEdgeAppearance", ArgumentSemantic.Copy)]
		UINavigationBarAppearance ScrollEdgeAppearance { get; set; }

		[Appearance]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("compactScrollEdgeAppearance", ArgumentSemantic.Copy)]
		UINavigationBarAppearance CompactScrollEdgeAppearance { get; set; }

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="barPosition">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Sets the background image to use for the specified UIBarPosition and UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("setBackgroundImage:forBarPosition:barMetrics:")]
		void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIBarPosition barPosition, UIBarMetrics barMetrics);

		/// <param name="barPosition">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>The background image used for the specified UIBarPosition and UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("backgroundImageForBarPosition:barMetrics:")]
		UIImage GetBackgroundImage (UIBarPosition barPosition, UIBarMetrics barMetrics);

		[Appearance]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("prefersLargeTitles")]
		bool PrefersLargeTitles { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Internal, NullAllowed, Export ("largeTitleTextAttributes", ArgumentSemantic.Copy)]
		[Appearance]
		NSDictionary _LargeTitleTextAttributes { get; set; }

		/// <summary>Gets or sets the display attributes for large title text in the bar.</summary>
		///         <value>To be added.</value>
		///         <remarks>
		///           <para id="tool-remark">This member participates in the <see cref="UIKit.UIAppearance" /> styling system.  See the <see cref="UIKit.UINavigationBar.Appearance" /> property and the <see cref="UIKit.UINavigationBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Wrap ("_LargeTitleTextAttributes")]
		[NullAllowed]
		[Appearance]
		UIStringAttributes LargeTitleTextAttributes { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("preferredBehavioralStyle", ArgumentSemantic.Assign)]
		UIBehavioralStyle PreferredBehavioralStyle { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("currentNSToolbarSection", ArgumentSemantic.Assign)]
		UINavigationBarNSToolbarSection CurrentNSToolbarSection { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("behavioralStyle", ArgumentSemantic.Assign)]
		UIBehavioralStyle BehavioralStyle { get; }
	}

	interface IUINavigationBarDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UINavigationBarDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UINavigationBarDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UINavigationBarDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UINavigationBarDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIBarPositioningDelegate))]
	[Model]
	[Protocol]
	interface UINavigationBarDelegate {
		/// <param name="navigationBar">To be added.</param>
		/// <param name="item">To be added.</param>
		/// <summary>Called by the system shortly after the  has been popped from the navigation stack.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("navigationBar:didPopItem:")]
		void DidPopItem (UINavigationBar navigationBar, UINavigationItem item);

		/// <param name="navigationBar">To be added.</param>
		/// <param name="item">To be added.</param>
		/// <summary>Called by the system prior to popping the .</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("navigationBar:shouldPopItem:")]
		bool ShouldPopItem (UINavigationBar navigationBar, UINavigationItem item);

		/// <param name="navigationBar">To be added.</param>
		/// <param name="item">To be added.</param>
		/// <summary>Called by the system shortly after the  has been pushed onto the navigation stack.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("navigationBar:didPushItem:")]
		void DidPushItem (UINavigationBar navigationBar, UINavigationItem item);

		/// <param name="navigationBar">To be added.</param>
		/// <param name="item">To be added.</param>
		/// <summary>Called by the system prior to pushing the  onto the navigation stack.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("navigationBar:shouldPushItem:")]
		bool ShouldPushItem (UINavigationBar navigationBar, UINavigationItem item);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("navigationBarNSToolbarSection:")]
		UINavigationBarNSToolbarSection GetNSToolbarSection (UINavigationBar navigationBar);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UINavigationItem : NSCoding {
		[DesignatedInitializer]
		[Export ("initWithTitle:")]
		NativeHandle Constructor (string title);

		[NullAllowed] // by default this property is null
		[Export ("title", ArgumentSemantic.Copy)]
		string Title { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed] // by default this property is null
		[Export ("backBarButtonItem", ArgumentSemantic.Retain)]
		UIBarButtonItem BackBarButtonItem { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("backButtonTitle")]
		string BackButtonTitle { get; set; }

		[Export ("titleView", ArgumentSemantic.Retain), NullAllowed]
		UIView TitleView { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("prompt", ArgumentSemantic.Copy), NullAllowed]
		string Prompt { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hidesBackButton", ArgumentSemantic.Assign)]
		bool HidesBackButton { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setHidesBackButton:animated:")]
		void SetHidesBackButton (bool hides, bool animated);

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("backButtonDisplayMode", ArgumentSemantic.Assign)]
		UINavigationItemBackButtonDisplayMode BackButtonDisplayMode { get; set; }

		[Export ("leftBarButtonItem", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIBarButtonItem LeftBarButtonItem {
			get;
			// only on the setter to avoid endless recursion
			[PostGet ("LeftBarButtonItems")]
			set;
		}

		[Export ("rightBarButtonItem", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIBarButtonItem RightBarButtonItem {
			get;
			// only on the setter to avoid endless recursion
			[PostGet ("RightBarButtonItems")]
			set;
		}

		[Export ("setLeftBarButtonItem:animated:")]
		[PostGet ("LeftBarButtonItem")]
		void SetLeftBarButtonItem ([NullAllowed] UIBarButtonItem item, bool animated);

		[Export ("setRightBarButtonItem:animated:")]
		[PostGet ("RightBarButtonItem")]
		void SetRightBarButtonItem ([NullAllowed] UIBarButtonItem item, bool animated);

		[NullAllowed] // by default this property is null
		[Export ("leftBarButtonItems", ArgumentSemantic.Copy)]
		[PostGet ("LeftBarButtonItem")]
		UIBarButtonItem [] LeftBarButtonItems { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("rightBarButtonItems", ArgumentSemantic.Copy)]
		[PostGet ("RightBarButtonItem")]
		UIBarButtonItem [] RightBarButtonItems { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("leftItemsSupplementBackButton")]
		bool LeftItemsSupplementBackButton { get; set; }

		[Export ("setLeftBarButtonItems:animated:")]
		[PostGet ("LeftBarButtonItems")]
		void SetLeftBarButtonItems (UIBarButtonItem [] items, bool animated);

		[Export ("setRightBarButtonItems:animated:")]
		[PostGet ("RightBarButtonItems")]
		void SetRightBarButtonItems (UIBarButtonItem [] items, bool animated);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("largeTitleDisplayMode", ArgumentSemantic.Assign)]
		UINavigationItemLargeTitleDisplayMode LargeTitleDisplayMode { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("searchController", ArgumentSemantic.Retain)]
		UISearchController SearchController { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hidesSearchBarWhenScrolling")]
		bool HidesSearchBarWhenScrolling { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("standardAppearance", ArgumentSemantic.Copy)]
		UINavigationBarAppearance StandardAppearance { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("compactAppearance", ArgumentSemantic.Copy)]
		UINavigationBarAppearance CompactAppearance { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("scrollEdgeAppearance", ArgumentSemantic.Copy)]
		UINavigationBarAppearance ScrollEdgeAppearance { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("compactScrollEdgeAppearance", ArgumentSemantic.Copy)]
		UINavigationBarAppearance CompactScrollEdgeAppearance { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("pinnedTrailingGroup", ArgumentSemantic.Strong)]
		[NullAllowed]
		UIBarButtonItemGroup PinnedTrailingGroup { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("overflowPresentationSource", ArgumentSemantic.Strong)]
		[NullAllowed]
		IUIPopoverPresentationControllerSourceItem OverflowPresentationSource { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("trailingItemGroups", ArgumentSemantic.Copy)]
		UIBarButtonItemGroup [] TrailingItemGroups { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("additionalOverflowItems", ArgumentSemantic.Strong)]
		[NullAllowed]
		UIDeferredMenuElement AdditionalOverflowItems { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("titleMenuProvider", ArgumentSemantic.Copy)]
		[NullAllowed]
		Func<NSArray<UIMenuElement>, UIMenu> TitleMenuProvider { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Wrap ("WeakRenameDelegate")]
		IUINavigationItemRenameDelegate RenameDelegate { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[NullAllowed, Export ("renameDelegate", ArgumentSemantic.Weak)]
		NSObject WeakRenameDelegate { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("documentProperties", ArgumentSemantic.Strong)]
		[NullAllowed]
		UIDocumentProperties DocumentProperties { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("customizationIdentifier")]
		[NullAllowed]
		string CustomizationIdentifier { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("leadingItemGroups", ArgumentSemantic.Copy)]
		UIBarButtonItemGroup [] LeadingItemGroups { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("centerItemGroups", ArgumentSemantic.Copy)]
		UIBarButtonItemGroup [] CenterItemGroups { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("style", ArgumentSemantic.Assign)]
		UINavigationItemStyle Style { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("backAction", ArgumentSemantic.Copy)]
		[NullAllowed]
		UIAction BackAction { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("preferredSearchBarPlacement", ArgumentSemantic.Assign)]
		UINavigationItemSearchBarPlacement PreferredSearchBarPlacement { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("searchBarPlacement", ArgumentSemantic.Assign)]
		UINavigationItemSearchBarPlacement SearchBarPlacement { get; }

	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	interface UINavigationController {
		[DesignatedInitializer]
		[Export ("initWithNibName:bundle:")]
		[PostGet ("ViewControllers")] // that will PostGet TopViewController and VisibleViewController too
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[DesignatedInitializer]
		[Internal, Export ("initWithNavigationBarClass:toolbarClass:")]
		NativeHandle Constructor (IntPtr navigationBarClass, IntPtr toolbarClass);

		[DesignatedInitializer]
		[Export ("initWithRootViewController:")]
		[PostGet ("ViewControllers")] // that will PostGet TopViewController and VisibleViewController too
		NativeHandle Constructor (UIViewController rootViewController);

		[Export ("pushViewController:animated:")]
		[PostGet ("ViewControllers")] // that will PostGet TopViewController and VisibleViewController too
		void PushViewController (UIViewController viewController, bool animated);

		[Export ("popViewControllerAnimated:")]
		[PostGet ("ViewControllers")] // that will PostGet TopViewController and VisibleViewController too
		UIViewController PopViewController (bool animated);

		[Export ("popToViewController:animated:")]
		[PostGet ("ViewControllers")] // that will PostGet TopViewController and VisibleViewController too
		UIViewController [] PopToViewController (UIViewController viewController, bool animated);

		[Export ("popToRootViewControllerAnimated:")]
		[PostGet ("ViewControllers")] // that will PostGet TopViewController and VisibleViewController too
		UIViewController [] PopToRootViewController (bool animated);

		[Export ("topViewController", ArgumentSemantic.Retain)]
		[Transient] // it's always part of ViewControllers
		UIViewController TopViewController { get; }

		[Export ("visibleViewController", ArgumentSemantic.Retain)]
		[Transient] // it's always part of ViewControllers
		UIViewController VisibleViewController { get; }

		[Export ("viewControllers", ArgumentSemantic.Copy)]
		[PostGet ("ChildViewControllers")] // for base backing field
		[NullAllowed]
		UIViewController [] ViewControllers { get; set; }

		[Export ("setViewControllers:animated:")]
		[PostGet ("ViewControllers")] // that will PostGet TopViewController and VisibleViewController too
		void SetViewControllers ([NullAllowed] UIViewController [] controllers, bool animated);

		/// <summary>Allows the navigation bar to be hidden.</summary>
		///         <value>
		///         </value>
		///         <remarks>Hides or shows the navigationBar without using animation.</remarks>
		[Export ("navigationBarHidden")]
		bool NavigationBarHidden { [Bind ("isNavigationBarHidden")] get; set; }

		[Export ("setNavigationBarHidden:animated:")]
		void SetNavigationBarHidden (bool hidden, bool animated);

		[Export ("navigationBar")]
		UINavigationBar NavigationBar { get; }

		/// <summary>Controls visibility of the toolbar</summary>
		///         <value>
		///         </value>
		///         <remarks>Allows the toolbar to shown or hidden without using animation.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("toolbarHidden")]
		bool ToolbarHidden { [Bind ("isToolbarHidden")] get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setToolbarHidden:animated:")]
		void SetToolbarHidden (bool hidden, bool animated);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("toolbar")]
		UIToolbar Toolbar { get; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUINavigationControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUINavigationControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUINavigationControllerDelegate Delegate { get; set; }

		/// <summary>Represents the value associated with the constant UINavigationControllerHideShowBarDuration</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Field ("UINavigationControllerHideShowBarDuration")]
		nfloat HideShowBarDuration { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("interactivePopGestureRecognizer", ArgumentSemantic.Copy)]
		UIGestureRecognizer InteractivePopGestureRecognizer { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hidesBarsWhenVerticallyCompact", ArgumentSemantic.UnsafeUnretained)]
		bool HidesBarsWhenVerticallyCompact { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hidesBarsOnTap", ArgumentSemantic.UnsafeUnretained)]
		bool HidesBarsOnTap { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("showViewController:sender:")]
		void ShowViewController (UIViewController vc, [NullAllowed] NSObject sender);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hidesBarsWhenKeyboardAppears", ArgumentSemantic.UnsafeUnretained)]
		bool HidesBarsWhenKeyboardAppears { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hidesBarsOnSwipe", ArgumentSemantic.UnsafeUnretained)]
		bool HidesBarsOnSwipe { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("barHideOnSwipeGestureRecognizer", ArgumentSemantic.Retain)]
		UIPanGestureRecognizer BarHideOnSwipeGestureRecognizer { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("barHideOnTapGestureRecognizer", ArgumentSemantic.UnsafeUnretained)]
		UITapGestureRecognizer BarHideOnTapGestureRecognizer { get; }
	}

	interface IUINavigationControllerDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UINavigationControllerDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UINavigationControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UINavigationControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UINavigationControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UINavigationControllerDelegate {

		/// <param name="navigationController">To be added.</param>
		/// <param name="viewController">To be added.</param>
		/// <param name="animated">To be added.</param>
		/// <summary>Called by the system shortly before the  is displayed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("navigationController:willShowViewController:animated:"), EventArgs ("UINavigationController")]
		void WillShowViewController (UINavigationController navigationController, [Transient] UIViewController viewController, bool animated);

		/// <param name="navigationController">To be added.</param>
		/// <param name="viewController">To be added.</param>
		/// <param name="animated">To be added.</param>
		/// <summary>Extension method called shortly after the <paramref name="viewController" /> has been made visible.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("navigationController:didShowViewController:animated:"), EventArgs ("UINavigationController")]
		void DidShowViewController (UINavigationController navigationController, [Transient] UIViewController viewController, bool animated);

		/// <param name="navigationController">To be added.</param>
		/// <summary>Can be overridden to dynamically specify the supported orientations of the .</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("navigationControllerSupportedInterfaceOrientations:")]
		[NoDefaultValue]
		[DelegateName ("Func<UINavigationController,UIInterfaceOrientationMask>")]
		UIInterfaceOrientationMask SupportedInterfaceOrientations (UINavigationController navigationController);

		/// <param name="navigationController">To be added.</param>
		/// <summary>Can be overridden to set the preferred interface orientation of the .</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("navigationControllerPreferredInterfaceOrientationForPresentation:")]
		[DelegateName ("Func<UINavigationController,UIInterfaceOrientation>")]
		[NoDefaultValue]
		UIInterfaceOrientation GetPreferredInterfaceOrientation (UINavigationController navigationController);

		/// <param name="navigationController">To be added.</param>
		/// <param name="animationController">To be added.</param>
		/// <summary>Called by the system to retrieve an interactive transition animation.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("navigationController:interactionControllerForAnimationController:")]
		[DelegateName ("Func<UINavigationController,IUIViewControllerAnimatedTransitioning,IUIViewControllerInteractiveTransitioning>")]
		[NoDefaultValue]
		IUIViewControllerInteractiveTransitioning GetInteractionControllerForAnimationController (UINavigationController navigationController, IUIViewControllerAnimatedTransitioning animationController);

		/// <param name="navigationController">To be added.</param>
		/// <param name="operation">To be added.</param>
		/// <param name="fromViewController">To be added.</param>
		/// <param name="toViewController">To be added.</param>
		/// <summary>Called by the system to retrieve the transition animation for the <paramref name="operation" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("navigationController:animationControllerForOperation:fromViewController:toViewController:")]
		[DelegateName ("Func<UINavigationController,UINavigationControllerOperation,UIViewController,UIViewController,IUIViewControllerAnimatedTransitioning>")]
		[NoDefaultValue]
		IUIViewControllerAnimatedTransitioning GetAnimationControllerForOperation (UINavigationController navigationController, UINavigationControllerOperation operation, UIViewController fromViewController, UIViewController toViewController);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UINib {
		// note: the default `init` does not seems to create anything that can be used - but it does not crash when used

		[Static]
		[Export ("nibWithNibName:bundle:")]
		UINib FromName (string name, [NullAllowed] NSBundle bundleOrNil);

		[Static]
		[Export ("nibWithData:bundle:")]
		UINib FromData (NSData data, [NullAllowed] NSBundle bundleOrNil);

		[Export ("instantiateWithOwner:options:")]
		NSObject [] Instantiate ([NullAllowed] NSObject ownerOrNil, [NullAllowed] NSDictionary optionsOrNil);

		/// <summary>Represents the value associated with the constant UINibExternalObjects</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UINibExternalObjects")]
		NSString ExternalObjectsKey { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIControl))]
	interface UIPageControl : UIAppearance {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("numberOfPages")]
		nint Pages { get; set; }

		[Export ("currentPage")]
		nint CurrentPage { get; set; }

		[Export ("hidesForSinglePage")]
		bool HidesForSinglePage { get; set; }

		/// <summary>The tint color applied to the page indicator as a whole.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed]
		[Export ("pageIndicatorTintColor", ArgumentSemantic.Retain)]
		UIColor PageIndicatorTintColor { get; set; }

		/// <summary>The tint color applied to the current page indicator.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed]
		[Export ("currentPageIndicatorTintColor", ArgumentSemantic.Retain)]
		UIColor CurrentPageIndicatorTintColor { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("backgroundStyle", ArgumentSemantic.Assign)]
		UIPageControlBackgroundStyle BackgroundStyle { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("interactionState", ArgumentSemantic.Assign)]
		UIPageControlInteractionState InteractionState { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("allowsContinuousInteraction")]
		bool AllowsContinuousInteraction { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed]
		[Export ("preferredIndicatorImage", ArgumentSemantic.Strong)]
		UIImage PreferredIndicatorImage { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("indicatorImageForPage:")]
		[return: NullAllowed]
		UIImage GetIndicatorImage (nint page);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("setIndicatorImage:forPage:")]
		void SetIndicatorImage ([NullAllowed] UIImage image, nint page);

		/// <param name="pageCount">To be added.</param>
		/// <summary>The size this UIPageControl's Bounds needs to be to accomodate the specified number of pages.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("sizeForNumberOfPages:")]
		CGSize SizeForNumberOfPages (nint pageCount);

		[Deprecated (PlatformName.iOS, 14, 0)]
		[Deprecated (PlatformName.TvOS, 14, 0)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[Export ("defersCurrentPageDisplay")]
		bool DefersCurrentPageDisplay { get; set; }

		[Deprecated (PlatformName.iOS, 14, 0)]
		[Deprecated (PlatformName.TvOS, 14, 0)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[Export ("updateCurrentPageDisplay")]
		void UpdateCurrentPageDisplay ();

		[iOS (16, 0), TV (16, 0), MacCatalyst (16, 0)]
		[Export ("direction", ArgumentSemantic.Assign)]
		UIPageControlDirection Direction { get; set; }

		[iOS (16, 0), TV (16, 0), MacCatalyst (16, 0)]
		[Export ("preferredCurrentPageIndicatorImage", ArgumentSemantic.Strong)]
		[NullAllowed]
		UIImage PreferredCurrentPageIndicatorImage { get; set; }

		[iOS (16, 0), TV (16, 0), MacCatalyst (16, 0)]
		[Export ("currentPageIndicatorImageForPage:")]
		[return: NullAllowed]
		UIImage GetCurrentPageIndicatorImage (nint page);

		[iOS (16, 0), TV (16, 0), MacCatalyst (16, 0)]
		[Export ("setCurrentPageIndicatorImage:forPage:")]
		void SetCurrentPageIndicatorImage ([NullAllowed] UIImage image, nint page);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[NullAllowed, Export ("progress", ArgumentSemantic.Strong)]
		UIPageControlProgress Progress { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController),
		   Delegates = new string [] { "WeakDelegate", "WeakDataSource" },
		   Events = new Type [] { typeof (UIPageViewControllerDelegate), typeof (UIPageViewControllerDataSource) })]
	interface UIPageViewController : NSCoding {
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("delegate", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIPageViewControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIPageViewControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIPageViewControllerDelegate Delegate { get; set; }

		[Export ("dataSource", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakDataSource { get; set; }

		/// <summary>The source for data for this UIPageViewController.</summary>
		///         <value>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Wrap ("WeakDataSource")]
		IUIPageViewControllerDataSource DataSource { get; set; }

		[Export ("transitionStyle")]
		UIPageViewControllerTransitionStyle TransitionStyle { get; }

		[Export ("navigationOrientation")]
		UIPageViewControllerNavigationOrientation NavigationOrientation { get; }

		[Export ("spineLocation")]
		UIPageViewControllerSpineLocation SpineLocation { get; }

		/// <summary>Whether content appears on the backs of pages. The default is false.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("doubleSided")]
		bool DoubleSided { [Bind ("isDoubleSided")] get; set; }

		[Export ("gestureRecognizers")]
		UIGestureRecognizer [] GestureRecognizers { get; }

		[Export ("viewControllers")]
		UIViewController [] ViewControllers { get; }

		[DesignatedInitializer]
		[Export ("initWithTransitionStyle:navigationOrientation:options:")]
		NativeHandle Constructor (UIPageViewControllerTransitionStyle style, UIPageViewControllerNavigationOrientation navigationOrientation, [NullAllowed] NSDictionary options);

		[Export ("setViewControllers:direction:animated:completion:")]
		[PostGet ("ViewControllers")]
		[Async (XmlDocs = """
			<param name="viewControllers">To be added.</param>
			<param name="direction">To be added.</param>
			<param name="animated">To be added.</param>
			<summary>Sets the UIViewControllers to be displayed.</summary>
			<returns>
			          <para>A task that represents the asynchronous SetViewControllers operation.   The value of the TResult parameter is a <see cref="UIKit.UICompletionHandler" />.</para>
			        </returns>
			<remarks>
			          <para copied="true">The SetViewControllersAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		void SetViewControllers (UIViewController [] viewControllers, UIPageViewControllerNavigationDirection direction, bool animated, [NullAllowed] UICompletionHandler completionHandler);

		/// <summary>Represents the value associated with the constant UIPageViewControllerOptionSpineLocationKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPageViewControllerOptionSpineLocationKey")]
		NSString OptionSpineLocationKey { get; }

		[Internal, Field ("UIPageViewControllerOptionInterPageSpacingKey")]
		NSString OptionInterPageSpacingKey { get; }
	}

	interface IUIPageViewControllerDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIPageViewControllerDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIPageViewControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIPageViewControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIPageViewControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIPageViewControllerDelegate {
		/// <param name="pageViewController">To be added.</param>
		/// <param name="finished">To be added.</param>
		/// <param name="previousViewControllers">To be added.</param>
		/// <param name="completed">To be added.</param>
		/// <summary>Indicates that animation has completed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:"), EventArgs ("UIPageViewFinishedAnimation", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidFinishAnimating (UIPageViewController pageViewController, bool finished, UIViewController [] previousViewControllers, bool completed);

		/// <param name="pageViewController">To be added.</param>
		/// <param name="orientation">To be added.</param>
		/// <summary>The location of the spine of the UIPageViewController.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("pageViewController:spineLocationForInterfaceOrientation:"), DelegateName ("UIPageViewSpineLocationCallback")]
		[DefaultValue (UIPageViewControllerSpineLocation.Mid)]
		UIPageViewControllerSpineLocation GetSpineLocation (UIPageViewController pageViewController, UIInterfaceOrientation orientation);

		/// <param name="pageViewController">To be added.</param>
		/// <param name="pendingViewControllers">To be added.</param>
		/// <summary>Indicates that a transition is about to begin.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("pageViewController:willTransitionToViewControllers:"), EventArgs ("UIPageViewControllerTransition", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillTransition (UIPageViewController pageViewController, UIViewController [] pendingViewControllers);

		/// <param name="pageViewController">To be added.</param>
		/// <summary>The supported interface orientations.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("pageViewControllerSupportedInterfaceOrientations:")]
		[DelegateName ("Func<UIPageViewController,UIInterfaceOrientationMask>")]
		[DefaultValue (UIInterfaceOrientationMask.All)]
		UIInterfaceOrientationMask SupportedInterfaceOrientations (UIPageViewController pageViewController);

		/// <param name="pageViewController">To be added.</param>
		/// <summary>The preferred orientation of the UIPageViewController.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("pageViewControllerPreferredInterfaceOrientationForPresentation:")]
		[DelegateName ("Func<UIPageViewController,UIInterfaceOrientation>")]
		[DefaultValue (UIInterfaceOrientation.Portrait)]
		UIInterfaceOrientation GetPreferredInterfaceOrientationForPresentation (UIPageViewController pageViewController);
	}

	interface IUIPageViewControllerDataSource { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIPageViewControllerDataSource" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIPageViewControllerDataSource" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIPageViewControllerDataSource" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIPageViewControllerDataSource_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIPageViewControllerDataSource {
		/// <param name="pageViewController">To be added.</param>
		/// <param name="referenceViewController">To be added.</param>
		/// <summary>Retrieves the previous UIViewController.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDataSource property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Abstract]
		[Export ("pageViewController:viewControllerBeforeViewController:"), DelegateName ("UIPageViewGetViewController"), DefaultValue (null)]
		UIViewController GetPreviousViewController (UIPageViewController pageViewController, UIViewController referenceViewController);

		/// <param name="pageViewController">To be added.</param>
		/// <param name="referenceViewController">To be added.</param>
		/// <summary>Returns the next UIViewController.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDataSource property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Abstract]
		[Export ("pageViewController:viewControllerAfterViewController:"), DelegateName ("UIPageViewGetViewController"), DefaultValue (null)]
		UIViewController GetNextViewController (UIPageViewController pageViewController, UIViewController referenceViewController);

		/// <param name="pageViewController">To be added.</param>
		/// <summary>The number of pages to be shown in the page indicator.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDataSource property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("presentationCountForPageViewController:"), DelegateName ("UIPageViewGetNumber"), DefaultValue (1)]
		nint GetPresentationCount (UIPageViewController pageViewController);

		/// <param name="pageViewController">To be added.</param>
		/// <summary>The index of the page to be highlighted in the page indicator.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDataSource property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("presentationIndexForPageViewController:"), DelegateName ("UIPageViewGetNumber"), DefaultValue (1)]
		nint GetPresentationIndex (UIPageViewController pageViewController);
	}

	/// <summary>Provides data for the  event.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	interface UIPasteboardChangeEventArgs {
		/// <summary>The types that were added to the <see cref="UIKit.UIPasteboard" />.</summary>
		///         <value>Individual values will be equivalent to <see cref="UIKit.UIPasteboard.TypeListColor" />, <see cref="UIKit.UIPasteboard.TypeListImage" />, <see cref="UIKit.UIPasteboard.TypeListString" />, or <see cref="UIKit.UIPasteboard.TypeListURL" />.</value>
		///         <remarks>To be added.</remarks>
		[Export ("UIPasteboardChangedTypesAddedKey")]
		string [] TypesAdded { get; }

		/// <summary>The types that were removed from the <see cref="UIKit.UIPasteboard" />..</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("UIPasteboardChangedTypesRemovedKey")]
		string [] TypesRemoved { get; }
	}

	/// <include file="../docs/api/UIKit/UIPasteboard.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIPasteboard']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	// Objective-C exception thrown.  Name: NSInternalInconsistencyException Reason: Calling -[UIPasteboard init] is not allowed.
	[DisableDefaultCtor]
	interface UIPasteboard {
		[Export ("generalPasteboard")]
		[Static]
		UIPasteboard General { get; }

		[Export ("pasteboardWithName:create:")]
		[Static]
		UIPasteboard FromName (string name, bool create);

		[Export ("pasteboardWithUniqueName")]
		[Static]
		UIPasteboard GetUnique ();

		[Export ("name")]
		string Name { get; }

		[Export ("removePasteboardWithName:"), Static]
		void Remove (string name);

		[Export ("persistent")]
		bool Persistent {
			[Bind ("isPersistent")]
			get;
			[Deprecated (PlatformName.iOS, 10, 0)]
			[Deprecated (PlatformName.MacCatalyst, 13, 1)]
			set;
		}

		[Export ("changeCount")]
		nint ChangeCount { get; }

		[Export ("pasteboardTypes")]
		string [] Types { get; }

		[Export ("containsPasteboardTypes:")]
		bool Contains (string [] pasteboardTypes);

		[Export ("dataForPasteboardType:")]
		[return: NullAllowed]
		NSData DataForPasteboardType (string pasteboardType);

		[Export ("valueForPasteboardType:")]
		[return: NullAllowed]
		NSObject GetValue (string pasteboardType);

		[Export ("setValue:forPasteboardType:")]
		void SetValue (NSObject value, string pasteboardType);

		[Export ("setData:forPasteboardType:")]
		void SetData (NSData data, string forPasteboardType);

		[Export ("numberOfItems")]
		nint Count { get; }

		[Export ("pasteboardTypesForItemSet:")]
		[return: NullAllowed]
		NSArray<NSString> [] GetPasteBoardTypes ([NullAllowed] NSIndexSet itemSet);

		[Export ("containsPasteboardTypes:inItemSet:")]
		bool Contains (string [] pasteboardTypes, [NullAllowed] NSIndexSet itemSet);

		[Export ("itemSetWithPasteboardTypes:")]
		[return: NullAllowed]
		NSIndexSet ItemSetWithPasteboardTypes (string [] pasteboardTypes);

		[Export ("valuesForPasteboardType:inItemSet:")]
		[return: NullAllowed]
		NSData [] GetValuesForPasteboardType (string pasteboardType, [NullAllowed] NSIndexSet itemSet);


		[Export ("dataForPasteboardType:inItemSet:")]
		[return: NullAllowed]
		NSData [] GetDataForPasteboardType (string pasteboardType, [NullAllowed] NSIndexSet itemSet);

		[Export ("items", ArgumentSemantic.Copy)]
		NSDictionary [] Items { get; set; }

		[Export ("addItems:")]
		void AddItems (NSDictionary [] items);

		/// <include file="../docs/api/UIKit/UIPasteboard.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIPasteboard.ChangedNotification']/*" />
		[Field ("UIPasteboardChangedNotification")]
		[Notification (typeof (UIPasteboardChangeEventArgs))]
		NSString ChangedNotification { get; }

		/// <summary>Represents the value associated with the constant UIPasteboardChangedTypesAddedKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPasteboardChangedTypesAddedKey")]
		NSString ChangedTypesAddedKey { get; }

		/// <summary>Represents the value associated with the constant UIPasteboardChangedTypesRemovedKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPasteboardChangedTypesRemovedKey")]
		NSString ChangedTypesRemovedKey { get; }

		/// <include file="../docs/api/UIKit/UIPasteboard.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIPasteboard.RemovedNotification']/*" />
		[Field ("UIPasteboardRemovedNotification")]
		[Notification (typeof (UIPasteboardChangeEventArgs))]
		NSString RemovedNotification { get; }

		/// <summary>Represents the value associated with the constant UIPasteboardTypeListString</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPasteboardTypeListString")]
		NSArray TypeListString { get; }

		/// <summary>Represents the value associated with the constant UIPasteboardTypeListURL</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPasteboardTypeListURL")]
		NSArray TypeListURL { get; }

		/// <summary>Represents the value associated with the constant UIPasteboardTypeListImage</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPasteboardTypeListImage")]
		NSArray TypeListImage { get; }

		/// <summary>Represents the value associated with the constant UIPasteboardTypeListColor</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPasteboardTypeListColor")]
		NSArray TypeListColor { get; }

		/// <summary>Key indicating that pasteboard types should have their Uniform Type Identifiers determined automatically.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIPasteboardTypeAutomatic")]
		NSString Automatic { get; }

		[NullAllowed]
		[Export ("string", ArgumentSemantic.Copy)]
		string String { get; set; }

		[NullAllowed]
		[Export ("strings", ArgumentSemantic.Copy)]
		string [] Strings { get; set; }

		[NullAllowed]
		[Export ("URL", ArgumentSemantic.Copy)]
		NSUrl Url { get; set; }

		[NullAllowed]
		[Export ("URLs", ArgumentSemantic.Copy)]
		NSUrl [] Urls { get; set; }

		[NullAllowed]
		[Export ("image", ArgumentSemantic.Copy)]
		UIImage Image { get; set; }

		// images bound manually (as it does not always returns UIImage)

		[NullAllowed]
		[Export ("color", ArgumentSemantic.Copy)]
		UIColor Color { get; set; }

		[NullAllowed]
		[Export ("colors", ArgumentSemantic.Copy)]
		UIColor [] Colors { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("setItems:options:")]
		void SetItems (NSDictionary<NSString, NSObject> [] items, NSDictionary options);

		/// <param name="items">To be added.</param>
		///         <param name="pasteboardOptions">To be added.</param>
		///         <summary>Adds <paramref name="items" /> to the pasteboard.</summary>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Wrap ("SetItems (items, pasteboardOptions.GetDictionary ()!)")]
		void SetItems (NSDictionary<NSString, NSObject> [] items, UIPasteboardOptions pasteboardOptions);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hasStrings")]
		bool HasStrings { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hasURLs")]
		bool HasUrls { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hasImages")]
		bool HasImages { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hasColors")]
		bool HasColors { get; }

		[Async]
		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("detectPatternsForPatterns:completionHandler:")]
		void DetectPatterns (NSSet<NSString> patterns, Action<NSSet<NSString>, NSError> completionHandler);

		[Async]
		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("detectPatternsForPatterns:inItemSet:completionHandler:")]
		void DetectPatterns (NSSet<NSString> patterns, [NullAllowed] NSIndexSet itemSet, Action<NSSet<NSString> [], NSError> completionHandler);

		[Async]
		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("detectValuesForPatterns:completionHandler:")]
		void DetectValues (NSSet<NSString> patterns, Action<NSDictionary<NSString, NSObject>, NSError> completionHandler);

		[Async]
		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("detectValuesForPatterns:inItemSet:completionHandler:")]
		void DetectValues (NSSet<NSString> patterns, [NullAllowed] NSIndexSet itemSet, Action<NSDictionary<NSString, NSObject> [], NSError> completionHandler);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("itemProviders", ArgumentSemantic.Copy)]
		NSItemProvider [] ItemProviders { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setItemProviders:localOnly:expirationDate:")]
		void SetItemProviders (NSItemProvider [] itemProviders, bool localOnly, [NullAllowed] NSDate expirationDate);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setObjects:")]
		void SetObjects (INSItemProviderWriting [] objects);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setObjects:localOnly:expirationDate:")]
		void SetObjects (INSItemProviderWriting [] objects, bool localOnly, [NullAllowed] NSDate expirationDate);
	}

	/// <summary>Constants that identify the name of a pasteboard.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Static]
	interface UIPasteboardNames {
		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPasteboardNameGeneral")]
		NSString General { get; }

		/// <summary>Developers should not use this deprecated property. The 'Find' pasteboard is no longer available.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 10, 0, message: "The 'Find' pasteboard is no longer available.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "The 'Find' pasteboard is no longer available.")]
		[Field ("UIPasteboardNameFind")]
		NSString Find { get; }
	}

	/// <summary>A <see cref="Foundation.DictionaryContainer" /> that holds options for describing pasteboard privacy.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[StrongDictionary ("UIPasteboardOptionKeys")]
	interface UIPasteboardOptions {
		/// <summary>Gets or sets the date at which the system will remove the data from the pasteboard.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		NSDate ExpirationDate { get; set; }
		/// <summary>Gets or sets whether the pasteboard items should not be shareable via Handoff.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		bool LocalOnly { get; set; }
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	[Static]
	interface UIPasteboardOptionKeys {
		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPasteboardOptionExpirationDate")]
		NSString ExpirationDateKey { get; }

		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UIPasteboardOptionLocalOnly")]
		NSString LocalOnlyKey { get; }
	}

	/// <summary>A <see cref="UIKit.UIView" /> that displays a spinning wheel control used to select data.</summary>
	///     <remarks>
	///       <format type="text/html">
	///         <h2>Customizing Appearance</h2>
	///       </format>
	///       <para>The appearance of the <see cref="UIKit.UIPickerView" /> can be customized by using the <see cref="UIKit.UIPickerView.UIPickerViewAppearance" /> class or by overriding the <see cref="UIKit.UIPickerViewModel.GetView(UIKit.UIPickerView,System.IntPtr,System.IntPtr,UIKit.UIView)" /> and <see cref="UIKit.UIPickerViewModel.GetRowHeight(UIKit.UIPickerView,System.IntPtr)" /> methods in the <see cref="UIKit.UIPickerViewModel" />, as shown in the "Standard Controls" sample ("Picker With Custom Appearance").</para>
	///     </remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerView_Class/index.html">Apple documentation for <c>UIPickerView</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView), Delegates = new string [] { "WeakDelegate" })]
	interface UIPickerView {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[NullAllowed]
		[Export ("dataSource", ArgumentSemantic.Assign)]
		NSObject WeakDataSource { get; set; }

		/// <summary>The UIPickerViewDataSource that provides elements to this UIPickerView.</summary>
		///         <value>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>To be added.</remarks>
		[NullAllowed]
		[Wrap ("WeakDataSource")]
		IUIPickerViewDataSource DataSource { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIPickerViewDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIPickerViewDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIPickerViewDelegate Delegate { get; set; }

		[Deprecated (PlatformName.iOS, 13, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Advice ("This property is a no-op since 7.0.")]
		[Export ("showsSelectionIndicator")]
		bool ShowSelectionIndicator { get; set; }

		[Export ("numberOfComponents")]
		nint NumberOfComponents { get; }

		/// <param name="component">To be added.</param>
		/// <summary>The number of rows in the specified component.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("numberOfRowsInComponent:")]
		nint RowsInComponent (nint component);

		/// <param name="component">To be added.</param>
		/// <summary>The SizeF for rows in the component. Typically, the size required to display the largest string or view used as a row in the component.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("rowSizeForComponent:")]
		CGSize RowSizeForComponent (nint component);

		/// <param name="row">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>The UIView for the specified row and component.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("viewForRow:forComponent:")]
		UIView ViewFor (nint row, nint component);

		[Export ("reloadAllComponents")]
		void ReloadAllComponents ();

		/// <param name="component">To be added.</param>
		/// <summary>Reloads the data relating to the specified component.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("reloadComponent:")]
		void ReloadComponent (nint component);

		/// <param name="row">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <param name="animated">To be added.</param>
		/// <summary>Selects the r<paramref name="row" /> element in <paramref name="component" />.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("selectRow:inComponent:animated:")]
		void Select (nint row, nint component, bool animated);

		/// <param name="component">To be added.</param>
		/// <summary>The selected row in the specified component.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("selectedRowInComponent:")]
		nint SelectedRowInComponent (nint component);

		// UITableViewDataSource - only implements the two required members
		// 	inlined both + UIPickerView.cs implements IUITableViewDataSource

		/// <param name="tableView">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>Developers should use <see cref="UIKit.UIPickerView.RowsInComponent(System.IntPtr)" /> rather than this method.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:numberOfRowsInSection:")]
		nint RowsInSection (UITableView tableView, nint section);

		[Export ("tableView:cellForRowAtIndexPath:")]
		UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath);
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIPickerViewDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIPickerViewDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIPickerViewDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIPickerViewDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIPickerViewDelegate { }

	/// <summary>Class that receives event notifications from the UIPickerView.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerViewDelegate_Protocol/index.html">Apple documentation for <c>UIPickerViewDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIPickerViewDelegate {
		/// <param name="pickerView">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>The height of the component at the specified index.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("pickerView:rowHeightForComponent:")]
		nfloat GetRowHeight (UIPickerView pickerView, nint component);

		/// <param name="pickerView">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>The width of the component at the specified index.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("pickerView:widthForComponent:")]
		nfloat GetComponentWidth (UIPickerView pickerView, nint component);

		/// <param name="pickerView">To be added.</param>
		/// <param name="row">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>The title of the specified component in the specified row.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("pickerView:titleForRow:forComponent:")]
		[return: NullAllowed]
		string GetTitle (UIPickerView pickerView, nint row, nint component);

		/// <param name="pickerView">To be added.</param>
		/// <param name="row">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <param name="view">A <see cref="UIKit.UIView" /> previously used to display this row. This argument may be <see langword="null" />.</param>
		/// <summary>The <see cref="UIKit.UIView" /> of the specified <paramref name="component" /> in <paramref name="row" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("pickerView:viewForRow:forComponent:reusingView:")]
		UIView GetView (UIPickerView pickerView, nint row, nint component, [NullAllowed] UIView view);

		/// <param name="pickerView">To be added.</param>
		/// <param name="row">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>Indicates that the user has selected a row in the component.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("pickerView:didSelectRow:inComponent:")]
		void Selected (UIPickerView pickerView, nint row, nint component);

		/// <param name="pickerView">To be added.</param>
		/// <param name="row">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>Returns an attributed string that represents the title for the specified row of the specified component of <paramref name="pickerView" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("pickerView:attributedTitleForRow:forComponent:")]
		NSAttributedString GetAttributedTitle (UIPickerView pickerView, nint row, nint component);
	}

	/// <summary>Allows accessibility hint and label to be set in a picker view.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPickerViewAccessibilityDelegate_Protocol/index.html">Apple documentation for <c>UIPickerViewAccessibilityDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (UIPickerViewDelegate))]
	interface UIPickerViewAccessibilityDelegate {
		/// <param name="pickerView">To be added.</param>
		/// <param name="acessibilityLabelForComponent">To be added.</param>
		/// <summary>Returns the accessibility label for a component.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("pickerView:accessibilityLabelForComponent:")]
		[return: NullAllowed]
		string GetAccessibilityLabel (UIPickerView pickerView, nint acessibilityLabelForComponent);

		/// <param name="pickerView">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>Gets a hint that describes the result of an action on <c>this</c> <see cref="UIKit.UIPickerViewAccessibilityDelegate" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("pickerView:accessibilityHintForComponent:")]
		[return: NullAllowed]
		string GetAccessibilityHint (UIPickerView pickerView, nint component);

		/// <param name="pickerView">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("pickerView:accessibilityAttributedLabelForComponent:")]
		[return: NullAllowed]
		NSAttributedString GetAccessibilityAttributedLabel (UIPickerView pickerView, nint component);

		/// <param name="pickerView">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("pickerView:accessibilityAttributedHintForComponent:")]
		[return: NullAllowed]
		NSAttributedString GetAccessibilityAttributedHint (UIPickerView pickerView, nint component);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("pickerView:accessibilityUserInputLabelsForComponent:")]
		string [] GetAccessibilityUserInputLabels (UIPickerView pickerView, nint component);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("pickerView:accessibilityAttributedUserInputLabelsForComponent:")]
		NSAttributedString [] GetAccessibilityAttributedUserInputLabels (UIPickerView pickerView, nint component);
	}

	/// <summary>Base class for models that provide data to a UIPickerView object.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/iPhone/Reference/UIPickerViewDataSource_Protocol/index.html">Apple documentation for <c>UIPickerViewDataSource</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIPickerViewDataSource {
		/// <param name="pickerView">To be added.</param>
		/// <summary>Returns the number of components.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("numberOfComponentsInPickerView:")]
		[Abstract]
		nint GetComponentCount (UIPickerView pickerView);

		/// <param name="pickerView">To be added.</param>
		/// <param name="component">To be added.</param>
		/// <summary>The number of rows in the specified component.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("pickerView:numberOfRowsInComponent:")]
		[Abstract]
		nint GetRowsInComponent (UIPickerView pickerView, nint component);
	}

	/// <include file="../docs/api/UIKit/IUIPickerViewDataSource.xml" path="/Documentation/Docs[@DocId='T:UIKit.IUIPickerViewDataSource']/*" />
	interface IUIPickerViewDataSource { }

	/// <summary>The model for the UIPickerView.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/reference/UIKit/UIPickerViewModel">Apple documentation for <c>UIPickerViewModel</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol (IsInformal = true)]
	interface UIPickerViewModel : UIPickerViewDataSource, UIPickerViewDelegate {
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIContentContainer" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIContentContainer" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIContentContainer" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIContentContainer_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	partial interface UIContentContainer {
		/// <summary>Gets the preferred size for the content of the container.</summary>
		/// <value>The preferred <see cref="CGSize" /> of the contents of <c>this</c> <see cref="UIKit.IUIContentContainer" />.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("preferredContentSize")]
		CGSize PreferredContentSize { get; }

		/// <param name="container">The child .</param>
		/// <summary>Notifies this controller that the preferred size for content for a specified child container has changed.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("preferredContentSizeDidChangeForChildContentContainer:")]
		void PreferredContentSizeDidChangeForChildContentContainer (IUIContentContainer container);

		/// <param name="container">The child .</param>
		/// <summary>Notifies this container that auto layout resized a specified child container.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("systemLayoutFittingSizeDidChangeForChildContentContainer:")]
		void SystemLayoutFittingSizeDidChangeForChildContentContainer (IUIContentContainer container);

		/// <param name="contentContainer">The child container whose size is being request.</param>
		/// <param name="parentContainerSize">The  of the .</param>
		/// <summary>Gets the size of the content of the specified child <see cref="UIKit.IUIContentContainer" /> by using the size of the parent container.</summary>
		/// <returns>The <see cref="CGSize" /> of the content of the <paramref name="contentContainer" />.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("sizeForChildContentContainer:withParentContainerSize:")]
		CGSize GetSizeForChildContentContainer (IUIContentContainer contentContainer, CGSize parentContainerSize);

		/// <param name="toSize">To be added.</param>
		/// <param name="coordinator">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("viewWillTransitionToSize:withTransitionCoordinator:")]
		void ViewWillTransitionToSize (CGSize toSize, IUIViewControllerTransitionCoordinator coordinator);

		/// <param name="traitCollection">The new trait collection.</param>
		/// <param name="coordinator">The  coordinating the transition.This parameter can be .</param>
		/// <summary>Notifies <c>this</c> that its trait collection will change to <paramref name="traitCollection" />, as coordinated by <paramref name="coordinator" />.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("willTransitionToTraitCollection:withTransitionCoordinator:")]
		void WillTransitionToTraitCollection (UITraitCollection traitCollection, [NullAllowed] IUIViewControllerTransitionCoordinator coordinator);
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIAppearanceContainer" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIAppearanceContainer" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIAppearanceContainer" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIAppearanceContainer_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[Protocol, Model]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	partial interface UIAppearanceContainer {
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor] // NSInvalidArgumentException Reason: Don't call -[UIPresentationController init].
	partial interface UIPresentationController : UIAppearanceContainer, UITraitEnvironment, UIContentContainer, UIFocusEnvironment
		, UITraitChangeObservable {
		[Export ("initWithPresentedViewController:presentingViewController:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIViewController presentedViewController, [NullAllowed] UIViewController presentingViewController);

		[Export ("presentingViewController", ArgumentSemantic.Retain)]
		UIViewController PresentingViewController { get; }

		[Export ("presentedViewController", ArgumentSemantic.Retain)]
		UIViewController PresentedViewController { get; }

		[Export ("presentationStyle")]
		UIModalPresentationStyle PresentationStyle { get; }

		[Export ("containerView")]
		UIView ContainerView { get; }

		[Export ("delegate", ArgumentSemantic.UnsafeUnretained), NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIAdaptivePresentationControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIAdaptivePresentationControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIAdaptivePresentationControllerDelegate Delegate { get; set; }

		[Deprecated (PlatformName.iOS, 17, 0, message: "Use the 'TraitOverrides' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Use the 'TraitOverrides' property instead.")]
		[Deprecated (PlatformName.TvOS, 17, 0, message: "Use the 'TraitOverrides' property instead.")]
		[Export ("overrideTraitCollection", ArgumentSemantic.Copy), NullAllowed]
		UITraitCollection OverrideTraitCollection { get; set; }

		[Export ("adaptivePresentationStyle")]
		UIModalPresentationStyle AdaptivePresentationStyle ();

		[MacCatalyst (13, 1)]
		[Export ("adaptivePresentationStyleForTraitCollection:")]
		UIModalPresentationStyle AdaptivePresentationStyle (UITraitCollection traitCollection);

		[Export ("containerViewWillLayoutSubviews")]
		void ContainerViewWillLayoutSubviews ();

		[Export ("containerViewDidLayoutSubviews")]
		void ContainerViewDidLayoutSubviews ();

		[Export ("presentedView")]
		UIView PresentedView { get; }

		[Export ("frameOfPresentedViewInContainerView")]
		CGRect FrameOfPresentedViewInContainerView { get; }

		[Export ("shouldPresentInFullscreen")]
		bool ShouldPresentInFullscreen { get; }

		[Export ("shouldRemovePresentersView")]
		bool ShouldRemovePresentersView { get; }

		[Export ("presentationTransitionWillBegin")]
		void PresentationTransitionWillBegin ();

		[Export ("presentationTransitionDidEnd:")]
		void PresentationTransitionDidEnd (bool completed);

		[Export ("dismissalTransitionWillBegin")]
		void DismissalTransitionWillBegin ();

		[Export ("dismissalTransitionDidEnd:")]
		void DismissalTransitionDidEnd (bool completed);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("traitOverrides")]
		IUITraitOverrides TraitOverrides { get; }
	}

	delegate void UIPreviewHandler (UIPreviewAction action, UIViewController previewViewController);

	[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
	[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
	[BaseType (typeof (NSObject))]
	interface UIPreviewAction : UIPreviewActionItem, NSCopying {
		[Static, Export ("actionWithTitle:style:handler:")]
		UIPreviewAction Create (string title, UIPreviewActionStyle style, UIPreviewHandler handler);

		[Export ("handler")]
		UIPreviewHandler Handler { get; }


	}

	[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
	[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
	[BaseType (typeof (NSObject))]
	interface UIPreviewActionGroup : UIPreviewActionItem, NSCopying {
		[Static, Export ("actionGroupWithTitle:style:actions:")]
		UIPreviewActionGroup Create (string title, UIPreviewActionStyle style, UIPreviewAction [] actions);
	}

	interface IUIPreviewActionItem { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.IUIPreviewActionItem" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.IUIPreviewActionItem" />.</para>
	///       <para>If you create objects that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.IUIPreviewActionItem" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIPreviewActionItem_Extensions" /> class as extension methods to the interface, allowing you to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIPreviewActionItem {
		/// <summary>Gets or sets the title of the preview action.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("title")]
		string Title { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UIProgressView : NSCoding {
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("initWithProgressViewStyle:")]
		NativeHandle Constructor (UIProgressViewStyle style);

		[Export ("progressViewStyle")]
		UIProgressViewStyle Style { get; set; }

		[Export ("progress")]
		float Progress { get; set; } // This is float, not nfloat.

		/// <summary>The color to be applied as a tint to the background of the UIProgressView.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("progressTintColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor ProgressTintColor { get; set; }

		/// <summary>The color to be applied as a tint to the track.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("trackTintColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor TrackTintColor { get; set; }

		/// <summary>The UIImage used to indicate progress.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("progressImage", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIImage ProgressImage { get; set; }

		/// <summary>The UIImage used to indicate the track.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("trackImage", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIImage TrackImage { get; set; }

		[Export ("setProgress:animated:")]
		void SetProgress (float progress /* this is float, not nfloat */, bool animated);

		[MacCatalyst (13, 1)]
		[Export ("observedProgress")]
		[NullAllowed]
		NSProgress ObservedProgress { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDynamicBehavior))]
	partial interface UIPushBehavior {
		[DesignatedInitializer]
		[Export ("initWithItems:mode:")]
		NativeHandle Constructor (IUIDynamicItem [] items, UIPushBehaviorMode mode);

		[Export ("addItem:")]
		[PostGet ("Items")]
		void AddItem (IUIDynamicItem dynamicItem);

		[Export ("removeItem:")]
		[PostGet ("Items")]
		void RemoveItem (IUIDynamicItem dynamicItem);

		[Export ("items", ArgumentSemantic.Copy)]
		IUIDynamicItem [] Items { get; }

		[Export ("targetOffsetFromCenterForItem:")]
		UIOffset GetTargetOffsetFromCenter (IUIDynamicItem item);

		[Export ("setTargetOffsetFromCenter:forItem:")]
		void SetTargetOffset (UIOffset offset, IUIDynamicItem item);

		[Export ("mode")]
		UIPushBehaviorMode Mode { get; }

		[Export ("active")]
		bool Active { get; set; }

		[Export ("angle")]
		nfloat Angle { get; set; }

		[Export ("magnitude")]
		nfloat Magnitude { get; set; }

		/// <param name="angle">To be added.</param>
		/// <param name="magnitude">To be added.</param>
		/// <summary>Specifies the angle, in radians, and magnitude of the force vector for this UIPushBehavior.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setAngle:magnitude:")]
		void SetAngleAndMagnitude (nfloat angle, nfloat magnitude);

		[Export ("pushDirection")]
		CGVector PushDirection { get; set; }

	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDynamicBehavior))]
	[DisableDefaultCtor] // Objective-C exception thrown.  Name: NSInvalidArgumentException Reason: init is undefined for objects of type UISnapBehavior
	partial interface UISnapBehavior {
		[DesignatedInitializer]
		[Export ("initWithItem:snapToPoint:")]
		NativeHandle Constructor (IUIDynamicItem dynamicItem, CGPoint point);

		[Export ("damping", ArgumentSemantic.Assign)]
		nfloat Damping { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("snapPoint", ArgumentSemantic.Assign)]
		CGPoint SnapPoint { get; set; }
	}

	/// <summary>Provides a dictionary-like service for looking up words and terms within an app.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIReferenceLibraryViewControllerClassRef/index.html">Apple documentation for <c>UIReferenceLibraryViewController</c></related>
	[MacCatalyst (14, 0)] // the headers lie, not usable until at least Mac Catalyst 14.0
	[NoTV]
	[BaseType (typeof (UIViewController))]
	// iOS6 returns the following (confusing) message with the default .ctor:
	// Objective-C exception thrown.  Name: NSGenericException Reason: -[UIReferenceLibraryViewController initWithNibName:bundle:] is not a valid initializer. You must call -[UIReferenceLibraryViewController initWithTerm:].
	[DisableDefaultCtor]
	partial interface UIReferenceLibraryViewController : NSCoding {
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("dictionaryHasDefinitionForTerm:"), Static]
		bool DictionaryHasDefinitionForTerm (string term);

		[DesignatedInitializer]
		[Export ("initWithTerm:")]
		NativeHandle Constructor (string term);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIResponder : UIAccessibilityAction, UIAccessibilityFocus, UIUserActivityRestoring, UIResponderStandardEditActions
#if !TVOS
	, UIAccessibilityDragging
#endif // !TVOS
#if IOS
	, UIPasteConfigurationSupporting, UIActivityItemsConfigurationProviding
#if __MACCATALYST__
	, NSTouchBarProvider
#endif // __MACCATALYST__
#endif // IOS
	{

		[Export ("nextResponder")]
		UIResponder NextResponder { get; }

		[Export ("canBecomeFirstResponder")]
		bool CanBecomeFirstResponder { get; }

		[Export ("becomeFirstResponder")]
		bool BecomeFirstResponder ();

		[Export ("canResignFirstResponder")]
		bool CanResignFirstResponder { get; }

		[Export ("resignFirstResponder")]
		bool ResignFirstResponder ();

		[Export ("isFirstResponder")]
		bool IsFirstResponder { get; }

		[Export ("touchesBegan:withEvent:")]
		void TouchesBegan (NSSet touches, [NullAllowed] UIEvent evt);

		[Export ("touchesMoved:withEvent:")]
		void TouchesMoved (NSSet touches, [NullAllowed] UIEvent evt);

		[Export ("touchesEnded:withEvent:")]
		void TouchesEnded (NSSet touches, [NullAllowed] UIEvent evt);

		[Export ("touchesCancelled:withEvent:")]
		void TouchesCancelled (NSSet touches, [NullAllowed] UIEvent evt);

		[Export ("motionBegan:withEvent:")]
		void MotionBegan (UIEventSubtype motion, [NullAllowed] UIEvent evt);

		[Export ("motionEnded:withEvent:")]
		void MotionEnded (UIEventSubtype motion, [NullAllowed] UIEvent evt);

		[Export ("motionCancelled:withEvent:")]
		void MotionCancelled (UIEventSubtype motion, [NullAllowed] UIEvent evt);

		[Export ("canPerformAction:withSender:")]
		bool CanPerform (Selector action, [NullAllowed] NSObject withSender);

		[Export ("undoManager"), NullAllowed]
		NSUndoManager UndoManager { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("editingInteractionConfiguration")]
		UIEditingInteractionConfiguration EditingInteractionConfiguration { get; }

		// 3.2

		[Export ("inputAccessoryView")]
		UIView InputAccessoryView { get; }

		[Export ("inputView")]
		UIView InputView { get; }

		[Export ("reloadInputViews")]
		void ReloadInputViews ();

		[Export ("remoteControlReceivedWithEvent:")]
		void RemoteControlReceived ([NullAllowed] UIEvent theEvent);

		//
		// 7.0
		//

		[Export ("keyCommands")]
		UIKeyCommand [] KeyCommands { get; }

		[Static, Export ("clearTextInputContextIdentifier:")]
		void ClearTextInputContextIdentifier (NSString identifier);

		[Export ("targetForAction:withSender:")]
		[return: NullAllowed]
		NSObject GetTargetForAction (Selector action, [NullAllowed] NSObject sender);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("buildMenuWithBuilder:")]
		void BuildMenu (IUIMenuBuilder builder);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("validateCommand:")]
		void ValidateCommand (UICommand command);

		[Export ("textInputContextIdentifier")]
		[NullAllowed]
		NSString TextInputContextIdentifier { get; }

		[Export ("textInputMode")]
		UITextInputMode TextInputMode { get; }

		[MacCatalyst (13, 1)]
		[Export ("inputViewController")]
		UIInputViewController InputViewController { get; }

		[MacCatalyst (13, 1)]
		[Export ("inputAccessoryViewController")]
		UIInputViewController InputAccessoryViewController { get; }

		[MacCatalyst (13, 1)]
		[Export ("userActivity"), NullAllowed]
		NSUserActivity UserActivity { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("updateUserActivityState:")]
		void UpdateUserActivityState (NSUserActivity activity);

		[MacCatalyst (13, 1)]
		[Export ("pressesBegan:withEvent:")]
		void PressesBegan (NSSet<UIPress> presses, UIPressesEvent evt);

		[MacCatalyst (13, 1)]
		[Export ("pressesChanged:withEvent:")]
		void PressesChanged (NSSet<UIPress> presses, UIPressesEvent evt);

		[MacCatalyst (13, 1)]
		[Export ("pressesEnded:withEvent:")]
		void PressesEnded (NSSet<UIPress> presses, UIPressesEvent evt);

		[MacCatalyst (13, 1)]
		[Export ("pressesCancelled:withEvent:")]
		void PressesCancelled (NSSet<UIPress> presses, UIPressesEvent evt);

		// from UIResponderInputViewAdditions (UIResponder) - other members already inlined

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("inputAssistantItem", ArgumentSemantic.Strong)]
		UITextInputAssistantItem InputAssistantItem { get; }

		[MacCatalyst (13, 1)]
		[Export ("touchesEstimatedPropertiesUpdated:")]
		void TouchesEstimatedPropertiesUpdated (NSSet touches);

		// from UIResponder (UIActivityItemsConfiguration)

#pragma warning disable 0109 // warning CS0109: The member 'UIResponder.ActivityItemsConfiguration' does not hide an accessible member. The new keyword is not required.
		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("activityItemsConfiguration", ArgumentSemantic.Strong)]
		new IUIActivityItemsConfigurationReading ActivityItemsConfiguration { get; set; }
#pragma warning restore

		// from UIResponder (UICaptureTextFromCameraSupporting)
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("captureTextFromCamera:")]
		void CaptureTextFromCamera ([NullAllowed] NSObject sender);

		[MacCatalyst (13, 1)]
		[NoTV, NoiOS]
		[Export ("makeTouchBar")]
		[return: NullAllowed]
		NSTouchBar CreateTouchBar ();

#pragma warning disable 0108 // warning CS0108: 'NSFontAssetRequest.Progress' hides inherited member 'NSProgressReporting.Progress'. Use the new keyword if hiding was intended.
		[MacCatalyst (13, 1)]
		[NoTV, NoiOS]
		[Export ("touchBar", ArgumentSemantic.Strong)]
		[NullAllowed]
		NSTouchBar TouchBar { get; set; }
#pragma warning restore
	}

	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIResponderStandardEditActions {
		[Export ("cut:")]
		void Cut ([NullAllowed] NSObject sender);

		[Export ("copy:")]
		void Copy ([NullAllowed] NSObject sender);

		[Export ("paste:")]
		void Paste ([NullAllowed] NSObject sender);

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("pasteAndMatchStyle:")]
		void PasteAndMatchStyle ([NullAllowed] NSObject sender);

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("pasteAndGo:")]
		void PasteAndGo ([NullAllowed] NSObject sender);

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("pasteAndSearch:")]
		void PasteAndSearch ([NullAllowed] NSObject sender);

		[Export ("select:")]
		void Select ([NullAllowed] NSObject sender);

		[Export ("selectAll:")]
		void SelectAll ([NullAllowed] NSObject sender);

		[Export ("delete:")]
		void Delete ([NullAllowed] NSObject sender);

		[Export ("makeTextWritingDirectionLeftToRight:")]
		void MakeTextWritingDirectionLeftToRight ([NullAllowed] NSObject sender);

		[Export ("makeTextWritingDirectionRightToLeft:")]
		void MakeTextWritingDirectionRightToLeft ([NullAllowed] NSObject sender);

		[Export ("toggleBoldface:")]
		void ToggleBoldface ([NullAllowed] NSObject sender);

		[Export ("toggleItalics:")]
		void ToggleItalics ([NullAllowed] NSObject sender);

		[Export ("toggleUnderline:")]
		void ToggleUnderline ([NullAllowed] NSObject sender);

		[Export ("decreaseSize:")]
		void DecreaseSize ([NullAllowed] NSObject sender);

		[Export ("increaseSize:")]
		void IncreaseSize ([NullAllowed] NSObject sender);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("updateTextAttributesWithConversionHandler:")]
		void UpdateTextAttributes (UITextAttributesConversionHandler conversionHandler);

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("print:")]
		void Print ([NullAllowed] NSObject sender);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("rename:")]
		void Rename ([NullAllowed] NSObject sender);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("duplicate:")]
		void Duplicate ([NullAllowed] NSObject sender);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("move:")]
		void Move ([NullAllowed] NSObject sender);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("export:")]
		void Export ([NullAllowed] NSObject sender);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("find:")]
		void Find ([NullAllowed] NSObject sender);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("findAndReplace:")]
		void FindAndReplace ([NullAllowed] NSObject sender);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("findNext:")]
		void FindNext ([NullAllowed] NSObject sender);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("findPrevious:")]
		void FindPrevious ([NullAllowed] NSObject sender);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("useSelectionForFind:")]
		void UseSelectionForFind ([NullAllowed] NSObject sender);

		[NoTV, iOS (18, 2), MacCatalyst (18, 2)]
		[Export ("showWritingTools:")]
		void ShowWritingTools ([NullAllowed] NSObject sender);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIScreen : UITraitEnvironment {
		[Export ("bounds")]
		CGRect Bounds { get; }

		[NoTV]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use the 'Bounds' property.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use the 'Bounds' property.")]
		[Export ("applicationFrame")]
		CGRect ApplicationFrame { get; }

		[Export ("mainScreen")]
		[Static]
		UIScreen MainScreen { get; }

		[NoTV] // Xcode 7.2
		[MacCatalyst (13, 1)]
		[Export ("availableModes", ArgumentSemantic.Copy)]
		UIScreenMode [] AvailableModes { get; }

		[NullAllowed] // by default this property is null
		[Export ("currentMode", ArgumentSemantic.Retain)]
		UIScreenMode CurrentMode {
			get;
#if !TVOS
			set;
#endif
		}

		[NoTV] // Xcode 7.2
		[MacCatalyst (13, 1)]
		[Export ("preferredMode", ArgumentSemantic.Retain)]
		UIScreenMode PreferredMode { get; }

		[Export ("mirroredScreen", ArgumentSemantic.Retain)]
		UIScreen MirroredScreen { get; }

		[Export ("screens")]
		[Static]
		UIScreen [] Screens { get; }

		[Export ("scale")]
		nfloat Scale { get; }

		[Export ("displayLinkWithTarget:selector:")]
		[return: NullAllowed]
		CADisplayLink CreateDisplayLink (NSObject target, Selector sel);

		[MacCatalyst (13, 1)]
		[Export ("maximumFramesPerSecond")]
		nint MaximumFramesPerSecond { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("calibratedLatency")]
		double CalibratedLatency { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("brightness")]
		nfloat Brightness { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("wantsSoftwareDimming")]
		bool WantsSoftwareDimming { get; set; }

		[Export ("overscanCompensation")]
		UIScreenOverscanCompensation OverscanCompensation { get; set; }

		/// <include file="../docs/api/UIKit/UIScreen.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIScreen.BrightnessDidChangeNotification']/*" />
		[Field ("UIScreenBrightnessDidChangeNotification")]
		[Notification]
		NSString BrightnessDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIScreen.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIScreen.ModeDidChangeNotification']/*" />
		[Field ("UIScreenModeDidChangeNotification")]
		[Notification]
		NSString ModeDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIScreen.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIScreen.DidDisconnectNotification']/*" />
		[Field ("UIScreenDidDisconnectNotification")]
		[Notification]
		NSString DidDisconnectNotification { get; }

		/// <include file="../docs/api/UIKit/UIScreen.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIScreen.DidConnectNotification']/*" />
		[Field ("UIScreenDidConnectNotification")]
		[Notification]
		NSString DidConnectNotification { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Notification]
		[Field ("UIScreenReferenceDisplayModeStatusDidChangeNotification")]
		NSString ReferenceDisplayModeStatusDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UIScreen.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIScreen.CapturedDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Field ("UIScreenCapturedDidChangeNotification")]
		[Notification]
		NSString CapturedDidChangeNotification { get; }

		[return: NullAllowed]
		[Export ("snapshotViewAfterScreenUpdates:")]
		UIView SnapshotView (bool afterScreenUpdates);

		[MacCatalyst (13, 1)]
		[Export ("nativeBounds")]
		CGRect NativeBounds { get; }

		[MacCatalyst (13, 1)]
		[Export ("nativeScale")]
		nfloat NativeScale { get; }

		[MacCatalyst (13, 1)]
		[Export ("coordinateSpace")]
		IUICoordinateSpace CoordinateSpace { get; }

		[MacCatalyst (13, 1)]
		[Export ("fixedCoordinateSpace")]
		IUICoordinateSpace FixedCoordinateSpace { get; }

		[MacCatalyst (13, 1)]
		[Export ("overscanCompensationInsets")]
		UIEdgeInsets OverscanCompensationInsets { get; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Use 'UIWindowScene.FocusSystem.FocusedItem' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Use 'UIWindowScene.FocusSystem.FocusedItem' instead.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Use 'UIWindowScene.FocusSystem.FocusedItem' instead.")]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("focusedView", ArgumentSemantic.Weak)]
		UIView FocusedView { get; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Check for 'UIWindowScene.FocusSystem is not null' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Check for 'UIWindowScene.FocusSystem is not null' instead.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Check for 'UIWindowScene.FocusSystem is not null' instead.")]
		[MacCatalyst (13, 1)]
		[Export ("supportsFocus")]
		bool SupportsFocus { get; }

		[Deprecated (PlatformName.iOS, 15, 0, message: "Use 'UIWindowScene.FocusSystem.FocusedItem' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Use 'UIWindowScene.FocusSystem.FocusedItem' instead.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "Use 'UIWindowScene.FocusSystem.FocusedItem' instead.")]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("focusedItem", ArgumentSemantic.Weak)]
		IUIFocusItem FocusedItem { get; }

		/// <summary>Gets a Boolean value that tells whether a part of the screen is being captured, mirrored, or transmitted via AriPlay.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 17, 2, message: "Use 'UITraitCollection.SceneCaptureState' property instead.")]
		[Deprecated (PlatformName.TvOS, 17, 2, message: "Use 'UITraitCollection.SceneCaptureState' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 2, message: "Use 'UITraitCollection.SceneCaptureState' property instead.")]
		[MacCatalyst (13, 1)]
		[Export ("captured")]
		bool Captured { [Bind ("isCaptured")] get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("referenceDisplayModeStatus")]
		UIScreenReferenceDisplayModeStatus ReferenceDisplayModeStatus { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("currentEDRHeadroom")]
		nfloat CurrentEdrHeadroom { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("potentialEDRHeadroom")]
		nfloat PotentialEdrHeadroom { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIScrollViewDelegate) })]
	interface UIScrollView : UIFocusItemScrollableContainer {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		// moved to UIFocusItemScrollableContainer in iOS 12 - but that makes the availability information incorrect (so `new` is used to avoid compiler warnings)
		[Export ("contentOffset")]
		new CGPoint ContentOffset { get; set; }

		[Export ("contentSize")]
		new CGSize ContentSize { get; set; }

		[Export ("contentInset")]
		UIEdgeInsets ContentInset { get; set; }

		[iOS (17, 4), TV (17, 4), MacCatalyst (17, 4)]
		[Export ("contentAlignmentPoint", ArgumentSemantic.Assign)]
		CGPoint ContentAlignmentPoint { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("adjustedContentInset")]
		UIEdgeInsets AdjustedContentInset { get; }

		[MacCatalyst (13, 1)]
		[Export ("adjustedContentInsetDidChange")]
		[RequiresSuper]
		void AdjustedContentInsetDidChange ();

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("automaticallyAdjustsScrollIndicatorInsets")]
		bool AutomaticallyAdjustsScrollIndicatorInsets { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("contentInsetAdjustmentBehavior", ArgumentSemantic.Assign)]
		UIScrollViewContentInsetAdjustmentBehavior ContentInsetAdjustmentBehavior { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("contentLayoutGuide", ArgumentSemantic.Strong)]
		UILayoutGuide ContentLayoutGuide { get; }

		[MacCatalyst (13, 1)]
		[Export ("frameLayoutGuide", ArgumentSemantic.Strong)]
		UILayoutGuide FrameLayoutGuide { get; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIScrollViewDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIScrollViewDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIScrollViewDelegate Delegate { get; set; }

		[Export ("bounces")]
		bool Bounces { get; set; }

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("bouncesHorizontally")]
		bool BouncesHorizontally { get; set; }

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("bouncesVertically")]
		bool BouncesVertically { get; set; }

		[Export ("alwaysBounceVertical")]
		bool AlwaysBounceVertical { get; set; }

		[Export ("alwaysBounceHorizontal")]
		bool AlwaysBounceHorizontal { get; set; }

		[Export ("showsHorizontalScrollIndicator")]
		bool ShowsHorizontalScrollIndicator { get; set; }

		[Export ("showsVerticalScrollIndicator")]
		bool ShowsVerticalScrollIndicator { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("verticalScrollIndicatorInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets VerticalScrollIndicatorInsets { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("horizontalScrollIndicatorInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets HorizontalScrollIndicatorInsets { get; set; }

		[Export ("scrollIndicatorInsets")]
		UIEdgeInsets ScrollIndicatorInsets {
			[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'VerticalScrollIndicatorInsets' or 'HorizontalScrollIndicatorInsets' instead.")]
			[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'VerticalScrollIndicatorInsets' or 'HorizontalScrollIndicatorInsets' instead.")]
			[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'VerticalScrollIndicatorInsets' or 'HorizontalScrollIndicatorInsets' instead.")]
			get;
			set;
		}

		[Export ("indicatorStyle")]
		UIScrollViewIndicatorStyle IndicatorStyle { get; set; }

		[Export ("decelerationRate")]
		nfloat DecelerationRate { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("indexDisplayMode")]
		UIScrollViewIndexDisplayMode IndexDisplayMode { get; set; }

		/// <include file="../docs/api/UIKit/UIScrollView.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIScrollView.PagingEnabled']/*" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("pagingEnabled")]
		bool PagingEnabled { [Bind ("isPagingEnabled")] get; set; }

		/// <summary>If <see langword="true" />, and the user begins scrolling in one axis (i.e. horizontally) then the scroll view disables scrolling in the other axis (i.e. vertically).</summary>
		///         <value>
		///         </value>
		///         <remarks>If this property is <see langword="false" />, then scrolling is permitted both horizontally and vertically.</remarks>
		[Export ("directionalLockEnabled")]
		bool DirectionalLockEnabled { [Bind ("isDirectionalLockEnabled")] get; set; }

		/// <summary>If set to <see langword="true" /> then scrolling is enabled.</summary>
		///         <value>
		///         </value>
		///         <remarks>If <see langword="false" />, then touch events will not be processed by the scroll view. They continue to be forwarded up the responder chain.</remarks>
		[Export ("scrollEnabled")]
		bool ScrollEnabled { [Bind ("isScrollEnabled")] get; set; }

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("transfersHorizontalScrollingToParent")]
		bool TransfersHorizontalScrollingToParent { get; set; }

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("transfersVerticalScrollingToParent")]
		bool TransfersVerticalScrollingToParent { get; set; }

		/// <summary>Returns <see langword="true" /> if the user has touched the content and scrolling is about to begin.</summary>
		///         <value>
		///           <see langword="true" /> while tracking is active, otherwise <see langword="false" />.
		///                 </value>
		///         <remarks>
		///         </remarks>
		[Export ("tracking")]
		bool Tracking { [Bind ("isTracking")] get; }

		/// <summary>Returns <see langword="true" /> if the content has begun scrolling. Read-only.</summary>
		///         <value>
		///         </value>
		///         <remarks>This property can not be depended upon to be updated immediately after the scrolling has started.</remarks>
		[Export ("dragging")]
		bool Dragging { [Bind ("isDragging")] get; }

		/// <summary>If this property returns <see langword="true" />, then scrolling is still occuring in the scroll view but the user is not dragging their finger.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Export ("decelerating")]
		bool Decelerating { [Bind ("isDecelerating")] get; }

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("scrollAnimating")]
		bool ScrollAnimating { [Bind ("isScrollAnimating")] get; }

		[Export ("setContentOffset:animated:")]
		void SetContentOffset (CGPoint contentOffset, bool animated);

		[Export ("scrollRectToVisible:animated:")]
		void ScrollRectToVisible (CGRect rect, bool animated);

		[Export ("flashScrollIndicators")]
		void FlashScrollIndicators ();

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("withScrollIndicatorsShownForContentOffsetChanges:")]
		void WithScrollIndicatorsShown (Action forContentOffsetChanges);

		[Export ("delaysContentTouches")]
		bool DelaysContentTouches { get; set; }

		[Export ("canCancelContentTouches")]
		bool CanCancelContentTouches { get; set; }

		[Export ("touchesShouldBegin:withEvent:inContentView:")]
		bool TouchesShouldBegin (NSSet touches, UIEvent withEvent, UIView inContentView);

		[Export ("touchesShouldCancelInContentView:")]
		bool TouchesShouldCancelInContentView (UIView view);

		[Export ("minimumZoomScale")]
		nfloat MinimumZoomScale { get; set; }

		[Export ("maximumZoomScale")]
		nfloat MaximumZoomScale { get; set; }

		[Export ("zoomScale")]
		nfloat ZoomScale { get; set; }

		/// <param name="scale">The amount to scale the .</param>
		/// <param name="animated">To be added.</param>
		/// <summary>Sets the scale of the <see cref="UIKit.UIScrollView" /> object's contents. (See <see cref="UIKit.UIScrollView.ZoomScale" />)</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setZoomScale:animated:")]
		void SetZoomScale (nfloat scale, bool animated);

		[Export ("zoomToRect:animated:")]
		void ZoomToRect (CGRect rect, bool animated);

		[Export ("bouncesZoom")]
		bool BouncesZoom { get; set; }

		/// <summary>Returns <see langword="true" /> if the content view is zooming in or out. Read-only.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Export ("zooming")]
		bool Zooming { [Bind ("isZooming")] get; }

		/// <summary>Returns <see langword="true" /> if the scroll view is bouncing back to the zoom scaling limits specified by<see cref="UIKit.UIScrollView.MinimumScrollView" /> and <see cref="UIKit.UIScrollView.MaximumScrollView" />. Read-only.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Export ("zoomBouncing")]
		bool ZoomBouncing { [Bind ("isZoomBouncing")] get; }

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("zoomAnimating")]
		bool ZoomAnimating { [Bind ("isZoomAnimating")] get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("scrollsToTop")]
		bool ScrollsToTop { get; set; }

		[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("stopScrollingAndZooming")]
		void StopScrollingAndZooming ();

		[Export ("panGestureRecognizer")]
		UIPanGestureRecognizer PanGestureRecognizer { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("pinchGestureRecognizer")]
		UIPinchGestureRecognizer PinchGestureRecognizer { get; }

		/// <summary>Represents the value associated with the constant UIScrollViewDecelerationRateNormal</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Field ("UIScrollViewDecelerationRateNormal")]
		nfloat DecelerationRateNormal { get; }

		/// <summary>Represents the value associated with the constant UIScrollViewDecelerationRateFast</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Field ("UIScrollViewDecelerationRateFast")]
		nfloat DecelerationRateFast { get; }

		[Export ("keyboardDismissMode")]
		UIScrollViewKeyboardDismissMode KeyboardDismissMode { get; set; }

		[Deprecated (PlatformName.TvOS, 11, 0, message: "Configuring the 'PanGestureRecognizer' for indirect scrolling automatically supports directional presses now, so this property is no longer useful.")]
		// not deprecated on iOS or Mac Catalyst
		[MacCatalyst (13, 1)]
		[Export ("directionalPressGestureRecognizer")]
		UIGestureRecognizer DirectionalPressGestureRecognizer { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("refreshControl", ArgumentSemantic.Strong)]
		UIRefreshControl RefreshControl { get; set; }

		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("allowsKeyboardScrolling")]
		bool AllowsKeyboardScrolling { get; set; }
	}

	interface IUIScrollViewDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIScrollViewDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIScrollViewDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIScrollViewDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIScrollViewDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[NoMac]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIScrollViewDelegate {

		/// <param name="scrollView">Scroll view where the scrolling occurred.</param>
		/// <summary>Indicates that the specified scrollView has scrolled.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewDidScroll:"), EventArgs ("UIScrollView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.DraggingStarted" />
			<altmember cref="UIKit.UIScrollView.DraggingEnded" />
			<altmember cref="UIKit.UIScrollView.WillEndDragging" />
			<altmember cref="UIKit.UIScrollView.DecelerationStarted" />
			<altmember cref="UIKit.UIScrollView.DecelerationEnded" />
			""")]
		void Scrolled (UIScrollView scrollView);

		/// <param name="scrollView">Scroll view whose content is about to be scrolled.</param>
		/// <summary>Indicates that dragging has begun.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewWillBeginDragging:"), EventArgs ("UIScrollView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.DraggingEnded" />
			<altmember cref="UIKit.UIScrollView.WillEndDragging" />
			<altmember cref="UIKit.UIScrollView.Scrolled" />
			<altmember cref="UIKit.UIScrollView.DecelerationStarted" />
			<altmember cref="UIKit.UIScrollView.DecelerationEnded" />
			""")]
		void DraggingStarted (UIScrollView scrollView);

		/// <param name="scrollView">Scroll view where the content finished scrolling.</param>
		/// <param name="willDecelerate">
		///           <see langword="true" /> if the scrolling movement will continue (but decelerate) after the user lifts their finger. If <see langword="false" /> then the scrolling stops immediately upon touch-up.</param>
		/// <summary>Indicates that dragging has completed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewDidEndDragging:willDecelerate:"), EventArgs ("Dragging", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.DraggingStarted" />
			<altmember cref="UIKit.UIScrollView.WillEndDragging" />
			<altmember cref="UIKit.UIScrollView.Scrolled" />
			<altmember cref="UIKit.UIScrollView.DecelerationStarted" />
			<altmember cref="UIKit.UIScrollView.DecelerationEnded" />
			""")]
		void DraggingEnded (UIScrollView scrollView, [EventName ("decelerate")] bool willDecelerate);

		/// <param name="scrollView">Scroll view object that is decelerating the scrolling content.</param>
		/// <summary>Indicates that deceleration of a scrolling event has begun.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewWillBeginDecelerating:"), EventArgs ("UIScrollView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.DraggingStarted" />
			<altmember cref="UIKit.UIScrollView.DraggingEnded" />
			<altmember cref="UIKit.UIScrollView.WillEndDragging" />
			<altmember cref="UIKit.UIScrollView.Scrolled" />
			<altmember cref="UIKit.UIScrollView.DecelerationEnded" />
			""")]
		void DecelerationStarted (UIScrollView scrollView);

		/// <param name="scrollView">Scroll view object that is decelerating the scrolling content.</param>
		/// <summary>Indicates that deceleration relating to a scroll event has ended.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewDidEndDecelerating:"), EventArgs ("UIScrollView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.DraggingStarted" />
			<altmember cref="UIKit.UIScrollView.DraggingEnded" />
			<altmember cref="UIKit.UIScrollView.WillEndDragging" />
			<altmember cref="UIKit.UIScrollView.Scrolled" />
			<altmember cref="UIKit.UIScrollView.DecelerationStarted" />
			""")]
		void DecelerationEnded (UIScrollView scrollView);

		/// <param name="scrollView">Scroll view that is performing a scrolling animation.</param>
		/// <summary>Indicates that all animations relating to scrolling have completed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewDidEndScrollingAnimation:"), EventArgs ("UIScrollView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.DidZoom" />
			<altmember cref="UIKit.UIScrollView.Scrolled" />
			""")]
		void ScrollAnimationEnded (UIScrollView scrollView);

		/// <param name="scrollView">Scroll view displaying the content.</param>
		/// <summary>The UIView to scale when zooming is requested.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>The default value is <see langword="null" /></value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollViewGetZoomView" />
			<related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/FrogScroller">iOS Standard Controls</related>
			<related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/ZoomingPdfViewer/">Zooming Pdf Viewer</related>
			""")]
		[Export ("viewForZoomingInScrollView:"), DelegateName ("UIScrollViewGetZoomView"), DefaultValue ("null")]
		UIView ViewForZoomingInScrollView (UIScrollView scrollView);

		/// <param name="scrollView">Scroll view requesting whether scroll is allowed.</param>
		/// <summary>Whether a scroll to the beginning of the scrollView should be permitted.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("scrollViewShouldScrollToTop:"), DelegateName ("UIScrollViewCondition"), DefaultValue ("true")]
		bool ShouldScrollToTop (UIScrollView scrollView);

		/// <param name="scrollView">Scroll view that was scrolled.</param>
		/// <summary>Indicates that the specified scrollView's scrolling has ended at the top.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewDidScrollToTop:"), EventArgs ("UIScrollView",
#if !__TVOS__
		XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.Scrolled" />
			<altmember cref="UIKit.UIScrollView.ScrollsToTop" />
			"""
#else
		XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.Scrolled" />
			"""
#endif
		)]
		void ScrolledToTop (UIScrollView scrollView);

		/// <param name="scrollView">Scroll view containing the content being zoomed.</param>
		/// <param name="withView">View representing the content that needs to be scaled.</param>
		/// <param name="atScale">The scale factor to use. This value must be between the limits set by the <see cref="UIKit.UIScrollView" /> properties <see cref="UIKit.UIScrollView.MinimumZoomScale" /> and <see cref="UIKit.UIScrollView.MaximumZoomScale" />.</param>
		/// <summary>Indicates that zooming has completed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewDidEndZooming:withView:atScale:"), EventArgs ("ZoomingEnded", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.ZoomingStarted" />
			<altmember cref="CoreAnimation.CALayer.DrawInContext" />
			<altmember cref="UIKit.UIScrollView.DidZoom" />
			""")]
		void ZoomingEnded (UIScrollView scrollView, UIView withView, nfloat atScale);

		/// <param name="scrollView">Scroll view being zoomed.</param>
		/// <summary>Indicates that the specified scrollView has zoomed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewDidZoom:"), EventArgs ("UIScrollView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.ZoomingEnded" />
			<altmember cref="UIKit.UIScrollView.ZoomingStarted" />
			""")]
		void DidZoom (UIScrollView scrollView);

		/// <param name="scrollView">Scroll view containing the content.</param>
		/// <param name="view">The content view about to be zoomed.</param>
		/// <summary>Indicates that zooming has begun.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewWillBeginZooming:withView:"), EventArgs ("UIScrollViewZooming", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.UIScrollView.ZoomingEnded" />
			<altmember cref="UIKit.UIScrollView.DidZoom" />
			""")]
		void ZoomingStarted (UIScrollView scrollView, UIView view);

		/// <param name="scrollView">Scroll view where user touch ended.</param>
		/// <param name="velocity">The velocity of the scroll view (in points) when the touch ended.</param>
		/// <param name="targetContentOffset">The expected offset when the scrolling action decelerates to a stop.</param>
		/// <summary>Indicates that dragging is about to end.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("scrollViewWillEndDragging:withVelocity:targetContentOffset:"), EventArgs ("WillEndDragging", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			<altmember cref="UIKit.WillEndDraggingEventArgs" />
			<altmember cref="UIKit.UIScrollView.ContentOffset" />
			""")]
		void WillEndDragging (UIScrollView scrollView, CGPoint velocity, ref CGPoint targetContentOffset);

		/// <param name="scrollView">The scroll view whose insets changed.</param>
		/// <summary>Method that is called when the inset values change.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("scrollViewDidChangeAdjustedContentInset:")]
		void DidChangeAdjustedContentInset (UIScrollView scrollView);
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIScrollViewAccessibilityDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIScrollViewAccessibilityDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIScrollViewAccessibilityDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIScrollViewAccessibilityDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (UIScrollViewDelegate))]
	interface UIScrollViewAccessibilityDelegate {
		/// <param name="scrollView">To be added.</param>
		/// <summary>Gets a string that represents the current relative progress through a document or collection of documents. (For example, "Volume 34 of 51.")</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("accessibilityScrollStatusForScrollView:")]
		[return: NullAllowed]
		string GetAccessibilityScrollStatus (UIScrollView scrollView);

		/// <param name="scrollView">The scrollview for which to get the attributed status.</param>
		/// <summary>Gets an attributed string that represents the current relative progress through a document or collection of documents. (For example, "Volume 34 of 51.")</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("accessibilityAttributedScrollStatusForScrollView:")]
		[return: NullAllowed]
		NSAttributedString GetAccessibilityAttributedScrollStatus (UIScrollView scrollView);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UISearchBarDelegate) })]
#if TVOS
	[DisableDefaultCtor] // - (instancetype)init __TVOS_PROHIBITED;
#endif
	interface UISearchBar : UIBarPositioning, UITextInputTraits, UILookToDictateCapable
#if !TVOS
		, NSCoding
#endif
	{
		[NoTV]
		[MacCatalyst (13, 1)]
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("barStyle")]
		UIBarStyle BarStyle { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUISearchBarDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUISearchBarDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUISearchBarDelegate Delegate { get; set; }

		[Export ("text", ArgumentSemantic.Copy)]
		[NullAllowed]
		string Text { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("prompt", ArgumentSemantic.Copy)]
		string Prompt { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("placeholder", ArgumentSemantic.Copy)]
		string Placeholder { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("showsBookmarkButton")]
		bool ShowsBookmarkButton { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("showsCancelButton")]
		bool ShowsCancelButton { get; set; }

		[Export ("selectedScopeButtonIndex")]
		nint SelectedScopeButtonIndex { get; set; }

		[Export ("showsScopeBar")]
		bool ShowsScopeBar { get; set; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("setShowsScopeBar:animated:")]
		void SetShowsScopeBar (bool show, bool animate);

		[NullAllowed] // by default this property is null
		[Export ("scopeButtonTitles", ArgumentSemantic.Copy)]
		string [] ScopeButtonTitles { get; set; }

		/// <summary>True if the search bar is translucent.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("translucent", ArgumentSemantic.Assign)]
		bool Translucent { [Bind ("isTranslucent")] get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setShowsCancelButton:animated:")]
		void SetShowsCancelButton (bool showsCancelButton, bool animated);

		// 3.2
		/// <summary>Whether the search results button is selected.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("searchResultsButtonSelected")]
		bool SearchResultsButtonSelected { [Bind ("isSearchResultsButtonSelected")] get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("showsSearchResultsButton")]
		bool ShowsSearchResultsButton { get; set; }

		// 5.0
		/// <summary>The UIImage used for the search bar's background.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundImage", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIImage BackgroundImage { get; set; }

		/// <summary>The image used as the background for the scope bar.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("scopeBarBackgroundImage", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIImage ScopeBarBackgroundImage { get; set; }

		[Appearance]
		[Export ("searchFieldBackgroundPositionAdjustment")]
		UIOffset SearchFieldBackgroundPositionAdjustment { get; set; }

		[Appearance]
		[Export ("searchTextPositionAdjustment")]
		UIOffset SearchTextPositionAdjustment { get; set; }

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <summary>Sets the background image of the search field for the specified UIControlState.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setSearchFieldBackgroundImage:forState:")]
		[Appearance]
		void SetSearchFieldBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state);

		/// <param name="state">To be added.</param>
		/// <summary>The image used as abackground of the search field for the specified state.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("searchFieldBackgroundImageForState:")]
		[Appearance]
		UIImage GetSearchFieldBackgroundImage (UIControlState state);

		/// <param name="iconImage">To be added.</param>
		/// <param name="icon">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <summary>Sets the image to be used for the specified UISearchBarIcon type and UIControlState.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setImage:forSearchBarIcon:state:")]
		[Appearance]
		void SetImageforSearchBarIcon ([NullAllowed] UIImage iconImage, UISearchBarIcon icon, UIControlState state);

		/// <param name="icon">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <summary>The image for the specified search bar icon type and control state.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("imageForSearchBarIcon:state:")]
		[Appearance]
		UIImage GetImageForSearchBarIcon (UISearchBarIcon icon, UIControlState state);

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <summary>Sets the image to be used as the scope bar's background for the specified UIControlState.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setScopeBarButtonBackgroundImage:forState:")]
		[Appearance]
		void SetScopeBarButtonBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state);

		/// <param name="state">To be added.</param>
		/// <summary>The background image for the scope bar button for the specified state.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("scopeBarButtonBackgroundImageForState:")]
		[Appearance]
		UIImage GetScopeBarButtonBackgroundImage (UIControlState state);

		/// <param name="dividerImage">To be added.</param>
		/// <param name="leftState">To be added.</param>
		/// <param name="rightState">To be added.</param>
		/// <summary>Sets the image to be used as a divider for the specified combination of left and right states.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:")]
		[Appearance]
		void SetScopeBarButtonDividerImage ([NullAllowed] UIImage dividerImage, UIControlState leftState, UIControlState rightState);

		/// <param name="leftState">To be added.</param>
		/// <param name="rightState">To be added.</param>
		/// <summary>The divider image used for the specified combination of left and righ t segment states.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:")]
		[Appearance]
		UIImage GetScopeBarButtonDividerImage (UIControlState leftState, UIControlState rightState);

		[Export ("setScopeBarButtonTitleTextAttributes:forState:"), Internal]
		[Appearance]
		void _SetScopeBarButtonTitle (NSDictionary attributes, UIControlState state);

		[Export ("scopeBarButtonTitleTextAttributesForState:"), Internal]
		[Appearance]
		[return: NullAllowed]
		NSDictionary _GetScopeBarButtonTitleTextAttributes (UIControlState state);

		[Appearance]
		[Export ("setPositionAdjustment:forSearchBarIcon:")]
		void SetPositionAdjustmentforSearchBarIcon (UIOffset adjustment, UISearchBarIcon icon);

		[Appearance]
		[Export ("positionAdjustmentForSearchBarIcon:")]
		UIOffset GetPositionAdjustmentForSearchBarIcon (UISearchBarIcon icon);

		[Export ("inputAccessoryView", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView InputAccessoryView { get; set; }

		[TV (16, 4), iOS (16, 4), MacCatalyst (16, 4)]
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="barPosition">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Sets the background image for the specified UIBarPosition and UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("setBackgroundImage:forBarPosition:barMetrics:")]
		void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIBarPosition barPosition, UIBarMetrics barMetrics);

		/// <param name="barPosition">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>The UIImage used for the search bar's background, given the specified UIBarPosition and UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundImageForBarPosition:barMetrics:")]
		[Appearance]
		UIImage BackgroundImageForBarPosition (UIBarPosition barPosition, UIBarMetrics barMetrics);

		/// <summary>The tint of the search bar background.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("barTintColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor BarTintColor { get; set; }

		[Export ("searchBarStyle")]
		UISearchBarStyle SearchBarStyle { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("inputAssistantItem", ArgumentSemantic.Strong)]
		UITextInputAssistantItem InputAssistantItem { get; }

		// UISearchBar (UITokenSearch)

		[NoTV]
		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("searchTextField")]
		UISearchTextField SearchTextField { get; }

		[NoTV, NoMac, iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("lookToDictateEnabled")]
		new bool LookToDictateEnabled { [Bind ("isLookToDictateEnabled")] get; set; }
	}

	interface IUISearchBarDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UISearchBarDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UISearchBarDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UISearchBarDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UISearchBarDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIBarPositioningDelegate))]
	[Model]
	[Protocol]
	interface UISearchBarDelegate {
		/// <param name="searchBar">To be added.</param>
		/// <summary>Whether editing of the search text should be allowed.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("searchBarShouldBeginEditing:"), DefaultValue (true), DelegateName ("UISearchBarPredicate")]
		bool ShouldBeginEditing (UISearchBar searchBar);

		/// <param name="searchBar">To be added.</param>
		/// <summary>Indicates that the user has begun editing the search text.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchBarTextDidBeginEditing:"), EventArgs ("UISearchBar", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void OnEditingStarted (UISearchBar searchBar);

		/// <param name="searchBar">To be added.</param>
		/// <summary>Whether the editing of the search text should end.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("searchBarShouldEndEditing:"), DelegateName ("UISearchBarPredicate"), DefaultValue (true)]
		bool ShouldEndEditing (UISearchBar searchBar);

		/// <param name="searchBar">To be added.</param>
		/// <summary>Indicates that the user has stopped editing the text field.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchBarTextDidEndEditing:"), EventArgs ("UISearchBar", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void OnEditingStopped (UISearchBar searchBar);

		/// <param name="searchBar">To be added.</param>
		/// <param name="searchText">To be added.</param>
		/// <summary>Indicates that the search text has changed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchBar:textDidChange:"), EventArgs ("UISearchBarTextChanged", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void TextChanged (UISearchBar searchBar, string searchText);

		/// <param name="searchBar">To be added.</param>
		/// <param name="range">To be added.</param>
		/// <param name="text">To be added.</param>
		/// <summary>Whether the text in the specified range should be replaced with the specified text.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("searchBar:shouldChangeTextInRange:replacementText:"), DefaultValue (true), DelegateName ("UISearchBarRangeEventArgs")]
		bool ShouldChangeTextInRange (UISearchBar searchBar, NSRange range, string text);

		/// <param name="searchBar">To be added.</param>
		/// <summary>Indicates that the search button was tapped.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchBarSearchButtonClicked:"), EventArgs ("UISearchBar", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void SearchButtonClicked (UISearchBar searchBar);

		/// <param name="searchBar">To be added.</param>
		/// <summary>Indicates that the bookmark button was tapped.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("searchBarBookmarkButtonClicked:"), EventArgs ("UISearchBar", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void BookmarkButtonClicked (UISearchBar searchBar);

		/// <param name="searchBar">To be added.</param>
		/// <summary>Indicates that the cancel button was tapped.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("searchBarCancelButtonClicked:"), EventArgs ("UISearchBar", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void CancelButtonClicked (UISearchBar searchBar);

		/// <param name="searchBar">To be added.</param>
		/// <param name="selectedScope">To be added.</param>
		/// <summary>Indicates that the scope button selection has changed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchBar:selectedScopeButtonIndexDidChange:"), EventArgs ("UISearchBarButtonIndex", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void SelectedScopeButtonIndexChanged (UISearchBar searchBar, nint selectedScope);

		/// <param name="searchBar">To be added.</param>
		/// <summary>Indicates that the list button was tapped.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]

		[Export ("searchBarResultsListButtonClicked:"), EventArgs ("UISearchBar", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void ListButtonClicked (UISearchBar searchBar);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	interface UISearchContainerViewController {
		// inlined
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("searchController", ArgumentSemantic.Strong)]
		UISearchController SearchController { get; }

		[Export ("initWithSearchController:")]
		NativeHandle Constructor (UISearchController searchController);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	[DisableDefaultCtor] // designated
	partial interface UISearchController : UIViewControllerTransitioningDelegate, UIViewControllerAnimatedTransitioning {
		[Export ("init")]
		[Advice ("It's recommended to use the constructor that takes a 'UIViewController searchResultsController' in order to create/initialize an attached 'UISearchBar'.")]
		NativeHandle Constructor ();

		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("initWithSearchResultsController:")]
		[Advice ("You can pass a null 'UIViewController' to display the search results in the same view.")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] UIViewController searchResultsController);

		[NullAllowed] // by default this property is null
		[Export ("searchResultsUpdater", ArgumentSemantic.UnsafeUnretained)]
		NSObject WeakSearchResultsUpdater { get; set; }

		/// <summary>Gets or sets the <see cref="UIKit.UISearchResultsUpdating" /> object that updates the contents of the <see cref="UIKit.UIViewController" />.</summary>
		///         <value>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Wrap ("WeakSearchResultsUpdater")]
		IUISearchResultsUpdating SearchResultsUpdater { get; set; }

		/// <summary>Gets or sets whether to display the search interface by default. The default is <see langword="true" />.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("active", ArgumentSemantic.UnsafeUnretained)]
		bool Active { [Bind ("isActive")] get; set; }

		[Export ("delegate", ArgumentSemantic.UnsafeUnretained), NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUISearchControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUISearchControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUISearchControllerDelegate Delegate { get; set; }

		[Deprecated (PlatformName.iOS, 12, 0, message: "Use 'ObscuresBackgroundDuringPresentation' instead.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ObscuresBackgroundDuringPresentation' instead.")]
		[Export ("dimsBackgroundDuringPresentation", ArgumentSemantic.UnsafeUnretained)]
		bool DimsBackgroundDuringPresentation { get; set; }

		[Export ("hidesNavigationBarDuringPresentation", ArgumentSemantic.UnsafeUnretained)]
		bool HidesNavigationBarDuringPresentation { get; set; }

		[Export ("searchResultsController", ArgumentSemantic.Retain)]
		UIViewController SearchResultsController { get; }

		[Export ("searchBar", ArgumentSemantic.Retain)]
		UISearchBar SearchBar { get; }

		[MacCatalyst (13, 1)]
		[Export ("obscuresBackgroundDuringPresentation")]
		bool ObscuresBackgroundDuringPresentation { get; set; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("automaticallyShowsSearchResultsController")]
		bool AutomaticallyShowsSearchResultsController { get; set; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("showsSearchResultsController")]
		bool ShowsSearchResultsController { get; set; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("automaticallyShowsCancelButton")]
		bool AutomaticallyShowsCancelButton { get; set; }

		[Deprecated (PlatformName.iOS, 16, 0, message: "Use the 'ScopeBarActivation' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 16, 0, message: "Use the 'ScopeBarActivation' property instead.")]
		[Deprecated (PlatformName.TvOS, 16, 0, message: "Use the 'ScopeBarActivation' property instead.")]
		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("automaticallyShowsScopeBar")]
		bool AutomaticallyShowsScopeBar { get; set; }

		[TV (14, 0), iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[NullAllowed, Export ("searchSuggestions", ArgumentSemantic.Copy)]
		IUISearchSuggestion [] SearchSuggestions { get; set; }

		[Deprecated (PlatformName.TvOS, 16, 0, message: "Use UIViewController.SetContentScrollView on the SearchResultsController instead.")]
		[TV (14, 0), NoiOS]
		[NoMacCatalyst]
		[NullAllowed, Export ("searchControllerObservedScrollView", ArgumentSemantic.Strong)]
		UIScrollView SearchControllerObservedScrollView { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("scopeBarActivation", ArgumentSemantic.Assign)]
		UISearchControllerScopeBarActivation ScopeBarActivation { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("ignoresSearchSuggestionsForSearchBarPlacementStacked")]
		bool IgnoresSearchSuggestionsForSearchBarPlacementStacked { get; set; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("searchBarPlacement")]
		UINavigationItemSearchBarPlacement SearchBarPlacement { get; }

	}

	interface IUISearchControllerDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UISearchControllerDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UISearchControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UISearchControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UISearchControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	partial interface UISearchControllerDelegate {
		/// <param name="searchController">To be added.</param>
		/// <summary>The <paramref name="searchController" /> is about to be presented.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("willPresentSearchController:")]
		void WillPresentSearchController (UISearchController searchController);

		/// <param name="searchController">To be added.</param>
		/// <summary>The <paramref name="searchController" /> was presented.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("didPresentSearchController:")]
		void DidPresentSearchController (UISearchController searchController);

		/// <param name="searchController">To be added.</param>
		/// <summary>The <paramref name="searchController" /> is about to be dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("willDismissSearchController:")]
		void WillDismissSearchController (UISearchController searchController);

		/// <param name="searchController">To be added.</param>
		/// <summary>The <paramref name="searchController" /> was dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("didDismissSearchController:")]
		void DidDismissSearchController (UISearchController searchController);

		/// <param name="searchController">To be added.</param>
		/// <summary>Presents the <paramref name="searchController" /> to the user.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("presentSearchController:")]
		void PresentSearchController (UISearchController searchController);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("searchController:willChangeToSearchBarPlacement:")]
		void WillChangeToSearchBarPlacement (UISearchController searchController, UINavigationItemSearchBarPlacement newPlacement);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("searchController:didChangeFromSearchBarPlacement:")]
		void DidChangeFromSearchBarPlacement (UISearchController searchController, UINavigationItemSearchBarPlacement previousPlacement);
	}

	/// <summary>A controller that manages a search bar and an associated results table view.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchDisplayController_Class/index.html">Apple documentation for <c>UISearchDisplayController</c></related>
	[BaseType (typeof (NSObject))]
	[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'UISearchController'.")]
	[MacCatalyst (13, 1)] // Objective-C exception thrown.  Name: NSGenericException Reason: UISearchDisplayController is no longer supported when linking against this version of iOS. Please migrate your application to UISearchController.
	[NoTV]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UISearchController'.")]
	interface UISearchDisplayController {
		[Export ("initWithSearchBar:contentsController:")]
		[PostGet ("SearchBar")]
		[PostGet ("SearchContentsController")]
		NativeHandle Constructor (UISearchBar searchBar, UIViewController viewController);

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUISearchDisplayDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUISearchDisplayDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUISearchDisplayDelegate Delegate { get; set; }

		/// <summary>Whether the search interface is visible.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("active")]
		bool Active { [Bind ("isActive")] get; set; }

		[Export ("setActive:animated:")]
		void SetActive (bool visible, bool animated);

		[Export ("searchBar")]
		UISearchBar SearchBar { get; }

		[Export ("searchContentsController")]
		UIViewController SearchContentsController { get; }

		[Export ("searchResultsTableView")]
		UITableView SearchResultsTableView { get; }

		[Export ("searchResultsDataSource", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject SearchResultsWeakDataSource { get; set; }

		/// <summary>The UITableViewDataSource holding the search results.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Wrap ("SearchResultsWeakDataSource")]
		IUITableViewDataSource SearchResultsDataSource { get; set; }

		[Export ("searchResultsDelegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject SearchResultsWeakDelegate { get; set; }

		/// <summary>The delegate object for events relating to the search results table view.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Wrap ("SearchResultsWeakDelegate")]
		IUITableViewDelegate SearchResultsDelegate { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("searchResultsTitle", ArgumentSemantic.Copy)]
		string SearchResultsTitle { get; set; }

		[Export ("displaysSearchBarInNavigationBar", ArgumentSemantic.Assign)]
		bool DisplaysSearchBarInNavigationBar { get; set; }

		[Export ("navigationItem")]
		UINavigationItem NavigationItem { get; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UISearchDisplayDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UISearchDisplayDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UISearchDisplayDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UISearchDisplayDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUISearchDisplayDelegate { }

	/// <summary>A class used to receive notifications from the UISearchDisplayController.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchDisplayDelegate_Protocol/index.html">Apple documentation for <c>UISearchDisplayDelegate</c></related>
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	[NoTV]
	[MacCatalyst (13, 1)]
	interface UISearchDisplayDelegate {

		/// <param name="controller">To be added.</param>
		/// <summary>Indicates that searching is about to start.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayControllerWillBeginSearch:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void WillBeginSearch (UISearchDisplayController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>Developers should not use this deprecated method. </summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayControllerDidBeginSearch:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void DidBeginSearch (UISearchDisplayController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>Indicates that search is about to finish.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayControllerWillEndSearch:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void WillEndSearch (UISearchDisplayController controller);

		/// <param name="controller">To be added.</param>
		/// <summary>Indicates that searching has ended.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayControllerDidEndSearch:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void DidEndSearch (UISearchDisplayController controller);

		/// <param name="controller">To be added.</param>
		/// <param name="tableView">To be added.</param>
		/// <summary>Indicates that the controller has loaded its UITableView of results.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayController:didLoadSearchResultsTableView:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void DidLoadSearchResults (UISearchDisplayController controller, UITableView tableView);

		/// <param name="controller">To be added.</param>
		/// <param name="tableView">To be added.</param>
		/// <summary>Indicates that the controller is about to unload its UITableView of results.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayController:willUnloadSearchResultsTableView:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void WillUnloadSearchResults (UISearchDisplayController controller, UITableView tableView);

		/// <param name="controller">To be added.</param>
		/// <param name="tableView">To be added.</param>
		/// <summary>Indicates that the controller is about to show its UITableView of results.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayController:willShowSearchResultsTableView:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void WillShowSearchResults (UISearchDisplayController controller, UITableView tableView);

		/// <param name="controller">To be added.</param>
		/// <param name="tableView">To be added.</param>
		/// <summary>Indicates that the controller has begun displayed its UITableView of results.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayController:didShowSearchResultsTableView:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void DidShowSearchResults (UISearchDisplayController controller, UITableView tableView);

		/// <param name="controller">To be added.</param>
		/// <param name="tableView">To be added.</param>
		/// <summary>Indicates that the controller is about to hide its UITableView of results.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayController:willHideSearchResultsTableView:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void WillHideSearchResults (UISearchDisplayController controller, UITableView tableView);

		/// <param name="controller">To be added.</param>
		/// <param name="tableView">To be added.</param>
		/// <summary>Indicates that the controller hid its table view of results.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayController:didHideSearchResultsTableView:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void DidHideSearchResults (UISearchDisplayController controller, UITableView tableView);

		/// <param name="controller">To be added.</param>
		/// <param name="forSearchString">To be added.</param>
		/// <summary>Whether data should be reloaded, given the change in search string.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayController:shouldReloadTableForSearchString:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		bool ShouldReloadForSearchString (UISearchDisplayController controller, string forSearchString);

		/// <param name="controller">To be added.</param>
		/// <param name="forSearchOption">To be added.</param>
		/// <summary>Whether the results table view should be reloaded for a given scope.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("searchDisplayController:shouldReloadTableForSearchScope:")]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		bool ShouldReloadForSearchScope (UISearchDisplayController controller, nint forSearchOption);
	}

	interface IUISearchResultsUpdating { }

	/// <summary>Protocol for updating the search results based on the contents of the search bar.</summary>
	/// <remarks>To be added.</remarks>
	/// <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchResultsUpdating_ClassRef/index.html">Apple documentation for <c>UISearchResultsUpdating</c></related>
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	partial interface UISearchResultsUpdating {
		/// <param name="searchController">To be added.</param>
		/// <summary>Updates the results when the user makes changes or when the search bar becomes the first responder.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("updateSearchResultsForSearchController:")]
		void UpdateSearchResultsForSearchController (UISearchController searchController);

		[TV (14, 0), iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("updateSearchResultsForSearchController:selectingSearchSuggestion:")]
		void UpdateSearchResults (UISearchController searchController, IUISearchSuggestion searchSuggestion);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIControl))]
	interface UISegmentedControl
#if IOS
		: UISpringLoadedInteractionSupporting
#endif
	{
		[DesignatedInitializer]
		[Export ("initWithItems:")]
		NativeHandle Constructor (NSArray items);

		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithFrame:actions:")]
		NativeHandle Constructor (CGRect frame, UIAction [] actions);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("insertSegmentWithAction:atIndex:animated:")]
		void InsertSegment (UIAction action, nuint segment, bool animated);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("setAction:forSegmentAtIndex:")]
		void SetAction (UIAction action, nuint segment);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("actionForSegmentAtIndex:")]
		[return: NullAllowed]
		UIAction GetAction (nuint segment);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("segmentIndexForActionIdentifier:")]
		nint GetSegmentIndex (string actionIdentifier);

		[Export ("segmentedControlStyle")]
		[NoTV]
		[Deprecated (PlatformName.iOS, 7, 0, message: "The 'SegmentedControlStyle' property no longer has any effect.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "The 'SegmentedControlStyle' property no longer has any effect.")]
		UISegmentedControlStyle ControlStyle { get; set; }

		/// <summary>Determines if segments show the selected state.</summary>
		///         <value>
		///         </value>
		///         <remarks>Default is false, which means the segments will show their selected state.</remarks>
		[Export ("momentary")]
		bool Momentary { [Bind ("isMomentary")] get; set; }

		[Export ("numberOfSegments")]
		nint NumberOfSegments { get; }

		/// <param name="title">To be added.</param>
		/// <param name="pos">To be added.</param>
		/// <param name="animated">To be added.</param>
		/// <summary>Inserts a segment named <paramref name="title" /> at <paramref name="pos" />, optionally animating the insert.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("insertSegmentWithTitle:atIndex:animated:")]
		void InsertSegment (string title, nint pos, bool animated);

		/// <param name="image">To be added.</param>
		/// <param name="pos">To be added.</param>
		/// <param name="animated">To be added.</param>
		/// <summary>Inserts a segment with <paramref name="image" /> as its content at <paramref name="pos" />, optionally animating the insert.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("insertSegmentWithImage:atIndex:animated:")]
		void InsertSegment (UIImage image, nint pos, bool animated);

		/// <param name="segment">To be added.</param>
		/// <param name="animated">To be added.</param>
		/// <summary>Removes the segment at the index <paramref name="segment" />.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("removeSegmentAtIndex:animated:")]
		void RemoveSegmentAtIndex (nint segment, bool animated);

		[Export ("removeAllSegments")]
		void RemoveAllSegments ();

		/// <param name="title">The title to set.</param>
		/// <param name="segment">The segment index.</param>
		/// <summary>Set a title for a particular segment.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setTitle:forSegmentAtIndex:")]
		void SetTitle (string title, nint segment);

		/// <param name="segment">The segment index to return the title for.</param>
		/// <summary>Allows the title for a particular segment to be retrieved.</summary>
		/// <returns>The title for a given segment</returns>
		/// <remarks>Retuns null if a title has not been set.</remarks>
		[Export ("titleForSegmentAtIndex:")]
		[return: NullAllowed]
		string TitleAt (nint segment);

		/// <param name="image">The image to set.</param>
		/// <param name="segment">The segment index.</param>
		/// <summary>Set an image for a particular segment.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setImage:forSegmentAtIndex:")]
		void SetImage (UIImage image, nint segment);

		/// <param name="segment">The segment to return the image for.</param>
		/// <summary>Retrieves the image used in a particular segment</summary>
		/// <returns>The image for the specified segment.</returns>
		/// <remarks>The segment indices start at 0. If a segment index is specified beyond the upper range of segments in the control, the image of the segment at the upper range will be returned.</remarks>
		[Export ("imageForSegmentAtIndex:")]
		UIImage ImageAt (nint segment);

		/// <param name="width">The segment width to set..</param>
		/// <param name="segment">The segment index..</param>
		/// <summary>Sets the width for a particular segment.</summary>
		/// <remarks>The default value of 0.0 will cause the segment to be automatically sized.</remarks>
		[Export ("setWidth:forSegmentAtIndex:")]
		void SetWidth (nfloat width, nint segment);

		/// <param name="segment">The index of the segment.</param>
		/// <summary>Returns the with of a particular segment.</summary>
		/// <returns>The segment width.</returns>
		/// <remarks>If the value is 0.0, the segmented control will automatically sizes the segment.</remarks>
		[Export ("widthForSegmentAtIndex:")]
		nfloat SegmentWidth (nint segment);

		/// <param name="offset">The content offset.</param>
		/// <param name="segment">The segment index.</param>
		/// <summary>Sets the content offset for a specified segment.</summary>
		/// <remarks>The content offset is used when drawing both text and images in the segment.</remarks>
		[Export ("setContentOffset:forSegmentAtIndex:")]
		void SetContentOffset (CGSize offset, nint segment);

		/// <param name="segment">The index of the segment to retrieve the content offset for.</param>
		/// <summary>The offset used for drawing content in a specified segment.</summary>
		/// <returns>The content offset.</returns>
		/// <remarks>The content offset is used for both text and image drawing within a segment.</remarks>
		[Export ("contentOffsetForSegmentAtIndex:")]
		CGSize GetContentOffset (nint segment);

		/// <param name="enabled">Boolean indicating if a segment is should be enabled.</param>
		/// <param name="segment">The index of the segment.</param>
		/// <summary>Enables or disables a given segment.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setEnabled:forSegmentAtIndex:")]
		void SetEnabled (bool enabled, nint segment);

		/// <param name="segment">The index of the segment.</param>
		/// <summary>Returns if a particular segment is enabled.</summary>
		/// <returns>Returns true if the segment is enabled.</returns>
		/// <remarks>Segments are enabled by default.</remarks>
		[Export ("isEnabledForSegmentAtIndex:")]
		bool IsEnabled (nint segment);

		[Export ("selectedSegmentIndex")]
		nint SelectedSegment { get; set; }

		[Appearance]
		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("selectedSegmentTintColor", ArgumentSemantic.Strong)]
		UIColor SelectedSegmentTintColor { get; set; }

		[Export ("apportionsSegmentWidthsByContent")]
		bool ApportionsSegmentWidthsByContent { get; set; }

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Sets the background image used for the specified UIControlState and UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setBackgroundImage:forState:barMetrics:")]
		[Appearance]
		void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIControlState state, UIBarMetrics barMetrics);

		/// <param name="state">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>The background image used for the specified UIControlState and UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundImageForState:barMetrics:")]
		[Appearance]
		UIImage GetBackgroundImage (UIControlState state, UIBarMetrics barMetrics);

		/// <param name="dividerImage">To be added.</param>
		/// <param name="leftSegmentState">To be added.</param>
		/// <param name="rightSegmentState">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Sets the divider image used for the specified UIControlStates and UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:")]
		[Appearance]
		void SetDividerImage ([NullAllowed] UIImage dividerImage, UIControlState leftSegmentState, UIControlState rightSegmentState, UIBarMetrics barMetrics);

		/// <param name="leftState">To be added.</param>
		/// <param name="rightState">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>The divider image for the specified UIControlStates and UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dividerImageForLeftSegmentState:rightSegmentState:barMetrics:")]
		[Appearance]
		[return: NullAllowed]
		UIImage GetDividerImage (UIControlState leftState, UIControlState rightState, UIBarMetrics barMetrics);

		/// <param name="attributes">rendering attributes for the text.</param>
		/// <param name="state">The state to alter</param>
		/// <summary>Sets the rendering text attributes for a specific state in the control.</summary>
		/// <remarks>
		///           <para id="tool-remark">This member participates in the <see cref="UIKit.UIAppearance" /> styling system.  See the <see cref="UIKit.UISegmentedControl.Appearance" /> property and the <see cref="UIKit.UISegmentedControl.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
		///         </remarks>
		[Appearance]
		[Wrap ("SetTitleTextAttributes (attributes?.GetDictionary (), state)")]
		void SetTitleTextAttributes ([NullAllowed] UIStringAttributes attributes, UIControlState state);

		[Export ("setTitleTextAttributes:forState:")]
		[Appearance]
		void SetTitleTextAttributes ([NullAllowed] NSDictionary attributes, UIControlState state);

		/// <param name="state">The state that you want to retrieve the rendering text attributes from.</param>
		///         <summary>Returns the current rendering text attributes for the requested state.</summary>
		///         <returns>
		///         </returns>
		///         <remarks>
		///           <para id="tool-remark">This member participates in the <see cref="UIKit.UIAppearance" /> styling system.  See the <see cref="UIKit.UISegmentedControl.Appearance" /> property and the <see cref="UIKit.UISegmentedControl.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
		///         </remarks>
		[Appearance]
		[Wrap ("new UIStringAttributes (GetWeakTitleTextAttributes (state))")]
		UIStringAttributes GetTitleTextAttributes (UIControlState state);

		[Appearance]
		[Export ("titleTextAttributesForState:")]
		[return: NullAllowed]
		NSDictionary GetWeakTitleTextAttributes (UIControlState state);

		/// <param name="adjustment">To be added.</param>
		/// <param name="leftCenterRightOrAlone">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Sets the position adjustment for the specified UISegmentedControlSegment and UIBarMetrics.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setContentPositionAdjustment:forSegmentType:barMetrics:")]
		[Appearance]
		void SetContentPositionAdjustment (UIOffset adjustment, UISegmentedControlSegment leftCenterRightOrAlone, UIBarMetrics barMetrics);

		/// <param name="leftCenterRightOrAlone">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>The positioning offset for the specified UISegmentedControlSegment and UIBarMetrics.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("contentPositionAdjustmentForSegmentType:barMetrics:")]
		[Appearance]
		UIOffset ContentPositionAdjustment (UISegmentedControlSegment leftCenterRightOrAlone, UIBarMetrics barMetrics);
	}

	/// <summary>A <see cref="UIKit.UIControl" /> that displays a slider.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISlider_Class/index.html">Apple documentation for <c>UISlider</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIControl))]
	interface UISlider {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("value")]
		float Value { get; set; } // This is float, not nfloat

		[Export ("minimumValue")]
		float MinValue { get; set; } // This is float, not nfloat

		[Export ("maximumValue")]
		float MaxValue { get; set; } // This is float, not nfloat

		/// <summary>The image used for the minimum value.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("minimumValueImage", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIImage MinValueImage { get; set; }

		/// <summary>The image to be used for the maximum value.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("maximumValueImage", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIImage MaxValueImage { get; set; }

		/// <summary>If set to <see langword="true" /> then update events are continuously sent as the slider is updated. If set to <see langword="false" />, then an update event is only sent when the slider is finally updated</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Export ("continuous")]
		bool Continuous { [Bind ("isContinuous")] get; set; }

		[Export ("currentThumbImage")]
		UIImage CurrentThumbImage { get; }

		[Export ("currentMinimumTrackImage")]
		UIImage CurrentMinTrackImage { get; }

		[Export ("currentMaximumTrackImage")]
		UIImage CurrentMaxTrackImage { get; }

		[Export ("setValue:animated:")]
		void SetValue (float value /* This is float, not nfloat */, bool animated);

		/// <param name="image">To be added.</param>
		/// <param name="forState">To be added.</param>
		/// <summary>Sets the "thumb image" for the given UIControlState.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setThumbImage:forState:")]
		[PostGet ("CurrentThumbImage")]
		[Appearance]
		void SetThumbImage ([NullAllowed] UIImage image, UIControlState forState);

		/// <param name="image">To be added.</param>
		/// <param name="forState">To be added.</param>
		/// <summary>Sets the image used for the minimum track image.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setMinimumTrackImage:forState:")]
		[PostGet ("CurrentMinTrackImage")]
		[Appearance]
		void SetMinTrackImage ([NullAllowed] UIImage image, UIControlState forState);

		/// <param name="image">To be added.</param>
		/// <param name="forState">To be added.</param>
		/// <summary>Sets the image used for the maximum track image.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setMaximumTrackImage:forState:")]
		[PostGet ("CurrentMaxTrackImage")]
		[Appearance]
		void SetMaxTrackImage ([NullAllowed] UIImage image, UIControlState forState);

		/// <param name="forState">To be added.</param>
		/// <summary>The image used to mark the current location.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("thumbImageForState:")]
		[Appearance]
		UIImage ThumbImage (UIControlState forState);

		/// <param name="forState">To be added.</param>
		/// <summary>The image for the minimum track for the given UIControlState.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("minimumTrackImageForState:")]
		[Appearance]
		UIImage MinTrackImage (UIControlState forState);

		/// <param name="forState">To be added.</param>
		/// <summary>The image to be used for the maximum track for the given UIControlState.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("maximumTrackImageForState:")]
		[Appearance]
		UIImage MaxTrackImage (UIControlState forState);

		[Export ("minimumValueImageRectForBounds:")]
		CGRect MinValueImageRectForBounds (CGRect forBounds);

		[Export ("maximumValueImageRectForBounds:")]
		CGRect MaxValueImageRectForBounds (CGRect forBounds);

		[Export ("trackRectForBounds:")]
		CGRect TrackRectForBounds (CGRect forBounds);

		[Export ("thumbRectForBounds:trackRect:value:")]
		CGRect ThumbRectForBounds (CGRect bounds, CGRect trackRect, float value /* This is float, not nfloat */);

		/// <summary>The color to apply as a tint to the standard minimum track images.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("minimumTrackTintColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor MinimumTrackTintColor { get; set; }

		/// <summary>The color to apply as a tint to the standard maximum track images.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("maximumTrackTintColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor MaximumTrackTintColor { get; set; }

		/// <summary>The color used to tint standard thumb images.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("thumbTintColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor ThumbTintColor { get; set; }

		// From UISlider (UIBehavioralStyle)

		[NoTV, MacCatalyst (15, 0), iOS (15, 0)]
		[Export ("behavioralStyle")]
		UIBehavioralStyle BehavioralStyle { get; }

		[NoTV, MacCatalyst (15, 0), iOS (15, 0)]
		[Export ("preferredBehavioralStyle", ArgumentSemantic.Assign)]
		UIBehavioralStyle PreferredBehavioralStyle { get; set; }
	}

	/// <summary>Represents the key to be used in the <see cref="Foundation.NSMutableDictionary" /> that define the attributes of a <see cref="Foundation.NSAttributedString" />.</summary>
	/// <remarks>To be added.</remarks>
	[Static]
	interface UIStringAttributeKey {
		/// <summary>Represents the value associated with the constant NSFontAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSFontAttributeName")]
		NSString Font { get; }

		/// <summary>Represents the value associated with the constant NSForegroundColorAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSForegroundColorAttributeName")]
		NSString ForegroundColor { get; }

		/// <summary>Represents the value associated with the constant NSBackgroundColorAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSBackgroundColorAttributeName")]
		NSString BackgroundColor { get; }

		/// <summary>Represents the value associated with the constant NSStrokeColorAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSStrokeColorAttributeName")]
		NSString StrokeColor { get; }

		/// <summary>Represents the value associated with the constant NSStrikethroughStyleAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSStrikethroughStyleAttributeName")]
		NSString StrikethroughStyle { get; }

		/// <summary>Represents the value associated with the constant NSShadowAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSShadowAttributeName")]
		NSString Shadow { get; }

		/// <summary>Represents the value associated with the constant NSParagraphStyleAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSParagraphStyleAttributeName")]
		NSString ParagraphStyle { get; }

		/// <summary>Represents the value associated with the constant NSLigatureAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSLigatureAttributeName")]
		NSString Ligature { get; }

		/// <summary>Represents the value associated with the constant NSKernAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSKernAttributeName")]
		NSString KerningAdjustment { get; }

		/// <summary>Represents the value associated with the constant NSUnderlineStyleAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSUnderlineStyleAttributeName")]
		NSString UnderlineStyle { get; }

		/// <summary>Represents the value associated with the constant NSStrokeWidthAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSStrokeWidthAttributeName")]
		NSString StrokeWidth { get; }

		/// <summary>Represents the value associated with the constant NSVerticalGlyphFormAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSVerticalGlyphFormAttributeName")]
		NSString VerticalGlyphForm { get; }

		/// <summary>Represents the value associated with the constant NSTextEffectAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSTextEffectAttributeName")]
		NSString TextEffect { get; }

		/// <summary>Represents the value associated with the constant NSAttachmentAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSAttachmentAttributeName")]
		NSString Attachment { get; }

		/// <summary>Represents the value associated with the constant NSLinkAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSLinkAttributeName")]
		NSString Link { get; }

		/// <summary>Represents the value associated with the constant NSBaselineOffsetAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSBaselineOffsetAttributeName")]
		NSString BaselineOffset { get; }

		/// <summary>Represents the value associated with the constant NSUnderlineColorAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSUnderlineColorAttributeName")]
		NSString UnderlineColor { get; }

		/// <summary>Represents the value associated with the constant NSStrikethroughColorAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSStrikethroughColorAttributeName")]
		NSString StrikethroughColor { get; }

		/// <summary>Represents the value associated with the constant NSObliquenessAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSObliquenessAttributeName")]
		NSString Obliqueness { get; }

		/// <summary>Represents the value associated with the constant NSExpansionAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSExpansionAttributeName")]
		NSString Expansion { get; }

		/// <summary>Represents the value associated with the constant NSWritingDirectionAttributeName</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("NSWritingDirectionAttributeName")]
		NSString WritingDirection { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Field ("NSTrackingAttributeName")]
		NSString Tracking { get; }

		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[Field ("UITextItemTagAttributeName")]
		NSString Name { get; }

		//
		// These are internal, if we choose to expose these, we should
		// put them on a better named class
		//
		[Internal, Field ("NSTextEffectLetterpressStyle")]
		NSString NSTextEffectLetterpressStyle { get; }

		// we do not seem to expose other options like NSDefaultAttributesDocumentOption so keeping these as is for now
		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Internal, Field ("NSTargetTextScalingDocumentOption")]
		NSString TargetTextScalingDocumentOption { get; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Internal, Field ("NSSourceTextScalingDocumentOption")]
		NSString SourceTextScalingDocumentOption { get; }

		[TV (18, 0), Mac (15, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Field ("NSTextHighlightStyleAttributeName")]
		NSString TextHighlightStyle { get; }

		[TV (18, 0), Mac (15, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Field ("NSTextHighlightColorSchemeAttributeName")]
		NSString TextHighlightColorScheme { get; }

		[TV (18, 0), Mac (15, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Field ("NSAdaptiveImageGlyphAttributeName")]
		NSString AdaptiveImageGlyph { get; }

		[NoTV, Mac (15, 2), iOS (18, 2), MacCatalyst (18, 2)]
		[Field ("NSWritingToolsExclusionAttributeName")]
		NSString WritingToolsExclusion { get; }

	}

	/// <summary>A <see cref="UIKit.UIControl" /> that displays an on/off switch.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISwitch_Class/index.html">Apple documentation for <c>UISwitch</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIControl))]
	interface UISwitch : NSCoding {
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		/// <summary>This property returns if the state of the switch is on or off.</summary>
		///         <value>
		///         </value>
		///         <remarks>Setting the property changes the state of the switch without an animation.</remarks>
		[Export ("on")]
		bool On { [Bind ("isOn")] get; set; }

		[Export ("setOn:animated:")]
		void SetState (bool newState, bool animated);


		/// <summary>The tint applied to the background for the on state.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("onTintColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor OnTintColor { get; set; }

		/// <summary>The tint color applied to the thumb.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed]
		[Export ("thumbTintColor", ArgumentSemantic.Retain)]
		UIColor ThumbTintColor { get; set; }

		/// <summary>The UIImage used to indicate the on state.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("onImage", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIImage OnImage { get; set; }

		/// <summary>The UIImage used to indicate the off state.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed]
		[Export ("offImage", ArgumentSemantic.Retain)]
		UIImage OffImage { get; set; }

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed]
		[Export ("title")]
		string Title { get; set; }

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("style")]
		UISwitchStyle Style { get; }

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("preferredStyle", ArgumentSemantic.Assign)]
		UISwitchStyle PreferredStyle { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UITabBarDelegate) })]
	interface UITabBar
#if IOS
		: UISpringLoadedInteractionSupporting
#endif
	{
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("delegate", ArgumentSemantic.Weak)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUITabBarDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUITabBarDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUITabBarDelegate Delegate { get; set; }

		[Export ("items", ArgumentSemantic.Copy)]
		[NullAllowed]
		[PostGet ("SelectedItem")]
		UITabBarItem [] Items { get; set; }

		[Export ("selectedItem", ArgumentSemantic.Weak), NullAllowed]
		UITabBarItem SelectedItem { get; set; }

		[Export ("setItems:animated:")]
		[PostGet ("Items")] // that will trigger a (required) PostGet on SelectedItems too
		void SetItems ([NullAllowed] UITabBarItem [] items, bool animated);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("beginCustomizingItems:")]
		void BeginCustomizingItems ([NullAllowed] UITabBarItem [] items);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("endCustomizingAnimated:")]
		bool EndCustomizing (bool animated);

		/// <summary>Whether the user is currently customizing the UITabBar.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("isCustomizing")]
		bool IsCustomizing { get; }

		/// <summary>Developers should not use this deprecated property. </summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Export ("selectedImageTintColor", ArgumentSemantic.Retain)]
		[Deprecated (PlatformName.iOS, 8, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[NullAllowed]
		[Appearance]
		UIColor SelectedImageTintColor { get; set; }

		/// <summary>The image shown in the background of the UITabBar.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundImage", ArgumentSemantic.Retain)]
		[NullAllowed]
		[Appearance]
		UIImage BackgroundImage { get; set; }

		/// <summary>The UIImage drawn at the top of the tab bar, behind the bar item icon.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("selectionIndicatorImage", ArgumentSemantic.Retain)]
		[NullAllowed]
		[Appearance]
		UIImage SelectionIndicatorImage { get; set; }

		/// <summary>The UIImage used to define the shadow of the UITabBar.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("shadowImage", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIImage ShadowImage { get; set; }

		/// <summary>The tint color applied to the background of the UITabBar.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("barTintColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor BarTintColor { get; set; }

		[Appearance]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("itemPositioning")]
		UITabBarItemPositioning ItemPositioning { get; set; }

		[Appearance]
		[Export ("itemWidth")]
		nfloat ItemWidth { get; set; }

		[Appearance]
		[Export ("itemSpacing")]
		nfloat ItemSpacing { get; set; }

		[Appearance]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("barStyle")]
		UIBarStyle BarStyle { get; set; }

		/// <summary>Whether this UITabBar is translucent or not.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("translucent")]
		bool Translucent { [Bind ("isTranslucent")] get; set; }

		[Appearance]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("unselectedItemTintColor", ArgumentSemantic.Copy)]
		UIColor UnselectedItemTintColor { get; set; }

		[Appearance]
		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("standardAppearance", ArgumentSemantic.Copy)]
		UITabBarAppearance StandardAppearance { get; set; }

		[Appearance]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("scrollEdgeAppearance", ArgumentSemantic.Copy)]
		UITabBarAppearance ScrollEdgeAppearance { get; set; }

		[TV (13, 0), NoiOS]
		[NoMacCatalyst]
		[Export ("leadingAccessoryView", ArgumentSemantic.Strong)]
		UIView LeadingAccessoryView { get; }

		[TV (13, 0), NoiOS]
		[NoMacCatalyst]
		[Export ("trailingAccessoryView", ArgumentSemantic.Strong)]
		UIView TrailingAccessoryView { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UITabBarControllerDelegate) })]
	interface UITabBarController : UITabBarDelegate {
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[NullAllowed] // by default this property is null
		[Export ("viewControllers", ArgumentSemantic.Copy)]
#if !TVOS
		[PostGet ("CustomizableViewControllers")]
#endif
		[PostGet ("SelectedViewController")]
		UIViewController [] ViewControllers { get; set; }

		[Export ("setViewControllers:animated:")]
		[PostGet ("ViewControllers")] // indirectly call PostGet on CustomizableViewControllers and SelectedViewController
		void SetViewControllers (UIViewController [] viewControllers, bool animated);

		[NullAllowed] // by default this property is null
		[Export ("selectedViewController", ArgumentSemantic.Assign)]
		UIViewController SelectedViewController { get; set; }

		[Export ("selectedIndex")]
		nint SelectedIndex { get; [PostGet ("SelectedViewController")] set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("moreNavigationController")]
		UINavigationController MoreNavigationController { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("customizableViewControllers", ArgumentSemantic.Copy)]
		[NullAllowed]
		UIViewController [] CustomizableViewControllers { get; set; }

		[Export ("tabBar")]
		UITabBar TabBar { get; }

		/// <summary>An instance of the UIKit.IUITabBarControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUITabBarControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUITabBarControllerDelegate Delegate { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("mode", ArgumentSemantic.Assign)]
		UITabBarControllerMode Mode { get; set; }

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("sidebar", ArgumentSemantic.Strong)]
		UITabBarControllerSidebar Sidebar { get; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("customizationIdentifier", ArgumentSemantic.Copy), NullAllowed]
		string CustomizationIdentifier { get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("compactTabIdentifiers", ArgumentSemantic.Copy), NullAllowed]
		string [] CompactTabIdentifiers { get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("selectedTab", ArgumentSemantic.Strong), NullAllowed]
		UITab SelectedTab { get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabs", ArgumentSemantic.Copy)]
		UITab [] Tabs { get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("setTabs:animated:")]
		void SetTabs (UITab [] tabs, bool animated);

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabForIdentifier:")]
		[return: NullAllowed]
		UITab GetTab (string identifier);

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("initWithTabs:")]
		NativeHandle Constructor (UITab [] tabs);

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarHidden", ArgumentSemantic.Assign)]
		bool TabBarHidden { [Bind ("isTabBarHidden")] get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("setTabBarHidden:animated:")]
		void SetTabBarHidden (bool hidden, bool animated);
	}

	interface IUITabBarDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITabBarDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITabBarDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITabBarDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITabBarDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UITabBarDelegate {
		/// <param name="tabbar">To be added.</param>
		/// <param name="item">To be added.</param>
		/// <summary>Indicates that the specified UITabBarItem was selected.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tabBar:didSelectItem:"), EventArgs ("UITabBarItem", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void ItemSelected (UITabBar tabbar, UITabBarItem item);

		/// <param name="tabbar">To be added.</param>
		/// <param name="items">To be added.</param>
		/// <summary>Indicates that customization is about to begin on the specified UITabBarItems.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tabBar:willBeginCustomizingItems:"), EventArgs ("UITabBarItems", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillBeginCustomizingItems (UITabBar tabbar, UITabBarItem [] items);

		/// <param name="tabbar">To be added.</param>
		/// <param name="items">To be added.</param>
		/// <summary>Indicates that customizing the specified UITabBarItems has begun.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tabBar:didBeginCustomizingItems:"), EventArgs ("UITabBarItems", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidBeginCustomizingItems (UITabBar tabbar, UITabBarItem [] items);

		/// <param name="tabbar">To be added.</param>
		/// <param name="items">To be added.</param>
		/// <param name="changed">To be added.</param>
		/// <summary>Indicates that customization is about to end on the specified UITabBarItems.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tabBar:willEndCustomizingItems:changed:"), EventArgs ("UITabBarFinalItems", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillEndCustomizingItems (UITabBar tabbar, UITabBarItem [] items, bool changed);

		/// <param name="tabbar">To be added.</param>
		/// <param name="items">To be added.</param>
		/// <param name="changed">To be added.</param>
		/// <summary>Indicates that customization of the specified items has ended.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tabBar:didEndCustomizingItems:changed:"), EventArgs ("UITabBarFinalItems", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidEndCustomizingItems (UITabBar tabbar, UITabBarItem [] items, bool changed);
	}

	interface IUITabBarControllerDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITabBarControllerDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITabBarControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITabBarControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITabBarControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UITabBarControllerDelegate {

		/// <param name="tabBarController">To be added.</param>
		/// <param name="viewController">To be added.</param>
		/// <summary>Whether the specified UIViewController should be made active.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("tabBarController:shouldSelectViewController:"), DefaultValue (true), DelegateName ("UITabBarSelection")]
		bool ShouldSelectViewController (UITabBarController tabBarController, UIViewController viewController);

		/// <param name="tabBarController">To be added.</param>
		/// <param name="viewController">To be added.</param>
		/// <summary>Indicates that the app user selected an item from the tab bar.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tabBarController:didSelectViewController:"), EventArgs ("UITabBarSelection", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void ViewControllerSelected (UITabBarController tabBarController, UIViewController viewController);

		/// <param name="tabBarController">To be added.</param>
		/// <param name="viewControllers">To be added.</param>
		/// <summary>Indicates that the tab bar customization sheet is about to be displayed.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tabBarController:willBeginCustomizingViewControllers:"), EventArgs ("UITabBarCustomize", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void OnCustomizingViewControllers (UITabBarController tabBarController, UIViewController [] viewControllers);

		/// <param name="tabBarController">To be added.</param>
		/// <param name="viewControllers">To be added.</param>
		/// <param name="changed">To be added.</param>
		/// <summary>Indicates that the tab bar customization sheet is about to be dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tabBarController:willEndCustomizingViewControllers:changed:"), EventArgs ("UITabBarCustomizeChange", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void OnEndCustomizingViewControllers (UITabBarController tabBarController, UIViewController [] viewControllers, bool changed);

		/// <param name="tabBarController">To be added.</param>
		/// <param name="viewControllers">To be added.</param>
		/// <param name="changed">To be added.</param>
		/// <summary>Indicates that the customization sheet was dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tabBarController:didEndCustomizingViewControllers:changed:"), EventArgs ("UITabBarCustomizeChange", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void FinishedCustomizingViewControllers (UITabBarController tabBarController, UIViewController [] viewControllers, bool changed);

		/// <param name="tabBarController">To be added.</param>
		/// <summary>The supported orientations for presentation of the tab bar controller.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tabBarControllerSupportedInterfaceOrientations:")]
		[NoDefaultValue]
		[DelegateName ("Func<UITabBarController,UIInterfaceOrientationMask>")]
		UIInterfaceOrientationMask SupportedInterfaceOrientations (UITabBarController tabBarController);

		/// <param name="tabBarController">To be added.</param>
		/// <summary>The preferred orientation for presentation of the tab bar controller.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tabBarControllerPreferredInterfaceOrientationForPresentation:")]
		[NoDefaultValue]
		[DelegateName ("Func<UITabBarController,UIInterfaceOrientation>")]
		UIInterfaceOrientation GetPreferredInterfaceOrientation (UITabBarController tabBarController);

		/// <param name="tabBarController">To be added.</param>
		/// <param name="animationController">To be added.</param>
		/// <summary>Retrieves the UIViewControllerInteractiveTransitioning used during an interactive transition.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("tabBarController:interactionControllerForAnimationController:")]
		[NoDefaultValue]
		[DelegateName ("Func<UITabBarController,IUIViewControllerAnimatedTransitioning,IUIViewControllerInteractiveTransitioning>")]
		IUIViewControllerInteractiveTransitioning GetInteractionControllerForAnimationController (UITabBarController tabBarController,
													 IUIViewControllerAnimatedTransitioning animationController);

		/// <param name="tabBarController">To be added.</param>
		/// <param name="fromViewController">To be added.</param>
		/// <param name="toViewController">To be added.</param>
		/// <summary>Retrieves the UIViewControllerAnimatedTransitioning used during a non-interactive transition.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("tabBarController:animationControllerForTransitionFromViewController:toViewController:")]
		[NoDefaultValue]
		[DelegateName ("Func<UITabBarController,UIViewController,UIViewController,IUIViewControllerAnimatedTransitioning>")]
		IUIViewControllerAnimatedTransitioning GetAnimationControllerForTransition (UITabBarController tabBarController,
											   UIViewController fromViewController,
											   UIViewController toViewController);

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarController:shouldSelectTab:"), DefaultValue (false), DelegateName ("UITabBarTabSelection")]
		bool ShouldSelectTab (UITabBarController tabBarController, UITab tab);

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarController:didSelectTab:previousTab:"), EventArgs ("UITabBarTabSelection")]
		void DidSelectTab (UITabBarController tabBarController, UITab tab, [NullAllowed] UITab previousTab);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarController:tab:operationForAcceptingItemsFromDropSession:"), NoDefaultValue, DelegateName ("Func<UITabBarController,UITab,IUIDropSession,UIDropOperation>")]
		UIDropOperation GetOperationForAcceptingItemsFromDropSession (UITabBarController tabBarController, UITab tab, IUIDropSession session);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarController:tab:acceptItemsFromDropSession:"), EventArgs ("UITabBarAcceptItems")]
		void AcceptItemsFromDropSession (UITabBarController tabBarController, UITab tab, IUIDropSession session);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarControllerWillBeginEditing:")]
		void WillBeginEditing (UITabBarController tabBarController);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarControllerDidEndEditing:")]
		void DidBeginEditing (UITabBarController tabBarController);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarController:visibilityDidChangeForTabs:"), EventArgs ("UITabBarTabVisibilityChange")]
		void VisibilityDidChangeForTabs (UITabBarController tabBarController, UITab [] tabs);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarController:displayOrderDidChangeForGroup:"), EventArgs ("UITabBarDisplayOrderChange")]
		void DisplayOrderDidChangeForGroup (UITabBarController tabBarController, UITabGroup group);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tabBarController:displayedViewControllersForTab:proposedViewControllers:"), NoDefaultValue, DelegateName ("UITabBarGetDisplayedViewControllers")]
		UIViewController [] GetDisplayedViewControllers (UITabBarController tabBarController, UITab tab, UIViewController [] proposedViewControllers);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIBarItem))]
	[DesignatedDefaultCtor]
	interface UITabBarItem : NSCoding
#if IOS
		, UISpringLoadedInteractionSupporting, UIPopoverPresentationControllerSourceItem
#endif
	{
		/// <summary>Text displayed in the upper-right corner of the item, surrounded by a red oval.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("enabled")]
		[Override]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Export ("title", ArgumentSemantic.Copy)]
		[Override]
		[NullAllowed]
		string Title { get; set; }

		[Export ("image", ArgumentSemantic.Retain)]
		[Override]
		[NullAllowed]
		UIImage Image { get; set; }

		[Export ("imageInsets")]
		[Override]
		UIEdgeInsets ImageInsets { get; set; }

		[Export ("tag")]
		[Override]
		nint Tag { get; set; }

		/// <param name="title">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <param name="image">
		///           <para>The image to use.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <param name="tag">To be added.</param>
		/// <summary>Creates a <see cref="UIKit.UITabBarItem" /> item that has the <paramref name="title" /> and an <paramref name="image" /> to display, and then returns the new <see cref="UIKit.UITabBarItem" /> item.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("initWithTitle:image:tag:")]
		[PostGet ("Image")]
		NativeHandle Constructor ([NullAllowed] string title, [NullAllowed] UIImage image, nint tag);

		/// <param name="systemItem">To be added.</param>
		/// <param name="tag">To be added.</param>
		/// <summary>Creates a <see cref="UIKit.UITabBarItem" /> item that contains a <see cref="UIKit.UITabBarSystemItem" /> item and has the integer value of <paramref name="tag" />, and then returns the new <see cref="UIKit.UITabBarItem" /> item.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("initWithTabBarSystemItem:tag:")]
		NativeHandle Constructor (UITabBarSystemItem systemItem, nint tag);

		[Export ("badgeValue", ArgumentSemantic.Copy)]
		[NullAllowed]
		string BadgeValue { get; set; }

		[NoTV]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use the '(string, UIImage, UIImage)' constructor or the 'Image' and 'SelectedImage' properties along with 'RenderingMode = UIImageRenderingMode.AlwaysOriginal'.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use the '(string, UIImage, UIImage)' constructor or the 'Image' and 'SelectedImage' properties along with 'RenderingMode = UIImageRenderingMode.AlwaysOriginal'.")]
		[Export ("setFinishedSelectedImage:withFinishedUnselectedImage:")]
		[PostGet ("FinishedSelectedImage")]
		[PostGet ("FinishedUnselectedImage")]
		void SetFinishedImages ([NullAllowed] UIImage selectedImage, [NullAllowed] UIImage unselectedImage);

		[NoTV]
		[Deprecated (PlatformName.iOS, 7, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("finishedSelectedImage")]
		UIImage FinishedSelectedImage { get; }

		[NoTV]
		[Deprecated (PlatformName.iOS, 7, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("finishedUnselectedImage")]
		UIImage FinishedUnselectedImage { get; }

		/// <summary>The offset applied to the title of the UITabBarItem.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("titlePositionAdjustment")]
		[Appearance]
		UIOffset TitlePositionAdjustment { get; set; }

		[Export ("initWithTitle:image:selectedImage:")]
		[PostGet ("Image")]
		[PostGet ("SelectedImage")]
		NativeHandle Constructor ([NullAllowed] string title, [NullAllowed] UIImage image, [NullAllowed] UIImage selectedImage);

		[Export ("selectedImage", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIImage SelectedImage { get; set; }

		[Appearance]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("badgeColor", ArgumentSemantic.Copy)]
		UIColor BadgeColor { get; set; }

		[Appearance]
		[MacCatalyst (13, 1)]
		[Export ("setBadgeTextAttributes:forState:")]
		[Internal]
		void SetBadgeTextAttributes ([NullAllowed] NSDictionary textAttributes, UIControlState state);

		/// <param name="textAttributes">The desired <see cref="UIKit.UIStringAttributes" />.</param>
		///         <param name="state">The <see cref="UIKit.UIControlState" /> to which the <paramref name="textAttributes" /> should apply.</param>
		///         <summary>Configures the badge so that when it is in the given <paramref name="state" />, it has the provided <paramref name="textAttributes" />.</summary>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Wrap ("SetBadgeTextAttributes (textAttributes.GetDictionary (), state)")]
		void SetBadgeTextAttributes (UIStringAttributes textAttributes, UIControlState state);

		[Appearance]
		[MacCatalyst (13, 1)]
		[Export ("badgeTextAttributesForState:")]
		[EditorBrowsable (EditorBrowsableState.Advanced)]
		[return: NullAllowed]
		NSDictionary<NSString, NSObject> GetBadgeTextAttributesDictionary (UIControlState state);

		/// <param name="state">The <see cref="UIKit.UIControlState" /> being queried.</param>
		///         <summary>Gets the <see cref="UIKit.UIStringAttributes" /> that the badge will have for the specified <paramref name="state" />.</summary>
		///         <returns>To be added.</returns>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Wrap ("new UIStringAttributes (GetBadgeTextAttributesDictionary(state))")]
		UIStringAttributes GetBadgeTextAttributes (UIControlState state);

		[Appearance]
		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("standardAppearance", ArgumentSemantic.Copy)]
		UITabBarAppearance StandardAppearance { get; set; }

		[Appearance]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("scrollEdgeAppearance", ArgumentSemantic.Copy)]
		UITabBarAppearance ScrollEdgeAppearance { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIScrollView))]
	interface UITableView : NSCoding, UIDataSourceTranslating
#if IOS
		, UISpringLoadedInteractionSupporting
#endif
	{
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[DesignatedInitializer]
		[Export ("initWithFrame:style:")]
		NativeHandle Constructor (CGRect frame, UITableViewStyle style);

		[Export ("style")]
		UITableViewStyle Style { get; }

		[Export ("dataSource", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDataSource { get; set; }

		/// <summary>The object that acts as the data source for the table view.</summary>
		///         <value>
		///           <para>
		///           </para>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>
		///           <para>The data source must subclass <see cref="UIKit.UITableViewDataSource" />. MonoTouch provides an alternative to implementing both <see cref="UIKit.UITableViewDataSource" /> and <see cref="UIKit.UITableViewDelegate" />: the <see cref="UIKit.UITableViewSource" /> class which should be assigned to <see cref="UIKit.UITableView.Source" />.</para>
		///         </remarks>
		[Wrap ("WeakDataSource")]
		IUITableViewDataSource DataSource { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[New]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUITableViewDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUITableViewDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		[New]
		IUITableViewDelegate Delegate { get; set; }

		[Export ("rowHeight")]
		nfloat RowHeight { get; set; }

		[Export ("sectionHeaderHeight")]
		nfloat SectionHeaderHeight { get; set; }

		[Export ("sectionFooterHeight")]
		nfloat SectionFooterHeight { get; set; }

		[Export ("reloadData")]
		void ReloadData ();

		[Export ("reloadSectionIndexTitles")]
		void ReloadSectionIndexTitles ();

		[Export ("numberOfSections")]
		nint NumberOfSections ();

		/// <param name="section">The index of the section to query. Section indexes start at zero.</param>
		/// <summary>Returns the number of rows (table cells) in a given section.</summary>
		/// <returns>Number of rows in the section.</returns>
		/// <remarks>UITableView retrieves this value from the <see cref="UIKit.UITableViewSource" /> (or <see cref="UIKit.UITableViewDataSource" />) and caches it.</remarks>
		[Export ("numberOfRowsInSection:")]
		nint NumberOfRowsInSection (nint section);

		/// <param name="section">The index of a section.</param>
		/// <summary>Returns the drawing area for the specified section.</summary>
		/// <returns>A rectangle defining where the section is drawn by the table view.</returns>
		/// <remarks>
		///         </remarks>
		[Export ("rectForSection:")]
		CGRect RectForSection (nint section);

		/// <param name="section">The index of a section.</param>
		/// <summary>Returns the drawing area for the specified section's header.</summary>
		/// <returns>A rectangle defining where the section header is drawn by the table view.</returns>
		/// <remarks>
		///         </remarks>
		[Export ("rectForHeaderInSection:")]
		CGRect RectForHeaderInSection (nint section);

		/// <param name="section">The index of a section.</param>
		/// <summary>Returns the drawing area for the specified section's footer.</summary>
		/// <returns>A rectangle defining where the section footer is drawn by the table view.</returns>
		/// <remarks>
		///         </remarks>
		[Export ("rectForFooterInSection:")]
		CGRect RectForFooterInSection (nint section);

		[Export ("rectForRowAtIndexPath:")]
		CGRect RectForRowAtIndexPath (NSIndexPath indexPath);

		[Export ("indexPathForRowAtPoint:")]
		[return: NullAllowed]
		NSIndexPath IndexPathForRowAtPoint (CGPoint point);

		[Export ("indexPathForCell:")]
		[return: NullAllowed]
		NSIndexPath IndexPathForCell (UITableViewCell cell);

		[Export ("indexPathsForRowsInRect:")]
		[Internal]
		IntPtr _IndexPathsForRowsInRect (CGRect rect);

		[Export ("cellForRowAtIndexPath:")]
		[return: NullAllowed]
		UITableViewCell CellAt (NSIndexPath ns);

		[Export ("visibleCells")]
		UITableViewCell [] VisibleCells { get; }

		[Export ("indexPathsForVisibleRows")]
		[NullAllowed]
		NSIndexPath [] IndexPathsForVisibleRows { get; }

		[Export ("scrollToRowAtIndexPath:atScrollPosition:animated:")]
		void ScrollToRow (NSIndexPath indexPath, UITableViewScrollPosition atScrollPosition, bool animated);

		[Export ("scrollToNearestSelectedRowAtScrollPosition:animated:")]
		void ScrollToNearestSelected (UITableViewScrollPosition atScrollPosition, bool animated);

		[Export ("beginUpdates")]
		void BeginUpdates ();

		[Export ("endUpdates")]
		void EndUpdates ();

		[Export ("insertSections:withRowAnimation:")]
		void InsertSections (NSIndexSet sections, UITableViewRowAnimation withRowAnimation);

		[Export ("deleteSections:withRowAnimation:")]
		void DeleteSections (NSIndexSet sections, UITableViewRowAnimation withRowAnimation);

		[Export ("reloadSections:withRowAnimation:")]
		void ReloadSections (NSIndexSet sections, UITableViewRowAnimation withRowAnimation);

		[Export ("insertRowsAtIndexPaths:withRowAnimation:")]
		void InsertRows (NSIndexPath [] atIndexPaths, UITableViewRowAnimation withRowAnimation);

		[Export ("deleteRowsAtIndexPaths:withRowAnimation:")]
		void DeleteRows (NSIndexPath [] atIndexPaths, UITableViewRowAnimation withRowAnimation);

		[Export ("reloadRowsAtIndexPaths:withRowAnimation:")]
		void ReloadRows (NSIndexPath [] atIndexPaths, UITableViewRowAnimation withRowAnimation);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("reconfigureRowsAtIndexPaths:")]
		void ReconfigureRows (NSIndexPath [] indexPaths);

		/// <summary>Whether the table view is in editing mode.</summary>
		///         <value>
		///           <see langword="true" /> if the table is currently in editing mode, <see langword="false" /> if not. The default is <see langword="false" />.</value>
		///         <remarks>When this property is <see langword="true" />, the table view is in editing mode: cells may show an insertion or deletion control on their left side and a reordering control on the right (depending on how the cell is configured). Tapping a control causes the table view to invoke the <see cref="UIKit.UITableViewSource" /> method <see cref="UIKit.UITableViewSource.CommitEditingStyle(UIKit.UITableView,UIKit.UITableViewCellEditingStyle,Foundation.NSIndexPath)" />.</remarks>
		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; set; }

		[Export ("setEditing:animated:")]
		void SetEditing (bool editing, bool animated);

		[Export ("allowsSelection")]
		bool AllowsSelection { get; set; }

		[Export ("allowsSelectionDuringEditing")]
		bool AllowsSelectionDuringEditing { get; set; }

		[NullAllowed]
		[Export ("indexPathForSelectedRow")]
		NSIndexPath IndexPathForSelectedRow { get; }

		[Export ("selectRowAtIndexPath:animated:scrollPosition:")]
		void SelectRow ([NullAllowed] NSIndexPath indexPath, bool animated, UITableViewScrollPosition scrollPosition);

		[Export ("deselectRowAtIndexPath:animated:")]
		void DeselectRow (NSIndexPath indexPath, bool animated);

		[Export ("sectionIndexMinimumDisplayRowCount")]
		nint SectionIndexMinimumDisplayRowCount { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("separatorStyle")]
		UITableViewCellSeparatorStyle SeparatorStyle { get; set; }

		/// <summary>Gets or sets the row separator color.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("separatorColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed] // nullable (and spotted by introspection on iOS9)
		UIColor SeparatorColor { get; set; }

		[Export ("tableHeaderView", ArgumentSemantic.Retain), NullAllowed]
		UIView TableHeaderView { get; set; }

		[Export ("tableFooterView", ArgumentSemantic.Retain), NullAllowed]
		UIView TableFooterView { get; set; }

		[Export ("dequeueReusableCellWithIdentifier:")]
		[return: NullAllowed]
		UITableViewCell DequeueReusableCell (string identifier);

		/// <include file="../docs/api/UIKit/UITableView.xml" path="/Documentation/Docs[@DocId='M:UIKit.UITableView.DequeueReusableCell(Foundation.NSString)']/*" />
		[Export ("dequeueReusableCellWithIdentifier:")]
		[Sealed]
		[return: NullAllowed]
		UITableViewCell DequeueReusableCell (NSString identifier);

		// 3.2
		[Export ("backgroundView", ArgumentSemantic.Retain), NullAllowed]
		UIView BackgroundView { get; set; }

		/// <summary>Represents the value associated with the constant <c>UITableViewIndexSearch</c></summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		///         <altmember cref="UIKit.UITableViewSource.SectionIndexTitles" />
		[NoTV]
		[MacCatalyst (13, 1)]
		[Field ("UITableViewIndexSearch")]
		NSString IndexSearch { get; }

		/// <summary>Represents the value associated with the constant UITableViewAutomaticDimension</summary>
		///         <value>
		///         </value>
		///         <remarks>Return this value from <see cref="UIKit.UITableViewSource" /> (or <see cref="UIKit.UITableViewDelegate" />) methods that request dimension metrics when you want the UITableView to use a default value. For example, return this constant from <see cref="UIKit.UITableViewSource.GetHeightForHeader(UIKit.UITableView,System.IntPtr)" /> or <see cref="UIKit.UITableViewSource.GetHeightForFooter(UIKit.UITableView,System.IntPtr)" /> and the table view will use automatically use a height that accomodates the value returned from <see cref="UIKit.UITableViewSource.TitleForHeader(UIKit.UITableView,System.IntPtr)" /> or <see cref="UIKit.UITableViewSource.TitleForFooter(UIKit.UITableView,System.IntPtr)" /> respectively.</remarks>
		[Field ("UITableViewAutomaticDimension")]
		nfloat AutomaticDimension { get; }

		[Export ("allowsMultipleSelection")]
		bool AllowsMultipleSelection { get; set; }

		[Export ("allowsMultipleSelectionDuringEditing")]
		bool AllowsMultipleSelectionDuringEditing { get; set; }

		/// <include file="../docs/api/UIKit/UITableView.xml" path="/Documentation/Docs[@DocId='M:UIKit.UITableView.MoveSection(System.IntPtr,System.IntPtr)']/*" />
		[Export ("moveSection:toSection:")]
		void MoveSection (nint fromSection, nint toSection);

		[Export ("moveRowAtIndexPath:toIndexPath:")]
		void MoveRow (NSIndexPath fromIndexPath, NSIndexPath toIndexPath);

		[NullAllowed]
		[Export ("indexPathsForSelectedRows")]
		NSIndexPath [] IndexPathsForSelectedRows { get; }

		[Export ("registerNib:forCellReuseIdentifier:")]
		void RegisterNibForCellReuse ([NullAllowed] UINib nib, NSString reuseIdentifier);

		/// <include file="../docs/api/UIKit/UITableView.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITableView.SelectionDidChangeNotification']/*" />
		[Field ("UITableViewSelectionDidChangeNotification")]
		[Notification]
		NSString SelectionDidChangeNotification { get; }

		//
		// 6.0
		//
		/// <summary>Gets or sets the color used for the index text.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed]
		[Export ("sectionIndexColor", ArgumentSemantic.Retain)]
		UIColor SectionIndexColor { get; set; }

		/// <summary>Gets or sets the background color of the table view's index.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed]
		[Export ("sectionIndexTrackingBackgroundColor", ArgumentSemantic.Retain)]
		UIColor SectionIndexTrackingBackgroundColor { get; set; }

		/// <param name="section">A zero-based index specifying which section's header is being requested.</param>
		/// <summary>Returns the <see cref="UIKit.UITableViewHeaderFooterView" /> for the specified <paramref name="section" />. Returns <see langword="null" /> if there is no corresponding view.</summary>
		/// <returns>The <see cref="UIKit.UITableViewHeaderFooterView" /> for the specified <paramref name="section" />. Returns <see langword="null" /> if there is no corresponding view</returns>
		/// <remarks>To be added.</remarks>
		[Export ("headerViewForSection:")]
		[return: NullAllowed]
		UITableViewHeaderFooterView GetHeaderView (nint section);

		/// <param name="section">To be added.</param>
		/// <summary>The footer view for the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("footerViewForSection:")]
		[return: NullAllowed]
		UITableViewHeaderFooterView GetFooterView (nint section);

		[Export ("dequeueReusableCellWithIdentifier:forIndexPath:")]
		UITableViewCell DequeueReusableCell (NSString reuseIdentifier, NSIndexPath indexPath);

		[Export ("dequeueReusableHeaderFooterViewWithIdentifier:")]
		[return: NullAllowed]
		UITableViewHeaderFooterView DequeueReusableHeaderFooterView (NSString reuseIdentifier);

		[Export ("registerClass:forCellReuseIdentifier:"), Internal]
		void RegisterClassForCellReuse (IntPtr /*Class*/ cellClass, NSString reuseIdentifier);

		[Export ("registerNib:forHeaderFooterViewReuseIdentifier:")]
		void RegisterNibForHeaderFooterViewReuse ([NullAllowed] UINib nib, NSString reuseIdentifier);

		[Export ("registerClass:forHeaderFooterViewReuseIdentifier:"), Internal]
		void RegisterClassForHeaderFooterViewReuse (IntPtr /*Class*/ aClass, NSString reuseIdentifier);

		//
		// 7.0
		//
		[Export ("estimatedRowHeight", ArgumentSemantic.Assign)]
		nfloat EstimatedRowHeight { get; set; }

		[Export ("estimatedSectionHeaderHeight", ArgumentSemantic.Assign)]
		nfloat EstimatedSectionHeaderHeight { get; set; }

		[Export ("estimatedSectionFooterHeight", ArgumentSemantic.Assign)]
		nfloat EstimatedSectionFooterHeight { get; set; }

		/// <summary>Gets or sets the background color for section index.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed] // by default this property is null
		[Export ("sectionIndexBackgroundColor", ArgumentSemantic.Retain)]
		UIColor SectionIndexBackgroundColor { get; set; }

		/// <summary>Gets or sets the edge inset for row separators.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("separatorInset")]
		UIEdgeInsets SeparatorInset { get; set; }

		/// <summary>Gets or sets the visual effect to use for separators.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed] // by default this property is null
		[Export ("separatorEffect", ArgumentSemantic.Copy)]
		[Appearance]
		UIVisualEffect SeparatorEffect { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("cellLayoutMarginsFollowReadableWidth")]
		bool CellLayoutMarginsFollowReadableWidth { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("remembersLastFocusedIndexPath")]
		bool RemembersLastFocusedIndexPath { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("prefetchDataSource", ArgumentSemantic.Weak)]
		IUITableViewDataSourcePrefetching PrefetchDataSource { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("prefetchingEnabled")]
		bool PrefetchingEnabled { [Bind ("isPrefetchingEnabled")] get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("dragDelegate", ArgumentSemantic.Weak)]
		IUITableViewDragDelegate DragDelegate { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("dropDelegate", ArgumentSemantic.Weak)]
		IUITableViewDropDelegate DropDelegate { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("separatorInsetReference", ArgumentSemantic.Assign)]
		UITableViewSeparatorInsetReference SeparatorInsetReference { get; set; }

		[MacCatalyst (13, 1)]
		[Async (XmlDocs = """
			<param name="updates">The updates to perform.This parameter can be .</param>
			<summary>Applies and simultaneously animates multiple manipulations of the <see cref="UIKit.UITableView" />.</summary>
			<returns>
			          <para class="improve-task-t-return-type-description">A task that represents the asynchronous PerformBatchUpdates operation.  The value of the TResult parameter is of type System.Action&lt;System.Boolean&gt;.</para>
			        </returns>
			<remarks>
			          <para copied="true">The PerformBatchUpdatesAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		[Export ("performBatchUpdates:completion:")]
		void PerformBatchUpdates ([NullAllowed] Action updates, [NullAllowed] Action<bool> completion);

		[MacCatalyst (13, 1)]
		[Export ("hasUncommittedUpdates")]
		bool HasUncommittedUpdates { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("dragInteractionEnabled")]
		bool DragInteractionEnabled { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hasActiveDrag")]
		bool HasActiveDrag { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hasActiveDrop")]
		bool HasActiveDrop { get; }

		[MacCatalyst (13, 1)]
		[Export ("insetsContentViewsToSafeArea")]
		bool InsetsContentViewsToSafeArea { get; set; }

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("selectionFollowsFocus")]
		bool SelectionFollowsFocus { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("allowsFocus")]
		bool AllowsFocus { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("allowsFocusDuringEditing")]
		bool AllowsFocusDuringEditing { get; set; }

		[TV (17, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("contextMenuInteraction")]
		UIContextMenuInteraction ContextMenuInteraction { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("fillerRowHeight")]
		nfloat FillerRowHeight { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("sectionHeaderTopPadding")]
		nfloat SectionHeaderTopPadding { get; set; }

		[TV (16, 0), iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("selfSizingInvalidation", ArgumentSemantic.Assign)]
		UITableViewSelfSizingInvalidation SelfSizingInvalidation { get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("contentHuggingElements")]
		UITableViewContentHuggingElements ContentHuggingElements { get; set; }
	}

	interface IUITableViewDataSourcePrefetching { }
	/// <summary>Interface for table view data sources that can prefetch their data.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITableViewDataSourcePrefetching {
		/// <param name="tableView">To be added.</param>
		/// <param name="indexPaths">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("tableView:prefetchRowsAtIndexPaths:")]
		void PrefetchRows (UITableView tableView, NSIndexPath [] indexPaths);

		/// <param name="tableView">To be added.</param>
		/// <param name="indexPaths">To be added.</param>
		/// <summary>Cancels the prefetching of table data.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:cancelPrefetchingForRowsAtIndexPaths:")]
		void CancelPrefetching (UITableView tableView, NSIndexPath [] indexPaths);
	}

	//
	// This mixed both the UITableViewDataSource and UITableViewDelegate in a single class
	//
	/// <include file="../docs/api/UIKit/UITableViewSource.xml" path="/Documentation/Docs[@DocId='T:UIKit.UITableViewSource']/*" />
	[MacCatalyst (13, 1)]
	[Model]
	[BaseType (typeof (UIScrollViewDelegate))]
	[Synthetic]
	interface UITableViewSource {
		/// <param name="tableView">Table view displaying the rows.</param>
		/// <param name="section">Index of the section containing the rows.</param>
		/// <summary>Called by the table view to find out how many rows are to be rendered in the section specified by <paramref name="section" />.</summary>
		/// <returns>Number of rows in the section at index <paramref name="section" />.</returns>
		/// <remarks>
		///           <para>Declared in [UITableViewDataSource]</para>
		///         </remarks>
		[Export ("tableView:numberOfRowsInSection:")]
		[Abstract]
		nint RowsInSection (UITableView tableView, nint section);

		[Export ("tableView:cellForRowAtIndexPath:")]
		[Abstract]
		UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath);

		[Export ("numberOfSectionsInTableView:")]
		nint NumberOfSections (UITableView tableView);

		/// <param name="tableView">Table view containing the section.</param>
		/// <param name="section">Index of the section displaying the header.</param>
		/// <summary>Called to populate the header for the specified section.</summary>
		/// <returns>Text to display in the section header, or <see langword="null" /> if no title is required.</returns>
		/// <remarks>
		///           <para>Table views use a fixed style for the section header. To customize the appearance of the header, return a custom view from <see cref="UIKit.UITableViewSource.GetViewForHeader(UIKit.UITableView,System.IntPtr)" /> instead of implementing this method.</para>
		///           <para>Declared in [UITableViewDataSource]</para>
		///         </remarks>
		[Export ("tableView:titleForHeaderInSection:")]
		[return: NullAllowed]
		string TitleForHeader (UITableView tableView, nint section);

		/// <param name="tableView">Table view containing the section.</param>
		/// <param name="section">Index of the section displaying the footer.</param>
		/// <summary>Called to populate the footer for the specified section.</summary>
		/// <returns>Text to display in the section footer, or <see langword="null" /> if no title is required.</returns>
		/// <remarks>
		///           <para>Table views use a fixed style for the section footer. To customize the appearance of the footer, return a custom view from <see cref="UIKit.UITableViewSource.GetViewForFooter(UIKit.UITableView,System.IntPtr)" /> instead of implementing this method.</para>
		///           <para>Declared in [UITableViewDataSource]</para>
		///         </remarks>
		[Export ("tableView:titleForFooterInSection:")]
		[return: NullAllowed]
		string TitleForFooter (UITableView tableView, nint section);

		[Export ("tableView:canEditRowAtIndexPath:")]
		bool CanEditRow (UITableView tableView, NSIndexPath indexPath);

		[Export ("tableView:canMoveRowAtIndexPath:")]
		bool CanMoveRow (UITableView tableView, NSIndexPath indexPath);

		[MacCatalyst (13, 1)]
		[Export ("sectionIndexTitlesForTableView:")]
		[return: NullAllowed]
		string [] SectionIndexTitles (UITableView tableView);

		/// <include file="../docs/api/UIKit/UITableViewSource.xml" path="/Documentation/Docs[@DocId='M:UIKit.UITableViewSource.SectionFor(UIKit.UITableView,System.String,System.IntPtr)']/*" />
		[MacCatalyst (13, 1)]
		[Export ("tableView:sectionForSectionIndexTitle:atIndex:")]
		nint SectionFor (UITableView tableView, string title, nint atIndex);

		[Export ("tableView:commitEditingStyle:forRowAtIndexPath:")]
		void CommitEditingStyle (UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath);

		[Export ("tableView:moveRowAtIndexPath:toIndexPath:")]
		void MoveRow (UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath);

		[Export ("tableView:willDisplayCell:forRowAtIndexPath:")]
		void WillDisplay (UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);

		[Export ("tableView:heightForRowAtIndexPath:")]
		nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view.</param>
		/// <param name="section">Index of the section requiring a header display.</param>
		/// <summary>Called to determine the height of the header for the section specified by <paramref name="section" />.</summary>
		/// <returns>The height of the header (in points) as a <see langword="float" />.</returns>
		/// <remarks>
		///           <para>This method allows section headers to have different heights. This method is not called if the table is <see cref="UIKit.UITableViewStyle.Plain" /> style.</para>
		///           <para>Declared in [UITableViewDelegate]</para>
		///         </remarks>
		[Export ("tableView:heightForHeaderInSection:")]
		nfloat GetHeightForHeader (UITableView tableView, nint section);

		/// <param name="tableView">Table view.</param>
		/// <param name="section">Index of the section requiring a footer display.</param>
		/// <summary>Called to determine the height of the footer for the section specified by <paramref name="section" />.</summary>
		/// <returns>The height of the footer (in points) as a <see langword="float" />.</returns>
		/// <remarks>
		///           <para>This method allows section footers to have different heights. This method is not called if the table is <see cref="UIKit.UITableViewStyle.Plain" /> style.</para>
		///           <para>Declared in [UITableViewDelegate]</para>
		///         </remarks>
		[Export ("tableView:heightForFooterInSection:")]
		nfloat GetHeightForFooter (UITableView tableView, nint section);

		/// <param name="tableView">Table view containing the section.</param>
		/// <param name="section">Section index where the header will be added.</param>
		/// <summary>Returns a view object to display at the start of the given section.</summary>
		/// <returns>A view to be displayed at the start of the given <paramref name="section" />.</returns>
		/// <remarks>
		///           <para>Can either be a <see cref="UIKit.UILabel" />, <see cref="UIKit.UIImageView" /> or a custom view. This method requires <see cref="UIKit.UITableViewSource.GetHeightForHeader(UIKit.UITableView,System.IntPtr)" /> to be implemented as well.</para>
		///           <para>Declared in [UITableViewDelegate]</para>
		///         </remarks>
		[Export ("tableView:viewForHeaderInSection:")]
		UIView GetViewForHeader (UITableView tableView, nint section);

		/// <param name="tableView">Table view containing the section.</param>
		/// <param name="section">Section index where the footer will be added.</param>
		/// <summary>Returns a view object to display at the end of the given section.</summary>
		/// <returns>A view to be displayed at the end of the given <paramref name="section" />.</returns>
		/// <remarks>
		///           <para>Can either be a <see cref="UIKit.UILabel" />, <see cref="UIKit.UIImageView" /> or a custom view. This method requires <see cref="UIKit.UITableViewSource.GetHeightForFooter(UIKit.UITableView,System.IntPtr)" /> to be implemented as well.</para>
		///           <para>Declared in [UITableViewDelegate]</para>
		///         </remarks>
		[Export ("tableView:viewForFooterInSection:")]
		UIView GetViewForFooter (UITableView tableView, nint section);

		[Export ("tableView:accessoryButtonTappedForRowWithIndexPath:")]
		void AccessoryButtonTapped (UITableView tableView, NSIndexPath indexPath);

		[Export ("tableView:willSelectRowAtIndexPath:")]
		[return: NullAllowed]
		NSIndexPath WillSelectRow (UITableView tableView, NSIndexPath indexPath);

		[Export ("tableView:willDeselectRowAtIndexPath:")]
		[return: NullAllowed]
		NSIndexPath WillDeselectRow (UITableView tableView, NSIndexPath indexPath);

		[Export ("tableView:didSelectRowAtIndexPath:")]
		void RowSelected (UITableView tableView, NSIndexPath indexPath);

		[Export ("tableView:didDeselectRowAtIndexPath:")]
		void RowDeselected (UITableView tableView, NSIndexPath indexPath);

		[Export ("tableView:editingStyleForRowAtIndexPath:")]
		UITableViewCellEditingStyle EditingStyleForRow (UITableView tableView, NSIndexPath indexPath);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:")]
		[return: NullAllowed]
		string TitleForDeleteConfirmation (UITableView tableView, NSIndexPath indexPath);

		[Export ("tableView:shouldIndentWhileEditingRowAtIndexPath:")]
		bool ShouldIndentWhileEditing (UITableView tableView, NSIndexPath indexPath);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:willBeginEditingRowAtIndexPath:")]
		void WillBeginEditing (UITableView tableView, NSIndexPath indexPath);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:didEndEditingRowAtIndexPath:")]
		void DidEndEditing (UITableView tableView, [NullAllowed] NSIndexPath indexPath);

		[Export ("tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:")]
		NSIndexPath CustomizeMoveTarget (UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath proposedIndexPath);

		[Export ("tableView:indentationLevelForRowAtIndexPath:")]
		nint IndentationLevel (UITableView tableView, NSIndexPath indexPath);

		// Copy Paste support
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Export ("tableView:shouldShowMenuForRowAtIndexPath:")]
		bool ShouldShowMenu (UITableView tableView, NSIndexPath rowAtindexPath);

		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Export ("tableView:canPerformAction:forRowAtIndexPath:withSender:")]
		bool CanPerformAction (UITableView tableView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Export ("tableView:performAction:forRowAtIndexPath:withSender:")]
		void PerformAction (UITableView tableView, Selector action, NSIndexPath indexPath, [NullAllowed] NSObject sender);

		// The 'headerView' parameter can be null, even though the header claims otherwise: https://github.com/dotnet/macios/issues/9814
		/// <param name="tableView">The tableview involved.</param>
		/// <param name="headerView">The UIView that will be used as the header view.</param>
		/// <param name="section">The table section to which the header view belongs.</param>
		/// <summary>Called prior to the display of a header view for a section.</summary>
		/// <remarks>
		///         </remarks>
		[Export ("tableView:willDisplayHeaderView:forSection:")]
		void WillDisplayHeaderView (UITableView tableView, [NullAllowed] UIView headerView, nint section);

		// The 'footerView' parameter can be null, even though the header claims otherwise: https://github.com/dotnet/macios/issues/9814
		/// <param name="tableView">The tableview involved.</param>
		/// <param name="footerView">The UIView that will be used as the footer view.</param>
		/// <param name="section">The table section to which the footer view belongs.</param>
		/// <summary>Called prior to the display of a footer view for a section.</summary>
		/// <remarks>
		///         </remarks>
		[Export ("tableView:willDisplayFooterView:forSection:")]
		void WillDisplayFooterView (UITableView tableView, [NullAllowed] UIView footerView, nint section);

		[Export ("tableView:didEndDisplayingCell:forRowAtIndexPath:")]
		void CellDisplayingEnded (UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);

		/// <param name="tableView">The <see cref="UIKit.UITableView" /> to which the <paramref name="headerView" /> belongs.</param>
		/// <param name="headerView">The <see cref="UIKit.UIView" /> being removed.</param>
		/// <param name="section">An index indicating the section to which the <paramref name="headerView" /> belongs.</param>
		/// <summary>Called when a section header is removed from a table (for instance, due to scrolling).</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:didEndDisplayingHeaderView:forSection:")]
		void HeaderViewDisplayingEnded (UITableView tableView, UIView headerView, nint section);

		/// <param name="tableView">To be added.</param>
		/// <param name="footerView">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>Indicates that the <paramref name="footerView" /> for the specified <paramref name="section" /> is about to be removed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:didEndDisplayingFooterView:forSection:")]
		void FooterViewDisplayingEnded (UITableView tableView, UIView footerView, nint section);

		[Export ("tableView:shouldHighlightRowAtIndexPath:")]
		bool ShouldHighlightRow (UITableView tableView, NSIndexPath rowIndexPath);

		[Export ("tableView:didHighlightRowAtIndexPath:")]
		void RowHighlighted (UITableView tableView, NSIndexPath rowIndexPath);

		[Export ("tableView:didUnhighlightRowAtIndexPath:")]
		void RowUnhighlighted (UITableView tableView, NSIndexPath rowIndexPath);

		[Export ("tableView:estimatedHeightForRowAtIndexPath:")]
		nfloat EstimatedHeight (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>The estimated height of the header for the specified <paramref name="section" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:estimatedHeightForHeaderInSection:")]
		nfloat EstimatedHeightForHeader (UITableView tableView, nint section);

		/// <param name="tableView">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>The estimated height of the footer for the specified <paramref name="section" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:estimatedHeightForFooterInSection:")]
		nfloat EstimatedHeightForFooter (UITableView tableView, nint section);

		[NoTV]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetTrailingSwipeActionsConfiguration' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetTrailingSwipeActionsConfiguration' instead.")]
		[Export ("tableView:editActionsForRowAtIndexPath:")]
		UITableViewRowAction [] EditActionsForRow (UITableView tableView, NSIndexPath indexPath);

		[MacCatalyst (13, 1)]
		[Export ("tableView:canFocusRowAtIndexPath:")]
		bool CanFocusRow (UITableView tableView, NSIndexPath indexPath);

		[MacCatalyst (13, 1)]
		[Export ("tableView:shouldUpdateFocusInContext:")]
		bool ShouldUpdateFocus (UITableView tableView, UITableViewFocusUpdateContext context);

		[MacCatalyst (13, 1)]
		[Export ("tableView:didUpdateFocusInContext:withAnimationCoordinator:")]
		void DidUpdateFocus (UITableView tableView, UITableViewFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

		[MacCatalyst (13, 1)]
		[Export ("indexPathForPreferredFocusedViewInTableView:")]
		[return: NullAllowed]
		NSIndexPath GetIndexPathForPreferredFocusedView (UITableView tableView);

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("tableView:selectionFollowsFocusForRowAtIndexPath:")]
		bool GetSelectionFollowsFocusForRow (UITableView tableView, NSIndexPath indexPath);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:")]
		[return: NullAllowed]
		UISwipeActionsConfiguration GetLeadingSwipeActionsConfiguration (UITableView tableView, NSIndexPath indexPath);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:")]
		[return: NullAllowed]
		UISwipeActionsConfiguration GetTrailingSwipeActionsConfiguration (UITableView tableView, NSIndexPath indexPath);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:shouldSpringLoadRowAtIndexPath:withContext:")]
		bool ShouldSpringLoadRow (UITableView tableView, NSIndexPath indexPath, IUISpringLoadedInteractionContext context);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:shouldBeginMultipleSelectionInteractionAtIndexPath:")]
		bool ShouldBeginMultipleSelectionInteraction (UITableView tableView, NSIndexPath indexPath);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:didBeginMultipleSelectionInteractionAtIndexPath:")]
		void DidBeginMultipleSelectionInteraction (UITableView tableView, NSIndexPath indexPath);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableViewDidEndMultipleSelectionInteraction:")]
		void DidEndMultipleSelectionInteraction (UITableView tableView);

		[TV (17, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:contextMenuConfigurationForRowAtIndexPath:point:")]
		[return: NullAllowed]
		UIContextMenuConfiguration GetContextMenuConfiguration (UITableView tableView, NSIndexPath indexPath, CGPoint point);

		[TV (17, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:previewForHighlightingContextMenuWithConfiguration:")]
		[return: NullAllowed]
		UITargetedPreview GetPreviewForHighlightingContextMenu (UITableView tableView, UIContextMenuConfiguration configuration);

		[TV (17, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:previewForDismissingContextMenuWithConfiguration:")]
		[return: NullAllowed]
		UITargetedPreview GetPreviewForDismissingContextMenu (UITableView tableView, UIContextMenuConfiguration configuration);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:willPerformPreviewActionForMenuWithConfiguration:animator:")]
		void WillPerformPreviewAction (UITableView tableView, UIContextMenuConfiguration configuration, IUIContextMenuInteractionCommitAnimating animator);

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("tableView:willDisplayContextMenuWithConfiguration:animator:")]
		void WillDisplayContextMenu (UITableView tableView, UIContextMenuConfiguration configuration, [NullAllowed] IUIContextMenuInteractionAnimating animator);

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("tableView:willEndContextMenuInteractionWithConfiguration:animator:")]
		void WillEndContextMenuInteraction (UITableView tableView, UIContextMenuConfiguration configuration, [NullAllowed] IUIContextMenuInteractionAnimating animator);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("tableView:canPerformPrimaryActionForRowAtIndexPath:")]
		bool CanPerformPrimaryAction (UITableView tableView, NSIndexPath rowIndexPath);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("tableView:performPrimaryActionForRowAtIndexPath:")]
		void PerformPrimaryAction (UITableView tableView, NSIndexPath rowIndexPath);

		// WARNING: If you add more methods here, add them to UITableViewControllerDelegate as well.
	}

	[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
	delegate void UITableViewCellConfigurationUpdateHandler (UITableViewCell cell, UICellConfigurationState state);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UITableViewCell : NSCoding, UIGestureRecognizerDelegate {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[DesignatedInitializer]
		[Export ("initWithStyle:reuseIdentifier:")]
		NativeHandle Constructor (UITableViewCellStyle style, [NullAllowed] NSString reuseIdentifier);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("configurationState")]
		UICellConfigurationState ConfigurationState { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("setNeedsUpdateConfiguration")]
		void SetNeedsUpdateConfiguration ();

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("updateConfigurationUsingState:")]
		void UpdateConfiguration (UICellConfigurationState state);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("configurationUpdateHandler", ArgumentSemantic.Copy)]
		UITableViewCellConfigurationUpdateHandler ConfigurationUpdateHandler { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("defaultContentConfiguration")]
		UIListContentConfiguration DefaultContentConfiguration { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("contentConfiguration", ArgumentSemantic.Copy)]
		IUIContentConfiguration ContentConfiguration { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("automaticallyUpdatesContentConfiguration")]
		bool AutomaticallyUpdatesContentConfiguration { get; set; }

		[Export ("contentView", ArgumentSemantic.Retain)]
		UIView ContentView { get; }

		[Deprecated (PlatformName.iOS, 14, 0, message: "Use 'UIListContentConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 14, 0, message: "Use 'UIListContentConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 14, 0, message: "Use 'UIListContentConfiguration' instead.")]
		[Export ("imageView", ArgumentSemantic.Retain)]
		UIImageView ImageView { get; }

		[Deprecated (PlatformName.iOS, 14, 0, message: "Use 'UIListContentConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 14, 0, message: "Use 'UIListContentConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 14, 0, message: "Use 'UIListContentConfiguration' instead.")]
		[Export ("textLabel", ArgumentSemantic.Retain)]
		UILabel TextLabel { get; }

		[Deprecated (PlatformName.iOS, 14, 0, message: "Use 'UIListContentConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 14, 0, message: "Use 'UIListContentConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 14, 0, message: "Use 'UIListContentConfiguration' instead.")]
		[Export ("detailTextLabel", ArgumentSemantic.Retain)]
		UILabel DetailTextLabel { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("backgroundConfiguration", ArgumentSemantic.Copy)]
		UIBackgroundConfiguration BackgroundConfiguration { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("automaticallyUpdatesBackgroundConfiguration")]
		bool AutomaticallyUpdatesBackgroundConfiguration { get; set; }

		[Export ("backgroundView", ArgumentSemantic.Retain), NullAllowed]
		UIView BackgroundView { get; set; }

		[Export ("selectedBackgroundView", ArgumentSemantic.Retain), NullAllowed]
		UIView SelectedBackgroundView { get; set; }

		[Export ("reuseIdentifier", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSString ReuseIdentifier { get; }

		[RequiresSuper]
		[Export ("prepareForReuse")]
		void PrepareForReuse ();

		[Export ("selectionStyle")]
		UITableViewCellSelectionStyle SelectionStyle { get; set; }

		/// <summary>Whether the cell is selected.</summary>
		///         <value>Default value is <see langword="false" />.</value>
		///         <remarks>
		///           <para>Selection affects the appearance of labels, image and background. When the Selected property is set to <see langword="true" />, the labels are drawn in white and the background is set to the <see cref="UIKit.UITableViewCell.SelectedBackgroundView" /> (if set).</para>
		///           <para>When this property is set to <see langword="true" />, the transition to the new appearance is not animated. Use the <see cref="UIKit.UITableViewCell.SetSelected(System.Boolean,System.Boolean)" /> method for animated selection-state transitions.</para>
		///         </remarks>
		[Export ("selected")]
		bool Selected { [Bind ("isSelected")] get; set; }

		/// <include file="../docs/api/UIKit/UITableViewCell.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITableViewCell.Highlighted']/*" />
		[Export ("highlighted")]
		bool Highlighted { [Bind ("isHighlighted")] get; set; }

		[Export ("setSelected:animated:")]
		void SetSelected (bool selected, bool animated);

		[Export ("setHighlighted:animated:")]
		void SetHighlighted (bool highlighted, bool animated);

		[Export ("editingStyle")]
		UITableViewCellEditingStyle EditingStyle { get; }

		[Export ("showsReorderControl")]
		bool ShowsReorderControl { get; set; }

		[Export ("shouldIndentWhileEditing")]
		bool ShouldIndentWhileEditing { get; set; }

		[Export ("accessoryType")]
		UITableViewCellAccessory Accessory { get; set; }

		[Export ("accessoryView", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView AccessoryView { get; set; }

		[Export ("editingAccessoryType")]
		UITableViewCellAccessory EditingAccessory { get; set; }

		[Export ("editingAccessoryView", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView EditingAccessoryView { get; set; }

		[Export ("indentationLevel")]
		nint IndentationLevel { get; set; }

		[Export ("indentationWidth")]
		nfloat IndentationWidth { get; set; }

		/// <summary>Whether the cell is in an editable state.</summary>
		///         <value>
		///           <see langword="true" /> if the cell is in the editing state, <see langword="false" /> if the cell is in the normal state.</value>
		///         <remarks>In the editing state, a cell displays the editing controls specified for it: the green insertion control or the red deletion control on the left, and/or the reordering control on the right. Use <see cref="UIKit.UITableViewCell.EditingStyle" /> and <see cref="UIKit.UITableViewCell.ShowsReorderControl" /> to specify which controls appear in the cell.</remarks>
		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; set; }

		[Export ("setEditing:animated:")]
		void SetEditing (bool editing, bool animated);

		[Export ("showingDeleteConfirmation")]
		bool ShowingDeleteConfirmation { get; [NotImplemented] set; }

		[Export ("willTransitionToState:")]
		void WillTransitionToState (UITableViewCellState mask);

		[Export ("didTransitionToState:")]
		void DidTransitionToState (UITableViewCellState mask);

		[Export ("multipleSelectionBackgroundView", ArgumentSemantic.Retain), NullAllowed]
		UIView MultipleSelectionBackgroundView { get; set; }

		[Appearance]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("separatorInset")]
		UIEdgeInsets SeparatorInset { get; set; }

		[Appearance]
		[MacCatalyst (13, 1)]
		[Export ("focusStyle", ArgumentSemantic.Assign)]
		UITableViewCellFocusStyle FocusStyle { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("dragStateDidChange:")]
		void DragStateDidChange (UITableViewCellDragState dragState);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("userInteractionEnabledWhileDragging")]
		bool UserInteractionEnabledWhileDragging { get; set; }

		[TV (16, 0), iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("defaultBackgroundConfiguration")]
		UIBackgroundConfiguration DefaultBackgroundConfiguration { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	interface UITableViewController : UITableViewDataSource, UITableViewDelegate {
		[DesignatedInitializer]
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[DesignatedInitializer]
		[Export ("initWithStyle:")]
		NativeHandle Constructor (UITableViewStyle withStyle);

		[Export ("tableView", ArgumentSemantic.Retain)]
		UITableView TableView { get; set; }

		[Export ("clearsSelectionOnViewWillAppear")]
		bool ClearsSelectionOnViewWillAppear { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("refreshControl", ArgumentSemantic.Strong)]
		UIRefreshControl RefreshControl { get; set; }
	}

	interface IUITableViewDataSource { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITableViewDataSource" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITableViewDataSource" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITableViewDataSource" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITableViewDataSource_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Protocol, Model]
	interface UITableViewDataSource {

		/// <param name="tableView">To be added.</param>
		/// <param name="section">Index of the section containing the rows.</param>
		/// <summary>The number of rows in the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:numberOfRowsInSection:")]
		[Abstract]
		nint RowsInSection (UITableView tableView, nint section);

		/// <param name="tableView">Table view requesting the cell.</param>
		/// <param name="indexPath">Location of the row where the cell will be displayed.</param>
		/// <summary>Returns a cell that can be inserted at <paramref name="indexPath" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:cellForRowAtIndexPath:")]
		[Abstract]
		UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view displaying the sections.</param>
		/// <summary>Returns the number of sections that are required to display the data.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("numberOfSectionsInTableView:")]
		nint NumberOfSections (UITableView tableView);

		/// <param name="tableView">Table view containing the section.</param>
		/// <param name="section">Index of the section displaying the header.</param>
		/// <summary>Called to populate the header for the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:titleForHeaderInSection:")]
		[return: NullAllowed]
		string TitleForHeader (UITableView tableView, nint section);

		/// <param name="tableView">Table view containing the section.</param>
		/// <param name="section">Index of the section displaying the footer.</param>
		/// <summary>Called to populate the footer for the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:titleForFooterInSection:")]
		[return: NullAllowed]
		string TitleForFooter (UITableView tableView, nint section);

		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <summary>Whether the row located at  should be editable.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:canEditRowAtIndexPath:")]
		bool CanEditRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <summary>Whether the row located at  can be moved to another location in the table view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:canMoveRowAtIndexPath:")]
		bool CanMoveRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view that is displaying the index.</param>
		/// <summary>Returns an array of titles to be displayed as an index on the table view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("sectionIndexTitlesForTableView:")]
		[return: NullAllowed]
		string [] SectionIndexTitles (UITableView tableView);

		/// <include file="../docs/api/UIKit/UITableViewDataSource.xml" path="/Documentation/Docs[@DocId='M:UIKit.UITableViewDataSource.SectionFor(UIKit.UITableView,System.String,System.IntPtr)']/*" />
		[MacCatalyst (13, 1)]
		[Export ("tableView:sectionForSectionIndexTitle:atIndex:")]
		nint SectionFor (UITableView tableView, string title, nint atIndex);

		/// <param name="tableView">Table view requesting insertion or deletion.</param>
		/// <param name="editingStyle">Cell editing style requested for the row at <paramref name="indexPath" />, such as <see cref="UIKit.UITableViewCellEditingStyle.Insert" /> or <see cref="UIKit.UITableViewCellEditingStyle.Delete" />.</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <summary>Commits the insertion or deletion of the specified row.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:commitEditingStyle:forRowAtIndexPath:")]
		void CommitEditingStyle (UITableView tableView, UITableViewCellEditingStyle editingStyle, NSIndexPath indexPath);

		/// <param name="tableView">Table view containing the row being moved.</param>
		/// <param name="sourceIndexPath">Location of the row to be moved.</param>
		/// <param name="destinationIndexPath">New location of the row.</param>
		/// <summary>Called when a row has been moved so that the data source can 'implement' the changed row position that has been performed in the user interface. This ensures the data is kept in-sync with what is being displayed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:moveRowAtIndexPath:toIndexPath:")]
		void MoveRow (UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath);
	}

	interface IUITableViewDelegate { }

	/// <include file="../docs/api/UIKit/UITableViewDelegate.xml" path="/Documentation/Docs[@DocId='T:UIKit.UITableViewDelegate']/*" />
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIScrollViewDelegate))]
	[Model]
	[Protocol]
	interface UITableViewDelegate {

		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="cell">Cell view that is going to be used to draw the row.</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <summary>Indicates that the cell at the specified indexPath is about to be shown.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:willDisplayCell:forRowAtIndexPath:")]
		void WillDisplay (UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);

		/// <param name="tableView">Table view.</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <summary>The height of the cell at the specified indexPath.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:heightForRowAtIndexPath:")]
		nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view.</param>
		/// <param name="section">Index of the section requiring a header display.</param>
		/// <summary>The height of the header for the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:heightForHeaderInSection:")]
		nfloat GetHeightForHeader (UITableView tableView, nint section);

		/// <param name="tableView">Table view.</param>
		/// <param name="section">Index of the section requiring a footer display.</param>
		/// <summary>Called to determine the height of the footer for the section specified by <paramref name="section" />.</summary>
		/// <returns>The height of the footer (in points) as a <see langword="float" />.</returns>
		/// <remarks>
		///           <para>This method allows section footers to have different heights. This method is not called if the table is <see cref="UIKit.UITableViewStyle.Plain" /> style.</para>
		///         </remarks>
		[Export ("tableView:heightForFooterInSection:")]
		nfloat GetHeightForFooter (UITableView tableView, nint section);

		/// <param name="tableView">Table view containing the section.</param>
		/// <param name="section">Section index where the header will be added.</param>
		/// <summary>Returns a view object to display at the start of the given section.</summary>
		/// <returns>A view to be displayed at the start of the given <paramref name="section" />.</returns>
		/// <remarks>
		///           <para>Can either be a <see cref="UIKit.UILabel" />, <see cref="UIKit.UIImageView" /> or a custom view. This method requires <see cref="UIKit.UITableViewSource.GetHeightForHeader(UIKit.UITableView,System.IntPtr)" /> to be implemented as well.</para>
		///         </remarks>
		[Export ("tableView:viewForHeaderInSection:")]
		UIView GetViewForHeader (UITableView tableView, nint section);

		/// <param name="tableView">Table view containing the section.</param>
		/// <param name="section">Section index where the footer will be added.</param>
		/// <summary>Returns a view object to display at the end of the given section.</summary>
		/// <returns>A view to be displayed at the end of the given <paramref name="section" />.</returns>
		/// <remarks>
		///           <para>Can either be a <see cref="UIKit.UILabel" />, <see cref="UIKit.UIImageView" /> or a custom view. This method requires <see cref="UIKit.UITableViewSource.GetHeightForFooter(UIKit.UITableView,System.IntPtr)" /> to be implemented as well.</para>
		///           <para>[UITableViewDelegate]</para>
		///         </remarks>
		[Export ("tableView:viewForFooterInSection:")]
		UIView GetViewForFooter (UITableView tableView, nint section);

		/// <param name="tableView">The table view containing the row/cell accessory that has been tapped.</param>
		/// <param name="indexPath">The location of the row in the table view.</param>
		/// <summary>Indictes that the user has tapped the accessory / disclosure buttom at the specified indexPath.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:accessoryButtonTappedForRowWithIndexPath:")]
		void AccessoryButtonTapped (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="indexPath">Location of the row about to be selected.</param>
		/// <summary>Indicates the the cell at the specified indexPath is about to be selected.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:willSelectRowAtIndexPath:")]
		[return: NullAllowed]
		NSIndexPath WillSelectRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">The table involved.</param>
		/// <param name="indexPath">The index path of the row about to be de-selected.</param>
		/// <summary>Indicates that the cell at the specified indexPath is about to be deselected.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:willDeselectRowAtIndexPath:")]
		[return: NullAllowed]
		NSIndexPath WillDeselectRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="indexPath">Location of the row that has become selected.</param>
		/// <summary>Indicates that the call at the specified indexPath has been selected.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:didSelectRowAtIndexPath:")]
		void RowSelected (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="indexPath">Location of the row that has become de-selected.</param>
		/// <summary>Indicates that the cell at the specified indexPath has been deselected.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:didDeselectRowAtIndexPath:")]
		void RowDeselected (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view that is going to be editable.</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <summary>The UITableViewCellEditingStyle for the specified indexPath.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:editingStyleForRowAtIndexPath:")]
		UITableViewCellEditingStyle EditingStyleForRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view being edited.</param>
		/// <param name="indexPath">Location of the row that may be deleted.</param>
		/// <summary>When overridden, changes the default title of the delete confirmation button.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:")]
		[return: NullAllowed]
		string TitleForDeleteConfirmation (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view that contains the row.</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <summary>Whether the cell at the specified indexPath should be indented while it is being edited.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:shouldIndentWhileEditingRowAtIndexPath:")]
		bool ShouldIndentWhileEditing (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view about to be edited.</param>
		/// <param name="indexPath">Location of the row that has been swiped.</param>
		/// <summary>Indicates that the cell at the specified indexPath is about to be edited.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:willBeginEditingRowAtIndexPath:")]
		void WillBeginEditing (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view being edited.</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <summary>Indicates that editing of the cell at the specified indexPath has finished.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:didEndEditingRowAtIndexPath:")]
		void DidEndEditing (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">Table view containing the row to be moved.</param>
		/// <param name="sourceIndexPath">The original location of the row being moved.</param>
		/// <param name="proposedIndexPath">The location in the table view where the row has been dropped. The location can be altered by this method.</param>
		/// <summary>Used to change a cell move destination, for example, to prevent dropping a cell in a certain position.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:")]
		NSIndexPath CustomizeMoveTarget (UITableView tableView, NSIndexPath sourceIndexPath, NSIndexPath proposedIndexPath);

		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <summary>The indentation level for the cell at the specified indexPath.</summary>
		/// <returns>
		///         </returns>
		/// <remarks>
		///           <para>Note that custom UITableViewCell's do not respect IndentationLevel automatically. Application developers must override <see cref="UIKit.UITableViewController.LayoutSubviews" />.</para>
		///         </remarks>
		[Export ("tableView:indentationLevelForRowAtIndexPath:")]
		nint IndentationLevel (UITableView tableView, NSIndexPath indexPath);

		// Copy Paste support
		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="rowAtindexPath">Location of the row that the user is selecting.</param>
		/// <summary>Whether the cell at the specified rowAtIndexPath should show an action menu.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Export ("tableView:shouldShowMenuForRowAtIndexPath:")]
		bool ShouldShowMenu (UITableView tableView, NSIndexPath rowAtindexPath);

		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="action">A selector identifying the Copy or Paste method (ie. <see cref="UIKit.UIResponder.Copy(Foundation.NSObject)" /> or <see cref="UIKit.UIResponder.Paste(Foundation.NSObject)" />).</param>
		/// <param name="indexPath">Location of the row.</param>
		/// <param name="sender">Object that initially triggere the Copy or Paste.</param>
		/// <summary>Whether the cell at the specified indexPath can perform the specified Copy or Paste operation.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Export ("tableView:canPerformAction:forRowAtIndexPath:withSender:")]
		bool CanPerformAction (UITableView tableView, Selector action, NSIndexPath indexPath, NSObject sender);

		/// <param name="tableView">Table view containing the row.</param>
		/// <param name="action">A selector identifying the Copy or Paste method (ie. <see cref="UIKit.UIResponder.Copy(Foundation.NSObject)" /> or <see cref="UIKit.UIResponder.Paste(Foundation.NSObject)" />).</param>
		/// <param name="indexPath">Location of the row where the copy or paste operation was selected.</param>
		/// <param name="sender">Object that triggered the copy or paste operation.</param>
		/// <summary>Performs the specified Copy or Paste action.</summary>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetContextMenuConfiguration' instead.")]
		[Export ("tableView:performAction:forRowAtIndexPath:withSender:")]
		void PerformAction (UITableView tableView, Selector action, NSIndexPath indexPath, NSObject sender);

		// The 'headerView' parameter can be null, even though the header claims otherwise: https://github.com/dotnet/macios/issues/9814
		/// <param name="tableView">The <see cref="UIKit.UITableView" /> involved.</param>
		/// <param name="headerView">The <see cref="UIKit.UIView" /> that will be used as the header view.</param>
		/// <param name="section">The table section to which the header view belongs.</param>
		/// <summary>Called prior to the display of a header view for a section.</summary>
		/// <remarks>
		///         </remarks>
		[Export ("tableView:willDisplayHeaderView:forSection:")]
		void WillDisplayHeaderView (UITableView tableView, [NullAllowed] UIView headerView, nint section);

		// The 'footerView' parameter can be null, even though the header claims otherwise: https://github.com/dotnet/macios/issues/9814
		/// <param name="tableView">The <see cref="UIKit.UITableView" /> involved.</param>
		/// <param name="footerView">The <see cref="UIKit.UIView" /> that will be used as the footer view.</param>
		/// <param name="section">The table section to which the footer view belongs.</param>
		/// <summary>Called prior to the display of a footer view for a section.</summary>
		/// <remarks>
		///         </remarks>
		[Export ("tableView:willDisplayFooterView:forSection:")]
		void WillDisplayFooterView (UITableView tableView, [NullAllowed] UIView footerView, nint section);

		/// <param name="tableView">The <see cref="UIKit.UITableView" /> being displayed.</param>
		/// <param name="cell">The <see cref="UIKit.UITableViewCell" /> that has just been removed.</param>
		/// <param name="indexPath">The <see cref="Foundation.NSIndexPath" /> specifying the <paramref name="cell" />.</param>
		/// <summary>Indicates that the cell has just been removed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:didEndDisplayingCell:forRowAtIndexPath:")]
		void CellDisplayingEnded (UITableView tableView, UITableViewCell cell, NSIndexPath indexPath);

		/// <param name="tableView">The <see cref="UIKit.UITableView" /> to which the <paramref name="headerView" /> belongs.</param>
		/// <param name="headerView">The <see cref="UIKit.UIView" /> being removed.</param>
		/// <param name="section">An index indicating the section to which the <paramref name="headerView" /> belongs.</param>
		/// <summary>Called when a section header is removed from a table (for instance, due to scrolling).</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:didEndDisplayingHeaderView:forSection:")]
		void HeaderViewDisplayingEnded (UITableView tableView, UIView headerView, nint section);

		/// <param name="tableView">Table to which the footer view belongs.</param>
		/// <param name="footerView">The <see cref="UIKit.UIView" /> being removed.</param>
		/// <param name="section">The index of the section to which the <paramref name="footerView" /> belonged.</param>
		/// <summary>Called when a section footer view is removed from the table (for instance, due to scrolling).</summary>
		/// <remarks>Application developers should use this method rather than trying to monitor the <paramref name="footerView" />'s visibility directly.</remarks>
		[Export ("tableView:didEndDisplayingFooterView:forSection:")]
		void FooterViewDisplayingEnded (UITableView tableView, UIView footerView, nint section);

		/// <param name="tableView">The <see cref="UIKit.UITableView" /> in which the row is located.</param>
		/// <param name="rowIndexPath">The location of the row being highlighted.</param>
		/// <summary>Whether the cell at the specified indexPath should be highlighted.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:shouldHighlightRowAtIndexPath:")]
		bool ShouldHighlightRow (UITableView tableView, NSIndexPath rowIndexPath);

		/// <param name="tableView">The <see cref="UIKit.UITableView" /> containing the row.</param>
		/// <param name="rowIndexPath">Location of the row being highlighted.</param>
		/// <summary>Indicates that the cell at the specified indexPath has been highlighted.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:didHighlightRowAtIndexPath:")]
		void RowHighlighted (UITableView tableView, NSIndexPath rowIndexPath);

		/// <param name="tableView">The <see cref="UIKit.UITableView" /> containing the row.</param>
		/// <param name="rowIndexPath">The row being unhighlighted.</param>
		/// <summary>Indicates that the cell at the specified indexPath has been unhighlighted.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:didUnhighlightRowAtIndexPath:")]
		void RowUnhighlighted (UITableView tableView, NSIndexPath rowIndexPath);

		/// <param name="tableView">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>An estimate of the height for the specified indexPath. Implementations should perform minimal calculation, as it is called repeatedly.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:estimatedHeightForRowAtIndexPath:")]
		nfloat EstimatedHeight (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>The estimated height of the header for the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:estimatedHeightForHeaderInSection:")]
		nfloat EstimatedHeightForHeader (UITableView tableView, nint section);

		/// <param name="tableView">To be added.</param>
		/// <param name="section">To be added.</param>
		/// <summary>The estimated height of the footer for the specified section.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:estimatedHeightForFooterInSection:")]
		nfloat EstimatedHeightForFooter (UITableView tableView, nint section);

		/// <param name="tableView">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Returns an array of row actions to display after the user swipes the row in the <paramref name="tableView" /> table view that is identified by <paramref name="indexPath" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'GetTrailingSwipeActionsConfiguration' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'GetTrailingSwipeActionsConfiguration' instead.")]
		[Export ("tableView:editActionsForRowAtIndexPath:")]
		UITableViewRowAction [] EditActionsForRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Whether the row at the specified <paramref name="indexPath" /> may receive focus.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("tableView:canFocusRowAtIndexPath:")]
		bool CanFocusRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">To be added.</param>
		/// <param name="context">To be added.</param>
		/// <summary>TCalled prior to the <paramref name="tableView" /> either losing or receiving focus. If either focus environment returns <see langword="false" />, the focus update is canceled.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("tableView:shouldUpdateFocusInContext:")]
		bool ShouldUpdateFocus (UITableView tableView, UITableViewFocusUpdateContext context);

		/// <param name="tableView">To be added.</param>
		/// <param name="context">A <see cref="UIKit.UITableViewFocusUpdateContext" /> object containing metadata.</param>
		/// <param name="coordinator">A <see cref="UIKit.UIFocusAnimationCoordinator" /> object containing metadata.</param>
		/// <summary>Indicates that the focus changed as detailed in the <paramref name="context" />.</summary>
		/// <remarks>
		///           <para>The values of <see cref="UIKit.UITableViewFocusUpdateContext.PreviouslyFocusedIndexPath" /> and <see cref="UIKit.UITableViewFocusUpdateContext.NextFocusedIndexPath" /> may be <see langword="null" /> if focus was previously not within, or just departed, the <paramref name="tableView" />.</para>
		///         </remarks>
		[MacCatalyst (13, 1)]
		[Export ("tableView:didUpdateFocusInContext:withAnimationCoordinator:")]
		void DidUpdateFocus (UITableView tableView, UITableViewFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

		/// <param name="tableView">To be added.</param>
		/// <summary>The index path of the table's preferred focus view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("indexPathForPreferredFocusedViewInTableView:")]
		[return: NullAllowed]
		NSIndexPath GetIndexPathForPreferredFocusedView (UITableView tableView);

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("tableView:selectionFollowsFocusForRowAtIndexPath:")]
		bool GetSelectionFollowsFocusForRow (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">The table view for which to get the configuration.</param>
		/// <param name="indexPath">The index path to the row for which to get the configuration.</param>
		/// <summary>Returns the swipe action configuration for swipes that begin from the leading edge.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:")]
		[return: NullAllowed]
		UISwipeActionsConfiguration GetLeadingSwipeActionsConfiguration (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">The table view for which to get the configuration.</param>
		/// <param name="indexPath">The index path to the row for which to get the configuration.</param>
		/// <summary>Returns the swipe action configuration for swipes that begin from the trailing edge.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:")]
		[return: NullAllowed]
		UISwipeActionsConfiguration GetTrailingSwipeActionsConfiguration (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">The table view to query.</param>
		/// <param name="indexPath">The index path to the row to query.</param>
		/// <param name="context">The spring loading context to query.</param>
		/// <summary>Method that is called to indicate whether the identified row should springload in the specified context.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("tableView:shouldSpringLoadRowAtIndexPath:withContext:")]
		bool ShouldSpringLoadRow (UITableView tableView, NSIndexPath indexPath, IUISpringLoadedInteractionContext context);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:shouldBeginMultipleSelectionInteractionAtIndexPath:")]
		bool ShouldBeginMultipleSelectionInteraction (UITableView tableView, NSIndexPath indexPath);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:didBeginMultipleSelectionInteractionAtIndexPath:")]
		void DidBeginMultipleSelectionInteraction (UITableView tableView, NSIndexPath indexPath);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableViewDidEndMultipleSelectionInteraction:")]
		void DidEndMultipleSelectionInteraction (UITableView tableView);

		[TV (17, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:contextMenuConfigurationForRowAtIndexPath:point:")]
		[return: NullAllowed]
		UIContextMenuConfiguration GetContextMenuConfiguration (UITableView tableView, NSIndexPath indexPath, CGPoint point);

		[TV (17, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:previewForHighlightingContextMenuWithConfiguration:")]
		[return: NullAllowed]
		UITargetedPreview GetPreviewForHighlightingContextMenu (UITableView tableView, UIContextMenuConfiguration configuration);

		[TV (17, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:previewForDismissingContextMenuWithConfiguration:")]
		[return: NullAllowed]
		UITargetedPreview GetPreviewForDismissingContextMenu (UITableView tableView, UIContextMenuConfiguration configuration);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("tableView:willPerformPreviewActionForMenuWithConfiguration:animator:")]
		void WillPerformPreviewAction (UITableView tableView, UIContextMenuConfiguration configuration, IUIContextMenuInteractionCommitAnimating animator);

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("tableView:willDisplayContextMenuWithConfiguration:animator:")]
		void WillDisplayContextMenu (UITableView tableView, UIContextMenuConfiguration configuration, [NullAllowed] IUIContextMenuInteractionAnimating animator);

		[TV (17, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("tableView:willEndContextMenuInteractionWithConfiguration:animator:")]
		void WillEndContextMenuInteraction (UITableView tableView, UIContextMenuConfiguration configuration, [NullAllowed] IUIContextMenuInteractionAnimating animator);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("tableView:canPerformPrimaryActionForRowAtIndexPath:")]
		bool CanPerformPrimaryAction (UITableView tableView, NSIndexPath rowIndexPath);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("tableView:performPrimaryActionForRowAtIndexPath:")]
		void PerformPrimaryAction (UITableView tableView, NSIndexPath rowIndexPath);
	}

	[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
	delegate void UITableViewHeaderFooterViewConfigurationUpdateHandler (UITableViewHeaderFooterView headerFooterView, UIViewConfigurationState state);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UITableViewHeaderFooterView : UIAppearance, NSCoding {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("configurationState")]
		UIViewConfigurationState ConfigurationState { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("setNeedsUpdateConfiguration")]
		void SetNeedsUpdateConfiguration ();

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("updateConfigurationUsingState:")]
		void UpdateConfiguration (UIViewConfigurationState state);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("configurationUpdateHandler", ArgumentSemantic.Copy)]
		UITableViewHeaderFooterViewConfigurationUpdateHandler ConfigurationUpdateHandler { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("defaultContentConfiguration")]
		UIListContentConfiguration DefaultContentConfiguration { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("contentConfiguration", ArgumentSemantic.Copy)]
		IUIContentConfiguration ContentConfiguration { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("automaticallyUpdatesContentConfiguration")]
		bool AutomaticallyUpdatesContentConfiguration { get; set; }

		[Deprecated (PlatformName.iOS, 14, 0)]
		[Deprecated (PlatformName.TvOS, 14, 0)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[Export ("textLabel", ArgumentSemantic.Retain)]
		UILabel TextLabel { get; }

		[Deprecated (PlatformName.iOS, 14, 0)]
		[Deprecated (PlatformName.TvOS, 14, 0)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[Export ("detailTextLabel", ArgumentSemantic.Retain)]
		UILabel DetailTextLabel { get; }

		[Export ("contentView", ArgumentSemantic.Retain)]
		UIView ContentView { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("backgroundConfiguration", ArgumentSemantic.Copy)]
		UIBackgroundConfiguration BackgroundConfiguration { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("automaticallyUpdatesBackgroundConfiguration")]
		bool AutomaticallyUpdatesBackgroundConfiguration { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("backgroundView", ArgumentSemantic.Retain)]
		UIView BackgroundView { get; set; }

		[Export ("reuseIdentifier", ArgumentSemantic.Copy)]
		[NullAllowed]
		NSString ReuseIdentifier { get; }

		[DesignatedInitializer]
		[Export ("initWithReuseIdentifier:")]
		NativeHandle Constructor (NSString reuseIdentifier);

		[RequiresSuper]
		[Export ("prepareForReuse")]
		void PrepareForReuse ();

		[TV (16, 0), iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("defaultBackgroundConfiguration")]
		UIBackgroundConfiguration DefaultBackgroundConfiguration { get; }

	}

	/// <summary>Defines behavior when the user swipes horizontally on a row in a table.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewRowAction_class/index.html">Apple documentation for <c>UITableViewRowAction</c></related>
	[NoTV]
	[BaseType (typeof (NSObject))]
	[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'UIContextualAction' and corresponding APIs instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIContextualAction' and corresponding APIs instead.")]
	interface UITableViewRowAction : NSCopying {
		[Export ("style")]
		UITableViewRowActionStyle Style { get; }

		[NullAllowed] // by default this property is null
		[Export ("title")]
		string Title { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("backgroundColor", ArgumentSemantic.Copy)]
		UIColor BackgroundColor { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("backgroundEffect", ArgumentSemantic.Copy)]
		UIVisualEffect BackgroundEffect { get; set; }

		[Static, Export ("rowActionWithStyle:title:handler:")]
		UITableViewRowAction Create (UITableViewRowActionStyle style, [NullAllowed] string title, Action<UITableViewRowAction, NSIndexPath> handler);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIControl), Delegates = new string [] { "WeakDelegate" })]
	// , Events=new Type [] {typeof(UITextFieldDelegate)})] custom logic needed, see https://bugzilla.xamarin.com/show_bug.cgi?id=53174
	interface UITextField : UITextInput, UIContentSizeCategoryAdjusting, UILetterformAwareAdjusting
#if IOS
	, UITextDraggable, UITextDroppable, UITextPasteConfigurationSupporting
#endif // IOS
	{
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("text", ArgumentSemantic.Copy)]
		[NullAllowed]
		string Text { get; set; }

		[Export ("textColor", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIColor TextColor { get; set; }

		[Export ("font", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIFont Font { get; set; }

		[Export ("textAlignment")]
		UITextAlignment TextAlignment { get; set; }

		[Export ("borderStyle")]
		UITextBorderStyle BorderStyle { get; set; }

		[Export ("placeholder", ArgumentSemantic.Copy)]
		[NullAllowed]
		string Placeholder { get; set; }

		[Export ("clearsOnBeginEditing")]
		bool ClearsOnBeginEditing { get; set; }

		[Export ("adjustsFontSizeToFitWidth")]
		bool AdjustsFontSizeToFitWidth { get; set; }

		[Export ("minimumFontSize")]
		nfloat MinimumFontSize { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUITextFieldDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUITextFieldDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUITextFieldDelegate Delegate { get; set; }

		[Export ("background", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIImage Background { get; set; }

		[Export ("disabledBackground", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIImage DisabledBackground { get; set; }

		/// <summary>A value that indicates if the user is editing the text in the view. Read-only.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <see langword="true" /> if the text is being edited, otherwise <see langword="false" />.</remarks>
		[Export ("isEditing")]
		bool IsEditing { get; }

		[Export ("clearButtonMode")]
		UITextFieldViewMode ClearButtonMode { get; set; }

		[Export ("leftView", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView LeftView { get; set; }

		[Export ("rightView", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView RightView { get; set; }

		[Export ("leftViewMode")]
		UITextFieldViewMode LeftViewMode { get; set; }

		[Export ("rightViewMode")]
		UITextFieldViewMode RightViewMode { get; set; }

		[Export ("borderRectForBounds:")]
		CGRect BorderRect (CGRect forBounds);

		[Export ("textRectForBounds:")]
		CGRect TextRect (CGRect forBounds);

		[Export ("placeholderRectForBounds:")]
		CGRect PlaceholderRect (CGRect forBounds);

		[Export ("editingRectForBounds:")]
		CGRect EditingRect (CGRect forBounds);

		[Export ("clearButtonRectForBounds:")]
		CGRect ClearButtonRect (CGRect forBounds);

		[Export ("leftViewRectForBounds:")]
		CGRect LeftViewRect (CGRect forBounds);

		[Export ("rightViewRectForBounds:")]
		CGRect RightViewRect (CGRect forBounds);

		[Deprecated (PlatformName.iOS, 15, 0, message: "No longer used.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "No longer used.")]
		[Deprecated (PlatformName.TvOS, 15, 0, message: "No longer used.")]
		[Export ("drawTextInRect:")]
		void DrawText (CGRect rect);

		[Export ("drawPlaceholderInRect:")]
		void DrawPlaceholder (CGRect rect);

		// 3.2
		[Export ("inputAccessoryView", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView InputAccessoryView { get; set; }

		[Export ("inputView", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView InputView { get; set; }

		/// <include file="../docs/api/UIKit/UITextField.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITextField.TextDidBeginEditingNotification']/*" />
		[Field ("UITextFieldTextDidBeginEditingNotification")]
		[Notification]
		NSString TextDidBeginEditingNotification { get; }

		/// <include file="../docs/api/UIKit/UITextField.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITextField.TextDidEndEditingNotification']/*" />
		[Field ("UITextFieldTextDidEndEditingNotification")]
		[Notification]
		NSString TextDidEndEditingNotification { get; }

		/// <include file="../docs/api/UIKit/UITextField.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITextField.TextFieldTextDidChangeNotification']/*" />
		[Field ("UITextFieldTextDidChangeNotification")]
		[Notification]
		NSString TextFieldTextDidChangeNotification { get; }

		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UITextFieldDidEndEditingReasonKey")]
		NSString DidEndEditingReasonKey { get; }

		//
		// 6.0
		//

		[NullAllowed] // by default this property is null (on 6.0, not later)
		[Export ("attributedText", ArgumentSemantic.Copy)]
		NSAttributedString AttributedText { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("attributedPlaceholder", ArgumentSemantic.Copy)]
		NSAttributedString AttributedPlaceholder { get; set; }

		[Export ("allowsEditingTextAttributes")]
		bool AllowsEditingTextAttributes { get; set; }

		[Export ("clearsOnInsertion")]
		bool ClearsOnInsertion { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("typingAttributes", ArgumentSemantic.Copy)]
		NSDictionary TypingAttributes { get; set; }

		[Export ("defaultTextAttributes", ArgumentSemantic.Copy), NullAllowed]
		NSDictionary WeakDefaultTextAttributes { get; set; }

		// Category UITextField (UIInteractionStateRestorable)

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("interactionState", ArgumentSemantic.Copy)]
		NSObject InteractionState { get; set; }
	}

	interface IUITextFieldDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITextFieldDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITextFieldDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITextFieldDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITextFieldDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UITextFieldDelegate {

		/// <param name="textField">To be added.</param>
		/// <summary>Whether editing should begin in the specified text field.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textFieldShouldBeginEditing:"), DelegateName ("UITextFieldCondition"), DefaultValue (true)]
		bool ShouldBeginEditing (UITextField textField);

		/// <param name="textField">To be added.</param>
		/// <summary>Indicates that editing has begun on the specified text field.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textFieldDidBeginEditing:"), EventArgs ("UITextField"), EventName ("Started")]
		void EditingStarted (UITextField textField);

		/// <param name="textField">To be added.</param>
		/// <summary>Whether editing should stop in the specified text field.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textFieldShouldEndEditing:"), DelegateName ("UITextFieldCondition"), DefaultValue (true)]
		bool ShouldEndEditing (UITextField textField);

		/// <param name="textField">The text field for which editing ended.</param>
		/// <summary>Indicates that editing has ended in the specified text field.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textFieldDidEndEditing:"), EventArgs ("UITextField"), EventName ("Ended")]
		void EditingEnded (UITextField textField);

		/// <param name="textField">The text field for which editing ended.</param>
		/// <param name="reason">The reason that editing ended.</param>
		/// <summary>Indicates that editing has ended in the specified text field for the specified reason.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("textFieldDidEndEditing:reason:"), EventArgs ("UITextFieldEditingEnded"), EventName ("EndedWithReason")]
		void EditingEnded (UITextField textField, UITextFieldDidEndEditingReason reason);

		/// <param name="textField">To be added.</param>
		/// <summary>Whether the specified text field's current contents should be removed.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textFieldShouldClear:"), DelegateName ("UITextFieldCondition"), DefaultValue ("true")]
		bool ShouldClear (UITextField textField);

		/// <param name="textField">To be added.</param>
		/// <summary>Whether the text field should process the pressing of the return button.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textFieldShouldReturn:"), DelegateName ("UITextFieldCondition"), DefaultValue ("true")]
		bool ShouldReturn (UITextField textField);

		/// <param name="textField">To be added.</param>
		/// <param name="range">To be added.</param>
		/// <param name="replacementString">To be added.</param>
		/// <summary>Whether the specified text should be changed.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textField:shouldChangeCharactersInRange:replacementString:"), DelegateName ("UITextFieldChange"), DefaultValue ("true")]
		bool ShouldChangeCharacters (UITextField textField, NSRange range, string replacementString);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("textFieldDidChangeSelection:")]
		void DidChangeSelection (UITextField textField);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("textField:willPresentEditMenuWithAnimator:")]
		void WillPresentEditMenu (UITextField textField, IUIEditMenuInteractionAnimating animator);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("textField:willDismissEditMenuWithAnimator:")]
		void WillDismissEditMenu (UITextField textField, IUIEditMenuInteractionAnimating animator);

		[IgnoredInDelegate]
		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("textField:editMenuForCharactersInRange:suggestedActions:")]
		[return: NullAllowed]
		UIMenu GetEditMenu (UITextField textField, NSRange range, UIMenuElement [] suggestedActions);

		[NoTV, NoMacCatalyst, iOS (18, 4)]
		[Export ("textField:insertInputSuggestion:"), EventArgs ("UITextFieldInsertInputSuggestion")]
		void InsertInputSuggestion (UITextField textField, UIInputSuggestion inputSuggestion);

		// Any new APIs here must be manually implemented as events in UITextField.cs
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIScrollView), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UITextViewDelegate) })]
	interface UITextView : UITextInput, NSCoding, UIContentSizeCategoryAdjusting, UILetterformAwareAdjusting
#if IOS
	, UITextDraggable, UITextDroppable, UITextPasteConfigurationSupporting
#endif // IOS
	{
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("text", ArgumentSemantic.Copy)]
		[NullAllowed]
		string Text { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("font", ArgumentSemantic.Retain)]
		UIFont Font { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("textColor", ArgumentSemantic.Retain)]
		UIColor TextColor { get; set; }

		/// <summary>This property determines if the text view is editable or not.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		///         <altmember cref="UIKit.UITextView.AllowsEditingTextAttributes" />
		///         <altmember cref="UIKit.UITextView.AttributedText" />
		///         <altmember cref="UIKit.UITextView.DataDetectorTypes" />
		///         <altmember cref="UIKit.UITextView.Font" />
		///         <altmember cref="UIKit.UITextView.Text" />
		///         <altmember cref="UIKit.UITextView.TextAlignment" />
		///         <altmember cref="UIKit.UITextView.TextContainerInsert" />
		///         <altmember cref="UIKit.UITextView.TextColor" />
		///         <altmember cref="UIKit.UITextView.TypingAttributes" />
		[Export ("editable")]
		[NoTV]
		[MacCatalyst (13, 1)]
		new bool Editable { [Bind ("isEditable")] get; set; }

		[Export ("textAlignment")]
		UITextAlignment TextAlignment { get; set; }

		[Export ("selectedRange")]
		NSRange SelectedRange { get; set; }

		[Export ("scrollRangeToVisible:")]
		void ScrollRangeToVisible (NSRange range);

		/// <summary>An instance of the UIKit.IUITextViewDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUITextViewDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		[New]
		IUITextViewDelegate Delegate { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[New]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		[Export ("dataDetectorTypes")]
		[NoTV]
		[MacCatalyst (13, 1)]
		UIDataDetectorType DataDetectorTypes { get; set; }

		// 3.2

		[NullAllowed] // by default this property is null
		[Export ("inputAccessoryView", ArgumentSemantic.Retain)]
		UIView InputAccessoryView { get; set; }


		[Export ("inputView", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView InputView { get; set; }

		/// <include file="../docs/api/UIKit/UITextView.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITextView.TextDidBeginEditingNotification']/*" />
		[Field ("UITextViewTextDidBeginEditingNotification")]
		[Notification]
		NSString TextDidBeginEditingNotification { get; }

		/// <include file="../docs/api/UIKit/UITextView.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITextView.TextDidChangeNotification']/*" />
		[Field ("UITextViewTextDidChangeNotification")]
		[Notification]
		NSString TextDidChangeNotification { get; }

		/// <include file="../docs/api/UIKit/UITextView.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITextView.TextDidEndEditingNotification']/*" />
		[Field ("UITextViewTextDidEndEditingNotification")]
		[Notification]
		NSString TextDidEndEditingNotification { get; }

		//
		// 6.0
		//

		[Export ("allowsEditingTextAttributes")]
		bool AllowsEditingTextAttributes { get; set; }

		[Export ("attributedText", ArgumentSemantic.Copy)]
		NSAttributedString AttributedText { get; set; }

		[Export ("clearsOnInsertion")]
		bool ClearsOnInsertion { get; set; }

#if !XAMCORE_5_0
		[EditorBrowsable (EditorBrowsableState.Never)]
		[Obsolete ("Use 'TypingAttributes2' instead, because this property will return null instead of an empty dictionary.")]
#endif
		[NullAllowed] // by default this property is null
		[Export ("typingAttributes", ArgumentSemantic.Copy)]
		NSDictionary TypingAttributes {
#if !XAMCORE_5_0
			// this avoids a crash (see unit tests) and behave like UITextField does (return null)
			// however, it's un-intuitive and causes other problems (https://github.com/dotnet/macios/issues/12709), so remove it the next time we can make a breaking change.
			[PreSnippet ("if (SelectedRange.Length == 0) return null;", Optimizable = true)]
#endif
			get;
			set;
		}

#if !XAMCORE_6_0
		[NullAllowed] // by default this property is null
		[Export ("typingAttributes", ArgumentSemantic.Copy)]
#if XAMCORE_5_0
		[Obsolete ("Use 'TypingAttributes' instead.")
		[EditorBrowsable (EditorBrowsableState.Never)]
#endif
		[Sealed]
		NSDictionary TypingAttributes2 {
			get;
			set;
		}
#endif // XAMCORE_6_0

		/// <summary>Whether the application user can select content and interact with links and text attachments.</summary>
		///         <value>The default value is <see langword="true" />.</value>
		///         <remarks>To be added.</remarks>
		///         <altmember cref="UIKit.UITextView.ClearsOnInsertion" />
		///         <altmember cref="UIKit.UITextView.ScrollRangeToVisible" />
		///         <altmember cref="UIKit.UITextView.SelectedRange" />
		[Export ("selectable")]
		bool Selectable { [Bind ("isSelectable")] get; set; }

		[DesignatedInitializer]
		[Export ("initWithFrame:textContainer:")]
		[PostGet ("TextContainer")]
		NativeHandle Constructor (CGRect frame, [NullAllowed] NSTextContainer textContainer);

		[Export ("textContainer", ArgumentSemantic.Copy)]
		NSTextContainer TextContainer { get; }

		[Export ("textContainerInset", ArgumentSemantic.Assign)]
		UIEdgeInsets TextContainerInset { get; set; }

		[Export ("layoutManager", ArgumentSemantic.Copy)]
		NSLayoutManager LayoutManager { get; }

		[Export ("textStorage", ArgumentSemantic.Retain)]
		NSTextStorage TextStorage { get; }

		[Export ("linkTextAttributes", ArgumentSemantic.Copy)]
		NSDictionary WeakLinkTextAttributes { get; set; }

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("usesStandardTextScaling")]
		bool UsesStandardTextScaling { get; set; }

		// Category UITextView (UIInteractionStateRestorable)

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("interactionState", ArgumentSemantic.Copy)]
		NSObject InteractionState { get; set; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[NullAllowed, Export ("textLayoutManager")]
		NSTextLayoutManager TextLayoutManager { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("findInteraction")]
		[NullAllowed]
		UIFindInteraction FindInteraction { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("findInteractionEnabled")]
		bool FindInteractionEnabled { [Bind ("isFindInteractionEnabled")] get; set; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("textViewUsingTextLayoutManager:")]
		UITextView GetTextView (bool usingTextLayoutManager);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("borderStyle", ArgumentSemantic.Assign)]
		UITextViewBorderStyle BorderStyle { get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("textHighlightAttributes", ArgumentSemantic.Copy), NullAllowed]
		NSDictionary<NSString, NSObject> TextHighlightAttributes { get; set; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("drawTextHighlightBackgroundForTextRange:origin:")]
		void DrawTextHighlightBackground (NSTextRange textRange, CGPoint origin);

		[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("writingToolsActive")]
		bool WritingToolsActive { [Bind ("isWritingToolsActive")] get; }

		[NoTV, MacCatalyst (18, 0), iOS (18, 0)]
		[Export ("writingToolsBehavior", ArgumentSemantic.Assign)]
		new UIWritingToolsBehavior WritingToolsBehavior { get; set; }

		[NoTV, Mac (15, 0), iOS (18, 0)]
		[Export ("allowedWritingToolsResultOptions", ArgumentSemantic.Assign)]
		new UIWritingToolsResultOptions AllowedWritingToolsResultOptions { get; set; }

		[NoTV, NoMacCatalyst, iOS (18, 0)]
		[Export ("textFormattingConfiguration", ArgumentSemantic.Copy), NullAllowed]
		UITextFormattingViewControllerConfiguration TextFormattingConfiguration { get; set; }

		[NoTV, MacCatalyst (18, 2), iOS (18, 2)]
		[Export ("writingToolsCoordinator")]
		UIWritingToolsCoordinator WritingToolsCoordinator { get; }

		[NoTV, MacCatalyst (18, 4), iOS (18, 4)]
		[Export ("subclassForWritingToolsCoordinator")]
		Class SubclassForWritingToolsCoordinator { get; }
	}

	interface IUITextViewDelegate { }

	/// <summary>A class used to receive notifications from a UITextView control.</summary>
	/// <remarks>
	/// 
	/// A strongly typed implementation of a class that can be used to respond to events raised by the <see cref="UIKit.UITextView" />.</remarks>
	/// <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextViewDelegate_Protocol/index.html">Apple documentation for <c>UITextViewDelegate</c></related>
	[BaseType (typeof (UIScrollViewDelegate))]
	[NoMac]
	[MacCatalyst (13, 1)]
	[Model]
	[Protocol]
	interface UITextViewDelegate {

		/// <param name="textView">To be added.</param>
		/// <summary>Whether editing should begin in the specified UITextView.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>The delegate value, usually an anonymous method, a method or a lambda function.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("textViewShouldBeginEditing:"), DelegateName ("UITextViewCondition"), DefaultValue ("true")]
		bool ShouldBeginEditing (UITextView textView);

		/// <param name="textView">To be added.</param>
		/// <summary>Whether editing should end in the specified UITextView.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>The delegate value, usually an anonymous method, a method or a lambda function.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("textViewShouldEndEditing:"), DelegateName ("UITextViewCondition"), DefaultValue ("true")]
		bool ShouldEndEditing (UITextView textView);

		/// <param name="textView">To be added.</param>
		/// <summary>Indicates editing has begun in the specified UITextView.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textViewDidBeginEditing:"), EventArgs ("UITextView", XmlDocs = """
			<summary>Raised when editing has started on this UITextView.</summary>
			<remarks>To be added.</remarks>
			"""), EventName ("Started")]
		void EditingStarted (UITextView textView);

		/// <param name="textView">To be added.</param>
		/// <summary>Indicates that editing has ended in the specified UITextView.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textViewDidEndEditing:"), EventArgs ("UITextView", XmlDocs = """
			<summary>Raised when editing has finished in this UITextView.</summary>
			<remarks>To be added.</remarks>
			"""), EventName ("Ended")]
		void EditingEnded (UITextView textView);

		/// <param name="textView">To be added.</param>
		/// <param name="range">To be added.</param>
		/// <param name="text">To be added.</param>
		/// <summary>Whether the specified text should be replaced in the UITextView.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>The delegate value, usually an anonymous method, a method or a lambda function.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("textView:shouldChangeTextInRange:replacementText:"), DelegateName ("UITextViewChange"), DefaultValue ("true")]
		bool ShouldChangeText (UITextView textView, NSRange range, string text);

		/// <param name="textView">To be added.</param>
		/// <summary>Indicates the text or text attributes in the specified UITextView were changed by the app user.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textViewDidChange:"), EventArgs ("UITextView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Changed (UITextView textView);

		/// <param name="textView">To be added.</param>
		/// <summary>Indicates the text selection has changed in the specified UITextView.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textViewDidChangeSelection:"), EventArgs ("UITextView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void SelectionChanged (UITextView textView);

		/// <param name="textView">To be added.</param>
		/// <param name="URL">To be added.</param>
		/// <param name="characterRange">To be added.</param>
		/// <summary>Whether the specified UITextView should allow user interaction with the specified URL in the given range of text.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>
			        </value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use the 'ShouldInteractWithUrl' overload that takes 'UITextItemInteraction' instead.")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use the 'ShouldInteractWithUrl' overload that takes 'UITextItemInteraction' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use the 'ShouldInteractWithUrl' overload that takes 'UITextItemInteraction' instead.")]
		[Export ("textView:shouldInteractWithURL:inRange:"), DelegateName ("Func<UITextView,NSUrl,NSRange,bool>"), DefaultValue ("true")]
#if XAMCORE_5_0
		bool ShouldInteractWithUrl (UITextView textView, NSUrl url, NSRange characterRange);
#else
		bool ShouldInteractWithUrl (UITextView textView, NSUrl URL, NSRange characterRange);
#endif

		/// <param name="textView">To be added.</param>
		/// <param name="textAttachment">To be added.</param>
		/// <param name="characterRange">To be added.</param>
		/// <summary>Developers should not use this deprecated method. Developers should use the 'ShouldInteractWithTextAttachment' overload that takes 'UITextItemInteraction' instead.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>
			        </value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use the 'ShouldInteractWithTextAttachment' overload that takes 'UITextItemInteraction' instead.")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use the 'ShouldInteractWithTextAttachment' overload that takes 'UITextItemInteraction' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use the 'ShouldInteractWithTextAttachment' overload that takes 'UITextItemInteraction' instead.")]
		[Export ("textView:shouldInteractWithTextAttachment:inRange:"), DelegateName ("Func<UITextView,NSTextAttachment,NSRange,bool>"), DefaultValue ("true")]
		bool ShouldInteractWithTextAttachment (UITextView textView, NSTextAttachment textAttachment, NSRange characterRange);

		/// <param name="textView">The text view that has the attachment.</param>
		/// <param name="url">To be added.</param>
		/// <param name="characterRange">The character range of the URL in the text view.</param>
		/// <param name="interaction">The interaction type to check.</param>
		/// <summary>Whether the specified UITextView should allow user interaction with the specified URL in the given range of text.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Gets or sets the delegate for determining whether the text view should interact with specific URLs.</summary>
			<value>To be added.</value>
			<remarks>To be added.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use the 'ShouldInteractWithTextAttachment' overload that takes 'UITextItemInteraction' instead.")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use the 'ShouldInteractWithTextAttachment' overload that takes 'UITextItemInteraction' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use the 'ShouldInteractWithTextAttachment' overload that takes 'UITextItemInteraction' instead.")]
		[MacCatalyst (13, 1)]
		[Export ("textView:shouldInteractWithURL:inRange:interaction:"), DelegateApiName ("AllowUrlInteraction"), DelegateName ("UITextViewDelegateShouldInteractUrlDelegate"), DefaultValue ("true")]
		bool ShouldInteractWithUrl (UITextView textView, NSUrl url, NSRange characterRange, UITextItemInteraction interaction);

		/// <param name="textView">The text view that has the attachment.</param>
		/// <param name="textAttachment">The attachment.</param>
		/// <param name="characterRange">The character range where the attachment is attached.</param>
		/// <param name="interaction">The interaction type to check.</param>
		/// <summary>Whether the specified UITextView should allow user interaction with the specified URL in the given range of text.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Gets or sets the delegate for determining whether the text view should interact with specific text attachments.</summary>
			<value>To be added.</value>
			<remarks>To be added.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 17, 0, message: "Replaced by 'GetPrimaryAction' and 'GetMenuConfiguration'.")]
		[Deprecated (PlatformName.TvOS, 17, 0, message: "Replaced by 'GetPrimaryAction' and 'GetMenuConfiguration'.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Replaced by 'GetPrimaryAction' and 'GetMenuConfiguration'.")]
		[MacCatalyst (13, 1)]
		[Export ("textView:shouldInteractWithTextAttachment:inRange:interaction:"), DelegateApiName ("AllowTextAttachmentInteraction"), DelegateName ("UITextViewDelegateShouldInteractTextDelegate"), DefaultValue ("true")]
		bool ShouldInteractWithTextAttachment (UITextView textView, NSTextAttachment textAttachment, NSRange characterRange, UITextItemInteraction interaction);

		[IgnoredInDelegate]
		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("textView:editMenuForTextInRange:suggestedActions:")]
		[return: NullAllowed]
		UIMenu GetEditMenuForText (UITextView textView, NSRange range, UIMenuElement [] suggestedActions);

		[IgnoredInDelegate]
		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("textView:willPresentEditMenuWithAnimator:")]
		void WillPresentEditMenu (UITextView textView, IUIEditMenuInteractionAnimating animator);

		[IgnoredInDelegate]
		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("textView:willDismissEditMenuWithAnimator:")]
		void WillDismissEditMenu (UITextView textView, IUIEditMenuInteractionAnimating aniamtor);

		[IgnoredInDelegate]
		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("textView:primaryActionForTextItem:defaultAction:")]
		[return: NullAllowed]
		UIAction GetPrimaryAction (UITextView textView, UITextItem textItem, UIAction defaultAction);

		[IgnoredInDelegate]
		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("textView:menuConfigurationForTextItem:defaultMenu:")]
		[return: NullAllowed]
		UITextItemMenuConfiguration GetMenuConfiguration (UITextView textView, UITextItem textItem, UIMenu defaultMenu);

		[IgnoredInDelegate]
		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("textView:textItemMenuWillDisplayForTextItem:animator:")]
		void WillDisplay (UITextView textView, UITextItem textItem, IUIContextMenuInteractionAnimating animator);

		[IgnoredInDelegate]
		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("textView:textItemMenuWillEndForTextItem:animator:")]
		void WillEnd (UITextView textView, UITextItem textItem, IUIContextMenuInteractionAnimating animator);

		[iOS (18, 0), MacCatalyst (18, 0), NoTV]
		[Export ("textViewWritingToolsWillBegin:"), EventArgs ("UITextView")]
		void WritingToolsWillBegin (UITextView textView);

		[iOS (18, 0), MacCatalyst (18, 0), NoTV]
		[Export ("textViewWritingToolsDidEnd:"), EventArgs ("UITextView")]
		void WritingToolsDidEnd (UITextView textView);

		[iOS (18, 0), MacCatalyst (18, 0), NoTV]
		[Export ("textView:writingToolsIgnoredRangesInEnclosingRange:"), DelegateName ("UITextViewRange"), NoDefaultValue]
		// Can't use BindAs in a protocol [return: BindAs (typeof (NSRange[]))]
		NSValue [] GetWritingToolsIgnoredRangesInEnclosingRange (UITextView textView, NSRange enclosingRange);

		[NoTV, NoMacCatalyst, iOS (18, 0)]
		[Export ("textView:willBeginFormattingWithViewController:"), EventArgs ("UITextViewTextFormattingViewController")]
		void WillBeginFormatting (UITextView textView, UITextFormattingViewController viewController);

		[NoTV, NoMacCatalyst, iOS (18, 0)]
		[Export ("textView:didBeginFormattingWithViewController:"), EventArgs ("UITextViewTextFormattingViewController")]
		void DidBeginFormatting (UITextView textView, UITextFormattingViewController viewController);

		[NoTV, NoMacCatalyst, iOS (18, 0)]
		[Export ("textView:willEndFormattingWithViewController:"), EventArgs ("UITextViewTextFormattingViewController")]
		void WillEndFormatting (UITextView textView, UITextFormattingViewController viewController);

		[NoTV, NoMacCatalyst, iOS (18, 0)]
		[Export ("textView:didEndFormattingWithViewController:"), EventArgs ("UITextViewTextFormattingViewController")]
		void DidEndFormatting (UITextView textView, UITextFormattingViewController viewController);

		[IgnoredInDelegate]
		[NoTV, NoMacCatalyst, iOS (18, 4)]
		[Export ("textView:insertInputSuggestion:")]
		void InsertInputSuggestion (UITextView textView, UIInputSuggestion inputSuggestion);
	}

	/// <include file="../docs/api/UIKit/UIToolbar.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIToolbar']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UIToolbar : UIBarPositioning {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Appearance]
		[Export ("barStyle")]
		UIBarStyle BarStyle { get; set; }

		[Export ("items", ArgumentSemantic.Copy)]
		[NullAllowed]
		UIBarButtonItem [] Items { get; set; }

		/// <summary>If <see langword="true" />, then the toolbar is translucent.</summary>
		///         <value>
		///         </value>
		///         <remarks>Translucency is primarily intended for landscape orientation.</remarks>
		[Appearance]
		[Export ("translucent", ArgumentSemantic.Assign)]
		bool Translucent { [Bind ("isTranslucent")] get; set; }

		// done manually so we can keep this "in sync" with 'Items' property
		//[Export ("setItems:animated:")][PostGet ("Items")]
		//void SetItems (UIBarButtonItem [] items, bool animated);

		/// <param name="backgroundImage">To be added.</param>
		/// <param name="position">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>Sets the background image for the <paramref name="position" /> and <paramref name="barMetrics" />.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("setBackgroundImage:forToolbarPosition:barMetrics:")]
		[Appearance]
		void SetBackgroundImage ([NullAllowed] UIImage backgroundImage, UIToolbarPosition position, UIBarMetrics barMetrics);

		/// <param name="position">To be added.</param>
		/// <param name="barMetrics">To be added.</param>
		/// <summary>The UIImage used for the background for the given <paramref name="position" /> and <paramref name="barMetrics" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundImageForToolbarPosition:barMetrics:")]
		[Appearance]
		UIImage GetBackgroundImage (UIToolbarPosition position, UIBarMetrics barMetrics);

		/// <param name="shadowImage">To be added.</param>
		/// <param name="topOrBottom">To be added.</param>
		/// <summary>Specifies the shadow image for the specified <see cref="UIKit.UIToolbarPosition" />.</summary>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("setShadowImage:forToolbarPosition:")]
		void SetShadowImage ([NullAllowed] UIImage shadowImage, UIToolbarPosition topOrBottom);

		/// <param name="topOrBottom">To be added.</param>
		/// <summary>The image used for the shadow for the specified <see cref="UIKit.UIToolbarPosition" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("shadowImageForToolbarPosition:")]
		UIImage GetShadowImage (UIToolbarPosition topOrBottom);

		/// <summary>The tint applied to the UIToolbar background.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[NullAllowed]
		[Export ("barTintColor", ArgumentSemantic.Retain)]
		UIColor BarTintColor { get; set; }

		[Export ("delegate", ArgumentSemantic.Weak), NullAllowed]
		NSObject WeakDelegate { get; set; }

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Appearance]
		[Export ("standardAppearance", ArgumentSemantic.Copy)]
		UIToolbarAppearance StandardAppearance { get; set; }

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Appearance]
		[NullAllowed, Export ("compactAppearance", ArgumentSemantic.Copy)]
		UIToolbarAppearance CompactAppearance { get; set; }

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Appearance]
		[NullAllowed, Export ("scrollEdgeAppearance", ArgumentSemantic.Copy)]
		UIToolbarAppearance ScrollEdgeAppearance { get; set; }

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Appearance]
		[NullAllowed, Export ("compactScrollEdgeAppearance", ArgumentSemantic.Copy)]
		UIToolbarAppearance CompactScrollEdgeAppearance { get; set; }

		/// <summary>An instance of the UIKit.IUIToolbarDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIToolbarDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIToolbarDelegate Delegate { get; set; }
	}

	interface IUITimingCurveProvider { }

	/// <summary>Interface defining the required methods for the <see cref="UIKit.IUITimingCurveProvider" /> protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITimingCurveProvider : NSCoding, NSCopying {
		/// <summary>The kind of timing curve this is (see <see cref="UIKit.UITimingCurveType" />).</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("timingCurveType")]
		UITimingCurveType TimingCurveType { get; }

		/// <summary>For <see cref="UIKit.UICubicTimingParameters" /> objects, the timing parameters. Otherwise, <see langword="null" />.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("cubicTimingParameters")]
		UICubicTimingParameters CubicTimingParameters { get; }

		/// <summary>For <see cref="UIKit.UISpringTimingParameters" /> objects, the timing parameters. Otherwise, <see langword="null" />.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("springTimingParameters")]
		UISpringTimingParameters SpringTimingParameters { get; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIToolbarDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIToolbarDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIToolbarDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIToolbarDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIToolbarDelegate { }

	/// <summary>A delegate object for <see cref="UIKit.UIToolbar" />s that exposes an event relating to bar position.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIToolbarDelegate_protocol/index.html">Apple documentation for <c>UIToolbarDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIBarPositioningDelegate))]
	[Model]
	[Protocol]
	interface UIToolbarDelegate {
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITouch {
		[Export ("locationInView:")]
		CGPoint LocationInView ([NullAllowed] UIView view);

		[Export ("previousLocationInView:")]
		CGPoint PreviousLocationInView ([NullAllowed] UIView view);

		[Export ("view", ArgumentSemantic.Retain)]
		UIView View { get; }

		[Export ("window", ArgumentSemantic.Retain)]
		[Transient]
		UIWindow Window { get; }

		[Export ("tapCount")]
		nint TapCount { get; }

		[Export ("timestamp")]
		double Timestamp { get; }

		[Export ("phase")]
		UITouchPhase Phase { get; }

		// 3.2
		[Export ("gestureRecognizers", ArgumentSemantic.Copy)]
		UIGestureRecognizer [] GestureRecognizers { get; }

		[MacCatalyst (13, 1)]
		[Export ("majorRadius")]
		nfloat MajorRadius { get; }

		[MacCatalyst (13, 1)]
		[Export ("majorRadiusTolerance")]
		nfloat MajorRadiusTolerance { get; }

		[MacCatalyst (13, 1)]
		[Export ("force")]
		nfloat Force { get; }

		[MacCatalyst (13, 1)]
		[Export ("maximumPossibleForce")]
		nfloat MaximumPossibleForce { get; }

		[MacCatalyst (13, 1)]
		[Export ("type")]
		UITouchType Type { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("preciseLocationInView:")]
		CGPoint GetPreciseLocation ([NullAllowed] UIView view);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("precisePreviousLocationInView:")]
		CGPoint GetPrecisePreviousLocation ([NullAllowed] UIView view);

		[NoTV] // stylus only, header unclear but not part of web documentation for tvOS
		[MacCatalyst (13, 1)]
		[Export ("azimuthAngleInView:")]
		nfloat GetAzimuthAngle ([NullAllowed] UIView view);

		[NoTV] // stylus only, header unclear but not part of web documentation for tvOS
		[MacCatalyst (13, 1)]
		[Export ("azimuthUnitVectorInView:")]
		CGVector GetAzimuthUnitVector ([NullAllowed] UIView view);

		[NoTV] // stylus only, header unclear but not part of web documentation for tvOS
		[MacCatalyst (13, 1)]
		[Export ("altitudeAngle")]
		nfloat AltitudeAngle { get; }

		[NoTV] // header unclear but not part of web documentation for tvOS
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("estimationUpdateIndex")]
		NSNumber EstimationUpdateIndex { get; }

		[NoTV] // header unclear but not part of web documentation for tvOS
		[MacCatalyst (13, 1)]
		[Export ("estimatedProperties")]
		UITouchProperties EstimatedProperties { get; }

		[NoTV] // header unclear but not part of web documentation for tvOS
		[MacCatalyst (13, 1)]
		[Export ("estimatedPropertiesExpectingUpdates")]
		UITouchProperties EstimatedPropertiesExpectingUpdates { get; }

		[NoTV, iOS (17, 5), MacCatalyst (17, 5)]
		[Export ("rollAngle")]
		nfloat RollAngle { get; }
	}

	/// <summary>A Video Editor Controller.</summary>
	///     <remarks>
	///       <para>Application developers must assign to the <see cref="UIKit.UIVideoEditorController.VideoPath" /> property prior to displaying the <see cref="UIKit.UIVideoEditorController" />.</para>
	///     </remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIVideoEditorController_ClassReference/index.html">Apple documentation for <c>UIVideoEditorController</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UINavigationController), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIVideoEditorControllerDelegate) })]
	interface UIVideoEditorController {
		[Export ("canEditVideoAtPath:")]
		[Static]
		bool CanEditVideoAtPath (string path);

		/// <summary>An instance of the UIKit.IUIVideoEditorControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIVideoEditorControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		// id<UINavigationControllerDelegate, UIVideoEditorControllerDelegate>
		IUIVideoEditorControllerDelegate Delegate { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		[Export ("videoPath", ArgumentSemantic.Copy)]
		string VideoPath { get; set; }

		[Export ("videoMaximumDuration")]
		double VideoMaximumDuration { get; set; }

		[Export ("videoQuality")]
		UIImagePickerControllerQualityType VideoQuality { get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIVideoEditorControllerDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIVideoEditorControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIVideoEditorControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIVideoEditorControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIVideoEditorControllerDelegate { }

	// id<UINavigationControllerDelegate, UIVideoEditorControllerDelegate>
	/// <summary>Callbacks for the UIVideoEditorController.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIVideoEditorControllerDelegate_ProtocolReference/index.html">Apple documentation for <c>UIVideoEditorControllerDelegate</c></related>
	[BaseType (typeof (UINavigationControllerDelegate))]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Model]
	[Protocol]
	interface UIVideoEditorControllerDelegate {
		/// <param name="editor">To be added.</param>
		/// <param name="editedVideoPath">To be added.</param>
		/// <summary>Called after the movie was successfully saved.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("videoEditorController:didSaveEditedVideoToPath:"), EventArgs ("UIPath", XmlDocs = """
			<summary>Event raised when the video is saved.</summary>
			<remarks>To be added.</remarks>
			"""), EventName ("Saved")]
		void VideoSaved (UIVideoEditorController editor, [EventName ("path")] string editedVideoPath);

		/// <param name="editor">To be added.</param>
		/// <param name="error">To be added.</param>
		/// <summary>Called when the UIVideoEditorController failed to load or save a movie.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("videoEditorController:didFailWithError:"), EventArgs ("NSError", true, XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void Failed (UIVideoEditorController editor, NSError error);

		/// <param name="editor">To be added.</param>
		/// <summary>Indicates that the app user cancelled the movie editing.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("videoEditorControllerDidCancel:")]
		void UserCancelled (UIVideoEditorController editor);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIResponder))]
	interface UIView : UIAppearance, UIAppearanceContainer, UIAccessibility, UIDynamicItem, NSCoding, UIAccessibilityIdentification, UITraitEnvironment, UICoordinateSpace, UIFocusItem, UIFocusItemContainer
		, UITraitChangeObservable
#if !TVOS
		, UILargeContentViewerItem, UIPopoverPresentationControllerSourceItem
#endif
		, CALayerDelegate {
		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("addSubview:")]
		[PostGet ("Subviews")]
		void AddSubview (UIView view);

		[ThreadSafe, Export ("drawRect:")]
		void Draw (CGRect rect);

		/// <summary>The color used for the background.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("backgroundColor", ArgumentSemantic.Retain)]
		[Appearance]
		[NullAllowed]
		UIColor BackgroundColor { get; set; }

		[ThreadSafe]
		[Export ("bounds")]
		new CGRect Bounds { get; set; }

		/// <summary>Determines whether input events are processed by this view.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <para>
		///             This property is used to control whether input events are
		///             delivered to the view.  By default all views receive
		///             events.  
		///
		///           </para>
		///           <para>
		///             During animations, UIKit will disable event delivery to
		///             your view unless you pass the <see cref="UIKit.UIViewAnimationOptions" />.AllowUserInteraction
		///             flag to your animation function.
		///
		///           </para>
		///         </remarks>
		[Export ("userInteractionEnabled")]
		bool UserInteractionEnabled { [Bind ("isUserInteractionEnabled")] get; set; }

		[Export ("tag")]
		nint Tag { get; set; }

		[ThreadSafe]
		[Export ("layer", ArgumentSemantic.Retain)]
		CALayer Layer { get; }

		[Export ("frame")]
		new CGRect Frame { get; set; }

		[Export ("center")]
		new CGPoint Center { get; set; }

		[Export ("transform")]
		new CGAffineTransform Transform { get; set; }

		/// <summary>Controls whether the UIView can handle multitouch events.</summary>
		///         <value>State of multiple touch recotgnition.</value>
		///         <remarks>
		///           UIViews by default only handle a single touch event at once.  If you
		///           want your view to handle multiple touches, you must set this property
		///           to true.
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("multipleTouchEnabled")]
		bool MultipleTouchEnabled { [Bind ("isMultipleTouchEnabled")] get; set; }

		/// <summary>Restricts the event delivery to this view.</summary>
		///         <value>The default value is false.</value>
		///         <remarks>
		///           <para>
		///             When this property is set, if this view starts tracking a
		///             touch, no other views in the window will receive these
		///             events.  Additionally, a view that has set this property
		///             to true wont receive any events that are associated with
		///             other views in the window.
		///           </para>
		///           <para>
		///             If a finger touches a view that hast this property set,
		///             the event is only delivered if no other view in the window
		///             is tracking a finger.  If a finger touches a non-exclusive
		///             window, the event is only delivered if there are no
		///             exclusive views tracking a finger.
		///
		///           </para>
		///         </remarks>
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("exclusiveTouch")]
		bool ExclusiveTouch { [Bind ("isExclusiveTouch")] get; set; }

		[Export ("hitTest:withEvent:")]
		[return: NullAllowed]
		UIView HitTest (CGPoint point, [NullAllowed] UIEvent uievent);

		[Export ("pointInside:withEvent:")]
		bool PointInside (CGPoint point, [NullAllowed] UIEvent uievent);

		[Export ("convertPoint:toView:")]
		CGPoint ConvertPointToView (CGPoint point, [NullAllowed] UIView toView);

		[Export ("convertPoint:fromView:")]
		CGPoint ConvertPointFromView (CGPoint point, [NullAllowed] UIView fromView);

		[Export ("convertRect:toView:")]
		CGRect ConvertRectToView (CGRect rect, [NullAllowed] UIView toView);

		[Export ("convertRect:fromView:")]
		CGRect ConvertRectFromView (CGRect rect, [NullAllowed] UIView fromView);

		[Export ("autoresizesSubviews")]
		bool AutosizesSubviews { get; set; }

		[Export ("autoresizingMask")]
		UIViewAutoresizing AutoresizingMask { get; set; }

		[Export ("sizeThatFits:")]
		CGSize SizeThatFits (CGSize size);

		[Export ("sizeToFit")]
		void SizeToFit ();

		[NullAllowed]
		[Export ("superview")]
		UIView Superview { get; }

		[Export ("subviews", ArgumentSemantic.Copy)]
		UIView [] Subviews { get; }

		[Export ("window")]
		[Transient]
		[NullAllowed]
		UIWindow Window { get; }

		[Export ("removeFromSuperview")]
		void RemoveFromSuperview ();

		/// <param name="view">
		///           <para>The view to add as a nested view of this view.</para>
		///         </param>
		/// <param name="atIndex">
		///           <para>The index in the stack of subviews where this view
		///             will be inserted.</para>
		///         </param>
		/// <summary>Inserts the specified subview at the specified
		///           location as a subview of this view.</summary>
		/// <remarks>
		///         </remarks>
		[Export ("insertSubview:atIndex:")]
		[PostGet ("Subviews")]
		void InsertSubview (UIView view, nint atIndex);

		/// <param name="atIndex">
		///           <para>An index within the zero-based <see cref="UIKit.UIView.Subviews" /> array.</para>
		///         </param>
		/// <param name="withSubviewAtIndex">
		///           <para>Another index within the zero-based <see cref="UIKit.UIView.Subviews" /> array.</para>
		///         </param>
		/// <summary>This method exchanges the indices of two <see cref="UIKit.UIView" />s within the <see cref="UIKit.UIView.Subviews" /> array. </summary>
		/// <remarks>
		///         </remarks>
		/// <altmember cref="UIKit.UIView.AddSubview" />
		/// <altmember cref="UIKit.UIView.InsertSubview" />
		/// <altmember cref="UIKit.UIView.InsertSubviewAbove" />
		/// <altmember cref="UIKit.UIView.InsertSubviewBelow" />
		[Export ("exchangeSubviewAtIndex:withSubviewAtIndex:")]
		void ExchangeSubview (nint atIndex, nint withSubviewAtIndex);

		[Export ("insertSubview:belowSubview:")]
		[PostGet ("Subviews")]
		void InsertSubviewBelow (UIView view, UIView siblingSubview);

		[Export ("insertSubview:aboveSubview:")]
		[PostGet ("Subviews")]
		void InsertSubviewAbove (UIView view, UIView siblingSubview);

		[Export ("bringSubviewToFront:")]
		void BringSubviewToFront (UIView view);

		[Export ("sendSubviewToBack:")]
		void SendSubviewToBack (UIView view);

		[Export ("didAddSubview:")]
		void SubviewAdded (UIView uiview);

		[Export ("willRemoveSubview:")]
		void WillRemoveSubview (UIView uiview);

		[Export ("willMoveToSuperview:")]
		void WillMoveToSuperview ([NullAllowed] UIView newsuper);

		[Export ("didMoveToSuperview")]
		void MovedToSuperview ();

		[Export ("willMoveToWindow:")]
		void WillMoveToWindow ([NullAllowed] UIWindow window);

		[Export ("didMoveToWindow")]
		void MovedToWindow ();

		[Export ("isDescendantOfView:")]
		bool IsDescendantOfView (UIView view);

		/// <param name="tag">
		///           <para>The identifier being searched for.</para>
		///         </param>
		/// <summary>Returns the <see cref="UIKit.UIView" /> identified by the <paramref name="tag" />. May return <see langword="null" />.</summary>
		/// <returns>
		///           <para>The view in the view hierarchy whose <see cref="UIKit.UIView.Tag" /> is equal to <paramref name="tag" />.</para>
		///         </returns>
		/// <remarks>
		///           <para>This method searches the current <see cref="UIKit.UIView" />'s view hierarchy (i.e., <c>this</c>, its <see cref="UIKit.UIView.Subviews" /> and their descendants) and returns the <see cref="UIKit.UIView" />, if any, whose <see cref="UIKit.UIView.Tag" /> property is equal to the <paramref name="tag" /> parameter. If no such <see cref="UIKit.UIView" /> exists, this method returns <see langword="null" />.</para>
		///         </remarks>
		/// <altmember cref="UIKit.UIView.Tag" />
		[return: NullAllowed]
		[Export ("viewWithTag:")]
		UIView ViewWithTag (nint tag);

		[Export ("setNeedsLayout")]
		void SetNeedsLayout ();

		[Export ("layoutIfNeeded")]
		void LayoutIfNeeded ();

		[Export ("layoutSubviews")]
		void LayoutSubviews ();

		[Export ("setNeedsDisplay")]
		void SetNeedsDisplay ();

		[Export ("setNeedsDisplayInRect:")]
		void SetNeedsDisplayInRect (CGRect rect);

		[Export ("clipsToBounds")]
		bool ClipsToBounds { get; set; }

		[Export ("alpha")]
		nfloat Alpha { get; set; }

		/// <summary>Determines whether the view is opaque or not.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <para>
		///             If you set this value to true, you should make sure that
		///             the entire area is painted, if you do not, the behavior is
		///             undefined.  You should also set the <see cref="UIKit.UIView.Alpha" /> property to 1.0.
		///
		///           </para>
		///           <para>
		///             Whenever possible, you should try to set the view as
		///             opaque, as that informs UIKit that the view does not need
		///             to be composited and blended with underlying views.
		///           </para>
		///         </remarks>
		[Export ("opaque")]
		bool Opaque { [Bind ("isOpaque")] get; set; }

		[Export ("clearsContextBeforeDrawing")]
		bool ClearsContextBeforeDrawing { get; set; }

		/// <summary>Specifies whether the <see cref="UIKit.UIView" /> displays or not.</summary>
		///         <value>The default value is <see langword="false" />.</value>
		///         <remarks>
		///           <para>A hidden <see cref="UIKit.UIView" /> does not display and does not receive input events. It does, however, participate in resizing and layout events and remains in its <see cref="UIKit.UIView.Superview" />'s list of <see cref="UIKit.UIView.Subviews" />s.</para>
		///           <para>A hidden <see cref="UIKit.UIView" /> hides its descendant views in addition to hiding itself. This does not affect the <see cref="UIKit.UIView.Hidden" /> property of the descendant views. Thus, a <see cref="UIKit.UIView" /> may be hidden even though its <see cref="UIKit.UIView.Hidden" /> property is <see langword="false" />.</para>
		///         </remarks>
		[Export ("hidden")]
		bool Hidden { [Bind ("isHidden")] get; set; }

		[Export ("contentMode")]
		UIViewContentMode ContentMode { get; set; }

		[NoTV]
		[Export ("contentStretch")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use 'CreateResizableImage' instead.")]
		[Deprecated (PlatformName.TvOS, 9, 0, message: "Use 'CreateResizableImage' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'CreateResizableImage' instead.")]
		CGRect ContentStretch { get; set; }

		[Static]
		[Export ("beginAnimations:context:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void BeginAnimations ([NullAllowed] string animationID, IntPtr context);

		[Static]
		[Export ("commitAnimations")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void CommitAnimations ();

		[Static]
		[Export ("setAnimationDelegate:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationDelegate (NSObject del);

		[Static]
		[Export ("setAnimationWillStartSelector:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationWillStartSelector (Selector sel);

		[Static]
		[Export ("setAnimationDidStopSelector:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationDidStopSelector (Selector sel);

		[Static]
		[Export ("setAnimationDuration:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationDuration (double duration);

		[Static]
		[Export ("setAnimationDelay:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationDelay (double delay);

		[Static]
		[Export ("setAnimationStartDate:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationStartDate (NSDate startDate);

		[Static]
		[Export ("setAnimationCurve:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationCurve (UIViewAnimationCurve curve);

		[Static]
		[Export ("setAnimationRepeatCount:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationRepeatCount (float repeatCount /* This is float, not nfloat */);

		[Static]
		[Export ("setAnimationRepeatAutoreverses:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationRepeatAutoreverses (bool repeatAutoreverses);

		[Static]
		[Export ("setAnimationBeginsFromCurrentState:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationBeginsFromCurrentState (bool fromCurrentState);

		[Static]
		[Export ("setAnimationTransition:forView:cache:")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Please use the 'Action' handler based animation APIs instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Please use the 'Action' handler based animation APIs instead.")]
		void SetAnimationTransition (UIViewAnimationTransition transition, UIView forView, bool cache);

		[Static]
		[Export ("areAnimationsEnabled")]
		bool AnimationsEnabled { [Bind ("areAnimationsEnabled")] get; [Bind ("setAnimationsEnabled:")] set; }

		// 3.2:
		[Export ("addGestureRecognizer:"), PostGet ("GestureRecognizers")]
		void AddGestureRecognizer (UIGestureRecognizer gestureRecognizer);

		[Export ("removeGestureRecognizer:"), PostGet ("GestureRecognizers")]
		void RemoveGestureRecognizer (UIGestureRecognizer gestureRecognizer);

		[NullAllowed] // by default this property is null
		[Export ("gestureRecognizers", ArgumentSemantic.Copy)]
		UIGestureRecognizer [] GestureRecognizers { get; set; }

		[Static, Export ("animateWithDuration:animations:")]
		void Animate (double duration, /* non null */ Action animation);

		[Static, Export ("animateWithDuration:animations:completion:")]
		[Async (XmlDocs = """
			<param name="duration">Duration in seconds for the animation.</param>
			<param name="animation">Code containing the changes that you will apply to your view.</param>
			<summary>Animates the property changes that take place in the specified action and invokes a completion callback when the animation completes.</summary>
			<returns>System.Threading.Tasks.Task&lt;System.Boolean&gt;</returns>
			<remarks>
			          <para>The use of this method is discouraged. Application developers should prefer to use the <see cref="UIKit.UIViewPropertyAnimator" /> class to animate UIViews.</para>
			        </remarks>
			""")]
		void AnimateNotify (double duration, /* non null */ Action animation, [NullAllowed] UICompletionHandler completion);

		[Static, Export ("animateWithDuration:delay:options:animations:completion:")]
		[Async (XmlDocs = """
			<param name="duration">Duration in seconds for the animation.</param>
			<param name="delay">Delay before the animation begins.</param>
			<param name="options">Animation options.</param>
			<param name="animation">The changes to be applied to the view.</param>
			<summary>Executes the specified <paramref name="animation" /> as an asynchronous operation.</summary>
			<returns>To be added.</returns>
			<remarks>
			          <para>The use of this method is discouraged. Application developers should prefer to use the <see cref="UIKit.UIViewPropertyAnimator" /> class to animate UIViews.</para>
			        </remarks>
			""")]
		void AnimateNotify (double duration, double delay, UIViewAnimationOptions options, /* non null */ Action animation, [NullAllowed] UICompletionHandler completion);

		[Static, Export ("transitionFromView:toView:duration:options:completion:")]
		[Async (XmlDocs = """
			<param name="fromView">The initial view.</param>
			<param name="toView">The final view.</param>
			<param name="duration">The duration, in seconds, of the animation.</param>
			<param name="options">A mask of options to be used with the animation.</param>
			<summary>Specifies a transition animation to be used between the specified <see cref="UIKit.UIView" />s.</summary>
			<returns>
			          <para>A task that represents the asynchronous TransitionNotify operation.   The value of the TResult parameter is a <see cref="UIKit.UICompletionHandler" />.</para>
			        </returns>
			<remarks>
			          <para>The use of this method is discouraged. Application developers should prefer to use the <see cref="UIKit.UIViewPropertyAnimator" /> class to animate UIViews.</para>
			        </remarks>
			""")]
		void TransitionNotify (UIView fromView, UIView toView, double duration, UIViewAnimationOptions options, [NullAllowed] UICompletionHandler completion);

		[Static, Export ("transitionWithView:duration:options:animations:completion:")]
		[Async (XmlDocs = """
			<param name="withView">View whose state is being manipulated and in which the animation should occur.</param>
			<param name="duration">The duration of the animation in seconds.</param>
			<param name="options">A mask of options to be used with the animation.</param>
			<param name="animation">Action containing the animation and state manipulation of the view.</param>
			<summary>Creates a transition animation action that is used for the current container view.</summary>
			<returns>A task that represents the asynchronous TransitionNotify operation. </returns>
			<remarks>
			          <para>The use of this method is discouraged. Application developers should prefer to use the <see cref="UIKit.UIViewPropertyAnimator" /> class to animate UIViews.</para>
			        </remarks>
			""")]
		void TransitionNotify (UIView withView, double duration, UIViewAnimationOptions options, [NullAllowed] Action animation, [NullAllowed] UICompletionHandler completion);

		[Export ("contentScaleFactor")]
		nfloat ContentScaleFactor { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("viewPrintFormatter")]
		UIViewPrintFormatter ViewPrintFormatter { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("drawRect:forViewPrintFormatter:")]
		void DrawRect (CGRect area, UIViewPrintFormatter formatter);

		//
		// 6.0
		//

		[Export ("constraints")]
		NSLayoutConstraint [] Constraints { get; }

		[Export ("addConstraint:")]
		void AddConstraint (NSLayoutConstraint constraint);

		[Export ("addConstraints:")]
		void AddConstraints (NSLayoutConstraint [] constraints);

		[Export ("removeConstraint:")]
		void RemoveConstraint (NSLayoutConstraint constraint);

		[Export ("removeConstraints:")]
		void RemoveConstraints (NSLayoutConstraint [] constraints);

		[Export ("needsUpdateConstraints")]
		bool NeedsUpdateConstraints ();

		[Export ("setNeedsUpdateConstraints")]
		void SetNeedsUpdateConstraints ();

		[Static]
		[Export ("requiresConstraintBasedLayout")]
		bool RequiresConstraintBasedLayout ();

		[Export ("alignmentRectForFrame:")]
		CGRect AlignmentRectForFrame (CGRect frame);

		[Export ("frameForAlignmentRect:")]
		CGRect FrameForAlignmentRect (CGRect alignmentRect);

		[Export ("alignmentRectInsets")]
		UIEdgeInsets AlignmentRectInsets { get; }

		[NoTV]
		[Export ("viewForBaselineLayout")]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Override 'ViewForFirstBaselineLayout' or 'ViewForLastBaselineLayout'.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Override 'ViewForFirstBaselineLayout' or 'ViewForLastBaselineLayout'.")]
		UIView ViewForBaselineLayout { get; }

		[MacCatalyst (13, 1)]
		[Export ("viewForFirstBaselineLayout")]
		UIView ViewForFirstBaselineLayout { get; }

		[MacCatalyst (13, 1)]
		[Export ("viewForLastBaselineLayout")]
		UIView ViewForLastBaselineLayout { get; }


		[Export ("intrinsicContentSize")]
		CGSize IntrinsicContentSize { get; }

		[Export ("invalidateIntrinsicContentSize")]
		void InvalidateIntrinsicContentSize ();

		[Export ("contentHuggingPriorityForAxis:")]
		float ContentHuggingPriority (UILayoutConstraintAxis axis); // This returns a float, not nfloat.

		[Export ("setContentHuggingPriority:forAxis:")]
		void SetContentHuggingPriority (float priority /* this is a float, not nfloat */, UILayoutConstraintAxis axis);

		[Export ("contentCompressionResistancePriorityForAxis:")]
		float ContentCompressionResistancePriority (UILayoutConstraintAxis axis); // This returns a float, not nfloat.

		[Export ("setContentCompressionResistancePriority:forAxis:")]
		void SetContentCompressionResistancePriority (float priority /* this is a float, not nfloat */, UILayoutConstraintAxis axis);

		[Export ("constraintsAffectingLayoutForAxis:")]
		NSLayoutConstraint [] GetConstraintsAffectingLayout (UILayoutConstraintAxis axis);

		[Export ("hasAmbiguousLayout")]
		bool HasAmbiguousLayout { get; }

		[Export ("exerciseAmbiguityInLayout")]
		void ExerciseAmbiguityInLayout ();

		[Export ("systemLayoutSizeFittingSize:")]
		CGSize SystemLayoutSizeFittingSize (CGSize size);

		[Export ("decodeRestorableStateWithCoder:")]
		void DecodeRestorableState (NSCoder coder);

		[Export ("encodeRestorableStateWithCoder:")]
		void EncodeRestorableState (NSCoder coder);

		[NullAllowed] // by default this property is null
		[Export ("restorationIdentifier", ArgumentSemantic.Copy)]
		string RestorationIdentifier { get; set; }

		[Export ("gestureRecognizerShouldBegin:")]
		bool GestureRecognizerShouldBegin (UIGestureRecognizer gestureRecognizer);

		[Export ("translatesAutoresizingMaskIntoConstraints")]
		bool TranslatesAutoresizingMaskIntoConstraints { get; set; }

		[Export ("updateConstraintsIfNeeded")]
		void UpdateConstraintsIfNeeded ();

		[Export ("updateConstraints")]
		[RequiresSuper]
		void UpdateConstraints ();

		/// <summary>Represents the value associated with the constant UIViewNoIntrinsicMetric</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///           <para>This property is associated with the <see cref="UIKit.UIView.IntrinsicContentSize" /> method. This value indicates that the <see cref="UIKit.UIView" /> has no natural size in a particular dimension.</para>
		///         </remarks>
		[Field ("UIViewNoIntrinsicMetric")]
		nfloat NoIntrinsicMetric { get; }

		/// <summary>Represents the value associated with the constant UILayoutFittingCompressedSize</summary>
		///         <value>
		///         </value>
		///         <remarks>Indicates that <see cref="UIKit.UIView.SystemLayoutSizeFittingSize(CoreGraphics.CGSize,System.Single,System.Single)" /> should calculate the smallest possible size.</remarks>
		///         <altmember cref="UIKit.UIView.SystemLayoutSizeFittingSize" />
		[Field ("UILayoutFittingCompressedSize")]
		CGSize UILayoutFittingCompressedSize { get; }

		/// <summary>Represents the value associated with the constant UILayoutFittingExpandedSize</summary>
		///         <value>
		///         </value>
		///         <remarks>Indicates that <see cref="UIKit.UIView.SystemLayoutSizeFittingSize(CoreGraphics.CGSize,System.Single,System.Single)" /> should calculate the largest possible size.</remarks>
		///         <altmember cref="UIKit.UIView.SystemLayoutSizeFittingSize" />
		[Field ("UILayoutFittingExpandedSize")]
		CGSize UILayoutFittingExpandedSize { get; }

		/// <summary>The color used for tinting.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[NullAllowed]
		[Export ("tintColor")]
		[Appearance]
		UIColor TintColor { get; set; }

		[Export ("tintAdjustmentMode")]
		UIViewTintAdjustmentMode TintAdjustmentMode { get; set; }

		[Export ("tintColorDidChange")]
		void TintColorDidChange ();

		[Static, Export ("performWithoutAnimation:")]
		void PerformWithoutAnimation (Action actionsWithoutAnimation);

		[Static, Export ("performSystemAnimation:onViews:options:animations:completion:")]
		[Async (XmlDocs = """
			<param name="animation">Defined UISystemAnimation to perform.</param>
			<param name="views">Views on which to to perform the animations.</param>
			<param name="options">Mask of options that indicates how the animations are to be performed.</param>
			<param name="parallelAnimations">Additional animations specified to run alongside system animation.</param>
			<summary>Performs specified system-provided animation sequence on one or more views, together with user-defined parallel animations.</summary>
			<returns>
			          <para>A task that represents the asynchronous PerformSystemAnimation operation.   The value of the TResult parameter is a UIKit.UICompletionHandler.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""")]
		void PerformSystemAnimation (UISystemAnimation animation, UIView [] views, UIViewAnimationOptions options, [NullAllowed] Action parallelAnimations, [NullAllowed] UICompletionHandler completion);

		[TV (13, 0), iOS (13, 0)] // Yep headers stated iOS 12 but they are such a liars...
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("modifyAnimationsWithRepeatCount:autoreverses:animations:")]
		void ModifyAnimations (nfloat count, bool autoreverses, Action animations);

		[Static, Export ("animateKeyframesWithDuration:delay:options:animations:completion:")]
		[Async (XmlDocs = """
			<param name="duration">Duration in seconds for the animation.</param>
			<param name="delay">Duration in seconds before starting the animation.</param>
			<param name="options">Designates a mask of options that indicates how the developer wants to perform the animations.</param>
			<param name="animations">An action object that contains the changes to be committed to the views.</param>
			<summary>Creates an animation action object that is to be used to set up keyframe-based animations for the current view.</summary>
			<returns>Boolean indicating whether animations finished before a completion handler was called.</returns>
			<remarks>
			          <para>The use of this method is discouraged. Application developers should prefer to use the <see cref="UIKit.UIViewPropertyAnimator" /> class to animate UIViews.</para>
			        </remarks>
			""")]
		void AnimateKeyframes (double duration, double delay, UIViewKeyframeAnimationOptions options, Action animations, [NullAllowed] UICompletionHandler completion);

		[Static, Export ("addKeyframeWithRelativeStartTime:relativeDuration:animations:")]
		void AddKeyframeWithRelativeStartTime (double frameStartTime, double frameDuration, Action animations);

		[Export ("addMotionEffect:")]
		[PostGet ("MotionEffects")]
		void AddMotionEffect (UIMotionEffect effect);

		[Export ("removeMotionEffect:")]
		[PostGet ("MotionEffects")]
		void RemoveMotionEffect (UIMotionEffect effect);

		[NullAllowed] // by default this property is null
		[Export ("motionEffects", ArgumentSemantic.Copy)]
		UIMotionEffect [] MotionEffects { get; set; }

		[return: NullAllowed]
		[Export ("snapshotViewAfterScreenUpdates:")]
		UIView SnapshotView (bool afterScreenUpdates);

		[Export ("resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:")]
		[return: NullAllowed]
		UIView ResizableSnapshotView (CGRect rect, bool afterScreenUpdates, UIEdgeInsets capInsets);

		[Export ("drawViewHierarchyInRect:afterScreenUpdates:")]
		bool DrawViewHierarchy (CGRect rect, bool afterScreenUpdates);

		/// <include file="../docs/api/UIKit/UIView.xml" path="/Documentation/Docs[@DocId='M:UIKit.UIView.AnimateNotify(System.Double,System.Double,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,UIKit.UIViewAnimationOptions,System.Action,UIKit.UICompletionHandler)']/*" />
		[Static]
		[Export ("animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:")]
		[Async (XmlDocs = """
			<param name="duration">Duration in seconds for the animation.</param>
			<param name="delay">Delay before the animation begins.</param>
			<param name="springWithDampingRatio">Damping ratio set for spring animation when it is approaching its quiescent state. Value between 0 and 1 representing the amount of damping to apply to the spring effect.</param>
			<param name="initialSpringVelocity">Initial spring velocity prior to attachment. The initial velocity of the spring, in points per second.</param>
			<param name="options">Animation options.</param>
			<param name="animations">Code containing the changes that you will apply to your view.</param>
			<summary>Executes a view animation that uses a timing curve that corresponds to the activity of a physical spring.</summary>
			<returns>
			          <para>A task that represents the asynchronous AnimateNotify operation.   The value of the TResult parameter is a <see cref="UIKit.UICompletionHandler" />.</para>
			        </returns>
			<remarks>
			          <para>The use of this method is discouraged. Application developers should prefer to use the <see cref="UIKit.UIViewPropertyAnimator" /> class to animate UIViews.</para>
			          <para copied="true">The AnimateNotifyAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">The use of this method is discouraged. Application developers should prefer to use the <see cref="UIKit.UIViewPropertyAnimator" /> class to animate UIViews.</para>
			        </remarks>
			""")]
		void AnimateNotify (double duration, double delay, nfloat springWithDampingRatio, nfloat initialSpringVelocity, UIViewAnimationOptions options, Action animations, [NullAllowed] UICompletionHandler completion);


		[MacCatalyst (13, 1)]
		[NullAllowed] // by default this property is null
		[Export ("maskView", ArgumentSemantic.Retain)]
		UIView MaskView { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:")]
		// float, not CGFloat / nfloat, but we can't use an enum in the signature
		CGSize SystemLayoutSizeFittingSize (CGSize targetSize, /* UILayoutPriority */ float horizontalFittingPriority, /* UILayoutPriority */ float verticalFittingPriority);

		[MacCatalyst (13, 1)]
		[Export ("layoutMargins")]
		UIEdgeInsets LayoutMargins { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("directionalLayoutMargins", ArgumentSemantic.Assign)]
		NSDirectionalEdgeInsets DirectionalLayoutMargins { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("preservesSuperviewLayoutMargins")]
		bool PreservesSuperviewLayoutMargins { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("insetsLayoutMarginsFromSafeArea")]
		bool InsetsLayoutMarginsFromSafeArea { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("layoutMarginsDidChange")]
		void LayoutMarginsDidChange ();

		[MacCatalyst (13, 1)]
		[Export ("safeAreaInsets")]
		UIEdgeInsets SafeAreaInsets { get; }

		[MacCatalyst (13, 1)]
		[Export ("safeAreaInsetsDidChange")]
		void SafeAreaInsetsDidChange ();

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("userInterfaceLayoutDirectionForSemanticContentAttribute:")]
		UIUserInterfaceLayoutDirection GetUserInterfaceLayoutDirection (UISemanticContentAttribute attribute);

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection:")]
		UIUserInterfaceLayoutDirection GetUserInterfaceLayoutDirection (UISemanticContentAttribute semanticContentAttribute, UIUserInterfaceLayoutDirection layoutDirection);

		[MacCatalyst (13, 1)]
		[Export ("effectiveUserInterfaceLayoutDirection")]
		UIUserInterfaceLayoutDirection EffectiveUserInterfaceLayoutDirection { get; }

		[MacCatalyst (13, 1)]
		[Export ("semanticContentAttribute", ArgumentSemantic.Assign)]
		UISemanticContentAttribute SemanticContentAttribute { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("layoutMarginsGuide", ArgumentSemantic.Strong)]
		UILayoutGuide LayoutMarginsGuide { get; }

		[MacCatalyst (13, 1)]
		[Export ("readableContentGuide", ArgumentSemantic.Strong)]
		UILayoutGuide ReadableContentGuide { get; }

		[MacCatalyst (13, 1)]
		[Export ("safeAreaLayoutGuide", ArgumentSemantic.Strong)]
		UILayoutGuide SafeAreaLayoutGuide { get; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("keyboardLayoutGuide")]
		UIKeyboardLayoutGuide KeyboardLayoutGuide { get; }

		[MacCatalyst (13, 1)]
		[Export ("inheritedAnimationDuration")]
		[Static]
		double InheritedAnimationDuration { get; }

		[MacCatalyst (13, 1)]
		[Export ("leadingAnchor")]
		NSLayoutXAxisAnchor LeadingAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("trailingAnchor")]
		NSLayoutXAxisAnchor TrailingAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("leftAnchor")]
		NSLayoutXAxisAnchor LeftAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("rightAnchor")]
		NSLayoutXAxisAnchor RightAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("topAnchor")]
		NSLayoutYAxisAnchor TopAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("bottomAnchor")]
		NSLayoutYAxisAnchor BottomAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("widthAnchor")]
		NSLayoutDimension WidthAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("heightAnchor")]
		NSLayoutDimension HeightAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("centerXAnchor")]
		NSLayoutXAxisAnchor CenterXAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("centerYAnchor")]
		NSLayoutYAxisAnchor CenterYAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("firstBaselineAnchor")]
		NSLayoutYAxisAnchor FirstBaselineAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("lastBaselineAnchor")]
		NSLayoutYAxisAnchor LastBaselineAnchor { get; }

		[MacCatalyst (13, 1)]
		[Export ("layoutGuides")]
		UILayoutGuide [] LayoutGuides { get; }

		[MacCatalyst (13, 1)]
		[Export ("addLayoutGuide:")]
		void AddLayoutGuide (UILayoutGuide guide);

		[MacCatalyst (13, 1)]
		[Export ("removeLayoutGuide:")]
		void RemoveLayoutGuide (UILayoutGuide guide);

		/// <summary>Whether the <see cref="UIKit.UIView" /> is the focused view.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("focused")]
		bool Focused { [Bind ("isFocused")] get; }

		[NullAllowed]
		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("focusGroupIdentifier")]
		new string FocusGroupIdentifier { get; set; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("focusGroupPriority")]
		new nint FocusGroupPriority { get; set; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("focusEffect", ArgumentSemantic.Copy)]
		new UIFocusEffect FocusEffect { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("canBecomeFocused")]
		new bool CanBecomeFocused { get; }

		[TV (13, 0)] // Headers state Watch 5.0
		[MacCatalyst (13, 1)]
		[Export ("addInteraction:")]
		void AddInteraction (IUIInteraction interaction);

		[TV (13, 0)] // Headers state Watch 5.0
		[MacCatalyst (13, 1)]
		[Export ("removeInteraction:")]
		void RemoveInteraction (IUIInteraction interaction);

		[TV (13, 0)] // Headers state Watch 5.0
		[MacCatalyst (13, 1)]
		[Export ("interactions", ArgumentSemantic.Copy)]
		IUIInteraction [] Interactions { get; set; }

		// UIAccessibilityInvertColors category
		[MacCatalyst (13, 1)]
		[Export ("accessibilityIgnoresInvertColors")]
		bool AccessibilityIgnoresInvertColors { get; set; }

		// From UserInterfaceStyle category

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("overrideUserInterfaceStyle", ArgumentSemantic.Assign)]
		UIUserInterfaceStyle OverrideUserInterfaceStyle { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("transform3D", ArgumentSemantic.Assign)]
		CATransform3D Transform3D { get; set; }

		// Category UIView (UIContentSizeCategoryLimit)

		[BindAs (typeof (UIContentSizeCategory))]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("minimumContentSizeCategory")]
		NSString MinimumContentSizeCategory { get; set; }

		[BindAs (typeof (UIContentSizeCategory))]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("maximumContentSizeCategory")]
		NSString MaximumContentSizeCategory { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("appliedContentSizeCategoryLimitsDescription")]
		string AppliedContentSizeCategoryLimitsDescription { get; }

#if TVOS
#pragma warning disable 0109 // The member 'member' does not hide an inherited member. The new keyword is not required
#endif
		// From UIView (UILargeContentViewer)

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("showsLargeContentViewer")]
		new bool ShowsLargeContentViewer { get; set; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("largeContentTitle")]
		new string LargeContentTitle { get; set; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("largeContentImage", ArgumentSemantic.Strong)]
		new UIImage LargeContentImage { get; set; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("scalesLargeContentImage")]
		new bool ScalesLargeContentImage { get; set; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("largeContentImageInsets", ArgumentSemantic.Assign)]
		new UIEdgeInsets LargeContentImageInsets { get; set; }
#if TVOS
#pragma warning restore 0109
#endif

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("anchorPoint", ArgumentSemantic.Assign)]
		CGPoint AnchorPoint { get; set; }

		// from the category (UIView) <UITraitChangeObservable> 
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("traitOverrides")]
		IUITraitOverrides TraitOverrides { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("updateTraitsIfNeeded")]
		void UpdateTraitsIfNeeded ();

		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[NullAllowed, Export ("hoverStyle", ArgumentSemantic.Copy)]
		UIHoverStyle HoverStyle { get; set; }

		[Async]
		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Static]
		[Export ("animateWithSpringDuration:bounce:initialSpringVelocity:delay:options:animations:completion:")]
		void Animate (double duration, nfloat bounce, nfloat velocity, double delay, UIViewAnimationOptions options, Action animations, [NullAllowed] Action<bool> completion);
	}

	/// <summary>Class that implements a text field in a view.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Category, BaseType (typeof (UIView))]
	interface UIView_UITextField {
		/// <param name="force">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("endEditing:")]
		bool EndEditing (bool force);
	}

	[MacCatalyst (13, 1)]
	[Category]
	[BaseType (typeof (UILayoutGuide))]
	interface UILayoutGuide_UIConstraintBasedLayoutDebugging {

		/// <param name="axis">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("constraintsAffectingLayoutForAxis:")]
		NSLayoutConstraint [] GetConstraintsAffectingLayout (UILayoutConstraintAxis axis);

		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("hasAmbiguousLayout")]
		bool GetHasAmbiguousLayout ();
	}

	interface IUIContentContainer { }

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIResponder))]
	interface UIViewController : NSCoding, UIAppearanceContainer, UIContentContainer, UITraitEnvironment, UIFocusEnvironment, NSExtensionRequestHandling
		, UITraitChangeObservable {
		[DesignatedInitializer]
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("view", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIView View { get; set; }

		[Export ("loadView")]
		void LoadView ();

		[Export ("viewDidLoad")]
		void ViewDidLoad ();

		[NoTV]
		[Export ("viewDidUnload")]
		[Deprecated (PlatformName.iOS, 6, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void ViewDidUnload ();

		/// <summary>A <see cref="System.Boolean" /> indicating whether the <see cref="UIKit.UIViewController.View" /> is loaded into memory.</summary>
		///         <value>
		///           <see langword="true" /> if the <see cref="UIKit.UIViewController.View" /> is currently loaded into memory.</value>
		///         <remarks>
		///           <para>
		///             The <see cref="UIKit.UIViewController.View" /> property may be lazily loaded into memory when accessed. This function may be used to determine if that loading has already taken place. 
		///           </para>
		///         </remarks>
		///         <altmember cref="UIKit.UIViewController.View" />
		///         <altmember cref="UIKit.UIViewController.LoadView" />
		[Export ("isViewLoaded")]
		bool IsViewLoaded { get; }

		[NullAllowed]
		[Export ("nibName", ArgumentSemantic.Copy)]
		string NibName { get; }

		[NullAllowed]
		[Export ("nibBundle", ArgumentSemantic.Retain)]
		NSBundle NibBundle { get; }

		[Export ("viewWillAppear:")]
		void ViewWillAppear (bool animated);

		[Export ("viewDidAppear:")]
		void ViewDidAppear (bool animated);

		[Export ("viewWillDisappear:")]
		void ViewWillDisappear (bool animated);

		[Export ("viewDidDisappear:")]
		void ViewDidDisappear (bool animated);

		[NullAllowed] // by default this property is null
		[Export ("title", ArgumentSemantic.Copy)]
		string Title { get; set; }

		[Export ("didReceiveMemoryWarning")]
		void DidReceiveMemoryWarning ();

		[NoTV]
		[Export ("presentModalViewController:animated:")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use 'PresentViewController (UIViewController, bool, NSAction)' instead and set the 'ModalViewController' property to true.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'PresentViewController (UIViewController, bool, NSAction)' instead and set the 'ModalViewController' property to true.")]
		void PresentModalViewController (UIViewController modalViewController, bool animated);

		[NoTV]
		[Export ("dismissModalViewControllerAnimated:")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use 'DismissViewController (bool, NSAction)' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'DismissViewController (bool, NSAction)' instead.")]
		void DismissModalViewController (bool animated);

		[NoTV]
		[Export ("modalViewController")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use 'PresentedViewController' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'PresentedViewController' instead.")]
		UIViewController ModalViewController { get; }

		[Export ("modalTransitionStyle", ArgumentSemantic.Assign)]
		UIModalTransitionStyle ModalTransitionStyle { get; set; }

		[NoTV]
		[Export ("wantsFullScreenLayout", ArgumentSemantic.Assign)]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'EdgesForExtendedLayout', 'ExtendedLayoutIncludesOpaqueBars' and 'AutomaticallyAdjustsScrollViewInsets' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'EdgesForExtendedLayout', 'ExtendedLayoutIncludesOpaqueBars' and 'AutomaticallyAdjustsScrollViewInsets' instead.")]
		bool WantsFullScreenLayout { get; set; }

		[Export ("parentViewController")]
		[NullAllowed]
		UIViewController ParentViewController { get; }

		[Export ("tabBarItem", ArgumentSemantic.Retain)]
		UITabBarItem TabBarItem { get; set; }

		// UIViewControllerRotation category

		[NoTV]
		[Export ("shouldAutorotateToInterfaceOrientation:")]
		[Deprecated (PlatformName.iOS, 6, 0, message: "Use both 'GetSupportedInterfaceOrientations' and 'PreferredInterfaceOrientationForPresentation' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use both 'GetSupportedInterfaceOrientations' and 'PreferredInterfaceOrientationForPresentation' instead.")]
		bool ShouldAutorotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation);

		[NoTV]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use Adaptive View Controllers instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use Adaptive View Controllers instead.")]
		[Export ("rotatingHeaderView")]
		UIView RotatingHeaderView { get; }

		[NoTV]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use Adaptive View Controllers instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use Adaptive View Controllers instead.")]
		[Export ("rotatingFooterView")]
		UIView RotatingFooterView { get; }

		[NoTV]
		[Export ("interfaceOrientation")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use Adaptive View Controllers instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use Adaptive View Controllers instead.")]
		UIInterfaceOrientation InterfaceOrientation { get; }

		[NoTV]
		[Export ("willRotateToInterfaceOrientation:duration:")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use Adaptive View Controllers instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use Adaptive View Controllers instead.")]
		void WillRotate (UIInterfaceOrientation toInterfaceOrientation, double duration);

		[NoTV]
		[Export ("didRotateFromInterfaceOrientation:")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use Adaptive View Controllers instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use Adaptive View Controllers instead.")]
		void DidRotate (UIInterfaceOrientation fromInterfaceOrientation);

		[NoTV]
		[Export ("willAnimateRotationToInterfaceOrientation:duration:")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use Adaptive View Controllers instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use Adaptive View Controllers instead.")]
		void WillAnimateRotation (UIInterfaceOrientation toInterfaceOrientation, double duration);

		[NoTV]
		[Export ("willAnimateFirstHalfOfRotationToInterfaceOrientation:duration:")]
		[Deprecated (PlatformName.iOS, 5, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void WillAnimateFirstHalfOfRotation (UIInterfaceOrientation toInterfaceOrientation, double duration);

		[NoTV]
		[Export ("didAnimateFirstHalfOfRotationToInterfaceOrientation:")]
		[Deprecated (PlatformName.iOS, 5, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void DidAnimateFirstHalfOfRotation (UIInterfaceOrientation toInterfaceOrientation);

		[NoTV]
		[Export ("willAnimateSecondHalfOfRotationFromInterfaceOrientation:duration:")]
		[Deprecated (PlatformName.iOS, 5, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		void WillAnimateSecondHalfOfRotation (UIInterfaceOrientation fromInterfaceOrientation, double duration);

		// These come from @interface UIViewController (UIViewControllerEditing)
		/// <summary>
		///           <see langword="true" /> if the <see cref="UIKit.UIViewController" /> allows the application user to edit the <see cref="UIKit.UIView" /> contents.</summary>
		///         <value>
		///           <see langword="true" /> if in editing mode, <see langword="false" /> otherwise.</value>
		///         <remarks>
		///           <para>
		///             If the application developer wishes to allow editing in the <see cref="UIKit.UIViewController" />, they should set this value to <see langword="true" />. If the <see cref="UIKit.UIBarButtonItem" /> retrieved by the <see cref="UIKit.UIViewController.EditButtonItem" /> is visible in the <see cref="UIKit.UINavigationBar" />, that button’s <see cref="UIKit.UIBarItem.Title" /> will reflect this value.
		///           </para>
		///         </remarks>
		///         <altmember cref="UIKit.UIViewController.EditButtonItem" />
		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; set; }

		[Export ("setEditing:animated:")]
		void SetEditing (bool editing, bool animated);

		[Export ("editButtonItem")]
		UIBarButtonItem EditButtonItem { get; }

		// These come from @interface UIViewController (UISearchDisplayControllerSupport)
		[NoTV]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'UISearchController' instead.")]
		[NoMacCatalyst]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UISearchController' instead.")]
		[Export ("searchDisplayController", ArgumentSemantic.Retain)]
		UISearchDisplayController SearchDisplayController { get; }

		// These come from @interface UIViewController (UINavigationControllerItem)
		[Export ("navigationItem", ArgumentSemantic.Retain)]
		UINavigationItem NavigationItem { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("hidesBottomBarWhenPushed")]
		bool HidesBottomBarWhenPushed { get; set; }

		[NullAllowed]
		[Export ("splitViewController", ArgumentSemantic.Retain)]
		UISplitViewController SplitViewController { get; }

		[NullAllowed]
		[Export ("tabBarController", ArgumentSemantic.Retain)]
		UITabBarController TabBarController { get; }

		[Deprecated (PlatformName.TvOS, 15, 0, message: "Use 'UIViewController.SetContentScrollView' instead.")]
		[TV (13, 0), NoiOS]
		[NoMacCatalyst]
		[NullAllowed, Export ("tabBarObservedScrollView", ArgumentSemantic.Strong)]
		UIScrollView TabBarObservedScrollView { get; set; }

		[NullAllowed]
		[Export ("navigationController", ArgumentSemantic.Retain)]
		UINavigationController NavigationController { get; }

		// These come from @interface UIViewController (UINavigationControllerContextualToolbarItems)
		[Export ("toolbarItems", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIBarButtonItem [] ToolbarItems { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setToolbarItems:animated:")]
		[PostGet ("ToolbarItems")]
		void SetToolbarItems ([NullAllowed] UIBarButtonItem [] items, bool animated);

		// These come in 3.2

		[Export ("modalPresentationStyle", ArgumentSemantic.Assign)]
		UIModalPresentationStyle ModalPresentationStyle { get; set; }

		// 3.2 extensions from MoviePlayer
		/// <param name="moviePlayerViewController">The <see cref="MediaPlayer.MPMoviePlayerViewController" /> to be presented.</param>
		///         <summary>Displays a movie controller using the standard transition.</summary>
		///         <remarks>Along with <see cref="UIKit.UIViewController.DismissMoviePlayerViewController" />, this method can be used to control the presentation and dismissal of a <see cref="MediaPlayer.MPMoviePlayerViewController" /></remarks>
		[NoMac]
		[NoTV]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'AVPlayerViewController' (AVKit) instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'AVPlayerViewController' (AVKit) instead.")]
		[Export ("presentMoviePlayerViewControllerAnimated:")]
		void PresentMoviePlayerViewController (MPMoviePlayerViewController moviePlayerViewController);

		/// <summary>Dismisses the <see cref="MediaPlayer.MPMoviePlayerViewController" />.</summary>
		///         <remarks>
		///           <para>Along with <see cref="UIKit.UIViewController.PresentMoviePlayerViewController(MediaPlayer.MPMoviePlayerViewController)" />, this method can be used to control the presentation and dismissal of a <see cref="MediaPlayer.MPMoviePlayerViewController" /></para>
		///         </remarks>
		///         <altmember cref="UIKit.UIViewController.PresentMoviePlayerViewController" />
		[NoMac]
		[NoTV]
		[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'AVPlayerViewController' (AVKit) instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'AVPlayerViewController' (AVKit) instead.")]
		[Export ("dismissMoviePlayerViewControllerAnimated")]
		void DismissMoviePlayerViewController ();


		// This is defined in a category in UIPopoverSupport.h: UIViewController (UIPopoverController)
		[NoTV]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'PreferredContentSize' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'PreferredContentSize' instead.")]
		[Export ("contentSizeForViewInPopover")]
		CGSize ContentSizeForViewInPopover { get; set; }

		// This is defined in a category in UIPopoverSupport.h: UIViewController (UIPopoverController)
		/// <summary>
		///           <see langword="true" /> if this <see cref="UIKit.UIViewController" /> should be presented modally by a <see cref="UIKit.UIPopoverController" />.</summary>
		///         <value>The default value is <see langword="false" />.</value>
		///         <remarks>Application developers should set this property to <see langword="true" /> if this <see cref="UIKit.UIViewController" /> is intended to be presented modally by a <see cref="UIKit.UIPopoverController" />. Setting this property to <see langword="true" /> disallows actions outside this <see cref="UIKit.UIViewController" /> when it is displayed.</remarks>
		[Export ("modalInPopover")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'ModalInPresentation' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'ModalInPresentation' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'ModalInPresentation' instead.")]
		bool ModalInPopover { [Bind ("isModalInPopover")] get; set; }

		// It seems apple added a setter now but seems it is a mistake on new property radar:27929872
		[Export ("disablesAutomaticKeyboardDismissal")]
		bool DisablesAutomaticKeyboardDismissal { get; }

		[Export ("storyboard", ArgumentSemantic.Retain)]
		[NullAllowed]
		UIStoryboard Storyboard { get; }

		[Export ("presentedViewController")]
		[NullAllowed]
		UIViewController PresentedViewController { get; }

		[Export ("presentingViewController")]
		[NullAllowed]
		UIViewController PresentingViewController { get; }

		[Export ("definesPresentationContext", ArgumentSemantic.Assign)]
		bool DefinesPresentationContext { get; set; }

		[Export ("providesPresentationContextTransitionStyle", ArgumentSemantic.Assign)]
		bool ProvidesPresentationContextTransitionStyle { get; set; }

		[NoTV]
		[Deprecated (PlatformName.iOS, 6, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("viewWillUnload")]
		void ViewWillUnload ();

		[Export ("performSegueWithIdentifier:sender:")]
		void PerformSegue (string identifier, [NullAllowed] NSObject sender);

		[Export ("prepareForSegue:sender:")]
		void PrepareForSegue (UIStoryboardSegue segue, [NullAllowed] NSObject sender);

		[Export ("viewWillLayoutSubviews")]
		void ViewWillLayoutSubviews ();

		[Export ("viewDidLayoutSubviews")]
		void ViewDidLayoutSubviews ();

		/// <include file="../docs/api/UIKit/UIViewController.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIViewController.IsBeingPresented']/*" />
		[Export ("isBeingPresented")]
		bool IsBeingPresented { get; }

		/// <summary>
		///           <see langword="true" /> if the current <see cref="UIKit.UIViewController" /> is in the process of being dismissed.</summary>
		///         <value>
		///           <see langword="true" /> only if called during the execution of <see cref="UIKit.UIViewController.ViewWillDisappear(System.Boolean)" /> or <see cref="UIKit.UIViewController.ViewDidDisappear(System.Boolean)" /></value>
		///         <remarks>
		///           <para>The dismissal process is bookended by the functions <see cref="UIKit.UIViewController.ViewWillDisappear(System.Boolean)" /> and <see cref="UIKit.UIViewController.ViewDidDisappear(System.Boolean)" />. While those are executing, this property will return <see langword="true" />, at all other times, it will return <see langword="false" />.</para>
		///         </remarks>
		///         <altmember cref="UIKit.UIViewController.ViewWillDisappear" />
		///         <altmember cref="UIKit.UIViewController.ViewDidDisappear" />
		[Export ("isBeingDismissed")]
		bool IsBeingDismissed { get; }

		/// <include file="../docs/api/UIKit/UIViewController.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIViewController.IsMovingToParentViewController']/*" />
		[Export ("isMovingToParentViewController")]
		bool IsMovingToParentViewController { get; }

		/// <include file="../docs/api/UIKit/UIViewController.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIViewController.IsMovingFromParentViewController']/*" />
		[Export ("isMovingFromParentViewController")]
		bool IsMovingFromParentViewController { get; }

		[Export ("presentViewController:animated:completion:")]
		[Async (XmlDocs = """
			<param name="viewControllerToPresent">View controller that displays over the current view controller content.</param>
			<param name="animated">Boolean indicating whether to animate presentation or not.</param>
			<summary>Modally presents  a view controller.</summary>
			<returns>A task that represents the asynchronous PresentViewController operation</returns>
			<remarks>To be added.</remarks>
			""")]
		void PresentViewController (UIViewController viewControllerToPresent, bool animated, [NullAllowed] Action completionHandler);

		[Export ("dismissViewControllerAnimated:completion:")]
		[Async (XmlDocs = """
			<param name="animated">Boolean that determines if the transition is to be animated.</param>
			<summary>Dismisses the presented view controller.</summary>
			<returns>A task that represents the asynchronous DismissViewController operation</returns>
			<remarks>To be added.</remarks>
			""")]
		void DismissViewController (bool animated, [NullAllowed] Action completionHandler);

		// UIViewControllerRotation
		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("attemptRotationToDeviceOrientation")]
		void AttemptRotationToDeviceOrientation ();

		[NoTV]
		[Deprecated (PlatformName.iOS, 6, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers")]
		/*PROTECTED*/
		bool AutomaticallyForwardAppearanceAndRotationMethodsToChildViewControllers { get; }

		[Export ("childViewControllers")]
		/*PROTECTED, MUSTCALLBASE*/
		UIViewController [] ChildViewControllers { get; }

		[Export ("addChildViewController:")]
		[PostGet ("ChildViewControllers")]
		/*PROTECTED, MUSTCALLBASE*/
		void AddChildViewController (UIViewController childController);

		[Export ("removeFromParentViewController")]
		/*PROTECTED, MUSTCALLBASE*/
		void RemoveFromParentViewController ();

		[Export ("transitionFromViewController:toViewController:duration:options:animations:completion:")]
		[Async (XmlDocs = """
			<param name="fromViewController">The view controller that initiates the action and which is currently visible in the parent hierarchy.</param>
			<param name="toViewController">The target view controller (not currently visible).</param>
			<param name="duration">Total duration of the animations, measured in seconds.</param>
			<param name="options">A mask of options that determines how you want the animations performed.</param>
			<param name="animations">An action object containing the changes that the application developer wants to commit to the views. Here is where developers can modify any animatable properties of the views.</param>
			<summary>Used for transitioning between two view controller's child view controllers.</summary>
			<returns>
			          <para>A task that represents the asynchronous Transition operation.   The value of the TResult parameter is a UIKit.UICompletionHandler.</para>
			        </returns>
			<remarks>
			          <para copied="true">The TransitionAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		/*PROTECTED, MUSTCALLBASE*/
		void Transition (UIViewController fromViewController, UIViewController toViewController, double duration, UIViewAnimationOptions options, [NullAllowed] Action animations, [NullAllowed] UICompletionHandler completionHandler);

		[Export ("willMoveToParentViewController:")]
		void WillMoveToParentViewController ([NullAllowed] UIViewController parent);

		[Export ("didMoveToParentViewController:")]
		void DidMoveToParentViewController ([NullAllowed] UIViewController parent);

		//
		// Exposed in iOS 6.0, but they existed and are now officially supported on iOS 5.0
		//
		[Export ("beginAppearanceTransition:animated:")]
		void BeginAppearanceTransition (bool isAppearing, bool animated);

		[Export ("endAppearanceTransition")]
		void EndAppearanceTransition ();

		//
		// 6.0
		//
		[Export ("shouldPerformSegueWithIdentifier:sender:")]
		bool ShouldPerformSegue (string segueIdentifier, [NullAllowed] NSObject sender);

#if !XAMCORE_5_0
		[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'CanPerformUnwind' instead.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Use 'CanPerformUnwind' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'CanPerformUnwind' instead.")]
		[Export ("canPerformUnwindSegueAction:fromViewController:withSender:")]
		bool CanPerformUnwindDeprecated (Selector segueAction, UIViewController fromViewController, NSObject sender);
#endif

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("canPerformUnwindSegueAction:fromViewController:sender:")]
		bool CanPerformUnwind (Selector segueAction, UIViewController fromViewController, [NullAllowed] NSObject sender);

		[Deprecated (PlatformName.iOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("viewControllerForUnwindSegueAction:fromViewController:withSender:")]
		UIViewController GetViewControllerForUnwind (Selector segueAction, UIViewController fromViewController, NSObject sender);

		[Deprecated (PlatformName.iOS, 9, 0)]
		[Deprecated (PlatformName.TvOS, 9, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		[Export ("segueForUnwindingToViewController:fromViewController:identifier:")]
		UIStoryboardSegue GetSegueForUnwinding (UIViewController toViewController, UIViewController fromViewController, string identifier);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("supportedInterfaceOrientations")]
		UIInterfaceOrientationMask GetSupportedInterfaceOrientations ();

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("preferredInterfaceOrientationForPresentation")]
		UIInterfaceOrientation PreferredInterfaceOrientationForPresentation ();

		[NoTV]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use Adaptive View Controllers instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use Adaptive View Controllers instead.")]
		[Export ("shouldAutomaticallyForwardRotationMethods")]
		bool ShouldAutomaticallyForwardRotationMethods { get; }

		[Export ("shouldAutomaticallyForwardAppearanceMethods")]
		bool ShouldAutomaticallyForwardAppearanceMethods { get; }

		[NullAllowed] // by default this property is null
		[Export ("restorationIdentifier", ArgumentSemantic.Copy)]
		string RestorationIdentifier { get; set; }

		[NullAllowed]
		[Export ("restorationClass")]
		Class RestorationClass { get; set; }

		[Export ("encodeRestorableStateWithCoder:")]
		void EncodeRestorableState (NSCoder coder);

		[Export ("decodeRestorableStateWithCoder:")]
		void DecodeRestorableState (NSCoder coder);

		[Export ("updateViewConstraints")]
		void UpdateViewConstraints ();

		[Deprecated (PlatformName.iOS, 16, 0)]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 16, 0)]
		[Export ("shouldAutorotate")]
		bool ShouldAutorotate ();

		[Export ("edgesForExtendedLayout", ArgumentSemantic.Assign)]
		UIRectEdge EdgesForExtendedLayout { get; set; }

		[Export ("extendedLayoutIncludesOpaqueBars", ArgumentSemantic.Assign)]
		bool ExtendedLayoutIncludesOpaqueBars { get; set; }

		[Deprecated (PlatformName.iOS, 11, 0, message: "Use 'UIScrollView.ContentInsetAdjustmentBehavior' instead.")]
		[Deprecated (PlatformName.TvOS, 11, 0, message: "Use 'UIScrollView.ContentInsetAdjustmentBehavior' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIScrollView.ContentInsetAdjustmentBehavior' instead.")]
		[Export ("automaticallyAdjustsScrollViewInsets", ArgumentSemantic.Assign)]
		bool AutomaticallyAdjustsScrollViewInsets { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("setContentScrollView:forEdge:")]
		void SetContentScrollView ([NullAllowed] UIScrollView scrollView, NSDirectionalRectEdge edge);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("contentScrollViewForEdge:")]
		[return: NullAllowed]
		UIScrollView GetContentScrollView (NSDirectionalRectEdge edge);

		[Export ("preferredContentSize", ArgumentSemantic.Copy)]
		new CGSize PreferredContentSize { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("preferredStatusBarStyle")]
		UIStatusBarStyle PreferredStatusBarStyle ();

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("prefersStatusBarHidden")]
		bool PrefersStatusBarHidden ();

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setNeedsStatusBarAppearanceUpdate")]
		void SetNeedsStatusBarAppearanceUpdate ();

		[Export ("applicationFinishedRestoringState")]
		void ApplicationFinishedRestoringState ();

		[Export ("transitioningDelegate", ArgumentSemantic.Assign), NullAllowed]
		NSObject WeakTransitioningDelegate { get; set; }

		/// <summary>A delegate object that is responsible for producing <see cref="UIKit.IUIViewControllerAnimatedTransitioning" />s for custom presentation.</summary>
		///         <value>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="nullallowed">This value can be <see langword="null" />.</para>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Wrap ("WeakTransitioningDelegate")]
		IUIViewControllerTransitioningDelegate TransitioningDelegate { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("childViewControllerForStatusBarStyle")]
		[return: NullAllowed]
		UIViewController ChildViewControllerForStatusBarStyle ();

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("childViewControllerForStatusBarHidden")]
		[return: NullAllowed]
		UIViewController ChildViewControllerForStatusBarHidden ();

		[Deprecated (PlatformName.iOS, 11, 0, message: "Use 'UIView.SafeAreaLayoutGuide.TopAnchor' instead.")]
		[Deprecated (PlatformName.TvOS, 11, 0, message: "Use 'UIView.SafeAreaLayoutGuide.TopAnchor' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIView.SafeAreaLayoutGuide.TopAnchor' instead.")]
		[Export ("topLayoutGuide")]
		IUILayoutSupport TopLayoutGuide { get; }

		[Deprecated (PlatformName.iOS, 11, 0, message: "Use 'UIView.SafeAreaLayoutGuide.BottomAnchor' instead.")]
		[Deprecated (PlatformName.TvOS, 11, 0, message: "Use 'UIView.SafeAreaLayoutGuide.BottomAnchor' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIView.SafeAreaLayoutGuide.BottomAnchor' instead.")]
		[Export ("bottomLayoutGuide")]
		IUILayoutSupport BottomLayoutGuide { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("preferredStatusBarUpdateAnimation")]
		UIStatusBarAnimation PreferredStatusBarUpdateAnimation { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("modalPresentationCapturesStatusBarAppearance", ArgumentSemantic.Assign)]
		bool ModalPresentationCapturesStatusBarAppearance { get; set; }

		//
		// iOS 8
		//

		[MacCatalyst (13, 1)]
		[Export ("targetViewControllerForAction:sender:")]
		[return: NullAllowed]
		UIViewController GetTargetViewControllerForAction (Selector action, [NullAllowed] NSObject sender);

		[MacCatalyst (13, 1)]
		[Export ("showViewController:sender:")]
		void ShowViewController (UIViewController vc, [NullAllowed] NSObject sender);

		[MacCatalyst (13, 1)]
		[Export ("showDetailViewController:sender:")]
		void ShowDetailViewController (UIViewController vc, [NullAllowed] NSObject sender);

		[Deprecated (PlatformName.iOS, 17, 0, message: "Use the 'TraitOverrides' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Use the 'TraitOverrides' instead.")]
		[Deprecated (PlatformName.TvOS, 17, 0, message: "Use the 'TraitOverrides' instead.")]
		[MacCatalyst (13, 1)]
		[Export ("setOverrideTraitCollection:forChildViewController:")]
		void SetOverrideTraitCollection (UITraitCollection collection, UIViewController childViewController);

		[Deprecated (PlatformName.iOS, 17, 0, message: "Use the 'TraitOverrides' property of th echild view controller instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Use the 'TraitOverrides' property of th echild view controller instead.")]
		[Deprecated (PlatformName.TvOS, 17, 0, message: "Use the 'TraitOverrides' property of th echild view controller instead.")]
		[MacCatalyst (13, 1)]
		[Export ("overrideTraitCollectionForChildViewController:")]
		UITraitCollection GetOverrideTraitCollectionForChildViewController (UIViewController childViewController);

		[MacCatalyst (13, 1)]
		[NullAllowed]
		[Export ("extensionContext")]
		NSExtensionContext ExtensionContext { get; }

		[MacCatalyst (13, 1)]
		[NullAllowed]
		[Export ("presentationController")]
		UIPresentationController PresentationController { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed]
		[Export ("popoverPresentationController")]
		UIPopoverPresentationController PopoverPresentationController { get; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("sheetPresentationController")]
		UISheetPresentationController SheetPresentationController { get; }

		/// <include file="../docs/api/UIKit/UIViewController.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIViewController.ShowDetailTargetDidChangeNotification']/*" />
		[MacCatalyst (13, 1)]
		[Field ("UIViewControllerShowDetailTargetDidChangeNotification")]
		[Notification]
		NSString ShowDetailTargetDidChangeNotification { get; }

		[MacCatalyst (13, 1)]
		[Export ("loadViewIfNeeded")]
		void LoadViewIfNeeded ();

		[MacCatalyst (13, 1)]
		[Export ("viewIfLoaded", ArgumentSemantic.Strong), NullAllowed]
		UIView ViewIfLoaded { get; }

		[MacCatalyst (13, 1)]
		[Export ("allowedChildViewControllersForUnwindingFromSource:")]
		UIViewController [] GetAllowedChildViewControllersForUnwinding (UIStoryboardUnwindSegueSource segueSource);

		[MacCatalyst (13, 1)]
		[Export ("childViewControllerContainingSegueSource:")]
		[return: NullAllowed]
		UIViewController GetChildViewControllerContainingSegueSource (UIStoryboardUnwindSegueSource segueSource);

		[MacCatalyst (13, 1)]
		[Export ("unwindForSegue:towardsViewController:")]
		void Unwind (UIStoryboardSegue unwindSegue, UIViewController subsequentVC);

		[MacCatalyst (13, 1)]
		[Export ("addKeyCommand:")]
		void AddKeyCommand (UIKeyCommand command);

		[MacCatalyst (13, 1)]
		[Export ("removeKeyCommand:")]
		void RemoveKeyCommand (UIKeyCommand command);

		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Export ("registerForPreviewingWithDelegate:sourceView:")]
		IUIViewControllerPreviewing RegisterForPreviewingWithDelegate (IUIViewControllerPreviewingDelegate previewingDelegate, UIView sourceView);

		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Export ("unregisterForPreviewingWithContext:")]
		void UnregisterForPreviewingWithContext (IUIViewControllerPreviewing previewing);

		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Replaced by 'UIContextMenuInteraction'.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'UIContextMenuInteraction'.")]
		[Export ("previewActionItems")]
		IUIPreviewActionItem [] PreviewActionItems { get; }

		/// <summary>Constant used to identify broken <see cref="UIKit.UIViewController" /> hierarchies.</summary>
		///         <value>To be added.</value>
		///         <remarks>
		///           <para>This identifier is used to identify the exception thrown when a <see cref="UIKit.UIView" /> is added to the <see cref="UIKit.UIView" /> hierarchy, but that <see cref="UIKit.UIView" />'s <see cref="UIKit.UIViewController" /> is not part of the <see cref="UIKit.UIViewController" /> hierarchy. In other words, the <see cref="UIKit.UIView" /> hierarchy and <see cref="UIKit.UIViewController" /> hierarchy must be consistent.</para>
		///         </remarks>
		[Field ("UIViewControllerHierarchyInconsistencyException")]
		NSString HierarchyInconsistencyException { get; }

		[MacCatalyst (13, 1)]
		[Export ("restoresFocusAfterTransition")]
		bool RestoresFocusAfterTransition { get; set; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("focusGroupIdentifier")]
		new string FocusGroupIdentifier { get; set; }

		[NoiOS]
		[NoMacCatalyst]
		[Export ("preferredUserInterfaceStyle")]
		UIUserInterfaceStyle PreferredUserInterfaceStyle { get; }

		[NoiOS]
		[NoMacCatalyst]
		[Export ("setNeedsUserInterfaceAppearanceUpdate")]
		void SetNeedsUserInterfaceAppearanceUpdate ();

		[NoiOS]
		[NoMacCatalyst]
		[NullAllowed, Export ("childViewControllerForUserInterfaceStyle")]
		UIViewController ChildViewControllerForUserInterfaceStyle { get; }

		[MacCatalyst (13, 1)]
		[Export ("additionalSafeAreaInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets AdditionalSafeAreaInsets { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("systemMinimumLayoutMargins")]
		NSDirectionalEdgeInsets SystemMinimumLayoutMargins { get; }

		[MacCatalyst (13, 1)]
		[Export ("viewRespectsSystemMinimumLayoutMargins")]
		bool ViewRespectsSystemMinimumLayoutMargins { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("viewLayoutMarginsDidChange")]
		[RequiresSuper]
		void ViewLayoutMarginsDidChange ();

		[MacCatalyst (13, 1)]
		[Export ("viewSafeAreaInsetsDidChange")]
		[RequiresSuper]
		void ViewSafeAreaInsetsDidChange ();

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("childViewControllerForScreenEdgesDeferringSystemGestures")]
		UIViewController ChildViewControllerForScreenEdgesDeferringSystemGestures { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("preferredScreenEdgesDeferringSystemGestures")]
		UIRectEdge PreferredScreenEdgesDeferringSystemGestures { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setNeedsUpdateOfScreenEdgesDeferringSystemGestures")]
		void SetNeedsUpdateOfScreenEdgesDeferringSystemGestures ();

		// UIHomeIndicatorAutoHidden (UIViewController) category

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("childViewControllerForHomeIndicatorAutoHidden")]
		UIViewController ChildViewControllerForHomeIndicatorAutoHidden { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("prefersHomeIndicatorAutoHidden")]
		bool PrefersHomeIndicatorAutoHidden { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setNeedsUpdateOfHomeIndicatorAutoHidden")]
		void SetNeedsUpdateOfHomeIndicatorAutoHidden ();

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("overrideUserInterfaceStyle", ArgumentSemantic.Assign)]
		UIUserInterfaceStyle OverrideUserInterfaceStyle { get; set; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("modalInPresentation")]
		bool ModalInPresentation { [Bind ("isModalInPresentation")] get; set; }

		// From UIViewController (UIPerformsActions)

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("performsActionsWhilePresentingModally")]
		bool PerformsActionsWhilePresentingModally { get; }

		// From UIViewController (UIPointerLockSupport) category

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("childViewControllerForPointerLock")]
		UIViewController ChildViewControllerForPointerLock { get; }

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("prefersPointerLocked")]
		bool PrefersPointerLocked { get; }

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("setNeedsUpdateOfPrefersPointerLocked")]
		void SetNeedsUpdateOfPrefersPointerLocked ();

		[NoiOS]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("setNeedsTouchBarUpdate")]
		void SetNeedsTouchBarUpdate ();

		[NoiOS]
		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed]
		[Export ("childViewControllerForTouchBar")]
		UIViewController ChildViewControllerForTouchBar { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("interactionActivityTrackingBaseName")]
		[NullAllowed]
		string InteractionActivityTrackingBaseName { get; set; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("activePresentationController")]
		[NullAllowed]
		UIPresentationController ActivePresentationController { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("setNeedsUpdateOfSupportedInterfaceOrientations")]
		void SetNeedsUpdateOfSupportedInterfaceOrientations ();

		// from the category (UIViewController) <UITraitChangeObservable>

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("traitOverrides")]
		IUITraitOverrides TraitOverrides { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("updateTraitsIfNeeded")]
		void UpdateTraitsIfNeeded ();

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[NullAllowed, Export ("contentUnavailableConfiguration", ArgumentSemantic.Copy)]
		IUIContentConfiguration ContentUnavailableConfiguration { get; set; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("contentUnavailableConfigurationState")]
		UIContentUnavailableConfigurationState ContentUnavailableConfigurationState { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("setNeedsUpdateContentUnavailableConfiguration")]
		void SetNeedsUpdateContentUnavailableConfiguration ();

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("updateContentUnavailableConfigurationUsingState:")]
		void UpdateContentUnavailableConfiguration (UIContentUnavailableConfigurationState state);

		[TV (13, 0), iOS (13, 0), MacCatalyst (13, 1)]
		[Export ("viewIsAppearing:")]
		void ViewIsAppearing (bool animated);

		// Inlined from the UITab category
		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("tab", ArgumentSemantic.Weak), NullAllowed]
		UITab Tab { get; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("preferredTransition", ArgumentSemantic.Strong), NullAllowed]
		UIViewControllerTransition PreferredTransition { get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIViewControllerContextTransitioning" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIViewControllerContextTransitioning" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIViewControllerContextTransitioning" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIViewControllerContextTransitioning_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	/// <summary>Extension methods to the <see cref="UIKit.IUIViewControllerContextTransitioning" /> interface to support all the methods from the <see cref="UIKit.UIViewControllerContextTransitioning" /> protocol.</summary>
	/// <remarks>
	///       <para>The extension methods for <see cref="UIKit.IUIViewControllerContextTransitioning" /> allow developers to treat instances of the interface as having all the optional methods of the original <see cref="UIKit.UIViewControllerContextTransitioning" /> protocol.   Since the interface only contains the required members, these extension methods allow developers to call the optional members of the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Protocol, Model, BaseType (typeof (NSObject))]
	partial interface UIViewControllerContextTransitioning {
		/// <summary>The UIView that is the superview of the UIView's involved in the transition.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("containerView")]
		UIView ContainerView { get; }

		/// <summary>Whether the transition is animated.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Abstract]
		[Export ("isAnimated")]
		bool IsAnimated { get; }

		/// <summary>Whether the transition is interactive.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Abstract]
		[Export ("isInteractive")]
		bool IsInteractive { get; }

		/// <summary>Whether the transition was cancelled.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("transitionWasCancelled")]
		bool TransitionWasCancelled { get; }

		/// <summary>The presentation style of the transition.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("presentationStyle")]
		UIModalPresentationStyle PresentationStyle { get; }

		/// <param name="percentComplete">To be added.</param>
		/// <summary>Updates the completion percentage of the transition.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("updateInteractiveTransition:")]
		void UpdateInteractiveTransition (nfloat percentComplete);

		/// <summary>User interactions have signaled the end of the transition.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("finishInteractiveTransition")]
		void FinishInteractiveTransition ();

		/// <summary>Indicates that a user action canceled the transition.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("cancelInteractiveTransition")]
		void CancelInteractiveTransition ();

		/// <param name="didComplete">To be added.</param>
		/// <summary>Indicates the transition animation has completed.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("completeTransition:")]
		void CompleteTransition (bool didComplete);

		/// <param name="uiTransitionKey">Should be a value from <see cref="UIKit.UITransitionContext" />.</param>
		/// <summary>Retrieves the UIViewController associated with the specified uiTransitionKey.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("viewControllerForKey:")]
		UIViewController GetViewControllerForKey (NSString uiTransitionKey);

		/// <param name="vc">To be added.</param>
		/// <summary>The beginning RectangleF for the Frame of the specified UIViewController's UIView.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("initialFrameForViewController:")]
		CGRect GetInitialFrameForViewController (UIViewController vc);

		/// <param name="vc">To be added.</param>
		/// <summary>The ending RectangleF for the Frame of the specified UIViewController's UIView.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("finalFrameForViewController:")]
		CGRect GetFinalFrameForViewController (UIViewController vc);

		/// <param name="uiTransitionContextToOrFromKey">To be added.</param>
		/// <summary>Returns the to- or from-key for the transition.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("viewForKey:")]
		UIView GetViewFor (NSString uiTransitionContextToOrFromKey);

		/// <summary>Gets the transform that indicates the angle of the rotation that is applied during the transition.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("targetTransform")]
		CGAffineTransform TargetTransform { get; }


		/// <summary>Pauses the animations.</summary>
		[Abstract]
		[MacCatalyst (13, 1)]
		[Export ("pauseInteractiveTransition")]
		void PauseInteractiveTransition ();
	}

	interface IUIViewControllerContextTransitioning {
	}

	interface IUITraitEnvironment { }
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITraitEnvironment" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITraitEnvironment" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITraitEnvironment" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITraitEnvironment_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	[MacCatalyst (13, 1)]
	partial interface UITraitEnvironment {
		/// <summary>Gets the trait collection that describes the environment.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("traitCollection")]
		UITraitCollection TraitCollection { get; }

		/// <param name="previousTraitCollection">To be added.</param>
		/// <summary>The trait collection that describes the environmnent changed.</summary>
		/// <remarks>
		///           <para>
		///           </para>
		///         </remarks>
		[Deprecated (PlatformName.iOS, 17, 0, message: "Use the 'UITraitChangeObservable' protocol instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Use the 'UITraitChangeObservable' protocol instead.")]
		[Deprecated (PlatformName.TvOS, 17, 0, message: "Use the 'UITraitChangeObservable' protocol instead.")]
		[Abstract]
		[Export ("traitCollectionDidChange:")]
		void TraitCollectionDidChange ([NullAllowed] UITraitCollection previousTraitCollection);
	}

	delegate void UITraitMutations (IUIMutableTraits mutableTraits);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	[ThreadSafe] // Documentation doesn't say, but it this class doesn't seem to trigger Apple's Main Thread Checker.
	partial interface UITraitCollection : NSCopying, NSSecureCoding {
		[Export ("userInterfaceIdiom")]
		UIUserInterfaceIdiom UserInterfaceIdiom { get; }

		[MacCatalyst (13, 1)]
		[Export ("userInterfaceStyle")]
		UIUserInterfaceStyle UserInterfaceStyle { get; }

		[Export ("displayScale")]
		nfloat DisplayScale { get; }

		[Export ("horizontalSizeClass")]
		UIUserInterfaceSizeClass HorizontalSizeClass { get; }

		[Export ("verticalSizeClass")]
		UIUserInterfaceSizeClass VerticalSizeClass { get; }

		[Deprecated (PlatformName.iOS, 17, 0, message: "Compare the values for the specific items instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Compare the values for the specific items instead.")]
		[Deprecated (PlatformName.TvOS, 17, 0, message: "Compare the values for the specific items instead.")]
		[Export ("containsTraitsInCollection:")]
		bool Contains (UITraitCollection trait);

		[Deprecated (PlatformName.iOS, 17, 0, message: "Use 'GetTraitCollectionWithTraits(UITraitMutations)' and 'GetTraitCollectionByModifyingTraits(UITraitMutations)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 0, message: "Use 'GetTraitCollectionWithTraits(UITraitMutations)' and 'GetTraitCollectionByModifyingTraits(UITraitMutations)' instead.")]
		[Deprecated (PlatformName.TvOS, 17, 0, message: "Use 'GetTraitCollectionWithTraits(UITraitMutations)' and 'GetTraitCollectionByModifyingTraits(UITraitMutations)' instead.")]
		[Static, Export ("traitCollectionWithTraitsFromCollections:")]
		UITraitCollection FromTraitsFromCollections (UITraitCollection [] traitCollections);

		[Static, Export ("traitCollectionWithUserInterfaceIdiom:")]
		UITraitCollection FromUserInterfaceIdiom (UIUserInterfaceIdiom idiom);

		/// <param name="scale">Display scale to set.</param>
		/// <summary>Creates a new UITraitCollection object where only the display scale has been specified.</summary>
		/// <returns>New instance of UITraitCollection with a single element specified.</returns>
		/// <remarks>
		///         </remarks>
		[Static, Export ("traitCollectionWithDisplayScale:")]
		UITraitCollection FromDisplayScale (nfloat scale);

		[Static, Export ("traitCollectionWithHorizontalSizeClass:")]
		UITraitCollection FromHorizontalSizeClass (UIUserInterfaceSizeClass horizontalSizeClass);

		[Static, Export ("traitCollectionWithVerticalSizeClass:")]
		UITraitCollection FromVerticalSizeClass (UIUserInterfaceSizeClass verticalSizeClass);

		[MacCatalyst (13, 1)]
		[Static, Export ("traitCollectionWithForceTouchCapability:")]
		UITraitCollection FromForceTouchCapability (UIForceTouchCapability capability);

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("traitCollectionWithUserInterfaceStyle:")]
		UITraitCollection FromUserInterfaceStyle (UIUserInterfaceStyle userInterfaceStyle);

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("traitCollectionWithDisplayGamut:")]
		UITraitCollection FromDisplayGamut (UIDisplayGamut displayGamut);

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("traitCollectionWithLayoutDirection:")]
		UITraitCollection FromLayoutDirection (UITraitEnvironmentLayoutDirection layoutDirection);

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("traitCollectionWithPreferredContentSizeCategory:")]
		[Internal]
		UITraitCollection FromPreferredContentSizeCategory (NSString preferredContentSizeCategory);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("traitCollectionWithSceneCaptureState:")]
		UITraitCollection FromSceneCaptureState (UISceneCaptureState sceneCaptureState);

		[MacCatalyst (13, 1)]
		[Export ("forceTouchCapability")]
		UIForceTouchCapability ForceTouchCapability { get; }

		[MacCatalyst (13, 1)]
		[Export ("displayGamut")]
		UIDisplayGamut DisplayGamut { get; }

		[MacCatalyst (13, 1)]
		[Export ("preferredContentSizeCategory")]
		string PreferredContentSizeCategory { get; }

		[MacCatalyst (13, 1)]
		[Export ("layoutDirection")]
		UITraitEnvironmentLayoutDirection LayoutDirection { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("sceneCaptureState")]
		UISceneCaptureState SceneCaptureState { get; }

		// This class has other members using From*
		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("traitCollectionWithAccessibilityContrast:")]
		UITraitCollection FromAccessibilityContrast (UIAccessibilityContrast accessibilityContrast);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("accessibilityContrast")]
		UIAccessibilityContrast AccessibilityContrast { get; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("traitCollectionWithUserInterfaceLevel:")]
		UITraitCollection FromUserInterfaceLevel (UIUserInterfaceLevel userInterfaceLevel);

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("userInterfaceLevel")]
		UIUserInterfaceLevel UserInterfaceLevel { get; }

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("traitCollectionWithLegibilityWeight:")]
		UITraitCollection FromLegibilityWeight (UILegibilityWeight legibilityWeight);

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("legibilityWeight")]
		UILegibilityWeight LegibilityWeight { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Static]
		[Export ("traitCollectionWithActiveAppearance:")]
		UITraitCollection FromActiveAppearance (UIUserInterfaceActiveAppearance userInterfaceActiveAppearance); // We have other From* methods

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("activeAppearance")]
		UIUserInterfaceActiveAppearance ActiveAppearance { get; }

		// From UITraitCollection (CurrentTraitCollection)

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("currentTraitCollection", ArgumentSemantic.Strong)]
		UITraitCollection CurrentTraitCollection { get; set; }

		[ThreadSafe]
		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("performAsCurrentTraitCollection:")]
		void PerformAsCurrentTraitCollection (Action actions);

		// From UITraitCollection (CurrentTraitCollection)

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("hasDifferentColorAppearanceComparedToTraitCollection:")]
		bool HasDifferentColorAppearanceComparedTo ([NullAllowed] UITraitCollection traitCollection);

		// From UITraitCollection (ImageConfiguration)

		[TV (13, 0), iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("imageConfiguration", ArgumentSemantic.Strong)]
		UIImageConfiguration ImageConfiguration { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("traitCollectionWithToolbarItemPresentationSize:")]
		UITraitCollection GetTraitCollection (UINSToolbarItemPresentationSize toolbarItemPresentationSize);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("toolbarItemPresentationSize")]
		UINSToolbarItemPresentationSize ToolbarItemPresentationSize { get; }

#if !XAMCORE_5_0
		[Obsolete ("Use the overload that takes a 'UITraitMutations' parameter instead.")]
		[EditorBrowsable (EditorBrowsableState.Never)]
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("traitCollectionWithTraits:")]
		UITraitCollection GetTraitCollectionWithTraits (Func<IUIMutableTraits> mutations);
#endif

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("traitCollectionWithTraits:")]
		UITraitCollection GetTraitCollectionWithTraits (UITraitMutations mutations);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("traitCollectionByModifyingTraits:")]
		UITraitCollection GetTraitCollectionByModifyingTraits (UITraitMutations mutations);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("traitCollectionWithCGFloatValue:forTrait:")]
		UITraitCollection GetTraitCollectionWithValue (nfloat value, IUICGFloatTraitDefinition trait);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("traitCollectionByReplacingCGFloatValue:forTrait:")]
		UITraitCollection GetTraitCollectionByReplacingValue (nfloat value, IUICGFloatTraitDefinition trait);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("valueForCGFloatTrait:")]
		nfloat GetValueForTrait (IUICGFloatTraitDefinition trait);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("traitCollectionWithNSIntegerValue:forTrait:")]
		UITraitCollection GetTraitCollectionWithValue (nint value, IUINSIntegerTraitDefinition trait);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("traitCollectionByReplacingNSIntegerValue:forTrait:")]
		UITraitCollection TraitCollectionByReplacingValue (nint value, IUINSIntegerTraitDefinition trait);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("valueForNSIntegerTrait:")]
		nint GetValueForTrait (IUINSIntegerTraitDefinition trait);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("traitCollectionWithObject:forTrait:")]
		UITraitCollection GetTraitCollectionWithObject ([NullAllowed] NSObject @object, IUIObjectTraitDefinition trait);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("traitCollectionByReplacingObject:forTrait:")]
		UITraitCollection GetTraitCollectionByReplacingObject ([NullAllowed] NSObject @object, IUIObjectTraitDefinition trait);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("objectForTrait:")]
		[return: NullAllowed]
		NSObject GetObject (IUIObjectTraitDefinition trait);

#if !XAMCORE_5_0
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("changedTraitsFromTraitCollection:")]
		[Obsolete ("Use 'GetChangedTraits2' instead.")]
		NSSet<IUITraitDefinition> GetChangedTraits ([NullAllowed] UITraitCollection traitCollection);
#endif

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("changedTraitsFromTraitCollection:")]
#if XAMCORE_5_0
		NSSet<Class> GetChangedTraits ([NullAllowed] UITraitCollection traitCollection);
#else
		[Sealed]
		NSSet<Class> GetChangedTraits2 ([NullAllowed] UITraitCollection traitCollection);
#endif

#if !XAMCORE_5_0
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("systemTraitsAffectingColorAppearance")]
		[Obsolete ("Use 'SystemTraitsAffectingColorAppearance2' instead.")]
		IUITraitDefinition [] SystemTraitsAffectingColorAppearance { get; }
#endif

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("systemTraitsAffectingColorAppearance")]
#if XAMCORE_5_0
		Class [] SystemTraitsAffectingColorAppearance { get; }
#else
		[Sealed]
		Class [] SystemTraitsAffectingColorAppearance2 { get; }
#endif

#if !XAMCORE_5_0
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("systemTraitsAffectingImageLookup")]
		[Obsolete ("Use 'SystemTraitsAffectingImageLookup2' instead.")]
		IUITraitDefinition [] SystemTraitsAffectingImageLookup { get; }
#endif

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("systemTraitsAffectingImageLookup")]
#if XAMCORE_5_0
		Class [] SystemTraitsAffectingImageLookup { get; }
#else
		[Sealed]
		Class [] SystemTraitsAffectingImageLookup2 { get; }
#endif

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("typesettingLanguage")]
		string TypesettingLanguage { get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("traitCollectionWithTypesettingLanguage:")]
		UITraitCollection GetTraitCollection (string language);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Static]
		[Export ("traitCollectionWithImageDynamicRange:")]
		UITraitCollection GetTraitCollection (UIImageDynamicRange imageDynamicRange);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("imageDynamicRange")]
		UIImageDynamicRange ImageDynamicRange { get; }

		[Static]
		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("traitCollectionWithListEnvironment:")]
		UITraitCollection GetTraitCollection (UIListEnvironment listEnvironment);

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("listEnvironment")]
		UIListEnvironment ListEnvironment { get; }
	}

	/// <summary>Provides the constants for <see cref="UIKit.UIViewControllerContextTransitioning.GetViewControllerForKey(Foundation.NSString)" />.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Static]
	partial interface UITransitionContext {
		/// <summary>Represents the value associated with the constant UITransitionContextFromViewControllerKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UITransitionContextFromViewControllerKey")]
		NSString FromViewControllerKey { get; }

		/// <summary>Represents the value associated with the constant UITransitionContextToViewControllerKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Field ("UITransitionContextToViewControllerKey")]
		NSString ToViewControllerKey { get; }

		/// <summary>Represents the value associated with the constant UITransitionContextFromViewKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UITransitionContextFromViewKey")]
		NSString FromViewKey { get; }

		/// <summary>Represents the value associated with the constant UITransitionContextToViewKey</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UITransitionContextToViewKey")]
		NSString ToViewKey { get; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIViewControllerAnimatedTransitioning" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIViewControllerAnimatedTransitioning" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIViewControllerAnimatedTransitioning" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIViewControllerAnimatedTransitioning_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Model, BaseType (typeof (NSObject))]
	[Protocol]
	partial interface UIViewControllerAnimatedTransitioning {
		/// <param name="transitionContext">To be added.</param>
		/// <summary>The duration, in seconds, of the transition.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("transitionDuration:")]
		double TransitionDuration (IUIViewControllerContextTransitioning transitionContext);

		/// <param name="transitionContext">To be added.</param>
		/// <summary>Animate the transition with the animator object.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("animateTransition:")]
		void AnimateTransition (IUIViewControllerContextTransitioning transitionContext);

		/// <param name="transitionContext">To be added.</param>
		/// <summary>Gets the <see cref="UIKit.IUIViewControllerAnimatedTransitioning" /> used for the transition.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("interruptibleAnimatorForTransition:")]
		IUIViewImplicitlyAnimating GetInterruptibleAnimator (IUIViewControllerContextTransitioning transitionContext);

		/// <param name="transitionCompleted">To be added.</param>
		/// <summary>Indicates that the animation has ended.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("animationEnded:")]
		void AnimationEnded (bool transitionCompleted);
	}
	interface IUIViewControllerAnimatedTransitioning { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIViewControllerInteractiveTransitioning" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIViewControllerInteractiveTransitioning" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIViewControllerInteractiveTransitioning" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIViewControllerInteractiveTransitioning_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Model, BaseType (typeof (NSObject))]
	[Protocol]
	partial interface UIViewControllerInteractiveTransitioning {
		/// <param name="transitionContext">To be added.</param>
		/// <summary>Sets up and begins a view controller interactive transition.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("startInteractiveTransition:")]
		void StartInteractiveTransition (IUIViewControllerContextTransitioning transitionContext);

		/// <summary>Returns the overall relative speed of an animation. The default value is 1.0.</summary>
		[Export ("completionSpeed")]
		nfloat CompletionSpeed { get; }

		/// <summary>Returns the completion curve, which controls the speed of the animation as it progresses.</summary>
		[Export ("completionCurve")]
		UIViewAnimationCurve CompletionCurve { get; }

		/// <summary>Gets whether the transition is interactive.</summary>
		/// <returns>The default value is <see langword="true" />.</returns>
		[MacCatalyst (13, 1)]
		[Export ("wantsInteractiveStart")]
		bool WantsInteractiveStart { get; }
	}
	interface IUIViewControllerInteractiveTransitioning { }

	interface IUIViewControllerTransitioningDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIViewControllerTransitioningDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIViewControllerTransitioningDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIViewControllerTransitioningDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIViewControllerTransitioningDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Model, BaseType (typeof (NSObject))]
	[Protocol]
	partial interface UIViewControllerTransitioningDelegate {
		/// <param name="presented">To be added.</param>
		/// <param name="presenting">To be added.</param>
		/// <param name="source">To be added.</param>
		/// <summary>Returns the animation controller that is used when <paramref name="presenting" /> presents <paramref name="presented" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("animationControllerForPresentedController:presentingController:sourceController:")]
		IUIViewControllerAnimatedTransitioning GetAnimationControllerForPresentedController (UIViewController presented, UIViewController presenting, UIViewController source);

		/// <param name="dismissed">To be added.</param>
		/// <summary>When a dismissal animation is called, this method can be overridden to provide a custom UIViewControllerAnimatedTransitioning.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("animationControllerForDismissedController:")]
		IUIViewControllerAnimatedTransitioning GetAnimationControllerForDismissedController (UIViewController dismissed);

		/// <param name="animator">To be added.</param>
		/// <summary>When a controller is presented and an interaction desired, this method can be overridden to provide a custom UIViewControllerInteractiveTransitioning.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("interactionControllerForPresentation:")]
		IUIViewControllerInteractiveTransitioning GetInteractionControllerForPresentation (IUIViewControllerAnimatedTransitioning animator);

		/// <param name="animator">To be added.</param>
		/// <summary>When a controller is dismissed and an interaction is desired, this method can be overridden to provide a custom UIViewControllerInteractiveTransitioning.|When a dismissal interaction is called and an interaction animation is desired, t</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("interactionControllerForDismissal:")]
		IUIViewControllerInteractiveTransitioning GetInteractionControllerForDismissal (IUIViewControllerAnimatedTransitioning animator);

		/// <param name="presentedViewController">To be added.</param>
		/// <param name="presentingViewController">
		///           <para>To be added.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <param name="sourceViewController">To be added.</param>
		/// <summary>Returns the presentation controller that is used when <paramref name="presentingViewController" /> presents <paramref name="presentedViewController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("presentationControllerForPresentedViewController:presentingViewController:sourceViewController:")]
		UIPresentationController GetPresentationControllerForPresentedViewController (UIViewController presentedViewController, [NullAllowed] UIViewController presentingViewController, UIViewController sourceViewController);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	partial interface UIPercentDrivenInteractiveTransition : UIViewControllerInteractiveTransitioning {
		[Export ("duration")]
		nfloat Duration { get; }

		[Export ("percentComplete")]
		nfloat PercentComplete { get; }

		[Export ("completionSpeed", ArgumentSemantic.Assign)]
		new nfloat CompletionSpeed { get; set; }

		[Export ("completionCurve", ArgumentSemantic.Assign)]
		new UIViewAnimationCurve CompletionCurve { get; set; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("timingCurve", ArgumentSemantic.Strong)]
		IUITimingCurveProvider TimingCurve { get; set; }

		// getter comes from UIViewControllerInteractiveTransitioning but
		// headers declares a setter here
		[MacCatalyst (13, 1)]
		[Export ("wantsInteractiveStart")]
		new bool WantsInteractiveStart { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("pauseInteractiveTransition")]
		void PauseInteractiveTransition ();

		/// <param name="percentComplete">To be added.</param>
		/// <summary>Updates the completion percentage of the transition.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("updateInteractiveTransition:")]
		void UpdateInteractiveTransition (nfloat percentComplete);

		[Export ("cancelInteractiveTransition")]
		void CancelInteractiveTransition ();

		[Export ("finishInteractiveTransition")]
		void FinishInteractiveTransition ();
	}

	//
	// This protocol is only for consumption (there is no API to set a transition coordinator context,
	// you'll be provided an existing one), so we do not provide a model to subclass.
	//
	/// <summary>Interface that defines the context for coordination of a transition.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	partial interface UIViewControllerTransitionCoordinatorContext {
		/// <summary>
		///           <see langword="true" /> if the transition is explicitly animated or uses <see cref="UIKit.UIModalPresentationStyle.Custom" /> presentation.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("isAnimated")]
		bool IsAnimated { get; }

		/// <summary>The presentation style whose transition is being modified.</summary>
		/// <value>Use <see cref="UIKit.UIModalPresentationStyle.None" /> if the transition is not a modal presentation or dismissal.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("presentationStyle")]
		UIModalPresentationStyle PresentationStyle { get; }

		/// <summary>
		///           <see langword="true" /> iff <see cref="UIKit.IUIViewControllerTransitionCoordinatorContext.IsAnimated" /> is <see langword="true" /> and the transition was initiated interactively.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("initiallyInteractive")]
		bool InitiallyInteractive { get; }

		/// <summary>
		///           <see langword="true" /> if the transition is currently interactive.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("isInteractive")]
		bool IsInteractive { get; }

		/// <summary>
		///           <see langword="true" /> if the interactive transition is ending and the user canceled the transition.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("isCancelled")]
		bool IsCancelled { get; }

		/// <summary>The expected duration, in seconds, of the transition, if it is noninteractive.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("transitionDuration")]
		double TransitionDuration { get; }

		/// <summary>The percent of completion of a transition when it moves to the noninteractive completion phase.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("percentComplete")]
		nfloat PercentComplete { get; }

		/// <summary>The completion velocity for the view controller transition.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("completionVelocity")]
		nfloat CompletionVelocity { get; }

		/// <summary>The UIViewAnimationCurve for the view controller transition.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("completionCurve")]
		UIViewAnimationCurve CompletionCurve { get; }

		/// <param name="uiTransitionKey">To be added.</param>
		/// <summary>The UIViewController for the specified uiTransitionKey.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("viewControllerForKey:")]
		UIViewController GetViewControllerForKey (NSString uiTransitionKey);

		/// <summary>The container UIView for the view controller transition animation.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("containerView")]
		UIView ContainerView { get; }

		/// <summary>Returns the transform that describes the rotation of the transition.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[MacCatalyst (13, 1)]
		[Export ("targetTransform")]
		CGAffineTransform TargetTransform ();

		/// <param name="key">To be added.</param>
		/// <summary>Gets the transition that is specified by <paramref name="key" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[MacCatalyst (13, 1)]
		[Export ("viewForKey:")]
		[EditorBrowsable (EditorBrowsableState.Advanced)] // this is not the one we want to be seen (compat only)
		UIView GetTransitionViewControllerForKey (NSString key);

		[Abstract]
		[MacCatalyst (13, 1)]
		[Export ("isInterruptible")]
		bool IsInterruptible { get; }
	}
	interface IUIViewControllerTransitionCoordinatorContext { }

	//
	// This protocol is only for consumption (there is no API to set a transition coordinator,
	// only get an existing one), so we do not provide a model to subclass.
	//
	/// <summary>Interface that, together with the <see cref="UIKit.UIViewControllerTransitionCoordinator_Extensions" /> class, comprise the UIViewControllerTransitionCoordinator protocol.</summary>
	/// <remarks>To be added.</remarks>
	/// <summary>Extension class that, together with the <see cref="UIKit.IUIViewControllerTransitionCoordinator" /> interface, comprise the UIViewControllerTransitionCoordinator protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	partial interface UIViewControllerTransitionCoordinator : UIViewControllerTransitionCoordinatorContext {
		/// <param name="animate">To be added.</param>
		/// <param name="completion">To be added.</param>
		/// <summary>Runs the <paramref name="animate" /> animation simultaneously with the animated view controller transition, and runs <paramref name="completion" /> when it is finished.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("animateAlongsideTransition:completion:")]
		bool AnimateAlongsideTransition (Action<IUIViewControllerTransitionCoordinatorContext> animate,
						 [NullAllowed] Action<IUIViewControllerTransitionCoordinatorContext> completion);

		/// <param name="view">To be added.</param>
		/// <param name="animation">To be added.</param>
		/// <param name="completion">To be added.</param>
		/// <summary>Runs the <paramref name="animation" /> animation inside of <paramref name="view" />, and runs <paramref name="completion" /> when it is finished.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("animateAlongsideTransitionInView:animation:completion:")]
		bool AnimateAlongsideTransitionInView (UIView view, Action<IUIViewControllerTransitionCoordinatorContext> animation, [NullAllowed] Action<IUIViewControllerTransitionCoordinatorContext> completion);

		/// <param name="handler">To be added.</param>
		/// <summary>Developers should not use this deprecated method. Developers should use 'NotifyWhenInteractionChanges' instead.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'NotifyWhenInteractionChanges' instead.")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use 'NotifyWhenInteractionChanges' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NotifyWhenInteractionChanges' instead.")]
		[Export ("notifyWhenInteractionEndsUsingBlock:")]
		void NotifyWhenInteractionEndsUsingBlock (Action<IUIViewControllerTransitionCoordinatorContext> handler);

		/// <summary>Registers <paramref name="handler" /> to be called when the transition changes from interactive to non-interactive or vice versa.</summary>
		[Abstract]
		[MacCatalyst (13, 1)]
		[Export ("notifyWhenInteractionChangesUsingBlock:")]
		void NotifyWhenInteractionChanges (Action<IUIViewControllerTransitionCoordinatorContext> handler);
	}
	interface IUIViewControllerTransitionCoordinator { }

	/// <summary>Provides the <c>GetTransitionCoordinator</c> extension method for <see cref="UIKit.UIViewController" />s.</summary>
	/// <remarks>To be added.</remarks>
	/// <altmember cref="UIKit.UIViewController" />
	[MacCatalyst (13, 1)]
	[Category, BaseType (typeof (UIViewController))]
	partial interface TransitionCoordinator_UIViewController {
		/// <summary>The IUIViewControllerTransitionCoordinator coordinating the transition of the specified UIViewController.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("transitionCoordinator")]
		[return: NullAllowed]
		IUIViewControllerTransitionCoordinator GetTransitionCoordinator ();
	}

	/// <include file="../docs/api/UIKit/UIWebView.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIWebView']/*" />
	[NoMacCatalyst]
	[NoTV]
	[Deprecated (PlatformName.iOS, 12, 0, message: "No longer supported; please adopt 'WKWebView'.")]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "No longer supported; please adopt 'WKWebView'.")]
	[BaseType (typeof (UIView), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIWebViewDelegate) })]
	interface UIWebView : UIScrollViewDelegate {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIWebViewDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIWebViewDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIWebViewDelegate Delegate { get; set; }

		[Export ("loadRequest:")]
		void LoadRequest (NSUrlRequest r);

		[Export ("loadHTMLString:baseURL:")]
		void LoadHtmlString (string s, [NullAllowed] NSUrl baseUrl);

		[Export ("loadData:MIMEType:textEncodingName:baseURL:")]
		void LoadData (NSData data, string mimeType, string textEncodingName, NSUrl baseUrl);

		[Export ("request", ArgumentSemantic.Retain)]
		NSUrlRequest Request { get; }

		[Export ("reload")]
		void Reload ();

		[Export ("stopLoading")]
		void StopLoading ();

		[Export ("goBack")]
		void GoBack ();

		[Export ("goForward")]
		void GoForward ();

		[Export ("canGoBack")]
		bool CanGoBack { get; }

		[Export ("canGoForward")]
		bool CanGoForward { get; }

		/// <summary>Returns <see langword="true" /> if the web view is still loading content.  Read-only.</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[Export ("isLoading")]
		bool IsLoading { get; }

		[Export ("stringByEvaluatingJavaScriptFromString:")]
		string EvaluateJavascript (string script);

		[Export ("scalesPageToFit")]
		bool ScalesPageToFit { get; set; }

		[Export ("dataDetectorTypes")]
		UIDataDetectorType DataDetectorTypes { get; set; }

		[Export ("allowsInlineMediaPlayback")]
		bool AllowsInlineMediaPlayback { get; set; }

		[Export ("mediaPlaybackRequiresUserAction")]
		bool MediaPlaybackRequiresUserAction { get; set; }

		[Export ("scrollView", ArgumentSemantic.Retain)]
		UIScrollView ScrollView { get; }

		[Export ("mediaPlaybackAllowsAirPlay")]
		bool MediaPlaybackAllowsAirPlay { get; set; }

		[Export ("suppressesIncrementalRendering")]
		bool SuppressesIncrementalRendering { get; set; }

		[Export ("keyboardDisplayRequiresUserAction")]
		bool KeyboardDisplayRequiresUserAction { get; set; }

		[Export ("paginationMode")]
		UIWebPaginationMode PaginationMode { get; set; }

		[Export ("paginationBreakingMode")]
		UIWebPaginationBreakingMode PaginationBreakingMode { get; set; }

		[Export ("pageLength")]
		nfloat PageLength { get; set; }

		[Export ("gapBetweenPages")]
		nfloat GapBetweenPages { get; set; }

		[Export ("pageCount")]
		nint PageCount { get; }

		[Export ("allowsPictureInPictureMediaPlayback")]
		bool AllowsPictureInPictureMediaPlayback { get; set; }

		[Export ("allowsLinkPreview")]
		bool AllowsLinkPreview { get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIWebViewDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIWebViewDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIWebViewDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIWebViewDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIWebViewDelegate { }

	/// <summary>A class used to receive notifications from a UIWebView class.</summary>
	///     <remarks>
	/// A strongly typed implementation of a class that can be used to respond to events raised by the <see cref="UIKit.UIWebView" />.</remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWebViewDelegate_Protocol/index.html">Apple documentation for <c>UIWebViewDelegate</c></related>
	[NoMacCatalyst]
	[NoTV]
	[Deprecated (PlatformName.iOS, 12, 0, message: "No longer supported; please adopt 'WKWebView' APIs.")]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "No longer supported; please adopt 'WKWebView' APIs.")]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIWebViewDelegate {
		/// <param name="webView">
		///           <para>To be added.</para>
		///         </param>
		/// <param name="request">
		///           <para>To be added.</para>
		///         </param>
		/// <param name="navigationType">
		///           <para>To be added.</para>
		///         </param>
		/// <summary>Whether the UIWebView should begin loading data.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("webView:shouldStartLoadWithRequest:navigationType:"), DelegateName ("UIWebLoaderControl"), DefaultValue ("true")]
		bool ShouldStartLoad (UIWebView webView, NSUrlRequest request, UIWebViewNavigationType navigationType);

		/// <param name="webView">
		///           <para>To be added.</para>
		///         </param>
		/// <summary>Indicates that loading has begun.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("webViewDidStartLoad:"), EventArgs ("UIWebView", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void LoadStarted (UIWebView webView);

		/// <param name="webView">
		///           <para>To be added.</para>
		///         </param>
		/// <summary>Indicates that loading has completed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("webViewDidFinishLoad:"), EventArgs ("UIWebView", XmlDocs = """
			<summary>An event indicating the end of loading.</summary>
			<remarks>To be added.</remarks>
			"""), EventName ("LoadFinished")]
		void LoadingFinished (UIWebView webView);

		/// <param name="webView">
		///           <para>To be added.</para>
		///         </param>
		/// <param name="error">
		///           <para>To be added.</para>
		///         </param>
		/// <summary>Indicates that the UIWebView's attempt to load data failed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("webView:didFailLoadWithError:"), EventArgs ("UIWebErrorArgs", false, true, XmlDocs = """
			<summary>An event indicating an error in loading.</summary>
			<remarks>To be added.</remarks>
			"""), EventName ("LoadError")]
		void LoadFailed (UIWebView webView, NSError error);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITextChecker {
		/// <param name="stringToCheck">To be added.</param>
		/// <param name="range">To be added.</param>
		/// <param name="startingOffset">To be added.</param>
		/// <param name="wrapFlag">To be added.</param>
		/// <param name="language">To be added.</param>
		/// <summary>Gets the <see cref="Foundation.NSRange" /> of the first misspelled word in <paramref name="stringToCheck" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("rangeOfMisspelledWordInString:range:startingAt:wrap:language:")]
		NSRange RangeOfMisspelledWordInString (string stringToCheck, NSRange range, nint startingOffset, bool wrapFlag, string language);

		[Export ("guessesForWordRange:inString:language:")]
		[return: NullAllowed]
		string [] GuessesForWordRange (NSRange range, string str, string language);

		[Export ("completionsForPartialWordRange:inString:language:")]
		[return: NullAllowed]
		string [] CompletionsForPartialWordRange (NSRange range, string str, string language);

		[Export ("ignoreWord:")]
		void IgnoreWord (string wordToIgnore);

		[NullAllowed] // by default this property is null
		[Export ("ignoredWords")]
		string [] IgnoredWords { get; set; }

		[Static]
		[Export ("learnWord:")]
		void LearnWord (string word);

		[Static]
		[Export ("unlearnWord:")]
		void UnlearnWord (string word);

		[Static]
		[Export ("hasLearnedWord:")]
		bool HasLearnedWord (string word);

		[Static]
		[Export ("availableLanguages")]
		string AvailableLangauges { get; }
	}

	/// <summary>Known values for <see cref="UIKit.UITextField.TextContentType" /> that are hints to the system of the kind of <see cref="UIKit.UITextField" /> data.</summary>
	/// <remarks>To be added.</remarks>
	[Static]
	[MacCatalyst (13, 1)]
	interface UITextContentType {
		/// <summary>Indicates a text field that holds a name, which may consist of several parts.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeName")]
		NSString Name { get; }

		/// <summary>Indicates a text field that holds a name prefix such as an honorific ("Mr.", "Ms.", "Dr.", etc.).</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeNamePrefix")]
		NSString NamePrefix { get; }

		/// <summary>Indicates a text field that holds a given name.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeGivenName")]
		NSString GivenName { get; }

		/// <summary>Indicates a text field that holds a middle name.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeMiddleName")]
		NSString MiddleName { get; }

		/// <summary>Indicates a text field that holds a family name.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeFamilyName")]
		NSString FamilyName { get; }

		/// <summary>Indicates a text field that holds the suffix to a name (e.g., "Jr.").</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeNameSuffix")]
		NSString NameSuffix { get; }

		/// <summary>Indicates a text field that holds a preferred name.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeNickname")]
		NSString Nickname { get; }

		/// <summary>Indicates a text field that holds the title of a job.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeJobTitle")]
		NSString JobTitle { get; }

		/// <summary>Indicates a text field that holds the name of an organization.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeOrganizationName")]
		NSString OrganizationName { get; }

		/// <summary>Indicates a text field that holds a precise location (such as an address, latitude and longitude coordinates, or a named point of interest).</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeLocation")]
		NSString Location { get; }

		/// <summary>Indicates a text fieldn address field that holds a complete street address, which may have several parts.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeFullStreetAddress")]
		NSString FullStreetAddress { get; }

		/// <summary>Indicates a text fieldn address field that holds the first line of a street address.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeStreetAddressLine1")]
		NSString StreetAddressLine1 { get; }

		/// <summary>Indicates a text fieldn address field that holds the second line of a street address.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeStreetAddressLine2")]
		NSString StreetAddressLine2 { get; }

		/// <summary>Indicates a text fieldn address field that contains a city name.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeAddressCity")]
		NSString AddressCity { get; }

		/// <summary>Indicates a text fieldn address field that holds a state name or state code.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeAddressState")]
		NSString AddressState { get; }

		/// <summary>Indicates a text fieldn address field that contains a city name and state name or state code.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeAddressCityAndState")]
		NSString AddressCityAndState { get; }

		/// <summary>Indicates a text fieldn address field that holds a sublocality, such as a county.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeSublocality")]
		NSString Sublocality { get; }

		/// <summary>Indicates a text fieldn address field that holds the name of a country.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeCountryName")]
		NSString CountryName { get; }

		/// <summary>Indicates a text field that holds a postal code.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypePostalCode")]
		NSString PostalCode { get; }

		/// <summary>Indicates a text field field that holds a telephone number.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeTelephoneNumber")]
		NSString TelephoneNumber { get; }

		/// <summary>Indicates a text field that holds an email address.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeEmailAddress")]
		NSString EmailAddress { get; }

		/// <summary>Indicates a text field field that holds a URL.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeURL")]
		NSString Url { get; }

		/// <summary>Indicates a text field that holds a credit-card number.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Field ("UITextContentTypeCreditCardNumber")]
		NSString CreditCardNumber { get; }

		/// <summary>Indicates a text field user name field.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UITextContentTypeUsername")]
		NSString Username { get; }

		/// <summary>Indicates a text field password field.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UITextContentTypePassword")]
		NSString Password { get; }

		/// <summary>Indicates a text field that accepts a new password.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UITextContentTypeNewPassword")]
		NSString NewPassword { get; }

		/// <summary>Indicates a text field that acceps a one-time passcode.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UITextContentTypeOneTimeCode")]
		NSString OneTimeCode { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Field ("UITextContentTypeShipmentTrackingNumber")]
		NSString ShipmentTrackingNumber { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Field ("UITextContentTypeFlightNumber")]
		NSString FlightNumber { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Field ("UITextContentTypeDateTime")]
		NSString DateTime { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeBirthdate")]
		NSString Birthdate { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeBirthdateDay")]
		NSString BirthdateDay { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeBirthdateMonth")]
		NSString BirthdateMonth { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeBirthdateYear")]
		NSString BirthdateYear { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeCreditCardSecurityCode")]
		NSString CreditCardSecurityCode { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeCreditCardName")]
		NSString CreditCardName { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeCreditCardGivenName")]
		NSString CreditCardGivenName { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeCreditCardMiddleName")]
		NSString CreditCardMiddleName { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeCreditCardFamilyName")]
		NSString CreditCardFamilyName { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeCreditCardExpiration")]
		NSString CreditCardExpiration { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeCreditCardExpirationMonth")]
		NSString CreditCardExpirationMonth { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeCreditCardExpirationYear")]
		NSString CreditCardExpirationYear { get; }

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UITextContentTypeCreditCardType")]
		NSString CreditCardType { get; }

		[iOS (17, 4), MacCatalyst (17, 4), TV (17, 4)]
		[Field ("UITextContentTypeCellularEID")]
		NSString CellularEid { get; }

		[iOS (17, 4), MacCatalyst (17, 4), TV (17, 4)]
		[Field ("UITextContentTypeCellularIMEI")]
		NSString CellularImei { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UISplitViewControllerDelegate) })]
	interface UISplitViewController {
		[DesignatedInitializer]
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initWithStyle:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UISplitViewControllerStyle style);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("style")]
		UISplitViewControllerStyle Style { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("showsSecondaryOnlyButton")]
		bool ShowsSecondaryOnlyButton { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("preferredSplitBehavior", ArgumentSemantic.Assign)]
		UISplitViewControllerSplitBehavior PreferredSplitBehavior { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("splitBehavior")]
		UISplitViewControllerSplitBehavior SplitBehavior { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("setViewController:forColumn:")]
		void SetViewController ([NullAllowed] UIViewController viewController, UISplitViewControllerColumn column);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("viewControllerForColumn:")]
		[return: NullAllowed]
		UIViewController GetViewController (UISplitViewControllerColumn column);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("hideColumn:")]
		void HideColumn (UISplitViewControllerColumn column);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("showColumn:")]
		void ShowColumn (UISplitViewControllerColumn column);

		[Export ("viewControllers", ArgumentSemantic.Copy)]
		[PostGet ("ChildViewControllers")]
		UIViewController [] ViewControllers { get; set; }

		/// <summary>An instance of the UIKit.IUISplitViewControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUISplitViewControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUISplitViewControllerDelegate Delegate { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		[Export ("presentsWithGesture")]
		bool PresentsWithGesture { get; set; }

		//
		// iOS 8
		//
		/// <summary>Gets whether to display only one child view controller.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("collapsed")]
		bool Collapsed { [Bind ("isCollapsed")] get; }

		[MacCatalyst (13, 1)]
		[Export ("preferredDisplayMode")]
		UISplitViewControllerDisplayMode PreferredDisplayMode { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("displayMode")]
		UISplitViewControllerDisplayMode DisplayMode { get; }

		[MacCatalyst (13, 1)]
		[Export ("preferredPrimaryColumnWidthFraction", ArgumentSemantic.UnsafeUnretained)]
		nfloat PreferredPrimaryColumnWidthFraction { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("preferredPrimaryColumnWidth")]
		nfloat PreferredPrimaryColumnWidth { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("minimumPrimaryColumnWidth", ArgumentSemantic.UnsafeUnretained)]
		nfloat MinimumPrimaryColumnWidth { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("maximumPrimaryColumnWidth", ArgumentSemantic.UnsafeUnretained)]
		nfloat MaximumPrimaryColumnWidth { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("primaryColumnWidth")]
		nfloat PrimaryColumnWidth { get; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("preferredSupplementaryColumnWidthFraction")]
		nfloat PreferredSupplementaryColumnWidthFraction { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("preferredSupplementaryColumnWidth")]
		nfloat PreferredSupplementaryColumnWidth { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("minimumSupplementaryColumnWidth")]
		nfloat MinimumSupplementaryColumnWidth { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("maximumSupplementaryColumnWidth")]
		nfloat MaximumSupplementaryColumnWidth { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("supplementaryColumnWidth")]
		nfloat SupplementaryColumnWidth { get; }

		[MacCatalyst (13, 1)]
		[Export ("displayModeButtonItem")]
		UIBarButtonItem DisplayModeButtonItem { get; }

		[iOS (14, 5), TV (14, 5)]
		[MacCatalyst (14, 5)]
		[Export ("displayModeButtonVisibility", ArgumentSemantic.Assign)]
		UISplitViewControllerDisplayModeButtonVisibility DisplayModeButtonVisibility { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("showViewController:sender:")]
		void ShowViewController (UIViewController vc, [NullAllowed] NSObject sender);

		[MacCatalyst (13, 1)]
		[Export ("showDetailViewController:sender:")]
		void ShowDetailViewController (UIViewController vc, [NullAllowed] NSObject sender);

		/// <summary>Represents the value associated with the constant UISplitViewControllerAutomaticDimension</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UISplitViewControllerAutomaticDimension")]
		nfloat AutomaticDimension { get; }

		[MacCatalyst (13, 1)]
		[Export ("primaryEdge", ArgumentSemantic.Assign)]
		UISplitViewControllerPrimaryEdge PrimaryEdge { get; set; }

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("primaryBackgroundStyle", ArgumentSemantic.Assign)]
		UISplitViewControllerBackgroundStyle PrimaryBackgroundStyle { get; set; }
	}

	interface IUISplitViewControllerDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UISplitViewControllerDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UISplitViewControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UISplitViewControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UISplitViewControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UISplitViewControllerDelegate {
		/// <param name="splitViewController">The split view controller.</param>
		/// <summary>Returns the supported interface orientations for <paramref name="splitViewController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("splitViewControllerSupportedInterfaceOrientations:"), DelegateName ("Func<UISplitViewController,UIInterfaceOrientationMask>"), DefaultValue (UIInterfaceOrientationMask.All)]
		UIInterfaceOrientationMask SupportedInterfaceOrientations (UISplitViewController splitViewController);

		/// <param name="splitViewController">Designates the split view controller that will be presented onscreen.</param>
		/// <summary>Returns the preferred user interface orientation to use when presenting <paramref name="splitViewController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("splitViewControllerPreferredInterfaceOrientationForPresentation:"), DelegateName ("Func<UISplitViewController,UIInterfaceOrientation>"), DefaultValue (UIInterfaceOrientation.Unknown)]
		UIInterfaceOrientation GetPreferredInterfaceOrientationForPresentation (UISplitViewController splitViewController);

		/// <param name="svc">The split view controller whose display mode is changing.</param>
		/// <param name="pc">Specified popover controller.</param>
		/// <param name="aViewController">Specified view controller.</param>
		/// <summary>Indicates that the UISplitViewController is about to be presented.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Export ("splitViewController:popoverController:willPresentViewController:"), EventArgs ("UISplitViewPresent", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'UISearchController' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UISearchController' instead.")]
		void WillPresentViewController (UISplitViewController svc, UIPopoverController pc, UIViewController aViewController);

		/// <param name="svc">The split view controller whose display mode is changing.</param>
		/// <param name="aViewController">Specified view controller.</param>
		/// <param name="barButtonItem">An enumeration of the predefined <see cref="UIKit.UIBarButtonItem" />s.</param>
		/// <param name="pc">Specified popover controller.</param>
		/// <summary>Indicates that the UISplitViewController is about to be hidden.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Export ("splitViewController:willHideViewController:withBarButtonItem:forPopoverController:"), EventArgs ("UISplitViewHide", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'UISearchController' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UISearchController' instead.")]
		void WillHideViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem barButtonItem, UIPopoverController pc);

		/// <param name="svc">The split view controller whose display mode is changing.</param>
		/// <param name="aViewController">Specified view controller.</param>
		/// <param name="button">An enumeration of the predefined <see cref="UIKit.UIBarButtonItem" />s.</param>
		/// <summary>Indicates that the UISplitViewController is about to be shown.</summary>
		/// <remarks>To be added.</remarks>
		[NoTV]
		[Export ("splitViewController:willShowViewController:invalidatingBarButtonItem:"), EventArgs ("UISplitViewShow", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'UISearchController' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UISearchController' instead.")]
		void WillShowViewController (UISplitViewController svc, UIViewController aViewController, UIBarButtonItem button);

		/// <param name="svc">The designated split view controller whose action might be triggered.</param>
		/// <param name="viewController">The specified view controller.</param>
		/// <param name="inOrientation">The specified orientation.</param>
		/// <summary>Developers should not use this deprecated method. Developers should use 'UISearchController' instead.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[NoTV]
		[Export ("splitViewController:shouldHideViewController:inOrientation:"), DelegateName ("UISplitViewControllerHidePredicate"), DefaultValue (true)]
		[Deprecated (PlatformName.iOS, 8, 0, message: "Use 'UISearchController' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UISearchController' instead.")]
		bool ShouldHideViewController (UISplitViewController svc, UIViewController viewController, UIInterfaceOrientation inOrientation);

		/// <param name="svc">The split view controller whose display mode is changing.</param>
		/// <param name="displayMode">TThe new display mode that will be applied.</param>
		/// <summary>The split view controller <paramref name="svc" /> will change its display mode to <paramref name="displayMode" />.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("splitViewController:willChangeToDisplayMode:"), EventArgs ("UISplitViewControllerDisplayMode", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillChangeDisplayMode (UISplitViewController svc, UISplitViewControllerDisplayMode displayMode);

		/// <param name="svc">Split view controller whose action might be triggered.</param>
		/// <summary>Returns the display mode for the <paramref name="svc" /> action.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("targetDisplayModeForActionInSplitViewController:"), DelegateName ("UISplitViewControllerFetchTargetForActionHandler"), DefaultValue (UISplitViewControllerDisplayMode.Automatic)]
		UISplitViewControllerDisplayMode GetTargetDisplayModeForAction (UISplitViewController svc);

		/// <param name="splitViewController">Designates the split view controller that has its primary view being updated.</param>
		/// <param name="vc">The view controller that is being displayed in the primary position.</param>
		/// <param name="sender">The action making the request.</param>
		/// <summary>Shows <paramref name="vc" /> in the primary position.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("splitViewController:showViewController:sender:"), DelegateName ("UISplitViewControllerDisplayEvent"), DefaultValue (false)]
		bool EventShowViewController (UISplitViewController splitViewController, UIViewController vc, NSObject sender);

		/// <param name="splitViewController">Designates the split view controller that has its secondary view being updated.</param>
		/// <param name="vc">The view controller that is being displayed in the secondary position.</param>
		/// <param name="sender">The action making the request.</param>
		/// <summary>Returns true if the delegate will display the detail view itself, rather than relying on <paramref name="splitViewController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("splitViewController:showDetailViewController:sender:"), DelegateName ("UISplitViewControllerDisplayEvent"), DefaultValue (false)]
		bool EventShowDetailViewController (UISplitViewController splitViewController, UIViewController vc, NSObject sender);

		/// <param name="splitViewController">Designates the split view controller whose interface is collapsing.</param>
		/// <summary>Returns the primary view controller for the collapsing view controller <paramref name="splitViewController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("primaryViewControllerForCollapsingSplitViewController:"), DelegateName ("UISplitViewControllerGetViewController"), DefaultValue (null)]
		UIViewController GetPrimaryViewControllerForCollapsingSplitViewController (UISplitViewController splitViewController);

		/// <param name="splitViewController">To be added.</param>
		/// <summary>Returns the primary view controller for the expanding view controller <paramref name="splitViewController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("primaryViewControllerForExpandingSplitViewController:"), DelegateName ("UISplitViewControllerGetViewController"), DefaultValue (null)]
		UIViewController GetPrimaryViewControllerForExpandingSplitViewController (UISplitViewController splitViewController);

		/// <param name="splitViewController">Designates the split view controller with the collapsing interface.</param>
		/// <param name="secondaryViewController">Designates the secondary view controller for the split view interface.</param>
		/// <param name="primaryViewController">Designates the primary view controller for the split view interface.</param>
		/// <summary>Collapses the secondary view controller on <paramref name="splitViewController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("splitViewController:collapseSecondaryViewController:ontoPrimaryViewController:"), DelegateName ("UISplitViewControllerCanCollapsePredicate"), DefaultValue (true)]
		bool CollapseSecondViewController (UISplitViewController splitViewController, UIViewController secondaryViewController, UIViewController primaryViewController);

		/// <param name="splitViewController">The split view controller with the expanding interface.</param>
		/// <param name="primaryViewController">Primary view controller specified for the expanded split view interface.</param>
		/// <summary>Returns a new secondary view controller to use in split-view mode, or nil to use the default.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("splitViewController:separateSecondaryViewControllerFromPrimaryViewController:"), DelegateName ("UISplitViewControllerGetSecondaryViewController"), DefaultValue (null)]
		UIViewController SeparateSecondaryViewController (UISplitViewController splitViewController, UIViewController primaryViewController);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("splitViewController:topColumnForCollapsingToProposedTopColumn:"), DelegateName ("UISplitViewControllerGetTopColumnForCollapsing"), DefaultValueFromArgument ("proposedTopColumn")]
		UISplitViewControllerColumn GetTopColumnForCollapsing (UISplitViewController splitViewController, UISplitViewControllerColumn proposedTopColumn);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("splitViewController:displayModeForExpandingToProposedDisplayMode:"), DelegateName ("UISplitViewControllerGetDisplayModeForExpanding"), DefaultValueFromArgument ("proposedDisplayMode")]
		UISplitViewControllerDisplayMode GetDisplayModeForExpanding (UISplitViewController splitViewController, UISplitViewControllerDisplayMode proposedDisplayMode);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("splitViewControllerDidCollapse:"), EventArgs ("UISplitViewControllerDidExpandCollapse")]
		void DidCollapse (UISplitViewController splitViewController);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("splitViewControllerDidExpand:"), EventArgs ("UISplitViewControllerDidExpandCollapse")]
		void DidExpand (UISplitViewController splitViewController);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("splitViewController:willShowColumn:"), EventArgs ("UISplitViewControllerWillShowHideColumn")]
		void WillShowColumn (UISplitViewController splitViewController, UISplitViewControllerColumn column);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("splitViewController:willHideColumn:"), EventArgs ("UISplitViewControllerWillShowHideColumn")]
		void WillHideColumn (UISplitViewController splitViewController, UISplitViewControllerColumn column);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("splitViewControllerInteractivePresentationGestureWillBegin:")]
		void InteractivePresentationGestureWillBegin (UISplitViewController svc);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("splitViewControllerInteractivePresentationGestureDidEnd:")]
		void InteractivePresentationGestureDidEnd (UISplitViewController svc);
	}

	/// <summary>Defines extension methods on <see cref="UIKit.UIViewController" /> relating to collapsing/expanding secondary view controllers.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Category]
	[BaseType (typeof (UIViewController))]
	partial interface UISplitViewController_UIViewController {
		/// <summary>Returns te split view controller for the nested view controller.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("splitViewController", ArgumentSemantic.Retain)]
		[return: NullAllowed]
		UISplitViewController GetSplitViewController ();

		/// <param name="secondaryViewController">To be added.</param>
		/// <param name="splitViewController">To be added.</param>
		/// <summary>Collapses the secondary view controller on <paramref name="splitViewController" /></summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("collapseSecondaryViewController:forSplitViewController:")]
		void CollapseSecondaryViewController (UIViewController secondaryViewController, UISplitViewController splitViewController);

		/// <param name="splitViewController">To be added.</param>
		/// <summary>Returns the separate secondary view controller for <paramref name="splitViewController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("separateSecondaryViewControllerForSplitViewController:")]
		UIViewController SeparateSecondaryViewControllerForSplitViewController (UISplitViewController splitViewController);
	}

	/// <summary>A <see cref="UIKit.UIControl" /> that displays values that may be increased or decreased by pressing plus or minus buttons.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIStepper_Class/index.html">Apple documentation for <c>UIStepper</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIControl))]
	interface UIStepper {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		/// <summary>The continuous vs. noncontinuous state of this UIStepper.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("continuous")]
		bool Continuous { [Bind ("isContinuous")] get; set; }

		[Export ("autorepeat")]
		bool AutoRepeat { get; set; }

		[Export ("wraps")]
		bool Wraps { get; set; }

		[Export ("value")]
		double Value { get; set; }

		[Export ("minimumValue")]
		double MinimumValue { get; set; }

		[Export ("maximumValue")]
		double MaximumValue { get; set; }

		[Export ("stepValue")]
		double StepValue { get; set; }

		//
		// 6.0
		//

		/// <param name="image">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <summary>Sets the background image used for the specified <paramref name="state" />..</summary>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("setBackgroundImage:forState:")]
		void SetBackgroundImage ([NullAllowed] UIImage image, UIControlState state);

		/// <param name="state">To be added.</param>
		/// <summary>The UIImage used as the backgroundimage for the UIStepper for the specified <paramref name="state" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("backgroundImageForState:")]
		UIImage BackgroundImage (UIControlState state);

		/// <param name="image">To be added.</param>
		/// <param name="leftState">To be added.</param>
		/// <param name="rightState">To be added.</param>
		/// <summary>Sets the divider image used for the specified pair of UIControlStates.</summary>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("setDividerImage:forLeftSegmentState:rightSegmentState:")]
		void SetDividerImage ([NullAllowed] UIImage image, UIControlState leftState, UIControlState rightState);

		/// <param name="leftState">To be added.</param>
		/// <param name="rightState">To be added.</param>
		/// <summary>The UIImage used as the divider image for the specified pair of UIControlStates.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("dividerImageForLeftSegmentState:rightSegmentState:")]
		UIImage GetDividerImage (UIControlState leftState, UIControlState rightState);

		/// <param name="image">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <summary>Sets the increment image for the specified <paramref name="state" />..</summary>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("setIncrementImage:forState:")]
		void SetIncrementImage ([NullAllowed] UIImage image, UIControlState state);

		/// <param name="state">To be added.</param>
		/// <summary>The UIImage used for the incrementer for the specified <paramref name="state" />..</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("incrementImageForState:")]
		UIImage GetIncrementImage (UIControlState state);

		/// <param name="image">To be added.</param>
		/// <param name="state">To be added.</param>
		/// <summary>Sets the decrement image for the specified <paramref name="state" />..</summary>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("setDecrementImage:forState:")]
		void SetDecrementImage ([NullAllowed] UIImage image, UIControlState state);

		/// <param name="state">To be added.</param>
		/// <summary>The image used for the stepper for the specified <paramref name="state" />..</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Appearance]
		[Export ("decrementImageForState:")]
		UIImage GetDecrementImage (UIControlState state);
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[return: NullAllowed]
	delegate UIViewController UIStoryboardViewControllerCreator (NSCoder coder);

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIStoryboard {
		[Static]
		[Export ("storyboardWithName:bundle:")]
		UIStoryboard FromName (string name, [NullAllowed] NSBundle storyboardBundleOrNil);

		[Export ("instantiateInitialViewController")]
		UIViewController InstantiateInitialViewController ();

		[Export ("instantiateViewControllerWithIdentifier:")]
		UIViewController InstantiateViewController (string identifier);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("instantiateInitialViewControllerWithCreator:")]
		UIViewController InstantiateInitialViewController ([NullAllowed] UIStoryboardViewControllerCreator creator);

		[iOS (13, 0), TV (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("instantiateViewControllerWithIdentifier:creator:")]
		UIViewController InstantiateViewController (string identifier, [NullAllowed] UIStoryboardViewControllerCreator creator);
	}

	[Deprecated (PlatformName.iOS, 9, 0)]
	[Deprecated (PlatformName.TvOS, 9, 0)]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1)]
	[DisableDefaultCtor] // as it subclass UIStoryboardSegue we end up with the same error
	[BaseType (typeof (UIStoryboardSegue))]
	interface UIStoryboardPopoverSegue {
		[Export ("initWithIdentifier:source:destination:"), PostGet ("SourceViewController"), PostGet ("DestinationViewController")]
		NativeHandle Constructor ([NullAllowed] string identifier, UIViewController source, UIViewController destination);

		[Export ("popoverController", ArgumentSemantic.Retain)]
		UIPopoverController PopoverController { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor] // NSInvalidArgumentException Reason: Don't call -[UIStoryboardSegue init]
	interface UIStoryboardSegue {
		[DesignatedInitializer]
		[Export ("initWithIdentifier:source:destination:"), PostGet ("SourceViewController"), PostGet ("DestinationViewController")]
		NativeHandle Constructor ([NullAllowed] string identifier, UIViewController source, UIViewController destination);

		[Export ("identifier")]
		[NullAllowed]
		string Identifier { get; }

		[Export ("sourceViewController")]
		UIViewController SourceViewController { get; }

		[Export ("destinationViewController")]
		UIViewController DestinationViewController { get; }

		[Export ("perform")]
		void Perform ();

		[Static]
		[Export ("segueWithIdentifier:source:destination:performHandler:")]
		UIStoryboardSegue Create ([NullAllowed] string identifier, UIViewController source, UIViewController destination, Action performHandler);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIStoryboardUnwindSegueSource {
		[Export ("sourceViewController")]
		UIViewController SourceViewController { get; }

		// ideally we would not expose a `Selector` but this is created by iOS (not user code) and it's a getter only property
		[Export ("unwindAction")]
		Selector UnwindAction { get; }

		[NullAllowed]
		[Export ("sender")]
		NSObject Sender { get; }
	}

	/// <summary>Interface that, together with the <see cref="UIKit.UIPopoverBackgroundViewMethods_Extensions" /> class, comprise the UIPopoverBackgroundViewMethods protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIPopoverBackgroundViewMethods {
		// This method is required, but we don't generate the correct code for required static methods.
		// [Abstract]
		[Static, Export ("arrowHeight")]
		nfloat GetArrowHeight ();

		// This method is required, but we don't generate the correct code for required static methods.
		// [Abstract]
		[Static, Export ("arrowBase")]
		nfloat GetArrowBase ();

		// This method is required, but we don't generate the correct code for required static methods.
		// [Abstract]
		[Static, Export ("contentViewInsets")]
		UIEdgeInsets GetContentViewInsets ();
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UIPopoverBackgroundView : UIPopoverBackgroundViewMethods {
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("arrowOffset")]
		nfloat ArrowOffset { get; set; }

#pragma warning disable 618
		[Export ("arrowDirection")]
		UIPopoverArrowDirection ArrowDirection { get; set; }
#pragma warning restore 618

		[Deprecated (PlatformName.iOS, 13, 0, message: "Not supported anymore.")]
		[Deprecated (PlatformName.TvOS, 13, 0, message: "Not supported anymore.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Not supported anymore.")]
		[Static, Export ("wantsDefaultContentAppearance")]
		bool WantsDefaultContentAppearance { get; }
	}

	[BaseType (typeof (NSObject), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIPopoverControllerDelegate) })]
	[DisableDefaultCtor] // bug #1786
	[Deprecated (PlatformName.iOS, 9, 0, message: "Use 'UIViewController' with style of 'UIModalPresentationStyle.Popover' or UIPopoverPresentationController' instead.")]
	[Deprecated (PlatformName.TvOS, 9, 0, message: "Use 'UIViewController' with style of 'UIModalPresentationStyle.Popover' or UIPopoverPresentationController' instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIViewController' with style of 'UIModalPresentationStyle.Popover' or UIPopoverPresentationController' instead.")]
	interface UIPopoverController : UIAppearanceContainer {
		[Export ("initWithContentViewController:")]
		[PostGet ("ContentViewController")]
		NativeHandle Constructor (UIViewController viewController);

		[Export ("contentViewController", ArgumentSemantic.Retain)]
		UIViewController ContentViewController { get; set; }

		[Export ("setContentViewController:animated:")]
		[PostGet ("ContentViewController")]
		void SetContentViewController (UIViewController viewController, bool animated);

		[Export ("popoverContentSize")]
		CGSize PopoverContentSize { get; set; }

		[Export ("setPopoverContentSize:animated:")]
		void SetPopoverContentSize (CGSize size, bool animated);

		[Export ("passthroughViews", ArgumentSemantic.Copy)]
		UIView [] PassthroughViews { get; set; }

		/// <summary>An instance of the UIKit.IUIPopoverControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIPopoverControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIPopoverControllerDelegate Delegate { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>If <see langword="true" />, then the popover is present and visible.</summary>
		///         <value>
		///         </value>
		///         <remarks>
		///         </remarks>
		[Export ("popoverVisible")]
		bool PopoverVisible { [Bind ("isPopoverVisible")] get; }

		[Export ("popoverArrowDirection")]
		UIPopoverArrowDirection PopoverArrowDirection { get; }

		[Export ("presentPopoverFromRect:inView:permittedArrowDirections:animated:")]
		void PresentFromRect (CGRect rect, UIView view, UIPopoverArrowDirection arrowDirections, bool animated);

		[Export ("presentPopoverFromBarButtonItem:permittedArrowDirections:animated:")]
		void PresentFromBarButtonItem (UIBarButtonItem item, UIPopoverArrowDirection arrowDirections, bool animated);

		[Export ("dismissPopoverAnimated:")]
		void Dismiss (bool animated);

		// @property (nonatomic, readwrite) UIEdgeInsets popoverLayoutMargins
		[Export ("popoverLayoutMargins")]
		UIEdgeInsets PopoverLayoutMargins { get; set; }

		// @property (nonatomic, readwrite, retain) Class popoverBackgroundViewClass
		// Class is not pretty so we'll expose it manually as a System.Type
		[Internal]
		[Export ("popoverBackgroundViewClass", ArgumentSemantic.Retain)]
		IntPtr PopoverBackgroundViewClass { get; set; }

		[Export ("backgroundColor", ArgumentSemantic.Copy)]
		UIColor BackgroundColor { get; set; }
	}

	interface IUIPopoverControllerDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIPopoverControllerDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIPopoverControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIPopoverControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIPopoverControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	[Deprecated (PlatformName.iOS, 9, 0)]
	[Deprecated (PlatformName.TvOS, 9, 0)]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1)]
	interface UIPopoverControllerDelegate {
		/// <param name="popoverController">To be added.</param>
		/// <summary>Indicates that the UIPopover was dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("popoverControllerDidDismissPopover:"), EventArgs ("UIPopoverController", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidDismiss (UIPopoverController popoverController);

		/// <param name="popoverController">To be added.</param>
		/// <summary>Whether the popover should be dismissed.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("popoverControllerShouldDismissPopover:"), DelegateName ("UIPopoverControllerCondition"), DefaultValue ("true")]
		bool ShouldDismiss (UIPopoverController popoverController);

		/// <param name="popoverController">To be added.</param>
		/// <param name="rect">To be added.</param>
		/// <param name="view">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("popoverController:willRepositionPopoverToRect:inView:"), EventArgs ("UIPopoverControllerReposition", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillReposition (UIPopoverController popoverController, ref CGRect rect, ref UIView view);
	}

	/// <summary>Manages the user experience of a popover. </summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPopoverPresentationController_class/index.html">Apple documentation for <c>UIPopoverPresentationController</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIPresentationController),
		Delegates = new string [] { "WeakDelegate" },
		Events = new Type [] { typeof (UIPopoverPresentationControllerDelegate) })]
	[DisableDefaultCtor] // NSGenericException Reason: -[UIPopoverController init] is not a valid initializer. You must call -[UIPopoverController initWithContentViewController:]
	partial interface UIPopoverPresentationController {
		// re-exposed from base class
		[Export ("initWithPresentedViewController:presentingViewController:")]
		NativeHandle Constructor (UIViewController presentedViewController, [NullAllowed] UIViewController presentingViewController);

		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.UnsafeUnretained)]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIPopoverPresentationControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIPopoverPresentationControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIPopoverPresentationControllerDelegate Delegate { get; set; }

		[Export ("permittedArrowDirections", ArgumentSemantic.UnsafeUnretained)]
		UIPopoverArrowDirection PermittedArrowDirections { get; set; }

		[Export ("sourceView", ArgumentSemantic.Retain)]
		UIView SourceView { get; set; }

		[Export ("sourceRect", ArgumentSemantic.UnsafeUnretained)]
		CGRect SourceRect { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("canOverlapSourceViewRect")]
		bool CanOverlapSourceViewRect { get; set; }

		[Deprecated (PlatformName.iOS, 16, 0, message: "Use the SourceItem property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 16, 0, message: "Use the SourceItem property instead.")]
		[Export ("barButtonItem", ArgumentSemantic.Retain), NullAllowed]
		UIBarButtonItem BarButtonItem { get; set; }

		[Export ("arrowDirection")]
		UIPopoverArrowDirection ArrowDirection { get; }

		[Export ("passthroughViews", ArgumentSemantic.Copy)]
		UIView [] PassthroughViews { get; set; }

		[Export ("backgroundColor", ArgumentSemantic.Copy), NullAllowed]
		UIColor BackgroundColor { get; set; }

		[Export ("popoverLayoutMargins")]
		UIEdgeInsets PopoverLayoutMargins { get; set; }

		[Internal] // expose as Type
		[Export ("popoverBackgroundViewClass", ArgumentSemantic.Retain), NullAllowed]
		IntPtr /* Class */  PopoverBackgroundViewClass { get; set; }

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("adaptiveSheetPresentationController", ArgumentSemantic.Strong)]
		UISheetPresentationController AdaptiveSheetPresentationController { get; }

		[iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("sourceItem", ArgumentSemantic.Strong)]
		[NullAllowed]
		IUIPopoverPresentationControllerSourceItem SourceItem { get; set; }
	}

	interface IUIAdaptivePresentationControllerDelegate { }

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIAdaptivePresentationControllerDelegate" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIAdaptivePresentationControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIAdaptivePresentationControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIAdaptivePresentationControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	partial interface UIAdaptivePresentationControllerDelegate {
		/// <param name="forPresentationController">To be added.</param>
		/// <summary>Returns the new presentation style to use after a change to the <paramref name="forPresentationController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[IgnoredInDelegate]
		[Export ("adaptivePresentationStyleForPresentationController:")]
		UIModalPresentationStyle GetAdaptivePresentationStyle (UIPresentationController forPresentationController);

		/// <param name="controller">To be added.</param>
		/// <param name="style">To be added.</param>
		/// <summary>The view controller to use for the specified <paramref name="style" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("presentationController:viewControllerForAdaptivePresentationStyle:"),
			DelegateName ("UIAdaptivePresentationWithStyleRequested"), DefaultValue (null)]
		UIViewController GetViewControllerForAdaptivePresentation (UIPresentationController controller, UIModalPresentationStyle style);

		/// <param name="controller">To be added.</param>
		/// <param name="traitCollection">To be added.</param>
		/// <summary>The presentation style to use for the specified <paramref name="controller" /> and <paramref name="traitCollection" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("adaptivePresentationStyleForPresentationController:traitCollection:"),
			DelegateName ("UIAdaptivePresentationStyleWithTraitsRequested"), DefaultValue (UIModalPresentationStyle.None)]
		UIModalPresentationStyle GetAdaptivePresentationStyle (UIPresentationController controller, UITraitCollection traitCollection);

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("presentationController:prepareAdaptivePresentationController:"),
			EventName ("PrepareAdaptive"), EventArgs ("UIPrepareAdaptivePresentationArgs")]
		void PrepareAdaptivePresentationController (UIPresentationController presentationController, UIPresentationController adaptivePresentationController);

		/// <param name="presentationController">To be added.</param>
		/// <param name="style">To be added.</param>
		/// <param name="transitionCoordinator">To be added.</param>
		/// <summary>Called prior to presentation.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:"),
			EventName ("WillPresentController"), EventArgs ("UIWillPresentAdaptiveStyle")]
		void WillPresent (UIPresentationController presentationController, UIModalPresentationStyle style, [NullAllowed] IUIViewControllerTransitionCoordinator transitionCoordinator);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("presentationControllerShouldDismiss:"),
			DelegateName ("UIAdaptivePresentationShouldDismiss"), DefaultValue (true)]
		bool ShouldDismiss (UIPresentationController presentationController);

		[iOS (13, 0),
			EventName ("WillDismissController"), EventArgs ("UIAdaptivePresentationArgs")]
		[MacCatalyst (13, 1)]
		[Export ("presentationControllerWillDismiss:")]
		void WillDismiss (UIPresentationController presentationController);

		[iOS (13, 0),
			EventName ("DidDismissController"), EventArgs ("UIAdaptivePresentationArgs")]
		[MacCatalyst (13, 1)]
		[Export ("presentationControllerDidDismiss:")]
		void DidDismiss (UIPresentationController presentationController);

		[iOS (13, 0),
			EventName ("DidAttemptToDismissController"), EventArgs ("UIAdaptivePresentationArgs")]
		[MacCatalyst (13, 1)]
		[Export ("presentationControllerDidAttemptToDismiss:")]
		void DidAttemptToDismiss (UIPresentationController presentationController);
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIPopoverPresentationControllerDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIPopoverPresentationControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIPopoverPresentationControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIPopoverPresentationControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIPopoverPresentationControllerDelegate { }

	/// <summary>Delegate object for <see cref="UIKit.UIPopoverPresentationController" /> objects. Provides methods relating to presentation and dismissal events and allows fine-grained control for adaptive presentations.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPopoverPresentationControllerDelegate_protocol/index.html">Apple documentation for <c>UIPopoverPresentationControllerDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (UIAdaptivePresentationControllerDelegate))]
	partial interface UIPopoverPresentationControllerDelegate {
		/// <param name="popoverPresentationController">To be added.</param>
		/// <summary>The popover that is controlled by <paramref name="popoverPresentationController" /> will be presented soon.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised prior to presentation.</summary>
			<remarks>To be added.</remarks>
			""")]
		[Export ("prepareForPopoverPresentation:"), EventName ("PrepareForPresentation")]
		void PrepareForPopoverPresentation (UIPopoverPresentationController popoverPresentationController);

		/// <param name="popoverPresentationController">To be added.</param>
		/// <summary>Asks if the popover that is controlled by <paramref name="popoverPresentationController" /> should be dismissed.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'ShouldDismiss'.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'ShouldDismiss'.")]
		[Export ("popoverPresentationControllerShouldDismissPopover:"), DelegateName ("ShouldDismiss"), DefaultValue (true)]
		bool ShouldDismissPopover (UIPopoverPresentationController popoverPresentationController);

		/// <param name="popoverPresentationController">To be added.</param>
		/// <summary>The popover that is controlled by <paramref name="popoverPresentationController" /> was dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised after the presented view controller has been dismissed.</summary>
			<remarks>To be added.</remarks>
			""")]
		[Deprecated (PlatformName.iOS, 13, 0, message: "Replaced by 'DidDismiss'.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Replaced by 'DidDismiss'.")]
		[Export ("popoverPresentationControllerDidDismissPopover:"), EventName ("DidDismiss")]
		void DidDismissPopover (UIPopoverPresentationController popoverPresentationController);

		/// <param name="popoverPresentationController">To be added.</param>
		/// <param name="targetRect">To be added.</param>
		/// <param name="inView">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("popoverPresentationController:willRepositionPopoverToRect:inView:"),
			EventName ("WillReposition"), EventArgs ("UIPopoverPresentationControllerReposition", XmlDocs = """
			<summary>Event raised shortly before repositioning the popover.</summary>
			<remarks>To be added.</remarks>
			""")]
		void WillRepositionPopover (UIPopoverPresentationController popoverPresentationController, ref CGRect targetRect, ref UIView inView);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIScreenMode {
		[Export ("pixelAspectRatio")]
		nfloat PixelAspectRatio { get; }

		[Export ("size")]
		CGSize Size { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITextInputMode : NSSecureCoding {
		[Export ("currentInputMode"), NullAllowed]
		[Static]
		[Deprecated (PlatformName.iOS, 7, 0)]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		UITextInputMode CurrentInputMode { get; }

		[Export ("primaryLanguage", ArgumentSemantic.Retain)]
		[NullAllowed]
		string PrimaryLanguage { get; }

		/// <include file="../docs/api/UIKit/UITextInputMode.xml" path="/Documentation/Docs[@DocId='P:UIKit.UITextInputMode.CurrentInputModeDidChangeNotification']/*" />
		[Field ("UITextInputCurrentInputModeDidChangeNotification")]
		[Notification]
		NSString CurrentInputModeDidChangeNotification { get; }

		[Static]
		[Export ("activeInputModes")]
		UITextInputMode [] ActiveInputModes { get; }
	}

	/// <summary>Information about a printer.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPrinter_class/index.html">Apple documentation for <c>UIPrinter</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor] // NSGenericException Reason: -[UIPrinter init] not allowed
	partial interface UIPrinter {
		[Export ("URL", ArgumentSemantic.Copy)]
		NSUrl Url { get; }

		[Export ("displayName")]
		string DisplayName { get; }

		[Export ("displayLocation")]
		[NullAllowed]
		string DisplayLocation { get; }

		[Export ("supportedJobTypes")]
		UIPrinterJobTypes SupportedJobTypes { get; }

		[Export ("makeAndModel")]
		[NullAllowed]
		string MakeAndModel { get; }

		[Export ("supportsColor")]
		bool SupportsColor { get; }

		[Export ("supportsDuplex")]
		bool SupportsDuplex { get; }

		[Static, Export ("printerWithURL:")]
		UIPrinter FromUrl (NSUrl url);

		[Export ("contactPrinter:")]
		[Async (XmlDocs = """
			<summary>Connects to the printer to get information about printer capabilities.</summary>
			<returns>
			          <para>A task that represents the asynchronous ContactPrinter operation.   The value of the TResult parameter is a <see cref="UIKit.UIPrinterContactPrinterHandler" />.</para>
			        </returns>
			<remarks>
			          <para copied="true">The ContactPrinterAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		void ContactPrinter (UIPrinterContactPrinterHandler completionHandler);
	}

	/// <summary>Presents a standard interface for selecting a printer.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPrinterPickerController_class/index.html">Apple documentation for <c>UIPrinterPickerController</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor] // NSGenericException Reason: -[UIPrinterPickerController init] not allowed
	partial interface UIPrinterPickerController {
		[Export ("selectedPrinter")]
		UIPrinter SelectedPrinter { get; }

		[Export ("delegate", ArgumentSemantic.UnsafeUnretained), NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIPrinterPickerControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIPrinterPickerControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIPrinterPickerControllerDelegate Delegate { get; set; }

		[Static, Export ("printerPickerControllerWithInitiallySelectedPrinter:")]
		UIPrinterPickerController FromPrinter ([NullAllowed] UIPrinter printer);

		[Async (ResultTypeName = "UIPrinterPickerCompletionResult", XmlDocs = """
			<param name="animated">Whether to animate the display of the picker.</param>
			<summary>Shows a <see cref="UIKit.UIPrinterPickerController" /> from this app, with or without animation, depending on <paramref name="animated" />, and code to run on completion, as a <see cref="UIKit.UIPrinterPickerCompletionHandler" /> object, and then returns whether the object was displayed.</summary>
			<returns>
			          <para>A task that represents the asynchronous Present operation.   The value of the TResult parameter is of type <c>Action&lt;UIKit.UIPrinterPickerCompletionResult&gt;</c>.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""",
			XmlDocsWithOutParameter = """
			<param name="animated">Whether to animate the display of the picker.</param>
			<param name="result">Whether the user picked a printer.</param>
			<summary>Shows a <see cref="UIKit.UIPrinterPickerController" />  from this app, with or without animation, depending on <paramref name="animated" />, returning a task that provides the picker completion result.</summary>
			<returns>To be added.</returns>
			<remarks>To be added.</remarks>
			""")]
		[Export ("presentAnimated:completionHandler:")]
		bool Present (bool animated, [NullAllowed] UIPrinterPickerCompletionHandler completion);

		[Async (ResultTypeName = "UIPrinterPickerCompletionResult", XmlDocs = """
			<param name="rect">To be added.</param>
			<param name="view">To be added.</param>
			<param name="animated">To be added.</param>
			<summary>Asynchronously presents the picker in a popover that is anchored to <paramref name="rect" /> in <paramref name="view" />.</summary>
			<returns>
			          <para>A task that represents the asynchronous PresentFromRect operation.   The value of the TResult parameter is of type <c>Action&lt;UIKit.UIPrinterPickerCompletionResult&gt;</c>.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""",
			XmlDocsWithOutParameter = """
			<param name="rect">The rectangle, in <paramref name="view" />'s coordinate space, to which to anchor the popover.</param>
			<param name="view">The view in whose coordinate space <paramref name="rect" /> is specified.</param>
			<param name="animated">Whether to animate the display of the picker.</param>
			<param name="result">To be added.</param>
			<summary>Shows a <see cref="UIKit.UIPrinterPickerController" /> from this app as a popover that is anchored to a <see cref="CGRect" /> object contained in a <see cref="UIKit.UIView" /> view, with or without animation, depending on <paramref name="animated" />, returning a task that provides the result.</summary>
			<returns>To be added.</returns>
			<remarks>To be added.</remarks>
			""")]
		[Export ("presentFromRect:inView:animated:completionHandler:")]
		bool PresentFromRect (CGRect rect, UIView view, bool animated, [NullAllowed] UIPrinterPickerCompletionHandler completion);

		[Async (ResultTypeName = "UIPrinterPickerCompletionResult", XmlDocs = """
			<param name="item">The bar button item to which to anchor the popover.</param>
			<param name="animated">Whether to animate the display of the picker.</param>
			<summary>Asynchronously shows a <see cref="UIKit.UIPrinterPickerController" /> from this app as a popover that is anchored to a <see cref="UIKit.UIBarButtonItem" /> item, with or without animation, depending on <paramref name="animated" />, and code to run on completion, as a <see cref="UIKit.UIPrinterPickerCompletionHandler" /> object, and then returns whether the object was displayed.</summary>
			<returns>
			          <para>A task that represents the asynchronous PresentFromBarButtonItem operation.   The value of the TResult parameter is of type <c>Action&lt;UIKit.UIPrinterPickerCompletionResult&gt;</c>.</para>
			        </returns>
			<remarks>
			          <para copied="true">The PresentFromBarButtonItemAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""",
			XmlDocsWithOutParameter = """
			<param name="item">The bar button item to which to anchor the popover.</param>
			<param name="animated">Whether to animate the display of the picker.</param>
			<param name="result">To be added.</param>
			<summary>Asynchronously shows a <see cref="UIKit.UIPrinterPickerController" /> from this app as a popover that is anchored to a <see cref="UIKit.UIBarButtonItem" /> item, with or without animation, depending on <paramref name="animated" />, returning a task that provides the result.</summary>
			<returns>To be added.</returns>
			<remarks>To be added.</remarks>
			""")]
		[Export ("presentFromBarButtonItem:animated:completionHandler:")]
		bool PresentFromBarButtonItem (UIBarButtonItem item, bool animated, [NullAllowed] UIPrinterPickerCompletionHandler completion);

		[Export ("dismissAnimated:")]
		void Dismiss (bool animated);
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIPrinterPickerControllerDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIPrinterPickerControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIPrinterPickerControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIPrinterPickerControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIPrinterPickerControllerDelegate { }

	/// <summary>Delegate object for a <see cref="UIKit.UIPrinterPickerController" />. Defines events relating to the presentation and dismissal of the controller, and a method for when a printer has been selected.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPrinterPickerControllerDelegate_protocol/index.html">Apple documentation for <c>UIPrinterPickerControllerDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	partial interface UIPrinterPickerControllerDelegate {

		/// <param name="printerPickerController">The printer picker controller that is being displayed.</param>
		/// <summary>Gets the parent view controller of the <paramref name="printerPickerController" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("printerPickerControllerParentViewController:")]
		UIViewController GetParentViewController (UIPrinterPickerController printerPickerController);

		/// <param name="printerPickerController">The printer picker controller that is being displayed.</param>
		/// <param name="printer">Designated printer for consideration by the delegate.</param>
		/// <summary>The <paramref name="printerPickerController" /> should show <paramref name="printer" /> to the user.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("printerPickerController:shouldShowPrinter:")]
		bool ShouldShowPrinter (UIPrinterPickerController printerPickerController, UIPrinter printer);

		/// <param name="printerPickerController">The printer picker controller that is being displayed.</param>
		/// <summary>The <paramref name="printerPickerController" /> is about to be presented.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printerPickerControllerWillPresent:")]
		void WillPresent (UIPrinterPickerController printerPickerController);

		/// <param name="printerPickerController">The printer picker controller that is being displayed.</param>
		/// <summary>TThe <paramref name="printerPickerController" /> was presented.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printerPickerControllerDidPresent:")]
		void DidPresent (UIPrinterPickerController printerPickerController);

		/// <param name="printerPickerController">The printer picker controller that is being displayed.</param>
		/// <summary>The <paramref name="printerPickerController" /> is about to be dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printerPickerControllerWillDismiss:")]
		void WillDismiss (UIPrinterPickerController printerPickerController);

		/// <param name="printerPickerController">The printer picker controller that is being displayed.</param>
		/// <summary>The <paramref name="printerPickerController" /> was dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printerPickerControllerDidDismiss:")]
		void DidDismiss (UIPrinterPickerController printerPickerController);

		/// <param name="printerPickerController">The printer picker controller that is being displayed.</param>
		/// <summary>The <paramref name="printerPickerController" /> selected a printer.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printerPickerControllerDidSelectPrinter:")]
		void DidSelectPrinter (UIPrinterPickerController printerPickerController);
	}

	/// <summary>Paper size and printing region for a print job.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPrintPaper_Class/index.html">Apple documentation for <c>UIPrintPaper</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIPrintPaper {
		[Export ("bestPaperForPageSize:withPapersFromArray:")]
		[Static]
		UIPrintPaper ForPageSize (CGSize pageSize, UIPrintPaper [] paperList);

		[Export ("paperSize")]
		CGSize PaperSize { get; }

		[Export ("printableRect")]
		CGRect PrintableRect { get; }
	}

	/// <summary>Draws pages for printing.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/iPhone/Reference/UIPrintPageRenderer_Class/index.html">Apple documentation for <c>UIPrintPageRenderer</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIPrintPageRenderer {
		[Export ("footerHeight")]
		nfloat FooterHeight { get; set; }

		[Export ("headerHeight")]
		nfloat HeaderHeight { get; set; }

		[Export ("paperRect")]
		CGRect PaperRect { get; }

		[Export ("printableRect")]
		CGRect PrintableRect { get; }

		[NullAllowed] // by default this property is null
		[Export ("printFormatters", ArgumentSemantic.Copy)]
		UIPrintFormatter [] PrintFormatters { get; set; }

		/// <param name="formatter">To be added.</param>
		/// <param name="pageIndex">To be added.</param>
		/// <summary>Adds a UIPrintFormatter to those associated with this UIPrintPageRenderer.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("addPrintFormatter:startingAtPageAtIndex:")]
		void AddPrintFormatter (UIPrintFormatter formatter, nint pageIndex);

		[iOS (14, 5)]
		[MacCatalyst (14, 5)]
		[Export ("currentRenderingQualityForRequestedRenderingQuality:")]
		UIPrintRenderingQuality GetCurrentRenderingQuality (UIPrintRenderingQuality requestedRenderingQuality);

		/// <param name="index">To be added.</param>
		/// <param name="contentRect">To be added.</param>
		/// <summary>Renders the page in the specified contentRect.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("drawContentForPageAtIndex:inRect:")]
		void DrawContentForPage (nint index, CGRect contentRect);

		/// <param name="index">To be added.</param>
		/// <param name="footerRect">To be added.</param>
		/// <summary>Draws the footer of the page.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("drawFooterForPageAtIndex:inRect:")]
		void DrawFooterForPage (nint index, CGRect footerRect);

		/// <param name="index">To be added.</param>
		/// <param name="headerRect">To be added.</param>
		/// <summary>Draws the header of the page.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("drawHeaderForPageAtIndex:inRect:")]
		void DrawHeaderForPage (nint index, CGRect headerRect);

		/// <param name="index">To be added.</param>
		/// <param name="pageRect">To be added.</param>
		/// <summary>Draws the entire page.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("drawPageAtIndex:inRect:")]
		void DrawPage (nint index, CGRect pageRect);

		/// <param name="printFormatter">To be added.</param>
		/// <param name="index">To be added.</param>
		/// <summary>Called once for each formatter assigned to the page. When overridden, can add custom drawing to the formatters' drawing.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("drawPrintFormatter:forPageAtIndex:")]
		void DrawPrintFormatterForPage (UIPrintFormatter printFormatter, nint index);

		[Export ("numberOfPages")]
		nint NumberOfPages { get; }

		[Export ("prepareForDrawingPages:")]
		void PrepareForDrawingPages (NSRange range);

		/// <param name="index">To be added.</param>
		/// <summary>The set of formatters for the specified page.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("printFormattersForPageAtIndex:")]
		UIPrintFormatter [] PrintFormattersForPage (nint index);
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIPrintInteractionControllerDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIPrintInteractionControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIPrintInteractionControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIPrintInteractionControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIPrintInteractionControllerDelegate { }

	/// <summary>The delegate for the <see cref="UIKit.UIPrintInteractionController" />.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPrintInteractionControllerDelegate_Protocol/index.html">Apple documentation for <c>UIPrintInteractionControllerDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[Model]
	[Protocol]
	interface UIPrintInteractionControllerDelegate {
		/// <param name="printInteractionController">To be added.</param>
		/// <summary>Returns the parent UIViewController for managing the printing-options view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>An instance of the UIPrintInteractionController class or <see langword="null" /> if the object cannot be created.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("printInteractionControllerParentViewController:"), DefaultValue (null), DelegateName ("UIPrintInteraction")]
		UIViewController GetViewController (UIPrintInteractionController printInteractionController);

		/// <param name="printInteractionController">To be added.</param>
		/// <param name="paperList">To be added.</param>
		/// <summary>Retrieves an object holding the paper size and printing area to use for a printing job.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("printInteractionController:choosePaper:"), DefaultValue (null), DelegateName ("UIPrintInteractionPaperList")]
		UIPrintPaper ChoosePaper (UIPrintInteractionController printInteractionController, UIPrintPaper [] paperList);

		/// <param name="printInteractionController">To be added.</param>
		/// <summary>Indicates that the printing-options interface is about to be displayed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printInteractionControllerWillPresentPrinterOptions:"), EventArgs ("UIPrintInteraction", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillPresentPrinterOptions (UIPrintInteractionController printInteractionController);

		/// <param name="printInteractionController">To be added.</param>
		/// <summary>Indicates that the printing-options user interface has been presented.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printInteractionControllerDidPresentPrinterOptions:"), EventArgs ("UIPrintInteraction", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidPresentPrinterOptions (UIPrintInteractionController printInteractionController);

		/// <param name="printInteractionController">To be added.</param>
		/// <summary>Indicates that the printing-options user interface will be dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printInteractionControllerWillDismissPrinterOptions:"), EventArgs ("UIPrintInteraction", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillDismissPrinterOptions (UIPrintInteractionController printInteractionController);

		/// <param name="printInteractionController">To be added.</param>
		/// <summary>Indicates that the printer user interface has been dismissed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printInteractionControllerDidDismissPrinterOptions:"), EventArgs ("UIPrintInteraction", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidDismissPrinterOptions (UIPrintInteractionController printInteractionController);

		/// <param name="printInteractionController">To be added.</param>
		/// <summary>Indicates that the print job is about to begin.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printInteractionControllerWillStartJob:"), EventArgs ("UIPrintInteraction", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void WillStartJob (UIPrintInteractionController printInteractionController);

		/// <param name="printInteractionController">To be added.</param>
		/// <summary>Indicates that the print job has ended.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("printInteractionControllerDidFinishJob:"), EventArgs ("UIPrintInteraction", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidFinishJob (UIPrintInteractionController printInteractionController);

		/// <param name="printInteractionController">To be added.</param>
		/// <param name="paper">To be added.</param>
		/// <summary>The length to use when cutting the page.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("printInteractionController:cutLengthForPaper:")]
		[NoDefaultValue]
		[DelegateName ("Func<UIPrintInteractionController,UIPrintPaper,nfloat>")]
		nfloat CutLengthForPaper (UIPrintInteractionController printInteractionController, UIPrintPaper paper);

		/// <param name="printInteractionController">To be added.</param>
		/// <param name="availableBehaviors">To be added.</param>
		/// <summary>Gets the <see cref="UIKit.UIPrinterCutterBehavior" /> for the print job.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("printInteractionController:chooseCutterBehavior:"), DefaultValue ("UIPrinterCutterBehavior.NoCut"), DelegateName ("UIPrintInteractionCutterBehavior")]
		UIPrinterCutterBehavior ChooseCutterBehavior (UIPrintInteractionController printInteractionController, NSNumber [] availableBehaviors);
	}

	/// <summary>A delegate executed after printing completes or after a printing error occurs.</summary>
	delegate void UIPrintInteractionCompletionHandler ([NullAllowed] UIPrintInteractionController printInteractionController, bool completed, [NullAllowed] NSError error);

	/// <include file="../docs/api/UIKit/UIPrintInteractionController.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIPrintInteractionController']/*" />
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIPrintInteractionControllerDelegate) })]
	// Objective-C exception thrown.  Name: NSGenericException Reason: -[UIPrintInteractionController init] not allowed
	[DisableDefaultCtor]
	interface UIPrintInteractionController {
		/// <summary>An instance of the UIKit.IUIPrintInteractionControllerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIPrintInteractionControllerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIPrintInteractionControllerDelegate Delegate { get; set; }

		[Export ("delegate", ArgumentSemantic.Assign)]
		[NullAllowed]
		NSObject WeakDelegate { get; set; }

		[Export ("printFormatter", ArgumentSemantic.Retain)]
		UIPrintFormatter PrintFormatter { get; set; }

		[Export ("printInfo", ArgumentSemantic.Retain)]
		UIPrintInfo PrintInfo { get; set; }

		[Export ("printingItem", ArgumentSemantic.Copy)]
		NSObject PrintingItem { get; set; }

		[Export ("printingItems", ArgumentSemantic.Copy)]
		NSObject [] PrintingItems { get; set; }

		[Export ("printPageRenderer", ArgumentSemantic.Retain)]
		UIPrintPageRenderer PrintPageRenderer { get; set; }

		[Export ("printPaper")]
		UIPrintPaper PrintPaper { get; }

		[Deprecated (PlatformName.iOS, 10, 0, message: "Page range is now always shown.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Page range is now always shown.")]
		[Export ("showsPageRange")]
		bool ShowsPageRange { get; set; }

		[Export ("canPrintData:")]
		[Static]
		bool CanPrint (NSData data);

		[Export ("canPrintURL:")]
		[Static]
		bool CanPrint (NSUrl url);

		/// <summary>Whether printing is available.</summary>
		///         <value>
		///           <see langword="true" />  if the device supports printing, otherwise <see langword="false" /> . The application can show or hide any print button based upon this value.</value>
		///         <remarks>To be added.</remarks>
		[Export ("printingAvailable")]
		[Static]
		bool PrintingAvailable { [Bind ("isPrintingAvailable")] get; }

		[Export ("printableUTIs")]
		[Static]
		NSSet PrintableUTIs { get; }

		[Export ("sharedPrintController")]
		[Static]
		UIPrintInteractionController SharedPrintController { get; }

		[Export ("dismissAnimated:")]
		void Dismiss (bool animated);

		[Export ("presentAnimated:completionHandler:")]
		[Async (ResultTypeName = "UIPrintInteractionResult", XmlDocs = """
			<param name="animated"> to animate the sheet display,  to display immediately.</param>
			<summary>Presents an iPhone printing user interface.</summary>
			<returns>
			          <para>A task that represents the asynchronous Present operation.   The value of the TResult parameter is of type <c>Action&lt;UIKit.UIPrintInteractionResult&gt;</c>.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""",
			XmlDocsWithOutParameter = """
			<param name="animated">
			          <see langword="true" /> to animate the sheet display, <see langword="false" /> to display immediately.</param>
			<param name="result">The result of the present operation.</param>
			<summary>Presents an iPhone printing user interface asynchronously.</summary>
			<returns>
			          <para>A task that represents the asynchronous Present operation.   The value of the TResult parameter is of type <see cref="UIKit.UIPrintInteractionResult" />.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""")]
		bool Present (bool animated, [NullAllowed] UIPrintInteractionCompletionHandler completion);

		[Export ("presentFromBarButtonItem:animated:completionHandler:")]
		[Async (ResultTypeName = "UIPrintInteractionResult", XmlDocs = """
			<param name="item">The bar button item that you need to tap for printing.</param>
			<param name="animated">Set  to animate the printing popover view from the specified item, or  to display immediately.</param>
			<summary>Presents an iPad printing user interface in a popover view that can be animated from a soecified bar-button item.</summary>
			<returns>
			          <para>A task that represents the asynchronous PresentFromBarButtonItem operation.   The value of the TResult parameter is of type <c>Action&lt;UIKit.UIPrintInteractionResult&gt;</c>.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""",
			XmlDocsWithOutParameter = """
			<param name="item">The bar button item that the user has tapped for printing.</param>
			<param name="animated">
			          <see langword="true" /> to animate the printing popover view from the specified item, <see langword="false" /> to display immediately.</param>
			<param name="result">The result of the present operation.</param>
			<summary>Asynchronously presents the iPad printing user interface in a popover view that can be animated from a bar-button item.</summary>
			<returns>
			          <para>A task that represents the asynchronous PresentFromBarButtonItem operation.   The value of the TResult parameter is of type <c>Action&lt;UIKit.UIPrintInteractionResult&gt;</c>.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""")]
		bool PresentFromBarButtonItem (UIBarButtonItem item, bool animated, [NullAllowed] UIPrintInteractionCompletionHandler completion);

		[Export ("presentFromRect:inView:animated:completionHandler:")]
		[Async (ResultTypeName = "UIPrintInteractionResult", XmlDocs = """
			<param name="rect">A rectangle that defines an area from which a printing popover view is animated.</param>
			<param name="view">The view that provides the coordinate system for the specified rect.</param>
			<param name="animated"> to animate the printing popover view from the specified item,  to display immediately.</param>
			<summary>Presents an iPad printing user interface in a particular popover view that can be animated from any specified area in a view.</summary>
			<returns>
			          <para>A task that represents the asynchronous PresentFromRectInView operation.   The value of the TResult parameter is of type UIKit.UIPrintInteractionResult.  The return values of the asynch methods , , and .</para>
			        </returns>
			<remarks>To be added.</remarks>
			""",
			XmlDocsWithOutParameter = """
			<param name="rect">A rectangle that defines an area from which a printing popover view is animated.</param>
			<param name="view">The view that provides the coordinate system for the specified rect.</param>
			<param name="animated">
			          <see langword="true" /> to animate the printing popover view from the specified item, <see langword="false" /> to display immediately.</param>
			<param name="result">The result of the present operation.</param>
			<summary>Asynchronously presents the iPad printing user interface in a popover view that can be animated from any area in a view.</summary>
			<returns>When  printing options are already displayed, the printing-options popover view is hidden. You need to call the method again to display the options.</returns>
			<remarks>To be added.</remarks>
			""")]
		bool PresentFromRectInView (CGRect rect, UIView view, bool animated, [NullAllowed] UIPrintInteractionCompletionHandler completion);

		[Export ("showsNumberOfCopies")]
		bool ShowsNumberOfCopies { get; set; }


		[MacCatalyst (13, 1)]
		[Export ("showsPaperSelectionForLoadedPapers")]
		bool ShowsPaperSelectionForLoadedPapers { get; set; }

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("showsPaperOrientation")]
		bool ShowsPaperOrientation { get; set; }

		[MacCatalyst (13, 1)]
		[Async (ResultTypeName = "UIPrintInteractionCompletionResult", XmlDocs = """
			<param name="printer">Specified printer.</param>
			<summary>Prints directly to a specified printer.</summary>
			<returns>
			          <para>A task that represents the asynchronous PrintToPrinter operation.   The value of the TResult parameter is of type <c>Action&lt;UIKit.UIPrintInteractionCompletionResult&gt;</c>.</para>
			        </returns>
			<remarks>
			          <para copied="true">The PrintToPrinterAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""",
			XmlDocsWithOutParameter = """
			<param name="printer">Specified printer.</param>
			<param name="result">Whether the operation succeeded or failed.</param>
			<summary>Asynchronously prints directly to a specified printer, returning a task that provides the result.</summary>
			<returns>To be added.</returns>
			<remarks>To be added.</remarks>
			""")]
		[Export ("printToPrinter:completionHandler:")]
		bool PrintToPrinter (UIPrinter printer, UIPrintInteractionCompletionHandler completion);
	}

	/// <summary>Encapsulates information relating to a specific print job.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPrintInfo_Class/index.html">Apple documentation for <c>UIPrintInfo</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	// Objective-C exception thrown.  Name: NSGenericException Reason: -[UIPrintInfo init] not allowed
	[DisableDefaultCtor]
	interface UIPrintInfo : NSCoding, NSCopying {
		[Export ("duplex")]
		UIPrintInfoDuplex Duplex { get; set; }

		[Export ("jobName", ArgumentSemantic.Copy)]
		string JobName { get; set; }

		[Export ("orientation")]
		UIPrintInfoOrientation Orientation { get; set; }

		[Export ("outputType")]
		UIPrintInfoOutputType OutputType { get; set; }

		[Export ("printerID", ArgumentSemantic.Copy)]
		string PrinterID { get; set; }

		[Export ("printInfo")]
		[Static]
		UIPrintInfo PrintInfo { get; }

		[Export ("printInfoWithDictionary:")]
		[Static]
		UIPrintInfo FromDictionary (NSDictionary dictionary);

		[Export ("dictionaryRepresentation")]
		NSDictionary ToDictionary { get; }
	}

	[NoTV, iOS (14, 5)]
	[MacCatalyst (14, 5)]
	[BaseType (typeof (NSObject))]
	interface UIPrintServiceExtension {

		[Export ("printerDestinationsForPrintInfo:")]
		UIPrinterDestination [] GetPrinterDestinations (UIPrintInfo printInfo);
	}

	/// <summary>Lays out a view for printing.</summary>
	///     <remarks>
	///       <para>Rather than extending this class, application developers should use <see cref="UIKit.UIPrintPageRenderer" /> objects. </para>
	///     </remarks>
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewPrintFormatter_Class/index.html">Apple documentation for <c>UIViewPrintFormatter</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIPrintFormatter))]
	interface UIViewPrintFormatter {
		[Export ("view")]
		UIView View { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	partial interface UIVisualEffect : NSCopying, NSSecureCoding {
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIVisualEffect))]
	partial interface UIBlurEffect {
		[Static, Export ("effectWithStyle:")]
		UIBlurEffect FromStyle (UIBlurEffectStyle style);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIVisualEffect))]
	partial interface UIVibrancyEffect {
		[Static, Export ("effectForBlurEffect:")]
		UIVibrancyEffect FromBlurEffect (UIBlurEffect blurEffect);

		// From interface UIVibrancyEffect

		[NoTV, iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("effectForBlurEffect:style:")]
		UIVibrancyEffect FromBlurEffect (UIBlurEffect blurEffect, UIVibrancyEffectStyle style);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	partial interface UIVisualEffectView : NSSecureCoding {

		[DesignatedInitializer]
		[Export ("initWithEffect:")]
		NativeHandle Constructor ([NullAllowed] UIVisualEffect effect);

		[Export ("contentView", ArgumentSemantic.Retain)]
		UIView ContentView { get; }

		[NullAllowed]
		[Export ("effect", ArgumentSemantic.Copy)]
		UIVisualEffect Effect { get; set; }
	}

	/// <summary>A <see cref="UIKit.UIPrintFormatter" /> that provides a single font, color, line-break mode, and alignment.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISimpleTextPrintFormatter_Class/index.html">Apple documentation for <c>UISimpleTextPrintFormatter</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIPrintFormatter))]
	// accessing the properties fails with 7.0GM if the default `init` is used to create the instance, e.g. 
	// [UISimpleTextPrintFormatter color]: unrecognized selector sent to instance 0x18bd70d0
	[DisableDefaultCtor]
	interface UISimpleTextPrintFormatter {
		[NullAllowed]
		[Export ("color", ArgumentSemantic.Retain)]
		UIColor Color { get; set; }

		[NullAllowed]
		[Export ("font", ArgumentSemantic.Retain)]
		UIFont Font { get; set; }

		[NullAllowed]
		[Export ("text", ArgumentSemantic.Copy)]
		string Text { get; set; }

		[Export ("textAlignment")]
		UITextAlignment TextAlignment { get; set; }

		[Export ("initWithText:")]
		NativeHandle Constructor ([NullAllowed] string text);

		[Export ("initWithAttributedText:")]
		NativeHandle Constructor ([NullAllowed] NSAttributedString text);

		[NullAllowed]
		[Export ("attributedText", ArgumentSemantic.Copy)]
		NSAttributedString AttributedText { get; set; }
	}

	/// <summary>An abstract base class that can be extended to lay out custom printable content.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPrintFormatter_Class/index.html">Apple documentation for <c>UIPrintFormatter</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIPrintFormatter : NSCopying {

		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'PerPageContentInsets' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'PerPageContentInsets' instead.")]
		[Export ("contentInsets")]
		UIEdgeInsets ContentInsets { get; set; }

		[Export ("maximumContentHeight")]
		nfloat MaximumContentHeight { get; set; }

		[Export ("maximumContentWidth")]
		nfloat MaximumContentWidth { get; set; }

		[Export ("pageCount")]
		nint PageCount { get; }

		[Export ("printPageRenderer", ArgumentSemantic.Assign)]
		UIPrintPageRenderer PrintPageRenderer { get; }

		[Export ("startPage")]
		nint StartPage { get; set; }

		/// <param name="rect">To be added.</param>
		/// <param name="pageIndex">To be added.</param>
		/// <summary>Draws that portion of this UIPrintFormatter's content in the area specified on the specified page.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("drawInRect:forPageAtIndex:")]
		void DrawRect (CGRect rect, nint pageIndex);

		/// <param name="pageIndex">To be added.</param>
		/// <summary>The RectangleF of the area enclosing the specified page of content.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("rectForPageAtIndex:")]
		CGRect RectangleForPage (nint pageIndex);

		[Export ("removeFromPrintPageRenderer")]
		void RemoveFromPrintPageRenderer ();

		[MacCatalyst (13, 1)]
		[Export ("perPageContentInsets")]
		UIEdgeInsets PerPageContentInsets { get; set; }

		[iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("requiresMainThread")]
		bool RequiresMainThread { get; }
	}

	/// <summary>Lays out HTML text for multipage printing.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMarkupTextPrintFormatter_Class/index.html">Apple documentation for <c>UIMarkupTextPrintFormatter</c></related>
	[MacCatalyst (14, 0)] // the headers lie, not usable until at least Mac Catalyst 14.0
	[NoTV]
	[BaseType (typeof (UIPrintFormatter))]
	[DisableDefaultCtor] // nonfunctional (and it doesn't show up in the header anyway)
	interface UIMarkupTextPrintFormatter {
		[NullAllowed] // by default this property is null
		[Export ("markupText", ArgumentSemantic.Copy)]
		string MarkupText { get; set; }

		[Export ("initWithMarkupText:")]
		NativeHandle Constructor ([NullAllowed] string text);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	interface UIMotionEffect : NSCoding, NSCopying {
		[Export ("keyPathsAndRelativeValuesForViewerOffset:")]
		[return: NullAllowed]
		NSDictionary ComputeKeyPathsAndRelativeValues (UIOffset viewerOffset);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIMotionEffect))]
	interface UIInterpolatingMotionEffect : NSCoding {
		[DesignatedInitializer]
		[Export ("initWithKeyPath:type:")]
		NativeHandle Constructor (string keyPath, UIInterpolatingMotionEffectType type);

		[Export ("keyPath")]
		string KeyPath { get; }

		[Export ("type")]
		UIInterpolatingMotionEffectType Type { get; }

		[NullAllowed] // by default this property is null
		[Export ("minimumRelativeValue", ArgumentSemantic.Retain)]
		NSObject MinimumRelativeValue { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("maximumRelativeValue", ArgumentSemantic.Retain)]
		NSObject MaximumRelativeValue { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIMotionEffect))]
	interface UIMotionEffectGroup {
		[NullAllowed] // by default this property is null
		[Export ("motionEffects", ArgumentSemantic.Copy)]
		UIMotionEffect [] MotionEffects { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor] // designated
	interface UISpringTimingParameters : UITimingCurveProvider {
		[DesignatedInitializer]
		[Export ("init")]
		NativeHandle Constructor ();

		[Export ("initialVelocity")]
		CGVector InitialVelocity { get; }

		/// <param name="ratio">To be added.</param>
		/// <param name="velocity">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("initWithDampingRatio:initialVelocity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nfloat ratio, CGVector velocity);

		/// <param name="mass">To be added.</param>
		/// <param name="stiffness">To be added.</param>
		/// <param name="damping">To be added.</param>
		/// <param name="velocity">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("initWithMass:stiffness:damping:initialVelocity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (nfloat mass, nfloat stiffness, nfloat damping, CGVector velocity);

		/// <param name="ratio">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("initWithDampingRatio:")]
		NativeHandle Constructor (nfloat ratio);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("initWithDuration:bounce:initialVelocity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (double duration, nfloat bounce, CGVector velocity);

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("initWithDuration:bounce:")]
		NativeHandle Constructor (double duration, nfloat bounce);
	}

	/// <summary>Extension class for drawing strings to the screen.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Category, BaseType (typeof (NSString))]
	interface UIStringDrawing {
		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="point">To be added.</param>
		/// <param name="font">To be added.</param>
		/// <summary>Developers should not use this deprecated method. Developers should use 'NSString.DrawString (CGPoint, UIStringAttributes)' instead.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.DrawString (CGPoint, UIStringAttributes)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.DrawString (CGPoint, UIStringAttributes)' instead.")]
		[Export ("drawAtPoint:withFont:")]
		CGSize DrawString (CGPoint point, UIFont font);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="point">To be added.</param>
		/// <param name="width">To be added.</param>
		/// <param name="font">To be added.</param>
		/// <param name="breakMode">To be added.</param>
		/// <summary>Developers should use <see cref="Foundation.NSString.DrawString(CoreGraphics.CGRect, UIKit.UIStringAttributes)" /> rather than this deprecated method..</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Export ("drawAtPoint:forWidth:withFont:lineBreakMode:")]
		CGSize DrawString (CGPoint point, nfloat width, UIFont font, UILineBreakMode breakMode);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <include file="../docs/api/UIKit/UIStringDrawing.xml" path="/Documentation/Docs[@DocId='M:UIKit.UIStringDrawing.DrawString(Foundation.NSString,CoreGraphics.CGPoint,System.Runtime.InteropServices.NFloat,UIKit.UIFont,System.Runtime.InteropServices.NFloat,UIKit.UILineBreakMode,UIKit.UIBaselineAdjustment)']/*" />
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Export ("drawAtPoint:forWidth:withFont:fontSize:lineBreakMode:baselineAdjustment:")]
		CGSize DrawString (CGPoint point, nfloat width, UIFont font, nfloat fontSize, UILineBreakMode breakMode, UIBaselineAdjustment adjustment);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <include file="../docs/api/UIKit/UIStringDrawing.xml" path="/Documentation/Docs[@DocId='M:UIKit.UIStringDrawing.DrawString(Foundation.NSString,CoreGraphics.CGPoint,System.Runtime.InteropServices.NFloat,UIKit.UIFont,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat@,UIKit.UILineBreakMode,UIKit.UIBaselineAdjustment)']/*" />
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Export ("drawAtPoint:forWidth:withFont:minFontSize:actualFontSize:lineBreakMode:baselineAdjustment:")]
		CGSize DrawString (CGPoint point, nfloat width, UIFont font, nfloat minFontSize, ref nfloat actualFontSize, UILineBreakMode breakMode, UIBaselineAdjustment adjustment);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="rect">To be added.</param>
		/// <param name="font">To be added.</param>
		/// <summary>Developers should use <see cref="Foundation.NSString.DrawString(CoreGraphics.CGRect, UIKit.UIStringAttributes)" /> rather than this deprecated method.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Export ("drawInRect:withFont:")]
		CGSize DrawString (CGRect rect, UIFont font);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="rect">To be added.</param>
		/// <param name="font">To be added.</param>
		/// <param name="mode">To be added.</param>
		/// <summary>Developers should use <see cref="Foundation.NSString.DrawString(CoreGraphics.CGRect, UIKit.UIStringAttributes)" /> rather than this deprecated method.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Export ("drawInRect:withFont:lineBreakMode:")]
		CGSize DrawString (CGRect rect, UIFont font, UILineBreakMode mode);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="rect">To be added.</param>
		/// <param name="font">To be added.</param>
		/// <param name="mode">To be added.</param>
		/// <param name="alignment">To be added.</param>
		/// <summary>Developers should use <see cref="Foundation.NSString.DrawString(CoreGraphics.CGRect, UIKit.UIStringAttributes)" /> rather than this deprecated method.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.DrawString (CGRect, UIStringAttributes)' instead.")]
		[Export ("drawInRect:withFont:lineBreakMode:alignment:")]
		CGSize DrawString (CGRect rect, UIFont font, UILineBreakMode mode, UITextAlignment alignment);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="font">To be added.</param>
		/// <summary>Developers should use <see cref="UIKit.NSStringDrawing.GetSizeUsingAttributes(Foundation.NSString,UIKit.UIStringAttributes)" /> rather than this deprecated method.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.GetSizeUsingAttributes (UIStringAttributes)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.GetSizeUsingAttributes (UIStringAttributes)' instead.")]
		[Export ("sizeWithFont:")]
		CGSize StringSize (UIFont font);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="font">To be added.</param>
		/// <param name="forWidth">To be added.</param>
		/// <param name="breakMode">To be added.</param>
		/// <summary>Gets the <see cref="CoreGraphics.CGSize" /> necessary to display this <see cref="Foundation.NSString" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.GetBoundingRect (CGSize, NSStringDrawingOptions, UIStringAttributes, NSStringDrawingContext)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.GetBoundingRect (CGSize, NSStringDrawingOptions, UIStringAttributes, NSStringDrawingContext)' instead.")]
		[Export ("sizeWithFont:forWidth:lineBreakMode:")]
		CGSize StringSize (UIFont font, nfloat forWidth, UILineBreakMode breakMode);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="font">To be added.</param>
		/// <param name="constrainedToSize">To be added.</param>
		/// <summary>The calculated size of the string if rendered with the <paramref name="font" /> or <paramref name="constrainedToSize" />, whichever is smaller.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.GetBoundingRect (CGSize, NSStringDrawingOptions, UIStringAttributes, NSStringDrawingContext)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.GetBoundingRect (CGSize, NSStringDrawingOptions, UIStringAttributes, NSStringDrawingContext)' instead.")]
		[Export ("sizeWithFont:constrainedToSize:")]
		CGSize StringSize (UIFont font, CGSize constrainedToSize);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="font">To be added.</param>
		/// <param name="constrainedToSize">To be added.</param>
		/// <param name="lineBreakMode">To be added.</param>
		/// <summary>Gets the <see cref="CoreGraphics.CGSize" /> necessary to display this <see cref="Foundation.NSString" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0, message: "Use 'NSString.GetBoundingRect (CGSize, NSStringDrawingOptions, UIStringAttributes, NSStringDrawingContext)' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'NSString.GetBoundingRect (CGSize, NSStringDrawingOptions, UIStringAttributes, NSStringDrawingContext)' instead.")]
		[Export ("sizeWithFont:constrainedToSize:lineBreakMode:")]
		CGSize StringSize (UIFont font, CGSize constrainedToSize, UILineBreakMode lineBreakMode);

		// note: duplicate from maccore's foundation.cs where it's binded on NSString2 (for Classic)
		/// <param name="font">To be added.</param>
		/// <param name="minFontSize">To be added.</param>
		/// <param name="actualFontSize">To be added.</param>
		/// <param name="forWidth">To be added.</param>
		/// <param name="lineBreakMode">To be added.</param>
		/// <summary>Gets the <see cref="CoreGraphics.CGSize" /> necessary to display this <see cref="Foundation.NSString" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>
		///           <para>(More documentation for this node is coming)</para>
		///           <para tool="threads">This can be used from a background thread.</para>
		///         </remarks>
		[ThreadSafe]
		[Deprecated (PlatformName.iOS, 7, 0)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1)]
		// Wait for guidance here: https://devforums.apple.com/thread/203655
		//[Obsolete ("Deprecated on iOS7.   No guidance.")]
		[Export ("sizeWithFont:minFontSize:actualFontSize:forWidth:lineBreakMode:")]
		CGSize StringSize (UIFont font, nfloat minFontSize, ref nfloat actualFontSize, nfloat forWidth, UILineBreakMode lineBreakMode);
	}

	/// <summary>Extension methods for <see cref="Foundation.NSString" /> to support easy screen drawing.</summary>
	/// <remarks>To be added.</remarks>
	/// <altmember cref="Foundation.NSString" />
	[Category, BaseType (typeof (NSString))]
	interface NSStringDrawing {
		/// <param name="attributes">To be added.</param>
		/// <summary>Returns the size of the rendered string.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("sizeWithAttributes:")]
		CGSize WeakGetSizeUsingAttributes ([NullAllowed] NSDictionary attributes);

		/// <param name="attributes">To be added.</param>
		/// <summary>The SizeF of the string, if rendered with the specified <paramref name="attributes" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Wrap ("WeakGetSizeUsingAttributes (This, attributes.GetDictionary ())")]
		CGSize GetSizeUsingAttributes (UIStringAttributes attributes);

		/// <param name="point">To be added.</param>
		/// <param name="attributes">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("drawAtPoint:withAttributes:")]
		void WeakDrawString (CGPoint point, [NullAllowed] NSDictionary attributes);

		/// <param name="point">To be added.</param>
		/// <param name="attributes">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Wrap ("WeakDrawString (This, point, attributes.GetDictionary ())")]
		void DrawString (CGPoint point, UIStringAttributes attributes);

		/// <param name="rect">To be added.</param>
		/// <param name="attributes">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("drawInRect:withAttributes:")]
		void WeakDrawString (CGRect rect, [NullAllowed] NSDictionary attributes);

		/// <param name="rect">To be added.</param>
		/// <param name="attributes">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Wrap ("WeakDrawString (This, rect, attributes.GetDictionary ())")]
		void DrawString (CGRect rect, UIStringAttributes attributes);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIView))]
	interface UIInputView : NSCoding {
		[DesignatedInitializer]
		[Export ("initWithFrame:inputViewStyle:")]
		NativeHandle Constructor (CGRect frame, UIInputViewStyle inputViewStyle);

		[Export ("inputViewStyle")]
		UIInputViewStyle InputViewStyle { get; }

		[MacCatalyst (13, 1)]
		[Export ("allowsSelfSizing")]
		bool AllowsSelfSizing { get; set; }
	}

	interface IUITextInputDelegate { }

	interface IUITextDocumentProxy { }

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	partial interface UIInputViewController : UITextInputDelegate {

		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("inputView", ArgumentSemantic.Retain), NullAllowed]
		UIInputView InputView { get; set; }

		[Export ("textDocumentProxy"), NullAllowed]
		IUITextDocumentProxy TextDocumentProxy { get; }

		[Export ("dismissKeyboard")]
		void DismissKeyboard ();

		[Export ("advanceToNextInputMode")]
		void AdvanceToNextInputMode ();

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("requestSupplementaryLexiconWithCompletion:")]
		[Async (XmlDocs = """
			<summary>Gets a lexicon of pairs of terms for use with a custom keyboard.</summary>
			<returns>
			          <para class="improve-task-t-return-type-description">A task that represents the asynchronous RequestSupplementaryLexicon operation.  The value of the TResult parameter is of type System.Action&lt;UIKit.UILexicon&gt;.</para>
			        </returns>
			<remarks>
			          <para copied="true">The RequestSupplementaryLexiconAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		void RequestSupplementaryLexicon (Action<UILexicon> completionHandler);

		[NullAllowed] // by default this property is null
		[Export ("primaryLanguage")]
		string PrimaryLanguage { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("hasDictationKey")]
		bool HasDictationKey { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("handleInputModeListFromView:withEvent:")]
		void HandleInputModeList (UIView fromView, UIEvent withEvent);

		[MacCatalyst (13, 1)]
		[Export ("hasFullAccess")]
		bool HasFullAccess { get; }

		[MacCatalyst (13, 1)]
		[Export ("needsInputModeSwitchKey")]
		bool NeedsInputModeSwitchKey { get; }
	}

	/// <summary>Interface for adding drag-and-drop and spring-loaded operations.</summary>
	/// <remarks>To be added.</remarks>
	[TV (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIInteraction {
		/// <summary>Gets the view that owns the interaction.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("view", ArgumentSemantic.Weak)]
		UIView View { get; }

		/// <param name="view">The view that will contain the interaction.</param>
		/// <summary>Method that is called just before the interaction is added to the provided <paramref name="view" />.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("willMoveToView:")]
		void WillMoveToView ([NullAllowed] UIView view);

		/// <param name="view">The view that now contains the interaction.</param>
		/// <summary>Method that is called after the interaction is added to the provided <paramref name="view" />.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("didMoveToView:")]
		void DidMoveToView ([NullAllowed] UIView view);
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITextDocumentProxy" />.</summary>
	/// <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITextDocumentProxy" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITextDocumentProxy" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITextDocumentProxy_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	/// <summary>Extension methods to the <see cref="UIKit.IUITextDocumentProxy" /> interface to support all the methods from the <see cref="UIKit.UITextDocumentProxy" /> protocol.</summary>
	/// <remarks>
	///       <para>The extension methods for <see cref="UIKit.IUITextDocumentProxy" /> allow developers to treat instances of the interface as having all the optional methods of the original <see cref="UIKit.UITextDocumentProxy" /> protocol.   Since the interface only contains the required members, these extension methods allow developers to call the optional members of the protocol.</para>
	///     </remarks>
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	partial interface UITextDocumentProxy : UIKeyInput {
		/// <summary>Gets the textual context before the insertion point for <c>this</c> <see cref="UIKit.IUITextDocumentProxy" /> object.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("documentContextBeforeInput")]
		[NullAllowed]
		string DocumentContextBeforeInput { get; }

		/// <summary>Gets the textual context after the insertion point for <c>this</c> <see cref="UIKit.IUITextDocumentProxy" /> object.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("documentContextAfterInput")]
		[NullAllowed]
		string DocumentContextAfterInput { get; }

		/// <param name="offset">To be added.</param>
		/// <summary>Changes the text position by <paramref name="offset" />. Positive values are toward the end of the document; Negative values are toward the start.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("adjustTextPositionByCharacterOffset:")]
		void AdjustTextPositionByCharacterOffset (nint offset);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Abstract]
		[Export ("setMarkedText:selectedRange:")]
		void SetMarkedText (string markedText, NSRange selectedRange);

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Abstract]
		[Export ("unmarkText")]
		void UnmarkText ();

		/// <summary>Returns the keyboard input mode.</summary>
		[Abstract]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("documentInputMode")]
		UITextInputMode DocumentInputMode { get; }

		/// <summary>Returns the selected text.</summary>
		[Abstract]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("selectedText")]
		string SelectedText { get; }

		/// <summary>Returns the unique ID for the document.</summary>
		[Abstract]
		[MacCatalyst (13, 1)]
		[Export ("documentIdentifier", ArgumentSemantic.Copy)]
		NSUuid DocumentIdentifier { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UILayoutGuide : NSCoding
#if IOS
		, UIPopoverPresentationControllerSourceItem
#endif
	{
		[Export ("layoutFrame")]
		CGRect LayoutFrame { get; }

		[NullAllowed, Export ("owningView", ArgumentSemantic.Weak)]
		UIView OwningView { get; set; }

		[Export ("identifier")]
		string Identifier { get; set; }

		[Export ("leadingAnchor", ArgumentSemantic.Strong)]
		NSLayoutXAxisAnchor LeadingAnchor { get; }

		[Export ("trailingAnchor", ArgumentSemantic.Strong)]
		NSLayoutXAxisAnchor TrailingAnchor { get; }

		[Export ("leftAnchor", ArgumentSemantic.Strong)]
		NSLayoutXAxisAnchor LeftAnchor { get; }

		[Export ("rightAnchor", ArgumentSemantic.Strong)]
		NSLayoutXAxisAnchor RightAnchor { get; }

		[Export ("topAnchor", ArgumentSemantic.Strong)]
		NSLayoutYAxisAnchor TopAnchor { get; }

		[Export ("bottomAnchor", ArgumentSemantic.Strong)]
		NSLayoutYAxisAnchor BottomAnchor { get; }

		[Export ("widthAnchor", ArgumentSemantic.Strong)]
		NSLayoutDimension WidthAnchor { get; }

		[Export ("heightAnchor", ArgumentSemantic.Strong)]
		NSLayoutDimension HeightAnchor { get; }

		[Export ("centerXAnchor", ArgumentSemantic.Strong)]
		NSLayoutXAxisAnchor CenterXAnchor { get; }

		[Export ("centerYAnchor", ArgumentSemantic.Strong)]
		NSLayoutYAxisAnchor CenterYAnchor { get; }
	}

	/// <summary>Provides the <see cref="UIKit.UILayoutSupport.Length" /> property, which specifies the distance, in points, from the nearest screen edge to the guide.</summary>
	/// <remarks>To be added.</remarks>
	/// <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UILayoutSupport_Protocol/index.html">Apple documentation for <c>UILayoutSupport</c></related>
	[MacCatalyst (13, 1)]
	[Protocol]
	[Model]
	[BaseType (typeof (NSObject))]
	interface UILayoutSupport {
		/// <summary>Gets the length of the part of a view controller's area that is covered with see-through UIKit bars.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Export ("length")]
		[Abstract]
		nfloat Length { get; }

		/// <summary>Returns the top edge of the guide.</summary>
		[MacCatalyst (13, 1)]
		[Export ("topAnchor", ArgumentSemantic.Strong)]
		[Abstract]
		NSLayoutYAxisAnchor TopAnchor { get; }

		/// <summary>Returns the bottom edge of the guide</summary>
		[MacCatalyst (13, 1)]
		[Export ("bottomAnchor", ArgumentSemantic.Strong)]
		[Abstract]
		NSLayoutYAxisAnchor BottomAnchor { get; }

		/// <summary>Returns the height of the guide.</summary>
		[MacCatalyst (13, 1)]
		[Export ("heightAnchor", ArgumentSemantic.Strong)]
		[Abstract]
		NSLayoutDimension HeightAnchor { get; }
	}

	interface IUILayoutSupport { }

	// This protocol is supposed to be an aggregate to existing classes,
	// at the moment there is no API that require a specific UIAccessibilityIdentification
	// implementation, so we don't provide a Model class (for now at least).
	/// <summary>Interface defining the support for an accessibility identifier.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIAccessibilityIdentification {
		/// <summary>Uniquely identifies <c>this</c> for the purposes of accessibility.</summary>
		/// <value>
		///           <see langword="string" /> uniquely identifying <c>this</c> for the purposes of accessibility.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed] // by default this property is null
		[Export ("accessibilityIdentifier", ArgumentSemantic.Copy)]
		string AccessibilityIdentifier { get; set; }
	}

	interface IUIAccessibilityIdentification { }

	/// <include file="../docs/api/UIKit/UIUserNotificationSettings.xml" path="/Documentation/Docs[@DocId='T:UIKit.UIUserNotificationSettings']/*" />
	[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UserNotifications.UNNotificationSettings' instead.")]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UserNotifications.UNNotificationSettings' instead.")]
	[BaseType (typeof (NSObject))]
	partial interface UIUserNotificationSettings : NSCoding, NSSecureCoding, NSCopying {

		[Export ("types")]
		UIUserNotificationType Types { get; }

		[Export ("categories", ArgumentSemantic.Copy)]
		NSSet Categories { get; }

		[Static, Export ("settingsForTypes:categories:")]
		UIUserNotificationSettings GetSettingsForTypes (UIUserNotificationType types, [NullAllowed] NSSet categories);
	}

	/// <summary>Holds custom <see cref="UIKit.UIUserNotificationAction" />s executed in response to a local or push notification.</summary>
	///     
	///     
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIUserNotificationCategory_class/index.html">Apple documentation for <c>UIUserNotificationCategory</c></related>
	[NoTV]
	[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UserNotifications.UNNotificationCategory' instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UserNotifications.UNNotificationCategory' instead.")]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	partial interface UIUserNotificationCategory : NSCopying, NSMutableCopying, NSSecureCoding {

		[Export ("identifier")]
		string Identifier { get; }

		[Export ("actionsForContext:")]
		UIUserNotificationAction [] GetActionsForContext (UIUserNotificationActionContext context);
	}

	/// <summary>A <see cref="UIKit.UIUserNotificationCategory" /> that can be modified after creation.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMutableUserNotificationCategory_class/index.html">Apple documentation for <c>UIMutableUserNotificationCategory</c></related>
	[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UserNotifications.UNNotificationCategory' instead.")]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UserNotifications.UNNotificationCategory' instead.")]
	[BaseType (typeof (UIUserNotificationCategory))]
	partial interface UIMutableUserNotificationCategory {

		[NullAllowed] // by default this property is null
		[Export ("identifier")]
		string Identifier { get; set; }

		[Export ("setActions:forContext:")]
		void SetActions (UIUserNotificationAction [] actions, UIUserNotificationActionContext context);
	}

	/// <summary>Developers should not use this deprecated class. Instead, they should use <see cref="UserNotifications.UNNotificationAction" />.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIUserNotificationAction_class/index.html">Apple documentation for <c>UIUserNotificationAction</c></related>
	[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UserNotifications.UNNotificationAction' instead.")]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UserNotifications.UNNotificationAction' instead.")]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	partial interface UIUserNotificationAction
		: NSCopying, NSMutableCopying, NSSecureCoding {

		[MacCatalyst (13, 1)]
		[Export ("identifier")]
		string Identifier { get; }

		[MacCatalyst (13, 1)]
		[Export ("title")]
		string Title { get; }

		[MacCatalyst (13, 1)]
		[Export ("activationMode", ArgumentSemantic.Assign)]
		UIUserNotificationActivationMode ActivationMode { get; }

		/// <summary>Designates if the user needs to unlock the device before the action is performed. (read-only)</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("authenticationRequired", ArgumentSemantic.Assign)]
		bool AuthenticationRequired { [Bind ("isAuthenticationRequired")] get; }

		/// <summary>Designates if the action is destructive. (read-only)</summary>
		///         <value>
		///         </value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("destructive", ArgumentSemantic.Assign)]
		bool Destructive { [Bind ("isDestructive")] get; }

		[MacCatalyst (13, 1)]
		[Export ("parameters", ArgumentSemantic.Copy)]
		NSDictionary Parameters { get; [NotImplemented] set; }

		[MacCatalyst (13, 1)]
		[Export ("behavior", ArgumentSemantic.Assign)]
		UIUserNotificationActionBehavior Behavior { get; [NotImplemented] set; }

		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNTextInputNotificationAction.TextInputButtonTitle' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNTextInputNotificationAction.TextInputButtonTitle' instead.")]
		[Field ("UIUserNotificationTextInputActionButtonTitleKey")]
		NSString TextInputActionButtonTitleKey { get; }

		// note: defined twice, where watchOS is defined it says it's not in iOS, the other one (for iOS 9) says it's not in tvOS
		/// <summary>Developers should not use this deprecated property. Developers should use 'UNTextInputNotificationResponse.UserText' instead.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UNTextInputNotificationResponse.UserText' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UNTextInputNotificationResponse.UserText' instead.")]
		[Field ("UIUserNotificationActionResponseTypedTextKey")]
		NSString ResponseTypedTextKey { get; }
	}

	/// <summary>A <see cref="UIKit.UIUserNotificationAction" /> that can be modified after creation.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIMutableUserNotificationAction_class/index.html">Apple documentation for <c>UIMutableUserNotificationAction</c></related>
	[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'UserNotifications.UNNotificationAction' instead.")]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UserNotifications.UNNotificationAction' instead.")]
	[BaseType (typeof (UIUserNotificationAction))]
	partial interface UIMutableUserNotificationAction {

		[NullAllowed] // by default this property is null
		[Export ("identifier", ArgumentSemantic.Copy)]
		string Identifier { get; set; }

		[NullAllowed] // by default this property is null
		[Export ("title", ArgumentSemantic.Copy)]
		string Title { get; set; }

		[Export ("activationMode", ArgumentSemantic.Assign)]
		UIUserNotificationActivationMode ActivationMode { get; set; }

		/// <summary>Gets or sets a value that tells whether the device must be unlocked before the action is run.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("authenticationRequired", ArgumentSemantic.Assign)]
		bool AuthenticationRequired { [Bind ("isAuthenticationRequired")] get; set; }

		/// <summary>Gets or sets a value that tells whether the action deletes data.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("destructive", ArgumentSemantic.Assign)]
		bool Destructive { [Bind ("isDestructive")] get; set; }

		[MacCatalyst (13, 1)]
		[Export ("behavior", ArgumentSemantic.Assign)]
		UIUserNotificationActionBehavior Behavior { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("parameters", ArgumentSemantic.Copy), NullAllowed]
		NSDictionary Parameters { get; set; }
	}

	/// <summary>A <see cref="UIKit.UIViewController" /> that presents all available document pickers for a given file type and mode.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentMenuViewController_Class/index.html">Apple documentation for <c>UIDocumentMenuViewController</c></related>
	[NoTV]
	[Deprecated (PlatformName.iOS, 11, 0, message: "Use 'UIDocumentPickerViewController' instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIDocumentPickerViewController' instead.")]
	[BaseType (typeof (UIViewController), Delegates = new string [] { "Delegate" }, Events = new Type [] { typeof (UIDocumentMenuDelegate) })]
	[DisableDefaultCtor] // NSInvalidArgumentException Reason: You cannot initialize a UIDocumentMenuViewController except by the initWithDocumentTypes:inMode: and initWithURL:inMode: initializers.
	partial interface UIDocumentMenuViewController : NSCoding {

		[DesignatedInitializer]
		[Export ("initWithDocumentTypes:inMode:")]
		NativeHandle Constructor (string [] allowedUTIs, UIDocumentPickerMode mode);

		[DesignatedInitializer]
		[Export ("initWithURL:inMode:")]
		NativeHandle Constructor (NSUrl url, UIDocumentPickerMode mode);

		/// <summary>An instance of the UIKit.IUIDocumentMenuDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIDocumentMenuDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIDocumentMenuDelegate Delegate { get; set; }

		[Export ("delegate", ArgumentSemantic.Weak), NullAllowed]
		NSObject WeakDelegate { get; set; }

		[Export ("addOptionWithTitle:image:order:handler:")]
		[Async (XmlDocs = """
			<param name="title">To be added.</param>
			<param name="image">To be added.</param>
			<param name="order">To be added.</param>
			<summary>Asynchronously adds a menu item to the document menue.</summary>
			<returns>A task that represents the asynchronous AddOption operation</returns>
			<remarks>
			          <para copied="true">The AddOptionAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		void AddOption (string title, [NullAllowed] UIImage image, UIDocumentMenuOrder order, Action completionHandler);
	}

	/// <include file="../docs/api/UIKit/IUIDocumentMenuDelegate.xml" path="/Documentation/Docs[@DocId='T:UIKit.IUIDocumentMenuDelegate']/*" />
	interface IUIDocumentMenuDelegate { }

	/// <summary>Delegate object for <see cref="UIKit.UIDocumentMenuViewController" /> objects. Provides methods called when a document is picked or when the picking has been cancelled.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentMenuDelegate_Protocol/index.html">Apple documentation for <c>UIDocumentMenuDelegate</c></related>
	[NoTV]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	[Deprecated (PlatformName.iOS, 13, 0, message: "Use 'UIDocumentPickerViewController' instead.")]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'UIDocumentPickerViewController' instead.")]
	partial interface UIDocumentMenuDelegate {
		/// <param name="documentMenu">To be added.</param>
		/// <param name="documentPicker">To be added.</param>
		/// <summary>The user chose a document.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("documentMenu:didPickDocumentPicker:"), EventArgs ("UIDocumentMenuDocumentPicked", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidPickDocumentPicker (UIDocumentMenuViewController documentMenu, UIDocumentPickerViewController documentPicker);

		/// <param name="documentMenu">To be added.</param>
		/// <summary>The user dismissed the picker.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentMenuWasCancelled:")]
		void WasCancelled (UIDocumentMenuViewController documentMenu);
	}

	/// <summary>Allows the user to select external documents or destinations.</summary>
	///     
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentPickerViewController_Class/index.html">Apple documentation for <c>UIDocumentPickerViewController</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController), Delegates = new string [] { "Delegate" }, Events = new Type [] { typeof (UIDocumentPickerDelegate) })]
	[DisableDefaultCtor] // NSInvalidArgumentException Reason: You cannot initialize a UIDocumentPickerViewController except by the initWithDocumentTypes:inMode: and initWithURL:inMode: initializers
	partial interface UIDocumentPickerViewController : NSCoding {

		[Deprecated (PlatformName.iOS, 14, 0)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[DesignatedInitializer]
		[Export ("initWithDocumentTypes:inMode:")]
		NativeHandle Constructor (string [] allowedUTIs, UIDocumentPickerMode mode);

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initForOpeningContentTypes:asCopy:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UTType [] contentTypes, bool asCopy);

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initForOpeningContentTypes:")]
		NativeHandle Constructor (UTType [] contentTypes);

		[Deprecated (PlatformName.iOS, 14, 0)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[Advice ("Use 'UTType' constructor overloads.")]
		[DesignatedInitializer]
		[Export ("initWithURL:inMode:")]
		NativeHandle Constructor (NSUrl url, UIDocumentPickerMode mode);

		[Deprecated (PlatformName.iOS, 14, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[Export ("initWithURLs:inMode:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSUrl [] urls, UIDocumentPickerMode mode);

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initForExportingURLs:asCopy:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSUrl [] urls, bool asCopy);

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initForExportingURLs:")]
		NativeHandle Constructor (NSUrl [] urls);

		[Export ("delegate", ArgumentSemantic.Weak), NullAllowed]
		NSObject WeakDelegate { get; set; }

		/// <summary>An instance of the UIKit.IUIDocumentPickerDelegate model class which acts as the class delegate.</summary>
		///         <value>The instance of the UIKit.IUIDocumentPickerDelegate model class</value>
		///         <remarks>
		///           <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
		///           <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
		///           <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
		///         </remarks>
		[Wrap ("WeakDelegate")]
		IUIDocumentPickerDelegate Delegate { get; set; }

		[Deprecated (PlatformName.iOS, 14, 0)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[Export ("documentPickerMode", ArgumentSemantic.Assign)]
		UIDocumentPickerMode DocumentPickerMode { get; }

		[MacCatalyst (13, 1)]
		[Export ("allowsMultipleSelection")]
		bool AllowsMultipleSelection { get; set; }

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("shouldShowFileExtensions")]
		bool ShouldShowFileExtensions { get; set; }

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("directoryURL", ArgumentSemantic.Copy)]
		NSUrl DirectoryUrl { get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIDocumentPickerDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIDocumentPickerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIDocumentPickerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIDocumentPickerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIDocumentPickerDelegate { }

	/// <summary>Delegate object for <see cref="UIKit.UIDocumentPickerViewController" /> object. Defines methods called when the user picks a document or cancels.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentPickerDelegate/index.html">Apple documentation for <c>UIDocumentPickerDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	partial interface UIDocumentPickerDelegate {
		/// <param name="controller">The controller that made the request.</param>
		/// <param name="url">The URLS that was picked.</param>
		/// <summary>Developers should not use this deprecated method. Implement 'DidPickDocument (UIDocumentPickerViewController, NSUrl[])' instead.</summary>
		/// <remarks>The meaning will differ dependent upon the mode of the document picker.</remarks>
		[Deprecated (PlatformName.iOS, 11, 0, message: "Implement 'DidPickDocument (UIDocumentPickerViewController, NSUrl[])' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Implement 'DidPickDocument (UIDocumentPickerViewController, NSUrl[])' instead.")]
		[Export ("documentPicker:didPickDocumentAtURL:"), EventArgs ("UIDocumentPicked", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidPickDocument (UIDocumentPickerViewController controller, NSUrl url);

		/// <param name="controller">The controller that made the request.</param>
		/// <param name="urls">The URLS that were picked.</param>
		/// <summary>Developers may implement this method to respond after the user selects documents.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("documentPicker:didPickDocumentsAtURLs:"), EventArgs ("UIDocumentPickedAtUrls", XmlDocs = """
			<summary>Event that is raised when the user selects documents at URLs.</summary>
			<remarks>To be added.</remarks>
			"""), EventName ("DidPickDocumentAtUrls")]
		void DidPickDocument (UIDocumentPickerViewController controller, NSUrl [] urls);

		/// <param name="controller">To be added.</param>
		/// <summary>The user dismissed the picker.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("documentPickerWasCancelled:")]
		void WasCancelled (UIDocumentPickerViewController controller);
	}

	/// <summary>Subclasses of <see cref="UIKit.UIDocumentPickerExtensionViewController" /> extend the Document Picker, allowing the user to import, export, open, and move documents outside of the local sandbox.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentPickerExtensionViewController_Class/index.html">Apple documentation for <c>UIDocumentPickerExtensionViewController</c></related>
	[Deprecated (PlatformName.iOS, 14, 0, message: "Use enumeration based 'NSFileProviderExtension' instead.")]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Deprecated (PlatformName.MacCatalyst, 14, 0, message: "Use enumeration based 'NSFileProviderExtension' instead.")]
	[BaseType (typeof (UIViewController))]
	partial interface UIDocumentPickerExtensionViewController {
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("documentPickerMode", ArgumentSemantic.Assign)]
		UIDocumentPickerMode DocumentPickerMode { get; }

		[Export ("originalURL", ArgumentSemantic.Copy)]
		NSUrl OriginalUrl { get; }

		[Export ("validTypes", ArgumentSemantic.Copy)]
		string [] ValidTypes { get; }

		[Export ("providerIdentifier")]
		string ProviderIdentifier { get; }

		[Export ("documentStorageURL", ArgumentSemantic.Copy)]
		NSUrl DocumentStorageUrl { get; }

		[Export ("dismissGrantingAccessToURL:")]
		void DismissGrantingAccess ([NullAllowed] NSUrl url);

		[Export ("prepareForPresentationInMode:")]
		void PrepareForPresentation (UIDocumentPickerMode mode);
	}

	// note: used (internally, not exposed) by UITableView and UICollectionView for state restoration
	// user objects must adopt the protocol
	/// <summary>Interface that, together with the <see cref="UIKit.UIDataSourceModelAssociation_Extensions" /> class, comprise the UIDataSourceModelAssociation protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIDataSourceModelAssociation {

		/// <param name="idx">To be added.</param>
		/// <param name="view">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("modelIdentifierForElementAtIndexPath:inView:")]
		string GetModelIdentifier (NSIndexPath idx, UIView view);

		/// <param name="identifier">To be added.</param>
		/// <param name="view">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("indexPathForElementWithModelIdentifier:inView:")]
		NSIndexPath GetIndexPath (string identifier, UIView view);
	}

	/// <summary>Interface that, together with the <see cref="UIKit.UIAccessibilityReadingContent_Extensions" /> class, comprise the UIAccessibilityReadingContent protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIAccessibilityReadingContent {

		/// <param name="point">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("accessibilityLineNumberForPoint:")]
		nint GetAccessibilityLineNumber (CGPoint point);

		/// <param name="lineNumber">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("accessibilityContentForLineNumber:")]
		string GetAccessibilityContent (nint lineNumber);

		/// <param name="lineNumber">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("accessibilityFrameForLineNumber:")]
		CGRect GetAccessibilityFrame (nint lineNumber);

		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("accessibilityPageContent")]
		string GetAccessibilityPageContent ();

		/// <param name="lineNumber">The line number of the desired text.</param>
		/// <summary>Gets an attributes string that represents the text at the specified <paramref name="lineNumber" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("accessibilityAttributedContentForLineNumber:")]
		[return: NullAllowed]
		NSAttributedString GetAccessibilityAttributedContent (nint lineNumber);

		/// <summary>Gets an attributes string that represents the text for the current page.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("accessibilityAttributedPageContent")]
		[return: NullAllowed]
		NSAttributedString GetAccessibilityAttributedPageContent ();
	}

	/// <summary>Interface that, together with the <see cref="UIKit.UIGuidedAccessRestrictionDelegate_Extensions" /> class, comprise the UIGuidedAccessRestrictionDelegate protocol.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIGuidedAccessRestrictionDelegate {
		/// <summary>To be added.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("guidedAccessRestrictionIdentifiers")]
		string [] GetGuidedAccessRestrictionIdentifiers { get; }

		/// <param name="restrictionIdentifier">To be added.</param>
		/// <param name="newRestrictionState">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("guidedAccessRestrictionWithIdentifier:didChangeState:")]
		[EventArgs ("UIGuidedAccessRestriction")]
		void GuidedAccessRestrictionChangedState (string restrictionIdentifier, UIGuidedAccessRestrictionState newRestrictionState);

		/// <param name="restrictionIdentifier">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("textForGuidedAccessRestrictionWithIdentifier:")]
		string GetTextForGuidedAccessRestriction (string restrictionIdentifier);

		// Optional
		/// <param name="restrictionIdentifier">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("detailTextForGuidedAccessRestrictionWithIdentifier:")]
		string GetDetailTextForGuidedAccessRestriction (string restrictionIdentifier);
	}

	[DisableDefaultCtor] // [Assert] -init is not a useful initializer for this class. Use one of the designated initializers instead
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIFocusUpdateContext))]
	interface UICollectionViewFocusUpdateContext {

		[Export ("previouslyFocusedIndexPath", ArgumentSemantic.Strong)]
		[NullAllowed]
		NSIndexPath PreviouslyFocusedIndexPath { get; }

		[Export ("nextFocusedIndexPath", ArgumentSemantic.Strong)]
		[NullAllowed]
		NSIndexPath NextFocusedIndexPath { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	interface UICubicTimingParameters : UITimingCurveProvider {
		[Export ("animationCurve")]
		UIViewAnimationCurve AnimationCurve { get; }

		[Export ("controlPoint1")]
		CGPoint ControlPoint1 { get; }

		[Export ("controlPoint2")]
		CGPoint ControlPoint2 { get; }

		[Export ("initWithAnimationCurve:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIViewAnimationCurve curve);

		[Export ("initWithControlPoint1:controlPoint2:")]
		[DesignatedInitializer]
		NativeHandle Constructor (CGPoint point1, CGPoint point2);
	}

	interface IUIFocusAnimationContext { }

	/// <summary>Interface for getting information about a focus animation.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIFocusAnimationContext {
		/// <summary>Gets the time, in seconds, that the animation takes to complete.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("duration")]
		double Duration { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIFocusAnimationCoordinator {
		[Export ("addCoordinatedAnimations:completion:")]
		[Async (XmlDocs = """
			<param name="animations">The animations to run.This parameter can be .</param>
			<summary>Adds the provided <paramref name="animations" /> to the coordinated animation, and runs a completion handler when the operation completes.</summary>
			<returns>A task that represents the asynchronous AddCoordinatedAnimations operation</returns>
			<remarks>To be added.</remarks>
			""")]
		void AddCoordinatedAnimations ([NullAllowed] Action animations, [NullAllowed] Action completion);

		[Async (XmlDocs = """
			<param name="animations">The animations to run.This parameter can be .</param>
			<summary>Adds the provided <paramref name="animations" /> to the coordinated animation, and runs a completion handler when the main animations complete.</summary>
			<returns>A task that represents the asynchronous AddCoordinatedFocusingAnimations operation</returns>
			<remarks>To be added.</remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("addCoordinatedFocusingAnimations:completion:")]
		void AddCoordinatedFocusingAnimations ([NullAllowed] Action<IUIFocusAnimationContext> animations, [NullAllowed] Action completion);

		[Async (XmlDocs = """
			<param name="animations">The animations to run.This parameter can be .</param>
			<summary>Adds the provided <paramref name="animations" /> to the coordinated animation, and runs a completion handler when the main animations complete.</summary>
			<returns>A task that represents the asynchronous AddCoordinatedUnfocusingAnimations operation</returns>
			<remarks>
			          <para copied="true">The AddCoordinatedUnfocusingAnimationsAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		[MacCatalyst (13, 1)]
		[Export ("addCoordinatedUnfocusingAnimations:completion:")]
		void AddCoordinatedUnfocusingAnimations ([NullAllowed] Action<IUIFocusAnimationContext> animations, [NullAllowed] Action completion);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UILayoutGuide))]
	interface UIFocusGuide {
		/// <summary>Gets or sets a Boolean value that controls whether non view areas can become focused.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'PreferredFocusEnvironments' instead.")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use 'PreferredFocusEnvironments' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'PreferredFocusEnvironments' instead.")]
		[NullAllowed, Export ("preferredFocusedView", ArgumentSemantic.Weak)]
		UIView PreferredFocusedView { get; set; }

		[MacCatalyst (13, 1)]
		[Export ("preferredFocusEnvironments", ArgumentSemantic.Copy), NullAllowed] // null_resettable
		IUIFocusEnvironment [] PreferredFocusEnvironments { get; set; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIFocusMovementHint : NSCopying {
		[Export ("movementDirection")]
		CGVector MovementDirection { get; }

		[Export ("perspectiveTransform")]
		CATransform3D PerspectiveTransform { get; }

		[Export ("rotation")]
		CGVector Rotation { get; }

		[Export ("translation")]
		CGVector Translation { get; }

		[Export ("interactionTransform")]
		CATransform3D InteractionTransform { get; }
	}

	interface IUIFocusItem { }

	/// <summary>Interface that defines the <see cref="UIKit.IUIFocusItem.CanBecomeFocused" /> method.</summary>
	/// <remarks>To be added.</remarks>
	[NoMac]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIFocusItem : UIFocusEnvironment {
		/// <summary>To be added.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("canBecomeFocused")]
		bool CanBecomeFocused { get; }

		// FIXME: declared as a @required, but this breaks compatibility
		// Radar: 41121416
		/// <summary>Returns the frame in the reference coordinate space of the containing <see cref="IUIFocusItemContainer" />.</summary>
		/// <returns>The frame in the reference coordinate space of the containing <see cref="IUIFocusItemContainer" />.</returns>
		[MacCatalyst (13, 1)]
		[Abstract]
		[Export ("frame")]
		CGRect Frame { get; }

		[NullAllowed]
		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("focusEffect", ArgumentSemantic.Copy)]
		UIFocusEffect FocusEffect { get; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("focusGroupPriority")]
		UIFocusGroupPriority FocusGroupPriority { get; }

		[TV (18, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("isTransparentFocusItem")]
		bool IsTransparentFocusItem { get; }

		/// <param name="hint">The focus movement hint.</param>
		/// <summary>Called when a focus change may soon happen.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("didHintFocusMovement:")]
		void DidHintFocusMovement (UIFocusMovementHint hint);

		[iOS (18, 0), MacCatalyst (18, 0), TV (18, 0)]
		[Export ("focusItemDeferralMode")]
		UIFocusItemDeferralMode FocusItemDeferralMode { get; }
	}

	[DisableDefaultCtor] // [Assert] -init is not a useful initializer for this class. Use one of the designated initializers instead
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIFocusUpdateContext {
		[NullAllowed, Export ("previouslyFocusedView", ArgumentSemantic.Weak)]
		UIView PreviouslyFocusedView { get; }

		[NullAllowed, Export ("nextFocusedView", ArgumentSemantic.Weak)]
		UIView NextFocusedView { get; }

		[Export ("focusHeading", ArgumentSemantic.Assign)]
		UIFocusHeading FocusHeading { get; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("previouslyFocusedItem", ArgumentSemantic.Weak)]
		IUIFocusItem PreviouslyFocusedItem { get; }

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("nextFocusedItem", ArgumentSemantic.Weak)]
		IUIFocusItem NextFocusedItem { get; }

		/// <include file="../docs/api/UIKit/UIFocusUpdateContext.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIFocusUpdateContext.DidUpdateNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIFocusDidUpdateNotification")]
		NSString DidUpdateNotification { get; }

		/// <include file="../docs/api/UIKit/UIFocusUpdateContext.xml" path="/Documentation/Docs[@DocId='P:UIKit.UIFocusUpdateContext.MovementDidFailNotification']/*" />
		[MacCatalyst (13, 1)]
		[Notification]
		[Field ("UIFocusMovementDidFailNotification")]
		NSString MovementDidFailNotification { get; }

		/// <summary>Gets the focus update context key.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIFocusUpdateContextKey")]
		NSString Key { get; }

		/// <summary>Represents the value that is associated with the constant UIFocusUpdateAnimationCoordinatorKey.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Field ("UIFocusUpdateAnimationCoordinatorKey")]
		NSString AnimationCoordinatorKey { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIFocusSystem {
		[Static]
		[Export ("environment:containsEnvironment:")]
		bool Contains (IUIFocusEnvironment environment, IUIFocusEnvironment otherEnvironment);

		[NoiOS]
		[NoMacCatalyst]
		[Static]
		[Export ("registerURL:forSoundIdentifier:")]
		void RegisterUrl (NSUrl soundFileUrl, NSString identifier);

		// The 2 values associated with the 'UIFocusSoundIdentifier' smart enum cannot be used.
		// See https://developer.apple.com/documentation/uikit/uifocussystem/2887479-register
		// Do not specify one of the UIKit sound identifiers (such as default); doing so will cause an immediate assertion failure and crash your app.

		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("focusedItem", ArgumentSemantic.Weak)]
		IUIFocusItem FocusedItem { get; }

		[MacCatalyst (13, 1)]
		[Static]
		[Export ("focusSystemForEnvironment:")]
		[return: NullAllowed]
		UIFocusSystem Create (IUIFocusEnvironment environment);

		[MacCatalyst (13, 1)]
		[Export ("requestFocusUpdateToEnvironment:")]
		void RequestFocusUpdate (IUIFocusEnvironment environment);

		[MacCatalyst (13, 1)]
		[Export ("updateFocusIfNeeded")]
		void UpdateFocusIfNeeded ();
	}

	interface IUIFocusDebuggerOutput { }

	/// <summary>For internal use by the <c>lldb</c> debugger.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIFocusDebuggerOutput { }

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIFocusDebugger {
		[Static]
		[Export ("help")]
		IUIFocusDebuggerOutput Help { get; }

		[Static]
		[Export ("status")]
		IUIFocusDebuggerOutput Status { get; }

		[Static]
		[Export ("checkFocusabilityForItem:")]
		IUIFocusDebuggerOutput CheckFocusability (IUIFocusItem item);

		[Static]
		[Export ("simulateFocusUpdateRequestFromEnvironment:")]
		IUIFocusDebuggerOutput SimulateFocusUpdateRequest (IUIFocusEnvironment environment);

		// Removed from headers in Xcode 14
		[Wrap ("true ? throw new InvalidOperationException (Constants.ApiRemovedGeneral) : false", IsVirtual = true)]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("checkFocusGroupTreeForEnvironment:")]
		string CheckFocusGroupTree (IUIFocusEnvironment environment);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("preferredFocusEnvironmentsForEnvironment:")]
		IUIFocusDebuggerOutput GetPreferredFocusEnvironments (IUIFocusEnvironment environment);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("focusGroupsForEnvironment:")]
		IUIFocusDebuggerOutput GetFocusGroups (IUIFocusEnvironment environment);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIPress {
		[Export ("timestamp")]
		double /* NSTimeInterval */ Timestamp { get; }

		[Export ("phase")]
		UIPressPhase Phase { get; }

		[Export ("type")]
		UIPressType Type { get; }

		[NullAllowed, Export ("window", ArgumentSemantic.Strong)]
		UIWindow Window { get; }

		[NullAllowed, Export ("responder", ArgumentSemantic.Strong)]
		UIResponder Responder { get; }

		[NullAllowed, Export ("gestureRecognizers", ArgumentSemantic.Copy)]
		UIGestureRecognizer [] GestureRecognizers { get; }

		[Export ("force")]
		nfloat Force { get; }

		[Introduced (PlatformName.MacCatalyst, 13, 4)]
		[iOS (13, 4), TV (13, 4)]
		[NullAllowed, Export ("key")]
		UIKey Key { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIEvent))]
	interface UIPressesEvent {
		[Export ("allPresses")]
		NSSet<UIPress> AllPresses { get; }

		[Export ("pressesForGestureRecognizer:")]
		NSSet<UIPress> GetPresses (UIGestureRecognizer gesture);
	}

	/// <summary>Registers views to respond to 3D interactions.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/reference/UIKit/UIPreviewInteraction">Apple documentation for <c>UIPreviewInteraction</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject), Delegates = new string [] { "Delegate" }, Events = new Type [] { typeof (UIPreviewInteractionDelegate) })]
	[DisableDefaultCtor]
	interface UIPreviewInteraction {

		[Export ("initWithView:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIView view);

		[NullAllowed, Export ("view", ArgumentSemantic.Weak)]
		UIView View { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		IUIPreviewInteractionDelegate Delegate { get; set; }

		/// <summary>Returns the location of the touch location in the specified coordinate space.</summary>
		[Export ("locationInCoordinateSpace:")]
		CGPoint GetLocationInCoordinateSpace ([NullAllowed] IUICoordinateSpace coordinateSpace);

		[Export ("cancelInteraction")]
		void CancelInteraction ();
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIPreviewInteractionDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIPreviewInteractionDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIPreviewInteractionDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIPreviewInteractionDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIPreviewInteractionDelegate { }

	/// <summary>Delegate object for <see cref="UIKit.UIPreviewInteraction" /> objects, providing methods that are called during a 3D touch interaction.</summary>
	///     
	///     <related type="externalDocumentation" href="https://developer.apple.com/reference/UIKit/UIPreviewInteractionDelegate">Apple documentation for <c>UIPreviewInteractionDelegate</c></related>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIPreviewInteractionDelegate {

		/// <param name="previewInteraction">To be added.</param>
		/// <param name="transitionProgress">To be added.</param>
		/// <param name="ended">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("previewInteraction:didUpdatePreviewTransition:ended:")]
		[EventArgs ("NSPreviewInteractionPreviewUpdate", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidUpdatePreviewTransition (UIPreviewInteraction previewInteraction, nfloat transitionProgress, bool ended);

		/// <param name="previewInteraction">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Abstract]
		[Export ("previewInteractionDidCancel:")]
		void DidCancel (UIPreviewInteraction previewInteraction);

		/// <param name="previewInteraction">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[EventArgs ("", XmlDocs = """
			<summary>Delegate invoked by the object to get a value.</summary>
			<value>To be added.</value>
			<remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		[Export ("previewInteractionShouldBegin:")]
		[DelegateName ("Func<UIPreviewInteraction,bool>"), DefaultValue (true)]
		bool ShouldBegin (UIPreviewInteraction previewInteraction);

		/// <param name="previewInteraction">To be added.</param>
		/// <param name="transitionProgress">To be added.</param>
		/// <param name="ended">To be added.</param>
		/// <summary>The system calls this method repeatedly during the commit phase of a preview interaction.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("previewInteraction:didUpdateCommitTransition:ended:")]
		[EventArgs ("NSPreviewInteractionPreviewUpdate", XmlDocs = """
			<summary>Event raised by the object.</summary>
			<remarks>If developers do not assign a value to this event, this will reset the value for the Delegate property to an internal handler that maps delegates to events.</remarks>
			""")]
		void DidUpdateCommit (UIPreviewInteraction previewInteraction, nfloat transitionProgress, bool ended);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIFocusUpdateContext))]
	interface UITableViewFocusUpdateContext {

		[Export ("previouslyFocusedIndexPath", ArgumentSemantic.Strong)]
		[NullAllowed]
		NSIndexPath PreviouslyFocusedIndexPath { get; }

		[Export ("nextFocusedIndexPath", ArgumentSemantic.Strong)]
		[NullAllowed]
		NSIndexPath NextFocusedIndexPath { get; }
	}

	[NoiOS]
	[NoMacCatalyst]
	public enum UIFocusSoundIdentifier {

		[Field ("UIFocusSoundIdentifierNone")]
		None,

		[Field ("UIFocusSoundIdentifierDefault")]
		Default,
	}

	interface IUIFocusEnvironment { }

	/// <summary>Interface defining the focus environment.</summary>
	/// <remarks>To be added.</remarks>
	[NoMac]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIFocusEnvironment {
		/// <summary>If not <see langword="null" />, indicates the child <see cref="UIKit.UIView" /> that should receive focus by default.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[NullAllowed, Export ("preferredFocusedView", ArgumentSemantic.Weak)]
		[Deprecated (PlatformName.iOS, 10, 0, message: "Use 'PreferredFocusEnvironments' instead.")]
		[Deprecated (PlatformName.TvOS, 10, 0, message: "Use 'PreferredFocusEnvironments' instead.")]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'PreferredFocusEnvironments' instead.")]
		UIView PreferredFocusedView { get; }

		/// <summary>When <c>this</c> is the active focus environment, requests a focus update, which can potentially change the <see cref="UIKit.UIViewController.PreferredFocusedView" />. (See also <see cref="UIKit.UIViewController.UpdateFocusIfNeeded" />.)</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("setNeedsFocusUpdate")]
		void SetNeedsFocusUpdate ();

		/// <summary>If any focus environment has a pending update, this method forces an immediate focus update. Unlike <see cref="UIKit.IUIFocusEnvironment.SetNeedsFocusUpdate" />, this method may be called by any <see cref="UIKit.IUIFocusEnvironment" />, whether it currently contains focus or not.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("updateFocusIfNeeded")]
		void UpdateFocusIfNeeded ();

		/// <param name="context">To be added.</param>
		/// <summary>Called prior to the current object either losing or receiving focus. If either focus environment returns <see langword="false" />, the focus update is canceled.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("shouldUpdateFocusInContext:")]
		bool ShouldUpdateFocus (UIFocusUpdateContext context);

		/// <param name="context">Metadata for the focus change.</param>
		/// <param name="coordinator">The <see cref="UIKit.UIFocusAnimationController" /> coordinating the focus-change animations.</param>
		/// <summary>Delegate method called shortly after focus has changed to a new <see cref="UIKit.UIView" />.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("didUpdateFocusInContext:withAnimationCoordinator:")]
		void DidUpdateFocus (UIFocusUpdateContext context, UIFocusAnimationCoordinator coordinator);

		/// <summary>Gets the list of focus environments, ordered by priority, that the environment prefers when updating the focus.</summary>
		[Abstract]
		[MacCatalyst (13, 1)]
		[Export ("preferredFocusEnvironments", ArgumentSemantic.Copy)]
		IUIFocusEnvironment [] PreferredFocusEnvironments { get; }

		[NoiOS]
		[NoMacCatalyst]
		[Export ("soundIdentifierForFocusUpdateInContext:")]
		[return: NullAllowed]
		NSString GetSoundIdentifier (UIFocusUpdateContext context);

		// FIXME: declared as a @required, but this breaks compatibility
		// Radar: 41121293
		/// <summary>Gets the parent focus environment.</summary>
		/// <value>The parent focus environment.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Abstract]
		[NullAllowed, Export ("parentFocusEnvironment", ArgumentSemantic.Weak)]
		IUIFocusEnvironment ParentFocusEnvironment { get; }

		/// <summary>Gets the container that manages focus information for child focus items.</summary>
		/// <value>The container that manages focus information for child focus items.</value>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Abstract]
		[NullAllowed, Export ("focusItemContainer")]
		IUIFocusItemContainer FocusItemContainer { get; }

		[NullAllowed]
		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("focusGroupIdentifier")]
		string FocusGroupIdentifier { get; }
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextInputPasswordRules : NSSecureCoding, NSCopying {
		[Export ("passwordRulesDescriptor")]
		string PasswordRulesDescriptor { get; }

		[Static]
		[Export ("passwordRulesWithDescriptor:")]
		UITextInputPasswordRules Create (string passwordRulesDescriptor);
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	[Static]
	[Internal]
	interface UITextAttributesConstants {
		[Field ("UITextAttributeFont")]
		NSString Font { get; }

		[Field ("UITextAttributeTextColor")]
		NSString TextColor { get; }

		[Field ("UITextAttributeTextShadowColor")]
		NSString TextShadowColor { get; }

		[Field ("UITextAttributeTextShadowOffset")]
		NSString TextShadowOffset { get; }
	}

	interface IUIInteraction { }
	interface IUIDropSession { }
	interface IUIDragDropSession { }
	interface IUIDragAnimating { }
	interface IUIDragSession { }
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIDragInteractionDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIDragInteractionDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIDragInteractionDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIDragInteractionDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIDragInteractionDelegate { }
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIDropInteractionDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIDropInteractionDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIDropInteractionDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIDropInteractionDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIDropInteractionDelegate { }
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UICollectionViewDragDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UICollectionViewDragDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UICollectionViewDragDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UICollectionViewDragDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUICollectionViewDragDelegate { }
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UICollectionViewDropDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UICollectionViewDropDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UICollectionViewDropDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UICollectionViewDropDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUICollectionViewDropDelegate { }
	interface IUICollectionViewDropCoordinator { }
	interface IUICollectionViewDropItem { }
	interface IUICollectionViewDropPlaceholderContext { }
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITableViewDragDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITableViewDragDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITableViewDragDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITableViewDragDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUITableViewDragDelegate { }
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITableViewDropDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITableViewDropDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITableViewDropDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITableViewDropDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUITableViewDropDelegate { }
	interface IUITableViewDropCoordinator { }
	interface IUITableViewDropItem { }
	interface IUITableViewDropPlaceholderContext { }
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITextDragDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITextDragDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITextDragDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITextDragDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUITextDragDelegate { }
	interface IUITextDraggable { }
	interface IUITextDragRequest { }
	interface IUITextDroppable { }
	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITextDropDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITextDropDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITextDropDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITextDropDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUITextDropDelegate { }
	interface IUITextDropRequest { }

	/// <summary>Interface for adding custom preview animations for lift, drop, and cancellation, along with the standard drag and drop animations.</summary>
	///     <remarks>
	///       <para>For example, developers can use this class to dim out or highlight other UI elements during a drag and drop operation.</para>
	///     </remarks>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIDragAnimating {
		/// <param name="animations">An action that animates UI elements.</param>
		/// <summary>Adds the specified animation action.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("addAnimations:")]
		void AddAnimations (Action animations);

		/// <param name="completion">The completion handler to add.</param>
		/// <summary>Adds the specified <paramref name="completion" /> block to run when the animation ends.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("addCompletion:")]
		void AddCompletion (Action<UIViewAnimatingPosition> completion);
	}

	/// <summary>Interface for querying drag-and-drop capabilities and state.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIDragDropSession {
		/// <summary>Gets the drag items that are in the session.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("items")]
		UIDragItem [] Items { get; }

		/// <param name="view">The view to query.</param>
		/// <summary>Returns the location of the drag-drop activity in the coordinate frame of the specified <paramref name="view" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("locationInView:")]
		CGPoint LocationInView ([NullAllowed] UIView view);

		/// <summary>Gets a Boolean value that tells whether the session can move items within a single app.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("allowsMoveOperation")]
		bool AllowsMoveOperation { get; }

		/// <summary>Gets a Boolean value that tells whether the drag activity is confined to the originating app.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("restrictedToDraggingApplication")]
		bool RestrictedToDraggingApplication { [Bind ("isRestrictedToDraggingApplication")] get; }

		/// <param name="typeIdentifiers">The type identifiers to check.</param>
		/// <summary>TReturns a Boolean value that tells whether the session contains at least one item that is described by any of the specified type identifiers.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("hasItemsConformingToTypeIdentifiers:")]
		bool HasConformingItems (string [] typeIdentifiers);

		/// <param name="itemProviderReadingClass">The class of objects to check.</param>
		/// <summary>Returns a Boolean value that tells whether the session can load objects of the specified class.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("canLoadObjectsOfClass:")]
		bool CanLoadObjects (Class itemProviderReadingClass);
	}

	/// <summary>An item that is being dragged.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIDragItem {
		[Export ("initWithItemProvider:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSItemProvider itemProvider);

		[Export ("itemProvider")]
		NSItemProvider ItemProvider { get; }

		[NullAllowed, Export ("localObject", ArgumentSemantic.Strong)]
		NSObject LocalObject { get; set; }

		[NullAllowed, Export ("previewProvider", ArgumentSemantic.Copy)]
		Func<UIDragPreview> PreviewProvider { get; set; }

		[iOS (17, 4), MacCatalyst (17, 4)]
		[Export ("setNeedsDropPreviewUpdate")]
		void SetNeedsDropPreviewUpdate ();
	}

	/// <summary>A visual representation of a dragging item.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIDragPreview : NSCopying {
		[Export ("initWithView:parameters:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIView view, UIDragPreviewParameters parameters);

		[Export ("initWithView:")]
		NativeHandle Constructor (UIView view);

		[Export ("view")]
		UIView View { get; }

		[Export ("parameters", ArgumentSemantic.Copy)]
		UIDragPreviewParameters Parameters { get; }

		// From URLPreviews (UIDragPreview) category

		[Static]
		[Export ("previewForURL:")]
		UIDragPreview GetPreview (NSUrl url);

		[Static]
		[Export ("previewForURL:title:")]
		UIDragPreview GetPreview (NSUrl url, [NullAllowed] string title);
	}

	/// <summary>Specifies the appearance of the view that displays the drag preview.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIPreviewParameters))]
	[DesignatedDefaultCtor]
	interface UIDragPreviewParameters : NSCopying {

		[Export ("initWithTextLineRects:")]
		NativeHandle Constructor (NSValue [] textLineRects);

		// Now they come from the base class

		// [NullAllowed, Export ("visiblePath", ArgumentSemantic.Copy)]
		// UIBezierPath VisiblePath { get; set; }

		// [Export ("backgroundColor", ArgumentSemantic.Copy)]
		// UIColor BackgroundColor { get; set; }
	}

	/// <summary>Represents the location to which items from dropped or cancelled drag activities will animate.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIPreviewTarget))]
	[DisableDefaultCtor]
	interface UIDragPreviewTarget : NSCopying {
		[Export ("initWithContainer:center:transform:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIView container, CGPoint center, CGAffineTransform transform);

		[Export ("initWithContainer:center:")]
		NativeHandle Constructor (UIView container, CGPoint center);
	}

	/// <summary>Interface for providing custom data, visible to the originating activity only, to a drag interaction.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIDragSession : UIDragDropSession {
		/// <summary>Gets or sets the optional object that contains context information visible to the originating activity.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("localContext", ArgumentSemantic.Strong)]
		NSObject LocalContext { get; set; }
	}

	/// <summary>Interaction for dragging items and delegating drag session calls and item providing.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIDragInteraction : UIInteraction {
		[Export ("initWithDelegate:")]
		[DesignatedInitializer]
		NativeHandle Constructor (IUIDragInteractionDelegate @delegate);

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		IUIDragInteractionDelegate Delegate { get; }

		[Export ("allowsSimultaneousRecognitionDuringLift")]
		bool AllowsSimultaneousRecognitionDuringLift { get; set; }

		/// <summary>Gets or sets a Boolean value that controls whether the drag interaction can receive touches and can participate in an interaction.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		/// <summary>Gets a Boolean value that tells whether the interaction is enabled by default on the device.</summary>
		///         <value>To be added.</value>
		///         <remarks>
		///           <para>This value is <see langword="true" /> on the iPad. On the iPhone, it is <see langword="false" />.</para>
		///         </remarks>
		[Static]
		[Export ("enabledByDefault")]
		bool EnabledByDefault { [Bind ("isEnabledByDefault")] get; }
	}

	/// <summary>Delegate object for drag interaction events.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIDragInteractionDelegate {
		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The drag session to add initial items to.</param>
		/// <summary>Method that is called to get the items that will begin a drag interaction.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dragInteraction:itemsForBeginningSession:")]
		UIDragItem [] GetItemsForBeginningSession (UIDragInteraction interaction, IUIDragSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="item">The item for which to get a preview.</param>
		/// <param name="session">The drag session.</param>
		/// <summary>Method that is called to get a targeted drag preview for animating the lift.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:previewForLiftingItem:session:")]
		[return: NullAllowed]
		UITargetedDragPreview GetPreviewForLiftingItem (UIDragInteraction interaction, UIDragItem item, IUIDragSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="animator">An animator to run custom parallel animations and in which the developer may optionally add a completion handler.</param>
		/// <param name="session">The session.</param>
		/// <summary>Method that is called before each item with a lift preview is about to lift.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:willAnimateLiftWithAnimator:session:")]
		void WillAnimateLift (UIDragInteraction interaction, IUIDragAnimating animator, IUIDragSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that will begin.</param>
		/// <summary>Method that is called when a session is about to begin.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:sessionWillBegin:")]
		void SessionWillBegin (UIDragInteraction interaction, IUIDragSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session to query.</param>
		/// <summary>Method that is called to find out if the session allows items to be moved, instead of copied.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:sessionAllowsMoveOperation:")]
		bool SessionAllowsMoveOperation (UIDragInteraction interaction, IUIDragSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session to query.</param>
		/// <summary>Method that is called to find out if the application only supports drag and drop operations to and from itself.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:sessionIsRestrictedToDraggingApplication:")]
		bool SessionIsRestrictedToDraggingApplication (UIDragInteraction interaction, IUIDragSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session to query.</param>
		/// <summary>Method that is called to find out whether the application prefers full size previews in the source view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:prefersFullSizePreviewsForSession:")]
		bool PrefersFullSizePreviews (UIDragInteraction interaction, IUIDragSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The drag session.</param>
		/// <summary>Method that is called when the drag point moves.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:sessionDidMove:")]
		void SessionDidMove (UIDragInteraction interaction, IUIDragSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that will end.</param>
		/// <param name="operation">The operation that will end the session.</param>
		/// <summary>Method that is called when a session is about to end.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:session:willEndWithOperation:")]
		void SessionWillEnd (UIDragInteraction interaction, IUIDragSession session, UIDropOperation operation);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that ended.</param>
		/// <param name="operation">The resulting drag and drop operation.</param>
		/// <summary>Method that is called when the drag session ends.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:session:didEndWithOperation:")]
		void SessionDidEnd (UIDragInteraction interaction, IUIDragSession session, UIDropOperation operation);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that ended and transferred the items.</param>
		/// <summary>Method that is called after the dropped items have been received.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:sessionDidTransferItems:")]
		void SessionDidTransferItems (UIDragInteraction interaction, IUIDragSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session to which to add items.</param>
		/// <param name="point">The touch location in the view's coordinate system.</param>
		/// <summary>Method that is called to add drag items to a drag session in response to a gesture by the user.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:itemsForAddingToSession:withTouchAtPoint:")]
		UIDragItem [] GetItemsForAddingToSession (UIDragInteraction interaction, IUIDragSession session, CGPoint point);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="sessions">The sessions from which to choose.</param>
		/// <param name="point">The touch point in the view's coordinate system.</param>
		/// <summary>Method that is called to disambiguate to which session to add items when multiple sessions are active.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:sessionForAddingItems:withTouchAtPoint:")]
		[return: NullAllowed]
		IUIDragSession GetSessionForAddingItems (UIDragInteraction interaction, IUIDragSession [] sessions, CGPoint point);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session to which items will be added.</param>
		/// <param name="items">The items to add.</param>
		/// <param name="addingInteraction">The interaction that will add the items.</param>
		/// <summary>Method that is called when items are about to be added to the session.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:session:willAddItems:forInteraction:")]
		void WillAddItems (UIDragInteraction interaction, IUIDragSession session, UIDragItem [] items, UIDragInteraction addingInteraction);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="item">The item for which to get a preview.</param>
		/// <param name="defaultPreview">The default drag preview for the item.</param>
		/// <summary>Method that is called for each visible item in a drag session when the user cancels the drag session.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:previewForCancellingItem:withDefault:")]
		[return: NullAllowed]
		UITargetedDragPreview GetPreviewForCancellingItem (UIDragInteraction interaction, UIDragItem item, UITargetedDragPreview defaultPreview);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="item">The item whose cancellation will be animated.</param>
		/// <param name="animator">An animator to run custom parallel animations and in which the developer may optionally add a completion handler.</param>
		/// <summary>Method that is called before the animation of each item in a cancellation begins.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dragInteraction:item:willAnimateCancelWithAnimator:")]
		void WillAnimateCancel (UIDragInteraction interaction, UIDragItem item, IUIDragAnimating animator);
	}

	/// <summary>An implementation of <see cref="UIKit.IUIInteraction" /> used for a drop interaction.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))] // If Apple adds a delegate setter: Delegates=new string [] {"Delegate"}, Events=new Type [] { typeof (UIDropInteractionDelegate)})]
	[DisableDefaultCtor]
	interface UIDropInteraction : UIInteraction {
		[Export ("initWithDelegate:")]
		[DesignatedInitializer]
		NativeHandle Constructor (IUIDropInteractionDelegate @delegate);

		[Export ("delegate", ArgumentSemantic.Weak)]
		[NullAllowed]
		IUIDropInteractionDelegate Delegate { get; }

		[Export ("allowsSimultaneousDropSessions")]
		bool AllowsSimultaneousDropSessions { get; set; }
	}

	/// <summary>Delegate object for a drop interaction.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIDropInteractionDelegate {
		/// <param name="interaction">The interaction to check.</param>
		/// <param name="session">The session to query.</param>
		/// <summary>Returns <see langword="true" /> if the specified <paramref name="interaction" /> can handle the specified <paramref name="session" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dropInteraction:canHandleSession:"), DelegateName ("Func<UIDropInteraction,IUIDropSession,bool>"), NoDefaultValue]
		bool CanHandleSession (UIDropInteraction interaction, IUIDropSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that entered the view for the interaction.</param>
		/// <summary>Method that is called when the user drags the drop session into the view for the drop interaction.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dropInteraction:sessionDidEnter:"), EventArgs ("UIDropInteraction")]
		void SessionDidEnter (UIDropInteraction interaction, IUIDropSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that was changed.</param>
		/// <summary>Method that is called when the touch point moves into or within the view, or when drag items are added while the touch point is within the view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dropInteraction:sessionDidUpdate:"), DelegateName ("Func<UIDropInteraction,IUIDropSession,UIDropProposal>"), NoDefaultValue]
		UIDropProposal SessionDidUpdate (UIDropInteraction interaction, IUIDropSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that left the view for the interaction.</param>
		/// <summary>Method that is called when the user drags the drop session out of the view for the drop interaction.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dropInteraction:sessionDidExit:"), EventArgs ("UIDropInteraction")]
		void SessionDidExit (UIDropInteraction interaction, IUIDropSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that contains the items to drop.</param>
		/// <summary>Method that is called to consume data from the item providers in the drop session.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dropInteraction:performDrop:"), EventArgs ("UIDropInteraction")]
		void PerformDrop (UIDropInteraction interaction, IUIDropSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that has concluded.</param>
		/// <summary>Method that is called after the drop is performed and all animations have completed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dropInteraction:concludeDrop:"), EventArgs ("UIDropInteraction")]
		void ConcludeDrop (UIDropInteraction interaction, IUIDropSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="session">The session that ended.</param>
		/// <summary>Method that is called to allow the developer to release all resources for the completed drop session.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dropInteraction:sessionDidEnd:"), EventArgs ("UIDropInteraction")]
		void SessionDidEnd (UIDropInteraction interaction, IUIDropSession session);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="item">The item for which to get a preview.</param>
		/// <param name="defaultPreview">The default preview for the item.</param>
		/// <summary>Method that is called for each drag item to allow the developer to provide a custom preview.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("dropInteraction:previewForDroppingItem:withDefault:")]
		[return: NullAllowed]
		[DelegateName ("UIDropInteractionPreviewForItem"), NoDefaultValue]
		UITargetedDragPreview GetPreviewForDroppingItem (UIDropInteraction interaction, UIDragItem item, UITargetedDragPreview defaultPreview);

		/// <param name="interaction">The interaction that is making the request.</param>
		/// <param name="item">The item whose drop to animate.</param>
		/// <param name="animator">An animator to run custom parallel animations and in which the developer may optionally add a completion handler.</param>
		/// <summary>Method that is called for each visible drag item just before the drop is animated.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("dropInteraction:item:willAnimateDropWithAnimator:"), EventArgs ("UIDropInteractionAnimation")]
		void WillAnimateDrop (UIDropInteraction interaction, UIDragItem item, IUIDragAnimating animator);
	}

	/// <summary>Represents a proposed response to a drop operation.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIDropProposal : NSCopying {
		[Export ("initWithDropOperation:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIDropOperation operation);

		[Export ("operation")]
		UIDropOperation Operation { get; }

		/// <summary>Gets or sets a Boolean value that controls whether the insertion point is offset from the touch point to allow the user to precisely place items for dropping.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("precise")]
		bool Precise { [Bind ("isPrecise")] get; set; }

		[Export ("prefersFullSizePreview")]
		bool PrefersFullSizePreview { get; set; }
	}

	/// <summary>Interface for accessing drop session state and loading drag items.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIDropSession : UIDragDropSession, NSProgressReporting {
		/// <summary>The local in-app drag session for the drop session.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("localDragSession")]
		IUIDragSession LocalDragSession { get; }

		/// <summary>Gets or sets the style of the drop indicator.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("progressIndicatorStyle", ArgumentSemantic.Assign)]
		UIDropSessionProgressIndicatorStyle ProgressIndicatorStyle { get; set; }

		/// <param name="itemProviderReadingClass">The class of objects to load.</param>
		/// <param name="completion">Handler to run after the objecs are loaded.</param>
		/// <summary>When implemented by the developer, instantiates every object in the drop session that has the type that is specified by the <paramref ame="itemProviderReadingClass" /> parameter.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("loadObjectsOfClass:completion:")]
		NSProgress LoadObjects (Class itemProviderReadingClass, Action<INSItemProviderReading []> completion);
	}

	/// <summary>A drag item preview for use during drag-and-drop animations.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UITargetedPreview))]
	[DisableDefaultCtor]
	interface UITargetedDragPreview : NSCopying {
		[Export ("initWithView:parameters:target:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIView view, UIDragPreviewParameters parameters, UIDragPreviewTarget target);

		[Export ("initWithView:parameters:")]
		NativeHandle Constructor (UIView view, UIDragPreviewParameters parameters);

		[Export ("initWithView:")]
		NativeHandle Constructor (UIView view);

		[Export ("target")]
		UIDragPreviewTarget Target { get; }

		[Export ("view")]
		UIView View { get; }

		[Export ("parameters", ArgumentSemantic.Copy)]
		UIDragPreviewParameters Parameters { get; }

		[Export ("size")]
		CGSize Size { get; }

		[Export ("retargetedPreviewWithTarget:")]
		UITargetedDragPreview GetRetargetedPreview (UIDragPreviewTarget newTarget);

		// From URLPreviews (UITargetedDragPreview) category

		[Static]
		[Export ("previewForURL:target:")]
		UITargetedDragPreview GetPreview (NSUrl url, UIDragPreviewTarget target);

		[Static]
		[Export ("previewForURL:title:target:")]
		UITargetedDragPreview GetPreview (NSUrl url, [NullAllowed] string title, UIDragPreviewTarget target);
	}

	/// <summary>Interface for a drag operation that started from a collection view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UICollectionViewDragDelegate {
		/// <param name="collectionView">The originating collection view.</param>
		/// <param name="session">The drag session to which to add items.</param>
		/// <param name="indexPath">The index path to the item.</param>
		/// <summary>Returns the items that were used to begin the drag operation, if present.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("collectionView:itemsForBeginningDragSession:atIndexPath:")]
		UIDragItem [] GetItemsForBeginningDragSession (UICollectionView collectionView, IUIDragSession session, NSIndexPath indexPath);

		/// <param name="collectionView">The originating collection view.</param>
		/// <param name="session">The drag session to which to add items.</param>
		/// <param name="indexPath">The index path to the item to add.</param>
		/// <param name="point">The point that the user touched, in the collection view coordinate space.</param>
		/// <summary>Adds the items at the index path to the drag session.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:itemsForAddingToDragSession:atIndexPath:point:")]
		UIDragItem [] GetItemsForAddingToDragSession (UICollectionView collectionView, IUIDragSession session, NSIndexPath indexPath, CGPoint point);

		/// <param name="collectionView">To be added.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Gets the preview parameters for the item at the specified index path.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dragPreviewParametersForItemAtIndexPath:")]
		[return: NullAllowed]
		UIDragPreviewParameters GetDragPreviewParameters (UICollectionView collectionView, NSIndexPath indexPath);

		/// <param name="collectionView">The originating collection view.</param>
		/// <param name="session">The session that is about to begin.</param>
		/// <summary>Method that is called just before a drag session begins.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dragSessionWillBegin:")]
		void DragSessionWillBegin (UICollectionView collectionView, IUIDragSession session);

		/// <param name="collectionView">The originating collection view.</param>
		/// <param name="session">The session that is ending.</param>
		/// <summary>Method that is called when the user cancels or completes the drag session.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dragSessionDidEnd:")]
		void DragSessionDidEnd (UICollectionView collectionView, IUIDragSession session);

		/// <param name="collectionView">To be added.</param>
		/// <param name="session">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dragSessionAllowsMoveOperation:")]
		bool DragSessionAllowsMoveOperation (UICollectionView collectionView, IUIDragSession session);

		/// <param name="collectionView">To be added.</param>
		/// <param name="session">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dragSessionIsRestrictedToDraggingApplication:")]
		bool DragSessionIsRestrictedToDraggingApplication (UICollectionView collectionView, IUIDragSession session);
	}

	/// <summary>Delegate for handling drops to collection views.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UICollectionViewDropDelegate {
		/// <param name="collectionView">The receiving collection view.</param>
		/// <param name="coordinator">The drop coordinator to use.</param>
		/// <summary>Method that is called to drop data into a collection view.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("collectionView:performDropWithCoordinator:")]
		void PerformDrop (UICollectionView collectionView, IUICollectionViewDropCoordinator coordinator);

		/// <param name="collectionView">The collection view to query.</param>
		/// <param name="session">The drop session with the drag type data.</param>
		/// <summary>Returns a Boolean value that tells whether the collection view can handle drops from the data in the session.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:canHandleDropSession:")]
		bool CanHandleDropSession (UICollectionView collectionView, IUIDropSession session);

		/// <param name="collectionView">The originating collection view.</param>
		/// <param name="session">The drop session.</param>
		/// <summary>Method that is called when the drop point enters the collection view.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dropSessionDidEnter:")]
		void DropSessionDidEnter (UICollectionView collectionView, IUIDropSession session);

		/// <param name="collectionView">The originating collection view.</param>
		/// <param name="session">The drop session.</param>
		/// <param name="destinationIndexPath">
		///           <para>The index path where the content would be dropped if it were dropped at the time of the method call.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Method that is called when the drop point over the collection view changes.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dropSessionDidUpdate:withDestinationIndexPath:")]
		UICollectionViewDropProposal DropSessionDidUpdate (UICollectionView collectionView, IUIDropSession session, [NullAllowed] NSIndexPath destinationIndexPath);

		/// <param name="collectionView">The originating collection view.</param>
		/// <param name="session">The drop session.</param>
		/// <summary>Method that is called when the drop point leaves the collection view.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dropSessionDidExit:")]
		void DropSessionDidExit (UICollectionView collectionView, IUIDropSession session);

		/// <param name="collectionView">The originating collection view.</param>
		/// <param name="session">The drop session.</param>
		/// <summary>Method that is called when the drop session ends.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dropSessionDidEnd:")]
		void DropSessionDidEnd (UICollectionView collectionView, IUIDropSession session);

		/// <param name="collectionView">The originating collection view.</param>
		/// <param name="indexPath">To be added.</param>
		/// <summary>Returns the drag preview parameters for the item at the specified index path.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("collectionView:dropPreviewParametersForItemAtIndexPath:")]
		[return: NullAllowed]
		UIDragPreviewParameters GetDropPreviewParameters (UICollectionView collectionView, NSIndexPath indexPath);
	}

	/// <summary>The proposed method of handling dropped content for a collection view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDropProposal))]
	[DisableDefaultCtor] // NSInternalInconsistencyException Reason: Not implemented
	interface UICollectionViewDropProposal {

		// inline from base type
		[Export ("initWithDropOperation:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIDropOperation operation);

		[Export ("initWithDropOperation:intent:")]
		NativeHandle Constructor (UIDropOperation operation, UICollectionViewDropIntent intent);

		[Export ("intent")]
		UICollectionViewDropIntent Intent { get; }
	}

	/// <summary>System-created object used to coordinate drop actions with a collection view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UICollectionViewDropCoordinator {
		/// <summary>Gets the drag items.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("items")]
		IUICollectionViewDropItem [] Items { get; }

		/// <summary>Gets the index path for the insertion.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("destinationIndexPath")]
		NSIndexPath DestinationIndexPath { get; }

		/// <summary>Gets the drop proposal.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("proposal")]
		UICollectionViewDropProposal Proposal { get; }

		/// <summary>Gets the drop session.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("session")]
		IUIDropSession Session { get; }

		/// <param name="dragItem">The item to drop.</param>
		/// <param name="placeholder">The placeholder into which to drop the item.</param>
		/// <summary>Drops the drag item to the specified placeholder.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropItem:toPlaceholder:")]
		IUICollectionViewDropPlaceholderContext DropItemToPlaceholder (UIDragItem dragItem, UICollectionViewDropPlaceholder placeholder);

		/// <param name="dragItem">The item to drop.</param>
		/// <param name="itemIndexPath">The index path to which to drop the item.</param>
		/// <summary>Drops the drag item into the item at the specified item index path.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropItem:toItemAtIndexPath:")]
		IUIDragAnimating DropItemToItem (UIDragItem dragItem, NSIndexPath itemIndexPath);

		/// <param name="dragItem">The item to drop.</param>
		/// <param name="itemIndexPath">The index path to the item into which to drop.</param>
		/// <param name="rect">The destination drop rectangle.</param>
		/// <summary>Drops the drag item into the specified rectangle, in the coordinate system of the item at the specified item index path.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropItem:intoItemAtIndexPath:rect:")]
		IUIDragAnimating DropItemIntoItem (UIDragItem dragItem, NSIndexPath itemIndexPath, CGRect rect);

		/// <param name="dragItem">The item to drop.</param>
		/// <param name="target">The target to which to drop the item.</param>
		/// <summary>Drops the drag item to the specified target.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropItem:toTarget:")]
		IUIDragAnimating DropItemToTarget (UIDragItem dragItem, UIDragPreviewTarget target);
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UICollectionViewPlaceholder {
		[Export ("initWithInsertionIndexPath:reuseIdentifier:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSIndexPath insertionIndexPath, string reuseIdentifier);

		[NullAllowed, Export ("cellUpdateHandler", ArgumentSemantic.Copy)]
		Action<UICollectionViewCell> CellUpdateHandler { get; set; }
	}

	/// <summary>Developers should use this object as a temporary placeholder while retrieving data from a <see cref="Foundation.NSItemProvider" />.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UICollectionViewPlaceholder))]
	interface UICollectionViewDropPlaceholder {
		// inlined
		[Export ("initWithInsertionIndexPath:reuseIdentifier:")]
		NativeHandle Constructor (NSIndexPath insertionIndexPath, string reuseIdentifier);

		[NullAllowed, Export ("previewParametersProvider", ArgumentSemantic.Copy)]
		Func<UICollectionViewCell, UIDragPreviewParameters> PreviewParametersProvider { get; set; }
	}

	/// <summary>Data for an item to be dropped into a collection view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UICollectionViewDropItem {
		/// <summary>Gets the drag item.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dragItem")]
		UIDragItem DragItem { get; }

		/// <summary>Gets the source index path for the item if it is being dragged from another location in the collection view.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("sourceIndexPath")]
		NSIndexPath SourceIndexPath { get; }

		/// <summary>Gets the preview size for the drag item.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("previewSize")]
		CGSize PreviewSize { get; }
	}

	/// <summary>Contains manages collection view placeholder information.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UICollectionViewDropPlaceholderContext : UIDragAnimating {
		/// <summary>Gets the drag item that is represented by the placeholder.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dragItem")]
		UIDragItem DragItem { get; }

		/// <param name="dataSourceUpdates">Handler to run as the placeholder is replaced. Takes the index path where the content should drop.</param>
		/// <summary>Replaces the placeholder cell with dropped content.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("commitInsertionWithDataSourceUpdates:")]
		bool CommitInsertion (Action<NSIndexPath> dataSourceUpdates);

		/// <summary>Removes the placeholder from the view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("deletePlaceholder")]
		bool DeletePlaceholder ();

		/// <summary>Marks the placeholder cell as requiring updated content.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("setNeedsCellUpdate")]
		void SetNeedsCellUpdate ();
	}

	/// <summary>Interface for a drag operation that started from a table view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UITableViewDragDelegate {
		/// <param name="tableView">The originating table view.</param>
		/// <param name="session">The session to which to add the items.</param>
		/// <param name="indexPath">The index path to the dragged row.</param>
		/// <summary>Returns a list of any items that are present at the beginning of a drag session.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("tableView:itemsForBeginningDragSession:atIndexPath:")]
		UIDragItem [] GetItemsForBeginningDragSession (UITableView tableView, IUIDragSession session, NSIndexPath indexPath);

		/// <param name="tableView">The originating table view.</param>
		/// <param name="session">The session to which to add the items.</param>
		/// <param name="indexPath">The index path to the added row.</param>
		/// <param name="point">The point, in the table view's coordinate system, of the user's touch.</param>
		/// <summary>Adds the items at the index path to the drag session.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:itemsForAddingToDragSession:atIndexPath:point:")]
		UIDragItem [] GetItemsForAddingToDragSession (UITableView tableView, IUIDragSession session, NSIndexPath indexPath, CGPoint point);

		/// <param name="tableView">The table view for which to get drag preview parameters.</param>
		/// <param name="indexPath">The index path to the row for which to get drag preview parameters.</param>
		/// <summary>Gets the preview parameters for the item at the specified index path.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dragPreviewParametersForRowAtIndexPath:")]
		[return: NullAllowed]
		UIDragPreviewParameters GetDragPreviewParameters (UITableView tableView, NSIndexPath indexPath);

		/// <param name="tableView">The originating table view.</param>
		/// <param name="session">The session that will begin.</param>
		/// <summary>Method that is called just before a drag session begins.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dragSessionWillBegin:")]
		void DragSessionWillBegin (UITableView tableView, IUIDragSession session);

		/// <param name="tableView">The originating table view.</param>
		/// <param name="session">The session that ended.</param>
		/// <summary>Method that is called when the user cancels or completes the drag session.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dragSessionDidEnd:")]
		void DragSessionDidEnd (UITableView tableView, IUIDragSession session);

		/// <param name="tableView">To be added.</param>
		/// <param name="session">To be added.</param>
		/// <summary>Whether the drag session can move items within the developer's app.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dragSessionAllowsMoveOperation:")]
		bool DragSessionAllowsMoveOperation (UITableView tableView, IUIDragSession session);

		/// <param name="tableView">To be added.</param>
		/// <param name="session">To be added.</param>
		/// <summary>Gets whether the drag session may only act within the developer's app.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dragSessionIsRestrictedToDraggingApplication:")]
		bool DragSessionIsRestrictedToDraggingApplication (UITableView tableView, IUIDragSession session);
	}

	/// <summary>Delegate for handling drops to table views.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UITableViewDropDelegate {
		/// <param name="tableView">The receiving table view.</param>
		/// <param name="coordinator">The drop coordinator.</param>
		/// <summary>Method that is called to drop data into a table view.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("tableView:performDropWithCoordinator:")]
		void PerformDrop (UITableView tableView, IUITableViewDropCoordinator coordinator);

		/// <param name="tableView">The target table view.</param>
		/// <param name="session">The drop session.</param>
		/// <summary>Returns a Boolean value that tells whether the table view can handle drops from the data in the session.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:canHandleDropSession:")]
		bool CanHandleDropSession (UITableView tableView, IUIDropSession session);

		/// <param name="tableView">The current target of the drop.</param>
		/// <param name="session">The drop session that entered.</param>
		/// <summary>Method that is called when the drop point enters the table view.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dropSessionDidEnter:")]
		void DropSessionDidEnter (UITableView tableView, IUIDropSession session);

		/// <param name="tableView">The current drop target.</param>
		/// <param name="session">The drop session.</param>
		/// <param name="destinationIndexPath">The index path to the currently targeted row. This parameter can be <see langword="null" />.</param>
		/// <summary>Method that is called when the drop point over the table view changes.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dropSessionDidUpdate:withDestinationIndexPath:")]
		UITableViewDropProposal DropSessionDidUpdate (UITableView tableView, IUIDropSession session, [NullAllowed] NSIndexPath destinationIndexPath);

		/// <param name="tableView">The view that was tracking the operation.</param>
		/// <param name="session">The drop session that exited.</param>
		/// <summary>Method that is called when the drop point leaves the table view.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dropSessionDidExit:")]
		void DropSessionDidExit (UITableView tableView, IUIDropSession session);

		/// <param name="tableView">The original intended target table view.</param>
		/// <param name="session">The session that ended.</param>
		/// <summary>Method that is called when the drop session ends.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dropSessionDidEnd:")]
		void DropSessionDidEnd (UITableView tableView, IUIDropSession session);

		/// <param name="tableView">The table view for which to get the preview parameters.</param>
		/// <param name="indexPath">The index path to the row for which to get the preview parameters.</param>
		/// <summary>Returns the drag preview parameters for the item at the specified index path.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("tableView:dropPreviewParametersForRowAtIndexPath:")]
		[return: NullAllowed]
		UIDragPreviewParameters GetDropPreviewParameters (UITableView tableView, NSIndexPath indexPath);
	}

	/// <summary>The proposed method of handling dropped content for a table view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDropProposal))]
	[DisableDefaultCtor] // NSInternalInconsistencyException Reason: Not implemented
	interface UITableViewDropProposal {

		// inline from base type
		[Export ("initWithDropOperation:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIDropOperation operation);

		[Export ("initWithDropOperation:intent:")]
		NativeHandle Constructor (UIDropOperation operation, UITableViewDropIntent intent);

		[Export ("intent")]
		UITableViewDropIntent Intent { get; }
	}

	/// <summary>System-created object used to coordinate drop actions with a table view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITableViewDropCoordinator {
		/// <summary>Gets the drag items.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("items")]
		IUITableViewDropItem [] Items { get; }

		/// <summary>Gets the index path for the insertion.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("destinationIndexPath")]
		NSIndexPath DestinationIndexPath { get; }

		/// <summary>Gets the drop proposal.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("proposal")]
		UITableViewDropProposal Proposal { get; }

		/// <summary>Gets the drop session.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("session")]
		IUIDropSession Session { get; }

		/// <param name="dragItem">The item to drop.</param>
		/// <param name="placeholder">The placeholder into which to drop the item.</param>
		/// <summary>Drops the drag item to the specified placeholder.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropItem:toPlaceholder:")]
		IUITableViewDropPlaceholderContext DropItemToPlaceholder (UIDragItem dragItem, UITableViewDropPlaceholder placeholder);

		/// <param name="dragItem">The item to drop.</param>
		/// <param name="indexPath">The index path at which to insert the item.</param>
		/// <summary>Drops the drag item to the row at the specified index path.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropItem:toRowAtIndexPath:")]
		IUIDragAnimating DropItemToRow (UIDragItem dragItem, NSIndexPath indexPath);

		/// <param name="dragItem">The item to drop.</param>
		/// <param name="indexPath">The index path of the row into which to drop the item.</param>
		/// <param name="rect">The rectangle into which to animate the drop.</param>
		/// <summary>Drops the drag item into the specified rectangle, in the coordinate system of the item at the specified item index path.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropItem:intoRowAtIndexPath:rect:")]
		IUIDragAnimating DropItemIntoRow (UIDragItem dragItem, NSIndexPath indexPath, CGRect rect);

		/// <param name="dragItem">The item to drop.</param>
		/// <param name="target">The drop target.</param>
		/// <summary>Drops the drag item to the specified target.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropItem:toTarget:")]
		IUIDragAnimating DropItemToTarget (UIDragItem dragItem, UIDragPreviewTarget target);
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITableViewPlaceholder {
		/// <param name="insertionIndexPath">To be added.</param>
		/// <param name="reuseIdentifier">To be added.</param>
		/// <param name="rowHeight">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("initWithInsertionIndexPath:reuseIdentifier:rowHeight:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSIndexPath insertionIndexPath, string reuseIdentifier, nfloat rowHeight);

		[NullAllowed, Export ("cellUpdateHandler", ArgumentSemantic.Copy)]
		Action<UITableViewCell> CellUpdateHandler { get; set; }
	}

	/// <summary>A <see cref="UIKit.UITableViewPlaceholder" /> used for a drop operation.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UITableViewPlaceholder))]
	interface UITableViewDropPlaceholder {
		// inlined
		/// <param name="insertionIndexPath">To be added.</param>
		/// <param name="reuseIdentifier">To be added.</param>
		/// <param name="rowHeight">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("initWithInsertionIndexPath:reuseIdentifier:rowHeight:")]
		NativeHandle Constructor (NSIndexPath insertionIndexPath, string reuseIdentifier, nfloat rowHeight);

		[NullAllowed, Export ("previewParametersProvider", ArgumentSemantic.Copy)]
		Func<UITableViewCell, UIDragPreviewParameters> PreviewParametersProvider { get; set; }
	}

	/// <summary>Data for an item to be dropped into a table view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITableViewDropItem {
		/// <summary>Gets the drag item.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dragItem")]
		UIDragItem DragItem { get; }

		/// <summary>Gets the source index path for the item if it is being dragged from another location in the table view.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("sourceIndexPath")]
		NSIndexPath SourceIndexPath { get; }

		/// <summary>Gets the preview size for the drag item.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("previewSize")]
		CGSize PreviewSize { get; }
	}

	/// <summary>Contains managed table view placeholder information.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITableViewDropPlaceholderContext : UIDragAnimating {
		/// <summary>Gets the drag item that is represented by the placeholder.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dragItem")]
		UIDragItem DragItem { get; }

		/// <param name="dataSourceUpdates">The handler that will update the view's data source.</param>
		/// <summary>Replaces the placeholder cell with dropped content.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("commitInsertionWithDataSourceUpdates:")]
		bool CommitInsertion (Action<NSIndexPath> dataSourceUpdates);

		/// <summary>Removes the placeholder from the view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("deletePlaceholder")]
		bool DeletePlaceholder ();
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextDragPreviewRenderer {
		[Export ("initWithLayoutManager:range:")]
		NativeHandle Constructor (NSLayoutManager layoutManager, NSRange range);

		[Export ("initWithLayoutManager:range:unifyRects:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSLayoutManager layoutManager, NSRange range, bool unifyRects);

		[Export ("layoutManager")]
		NSLayoutManager LayoutManager { get; }

		[Export ("image")]
		UIImage Image { get; }

		[Export ("firstLineRect")]
		CGRect FirstLineRect { get; }

		[Export ("bodyRect")]
		CGRect BodyRect { get; }

		[Export ("lastLineRect")]
		CGRect LastLineRect { get; }

		[Export ("adjustFirstLineRect:bodyRect:lastLineRect:textOrigin:")]
		void Adjust (ref CGRect firstLineRect, ref CGRect bodyRect, ref CGRect lastLineRect, CGPoint origin);
	}

	/// <summary>Interface for treating a text view as a drag source.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITextDraggable : UITextInput {
		/// <summary>Gets or sets a delegate for managing drag source behavior.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("textDragDelegate", ArgumentSemantic.Weak)]
		IUITextDragDelegate TextDragDelegate { get; set; }

		/// <summary>Gets the drag interaction on the text view.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("textDragInteraction")]
		UIDragInteraction TextDragInteraction { get; }

		/// <summary>Gets a Boolean value that tells whether a drag session is active for the text view.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("textDragActive")]
		bool TextDragActive { [Bind ("isTextDragActive")] get; }

		/// <summary>Gets a value that controls how formatting is displayed in dragged text.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("textDragOptions", ArgumentSemantic.Assign)]
		UITextDragOptions TextDragOptions { get; set; }
	}

	/// <summary>Interface for customizing text view drag source behavior.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UITextDragDelegate {
		/// <param name="textDraggableView">The originating view.</param>
		/// <param name="dragRequest">The drag request.</param>
		/// <summary>Method that is called to get custom drag items.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textDraggableView:itemsForDrag:")]
		UIDragItem [] GetItemsForDrag (IUITextDraggable textDraggableView, IUITextDragRequest dragRequest);

		/// <param name="textDraggableView">The originating view.</param>
		/// <param name="item">The item for which to get a lift preview.</param>
		/// <param name="session">The drag session.</param>
		/// <summary>Method that is called to get a preview for the item that is lifting.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textDraggableView:dragPreviewForLiftingItem:session:")]
		[return: NullAllowed]
		UITargetedDragPreview GetPreviewForLiftingItem (IUITextDraggable textDraggableView, UIDragItem item, IUIDragSession session);

		/// <param name="textDraggableView">The originating view.</param>
		/// <param name="animator">The animator to use for adding animations.</param>
		/// <param name="session">The drag session.</param>
		/// <summary>Method that is called just before an item lift is animated.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textDraggableView:willAnimateLiftWithAnimator:session:")]
		void WillAnimateLift (IUITextDraggable textDraggableView, IUIDragAnimating animator, IUIDragSession session);

		/// <param name="textDraggableView">The orginating view.</param>
		/// <param name="session">The drag session that will begin.</param>
		/// <summary>Method that is called just before a drag session begins.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textDraggableView:dragSessionWillBegin:")]
		void DragSessionWillBegin (IUITextDraggable textDraggableView, IUIDragSession session);

		/// <param name="textDraggableView">The orginating view.</param>
		/// <param name="session">The drag session that ended.</param>
		/// <param name="operation">The operation that ended the session.</param>
		/// <summary>Method that is called when the user cancels or completes the drag session.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textDraggableView:dragSessionDidEnd:withOperation:")]
		void DragSessionDidEnd (IUITextDraggable textDraggableView, IUIDragSession session, UIDropOperation operation);
	}

	/// <summary>System-provided interface for getting information about a drag request that originated in a text view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITextDragRequest {
		/// <summary>Gets the range of the text that is being dragged.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dragRange")]
		UITextRange DragRange { get; }

		/// <summary>Gets the items that the system would supply if the developer does not provide a custom implementation.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("suggestedItems")]
		UIDragItem [] SuggestedItems { get; }

		/// <summary>Gets the items that are currently in the drag session.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("existingItems")]
		UIDragItem [] ExistingItems { get; }

		/// <summary>Gets a Boolean value that tells whether there is a selection that can be dragged.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("selected")]
		bool Selected { [Bind ("isSelected")] get; }

		/// <summary>Gets the drag session.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dragSession")]
		IUIDragSession DragSession { get; }
	}

	/// <summary>The proposed method of handling dropped content for a text view.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIDropProposal))]
	[DisableDefaultCtor]
	interface UITextDropProposal : NSCopying {
		// inlined
		[Export ("initWithDropOperation:")]
		NativeHandle Constructor (UIDropOperation operation);

		[Export ("dropAction", ArgumentSemantic.Assign)]
		UITextDropAction DropAction { get; set; }

		[Export ("dropProgressMode", ArgumentSemantic.Assign)]
		UITextDropProgressMode DropProgressMode { get; set; }

		[Export ("useFastSameViewOperations")]
		bool UseFastSameViewOperations { get; set; }

		[Export ("dropPerformer", ArgumentSemantic.Assign)]
		UITextDropPerformer DropPerformer { get; set; }
	}

	/// <summary>Interface for accepting dropped text data.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITextDroppable : UITextInput, UITextPasteConfigurationSupporting {
		/// <summary>Gets or sets a delegate for managing text drop behavior.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("textDropDelegate", ArgumentSemantic.Weak)]
		IUITextDropDelegate TextDropDelegate { get; set; }

		/// <summary>Gets the drop interaction on the text view.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("textDropInteraction")]
		UIDropInteraction TextDropInteraction { get; }

		/// <summary>Gets a Boolean value that tells whether there is an active text drop session on the view.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("textDropActive")]
		bool TextDropActive { [Bind ("isTextDropActive")] get; }
	}

	/// <summary>Delegate for handling drops to text views.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UITextDropDelegate {
		/// <param name="textDroppableView">The currently non-editable receiving view.</param>
		/// <param name="drop">The drop request.</param>
		/// <summary>Method that is called to determine whether a non-editable text view can accept drops.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textDroppableView:willBecomeEditableForDrop:")]
		UITextDropEditability WillBecomeEditable (IUITextDroppable textDroppableView, IUITextDropRequest drop);

		/// <param name="textDroppableView">The receiving view.</param>
		/// <param name="drop">The drop request for which to get a proposal.</param>
		/// <summary>Method that is called to get the drop proposal.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textDroppableView:proposalForDrop:")]
		UITextDropProposal GetProposalForDrop (IUITextDroppable textDroppableView, IUITextDropRequest drop);

		/// <param name="textDroppableView">The receiving view.</param>
		/// <param name="drop">The drop request.</param>
		/// <summary>Method that is called just before the drop is performed.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textDroppableView:willPerformDrop:")]
		void WillPerformDrop (IUITextDroppable textDroppableView, IUITextDropRequest drop);

		/// <param name="textDroppableView">The receiving view.</param>
		/// <param name="defaultPreview">The system-provided default preview.</param>
		/// <summary>Method that is called once to get the drag preview to use for dropping all the items.</summary>
		/// <returns>
		///           <para>Developers can return <see langword="null" /> to cause the default preview to be used.</para>
		///         </returns>
		/// <remarks>To be added.</remarks>
		[Export ("textDroppableView:previewForDroppingAllItemsWithDefault:")]
		[return: NullAllowed]
		UITargetedDragPreview GetPreviewForDroppingAllItems (IUITextDroppable textDroppableView, UITargetedDragPreview defaultPreview);

		/// <param name="textDroppableView">The receiving view.</param>
		/// <param name="session">The session that entered.</param>
		/// <summary>Method that is called when the drop point enters the text view.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textDroppableView:dropSessionDidEnter:")]
		void DropSessionDidEnter (IUITextDroppable textDroppableView, IUIDropSession session);

		/// <param name="textDroppableView">The receiving view.</param>
		/// <param name="session">The session that was updated.</param>
		/// <summary>Method that is called when the drop point over the text view changes.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textDroppableView:dropSessionDidUpdate:")]
		void DropSessionDidUpdate (IUITextDroppable textDroppableView, IUIDropSession session);

		/// <param name="textDroppableView">The previously receiving view.</param>
		/// <param name="session">The session that exited.</param>
		/// <summary>Method that is called when the drop point leaves the text view.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textDroppableView:dropSessionDidExit:")]
		void DropSessionDidExit (IUITextDroppable textDroppableView, IUIDropSession session);

		/// <param name="textDroppableView">The destination view.</param>
		/// <param name="session">The drop session that ended.</param>
		/// <summary>Method that is called when the drop session ends.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textDroppableView:dropSessionDidEnd:")]
		void DropSessionDidEnd (IUITextDroppable textDroppableView, IUIDropSession session);
	}

	/// <summary>Interface that describes a text view drop request.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITextDropRequest {
		/// <summary>Gets the text position where dropped text will appear.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropPosition")]
		UITextPosition DropPosition { get; }

		/// <summary>Gets the drop proposal that the text view is offering.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("suggestedProposal")]
		UITextDropProposal SuggestedProposal { get; }

		/// <summary>Gets a Boolean value that tells whether the drag for the drop started in the same view.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("sameView")]
		bool SameView { [Bind ("isSameView")] get; }

		/// <summary>Gets the drop session.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dropSession")]
		IUIDropSession DropSession { get; }
	}

	/// <summary>Interface for managing data source objects.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIDataSourceTranslating {
		/// <param name="dataSourceSectionIndex">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("presentationSectionIndexForDataSourceSectionIndex:")]
		nint GetPresentationSectionIndex (nint dataSourceSectionIndex);

		/// <param name="presentationSectionIndex">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dataSourceSectionIndexForPresentationSectionIndex:")]
		nint GetDataSourceSectionIndex (nint presentationSectionIndex);

		/// <param name="dataSourceIndexPath">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("presentationIndexPathForDataSourceIndexPath:")]
		[return: NullAllowed]
		NSIndexPath GetPresentationIndexPath ([NullAllowed] NSIndexPath dataSourceIndexPath);

		/// <param name="presentationIndexPath">To be added.</param>
		/// <summary>To be added.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("dataSourceIndexPathForPresentationIndexPath:")]
		[return: NullAllowed]
		NSIndexPath GetDataSourceIndexPath ([NullAllowed] NSIndexPath presentationIndexPath);

		/// <param name="actionsToTranslate">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("performUsingPresentationValues:")]
		void PerformUsingPresentationValues (Action actionsToTranslate);
	}

	/// <summary>Interface for spring-loaded drag activities.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISpringLoadedInteraction : UIInteraction {
		[Export ("initWithInteractionBehavior:interactionEffect:activationHandler:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] IUISpringLoadedInteractionBehavior interactionBehavior, [NullAllowed] IUISpringLoadedInteractionEffect interactionEffect, Action<UISpringLoadedInteraction, IUISpringLoadedInteractionContext> handler);

		[Export ("initWithActivationHandler:")]
		NativeHandle Constructor (Action<UISpringLoadedInteraction, IUISpringLoadedInteractionContext> handler);

		[Export ("interactionBehavior", ArgumentSemantic.Strong)]
		IUISpringLoadedInteractionBehavior InteractionBehavior { get; }

		[Export ("interactionEffect", ArgumentSemantic.Strong)]
		IUISpringLoadedInteractionEffect InteractionEffect { get; }
	}

	interface IUISpringLoadedInteractionBehavior { }

	/// <summary>Interface for specifying spring-loaded interaction behavior.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UISpringLoadedInteractionBehavior {
		/// <param name="interaction">The interaction to check.</param>
		/// <param name="context">The context to query.</param>
		/// <summary>Returns a Boolean value that tells whether spring-loading should start or continue for the specified <paramref name="context" />.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("shouldAllowInteraction:withContext:")]
		bool ShouldAllowInteraction (UISpringLoadedInteraction interaction, IUISpringLoadedInteractionContext context);

		/// <param name="interaction">The interaction that finished.</param>
		/// <summary>Method that is called when the user cancels or carries out the spring-loaded interaction.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("interactionDidFinish:")]
		void InteractionDidFinish (UISpringLoadedInteraction interaction);
	}

	interface IUISpringLoadedInteractionEffect { }

	/// <summary>Interface for applying state-based visual styles to spring-loaded interations.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UISpringLoadedInteractionEffect {
		/// <param name="interaction">The interaction whose state has changed.</param>
		/// <param name="context">The interaction context.</param>
		/// <summary>Method that is called when the interaction state changes.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("interaction:didChangeWithContext:")]
		void DidChange (UISpringLoadedInteraction interaction, IUISpringLoadedInteractionContext context);
	}

	interface IUISpringLoadedInteractionContext { }

	/// <summary>Contains information about spring-loaded interaction behavior.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UISpringLoadedInteractionContext {
		/// <summary>Gets the current state of the spring-loaded interaction.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("state")]
		UISpringLoadedInteractionEffectState State { get; }

		/// <summary>Gets or sets the target view to which the spring-loaded interaction is being applied.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("targetView", ArgumentSemantic.Strong)]
		UIView TargetView { get; set; }

		/// <summary>Gets or sets the target item of the spring-loaded interaction.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("targetItem", ArgumentSemantic.Strong)]
		NSObject TargetItem { get; set; }

		/// <param name="view">The view whose coordinate system to use.</param>
		/// <summary>Method that is called to get the location of the drag activity in the <paramref name="view" /> coordinate system.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("locationInView:")]
		CGPoint LocationInView ([NullAllowed] UIView view);
	}

	/// <summary>Interface for controlling whether spring-loading is enabled for drag and drop.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UISpringLoadedInteractionSupporting {
		/// <summary>Gets or sets a Boolean value that controls whether the object participates in spring-loaded interactions.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("springLoaded")]
		bool SpringLoaded { [Bind ("isSpringLoaded")] get; set; }
	}

	// https://bugzilla.xamarin.com/show_bug.cgi?id=58282, we should be able to write one delegate with a 'Action<bool>'. See original signature:
	// typedef void (^UIContextualActionHandler)(UIContextualAction * _Nonnull, __kindof UIView * _Nonnull, void (^ _Nonnull)(BOOL));
	/// <summary>An action to run when the user presses a <see cref="UIKit.UIContextualAction" /> button.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	delegate void UIContextualActionHandler (UIContextualAction action, UIView sourceView, [BlockCallback] UIContextualActionCompletionHandler completionHandler);

	/// <summary>An action to run after a <see cref="UIKit.UIContextualActionHandler" /> completes.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	delegate void UIContextualActionCompletionHandler (bool finished);

	/// <summary>A context action for a table row.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIContextualAction {
		[Static]
		[Export ("contextualActionWithStyle:title:handler:")]
		UIContextualAction FromContextualActionStyle (UIContextualActionStyle style, [NullAllowed] string title, UIContextualActionHandler handler);

		[Export ("style")]
		UIContextualActionStyle Style { get; }

		[Export ("handler", ArgumentSemantic.Copy)]
		UIContextualActionHandler Handler { get; }

		[NullAllowed, Export ("title")]
		string Title { get; set; }

		[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Copy)]
		UIColor BackgroundColor { get; set; }

		[NullAllowed, Export ("image", ArgumentSemantic.Copy)]
		UIImage Image { get; set; }
	}

	/// <summary>Describes the actions to perform when the user swipes rows on a table.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISwipeActionsConfiguration {
		[Static]
		[Export ("configurationWithActions:")]
		UISwipeActionsConfiguration FromActions (UIContextualAction [] actions);

		[Export ("actions", ArgumentSemantic.Copy)]
		UIContextualAction [] Actions { get; }

		[Export ("performsFirstActionWithFullSwipe")]
		bool PerformsFirstActionWithFullSwipe { get; set; }
	}

	interface IUITextPasteConfigurationSupporting { }

	/// <summary>Interface for text controls to respond to paste operations.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITextPasteConfigurationSupporting : UIPasteConfigurationSupporting {
		/// <summary>Gets the delegate for handling text pasting and text drops.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("pasteDelegate", ArgumentSemantic.Weak)]
		IUITextPasteDelegate PasteDelegate { get; set; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UITextPasteDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UITextPasteDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UITextPasteDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UITextPasteDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUITextPasteDelegate { }

	/// <summary>Interface for pasting and dropping text via item providers.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UITextPasteDelegate {
		/// <param name="textPasteConfigurationSupporting">The receiving object.</param>
		/// <param name="item">The paste item.</param>
		/// <summary>Method that is called to transform the paste item as it is pasted.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("textPasteConfigurationSupporting:transformPasteItem:")]
		void TransformPasteItem (IUITextPasteConfigurationSupporting textPasteConfigurationSupporting, IUITextPasteItem item);

		/// <param name="textPasteConfigurationSupporting">The receiving object.</param>
		/// <param name="itemStrings">The strings to combine.</param>
		/// <param name="textRange">The range in which to paste or drop the combined strings.</param>
		/// <summary>Method that is called to combine multiple attributed strings.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textPasteConfigurationSupporting:combineItemAttributedStrings:forRange:")]
		NSAttributedString CombineItemAttributedStrings (IUITextPasteConfigurationSupporting textPasteConfigurationSupporting, NSAttributedString [] itemStrings, UITextRange textRange);

		/// <param name="textPasteConfigurationSupporting">The receiving object.</param>
		/// <param name="attributedString">To be added.</param>
		/// <param name="textRange">The range in which to paste or drop the string.</param>
		/// <summary>Method that is called to incorporate the pasted data into the application content.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textPasteConfigurationSupporting:performPasteOfAttributedString:toRange:")]
		UITextRange PerformPaste (IUITextPasteConfigurationSupporting textPasteConfigurationSupporting, NSAttributedString attributedString, UITextRange textRange);

		/// <param name="textPasteConfigurationSupporting">The receiving object.</param>
		/// <param name="attributedString">The string to paste.</param>
		/// <param name="textRange">The range in which to paste or drop the string.</param>
		/// <summary>Returns a Boolean value that tells the system whether to animate the paste operation.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("textPasteConfigurationSupporting:shouldAnimatePasteOfAttributedString:toRange:")]
		bool ShouldAnimatePaste (IUITextPasteConfigurationSupporting textPasteConfigurationSupporting, NSAttributedString attributedString, UITextRange textRange);
	}

	interface IUITextPasteItem { }

	/// <summary>Interface for working with paste and drop text items.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UITextPasteItem {
		/// <summary>Gets the provider that provides the text data for the paste item.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("itemProvider")]
		NSItemProvider ItemProvider { get; }

		/// <summary>Gets the context object, if present, that was attached to the item when it was lifted.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("localObject")]
		NSObject LocalObject { get; }

		/// <summary>Gets the default attributes for plain text paste items.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("defaultAttributes")]
		NSDictionary<NSString, NSObject> DefaultAttributes { get; }

		/// <param name="string">The new attachment value.</param>
		/// <summary>Sets the text result.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("setStringResult:")]
		void SetStringResult (string @string);

		/// <param name="string">The new attachment value.</param>
		/// <summary>Sets the string value of the paste item.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("setAttributedStringResult:")]
		void SetAttributedStringResult (NSAttributedString @string);

		/// <param name="textAttachment">The new attachment value.</param>
		/// <summary>Sets the attachement result to the specified attachment.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("setAttachmentResult:")]
		void SetAttachmentResult (NSTextAttachment textAttachment);

		/// <summary>Causes the text value to not be provided by its provider.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("setNoResult")]
		void SetNoResult ();

		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("setDefaultResult")]
		void SetDefaultResult ();
	}

	/// <summary>Object that paste responders use to tell whether they accept pastes and drops for specific data typed.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	interface UIPasteConfiguration : NSSecureCoding, NSCopying {
		[Export ("acceptableTypeIdentifiers", ArgumentSemantic.Copy)]
		string [] AcceptableTypeIdentifiers { get; set; }

		[Export ("initWithAcceptableTypeIdentifiers:")]
		NativeHandle Constructor (string [] acceptableTypeIdentifiers);

		[Export ("addAcceptableTypeIdentifiers:")]
		void AddAcceptableTypeIdentifiers (string [] acceptableTypeIdentifiers);

		[Export ("initWithTypeIdentifiersForAcceptingClass:")]
		NativeHandle Constructor (Class itemProviderReadingClass);

		/// <param name="itemProviderReadingType">To be added.</param>
		/// <summary>Creates a new paste configuration that specifies that the types in the specified type identifiers array can be pasted and/or dropped.</summary>
		/// <remarks>To be added.</remarks>
		[Wrap ("this (new Class (itemProviderReadingType))")]
		NativeHandle Constructor (Type itemProviderReadingType);

		[Export ("addTypeIdentifiersForAcceptingClass:")]
		void AddTypeIdentifiers (Class itemProviderReadingClass);

		/// <param name="itemProviderReadingType">The type of objects that can be pasted and/or dropped.</param>
		///         <summary>Adds the acceptable type identifiers from the provider reading type to the array that specifies the types that can be pasted and/or dropped.</summary>
		///         <remarks>To be added.</remarks>
		[Wrap ("AddTypeIdentifiers (new Class (itemProviderReadingType))")]
		void AddTypeIdentifiers (Type itemProviderReadingType);
	}

	interface IUIPasteConfigurationSupporting { }

	/// <summary>Interface defining methods for objects that support paste configuration.</summary>
	[NoTV]
	[MacCatalyst (16, 0)]
	[Protocol]
	interface UIPasteConfigurationSupporting {
		/// <summary>The <see cref="UIKit.UIPasteConfiguration" /> supported by <see langword="this" /> object.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[NullAllowed, Export ("pasteConfiguration", ArgumentSemantic.Copy)]
		UIPasteConfiguration PasteConfiguration { get; set; }

		/// <param name="itemProviders">The item providers for the items to paste.</param>
		/// <summary>Performs the paste.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("pasteItemProviders:")]
		void Paste (NSItemProvider [] itemProviders);

		/// <param name="itemProviders">The ittem providers to check.</param>
		/// <summary>Returns <see langword="true" /> if the responder can paste from the specified item providers.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("canPasteItemProviders:")]
		bool CanPaste (NSItemProvider [] itemProviders);
	}

	/// <summary>A viewer for browsing documents.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	interface UIDocumentBrowserViewController : NSCoding {
		[Deprecated (PlatformName.iOS, 14, 0)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[Export ("initForOpeningFilesWithContentTypes:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] string [] allowedContentTypes);

		[iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("initForOpeningContentTypes:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] UTType [] contentTypes);

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		IUIDocumentBrowserViewControllerDelegate Delegate { get; set; }

		[Export ("allowsDocumentCreation")]
		bool AllowsDocumentCreation { get; set; }

		[Export ("allowsPickingMultipleItems")]
		bool AllowsPickingMultipleItems { get; set; }

		[Deprecated (PlatformName.iOS, 14, 0, message: "No longer supported.")]
		[Deprecated (PlatformName.MacCatalyst, 14, 0, message: "No longer supported.")]
		[Export ("allowedContentTypes", ArgumentSemantic.Copy)]
		string [] AllowedContentTypes { get; }

		[Deprecated (PlatformName.iOS, 14, 0)]
		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Deprecated (PlatformName.MacCatalyst, 14, 0)]
		[Export ("recentDocumentsContentTypes", ArgumentSemantic.Copy)]
		string [] RecentDocumentsContentTypes { get; }

		[iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("contentTypesForRecentDocuments", ArgumentSemantic.Copy)]
		UTType [] ContentTypesForRecentDocuments { get; }

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("shouldShowFileExtensions")]
		bool ShouldShowFileExtensions { get; set; }

		[Export ("additionalLeadingNavigationBarButtonItems", ArgumentSemantic.Strong)]
		UIBarButtonItem [] AdditionalLeadingNavigationBarButtonItems { get; set; }

		[Export ("additionalTrailingNavigationBarButtonItems", ArgumentSemantic.Strong)]
		UIBarButtonItem [] AdditionalTrailingNavigationBarButtonItems { get; set; }

		[Async (XmlDocs = """
			<param name="url">The URL to the document to reveal.</param>
			<param name="importIfNeeded">Whether the document browser should import the document if the document must be imported to be revealed.</param>
			<summary>Reveals the document at the provided URL in the browser, and imports it if <paramref name="importIfNeeded" /> is <see langword="true" />.</summary>
			<returns>
			          <para class="improve-task-t-return-type-description">A task that represents the asynchronous RevealDocument operation.  The value of the TResult parameter is of type System.Action&lt;Foundation.NSUrl,Foundation.NSError&gt;.</para>
			        </returns>
			<remarks>To be added.</remarks>
			""")]
		[Export ("revealDocumentAtURL:importIfNeeded:completion:")]
		void RevealDocument (NSUrl url, bool importIfNeeded, [NullAllowed] Action<NSUrl, NSError> completion);

		[Async (XmlDocs = """
			<param name="documentUrl">The document's current location.</param>
			<param name="neighbourUrl">The url of a document in the same file provider.</param>
			<param name="importMode">The document import mode.</param>
			<summary>Imports the document at <paramref name="documentUrl" /> to be ajacent to <paramref name="neighbourUrl" />.</summary>
			<returns>
			          <para class="improve-task-t-return-type-description">A task that represents the asynchronous ImportDocument operation.  The value of the TResult parameter is of type System.Action&lt;Foundation.NSUrl,Foundation.NSError&gt;.</para>
			        </returns>
			<remarks>
			          <para copied="true">The ImportDocumentAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
			          <para copied="true">To be added.</para>
			        </remarks>
			""")]
		[Export ("importDocumentAtURL:nextToDocumentAtURL:mode:completionHandler:")]
		void ImportDocument (NSUrl documentUrl, NSUrl neighbourUrl, UIDocumentBrowserImportMode importMode, Action<NSUrl, NSError> completion);

		[Internal] // got deprecated
		[Export ("transitionControllerForDocumentURL:")]
		UIDocumentBrowserTransitionController _DeprecatedGetTransitionController (NSUrl documentUrl);

		[Export ("customActions", ArgumentSemantic.Copy)]
		UIDocumentBrowserAction [] CustomActions { get; set; }

		[Export ("browserUserInterfaceStyle", ArgumentSemantic.Assign)]
		UIDocumentBrowserUserInterfaceStyle BrowserUserInterfaceStyle { get; set; }

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("localizedCreateDocumentActionTitle")]
		string LocalizedCreateDocumentActionTitle { get; set; }

		[iOS (13, 0)]
		[MacCatalyst (13, 1)]
		[Export ("defaultDocumentAspectRatio")]
		nfloat DefaultDocumentAspectRatio { get; set; }

		[Internal]
		[MacCatalyst (13, 1)]
		[Export ("transitionControllerForDocumentAtURL:")]
		UIDocumentBrowserTransitionController _NewGetTransitionController (NSUrl documentUrl);

		[Async]
		[iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("renameDocumentAtURL:proposedName:completionHandler:")]
		void RenameDocument (NSUrl documentUrl, string proposedName, Action<NSUrl, NSError> completionHandler);

		[iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("activeDocumentCreationIntent"), NullAllowed]
		UIDocumentCreationIntent ActiveDocumentCreationIntent { get; }
	}

	/// <summary>Interface representing the required methods (if any) of the protocol <see cref="UIKit.UIDocumentBrowserViewControllerDelegate" />.</summary>
	///     <remarks>
	///       <para>This interface contains the required methods (if any) from the protocol defined by <see cref="UIKit.UIDocumentBrowserViewControllerDelegate" />.</para>
	///       <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="UIKit.UIDocumentBrowserViewControllerDelegate" /> protocol.</para>
	///       <para>Optional methods (if any) are provided by the <see cref="UIKit.UIDocumentBrowserViewControllerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
	///     </remarks>
	interface IUIDocumentBrowserViewControllerDelegate { }

	/// <summary>Handles user interactions with a document browser.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIDocumentBrowserViewControllerDelegate {
		/// <param name="controller">The controller in which the URLs were picked .</param>
		/// <param name="documentUrls">The chosen URLs.</param>
		/// <summary>Developers may implement this method to respond after the user selects document URLs.</summary>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 12, 0, message: "Use 'DidPickDocumentsAtUrls (UIDocumentBrowserViewController, NSUrl[])' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 13, 1, message: "Use 'DidPickDocumentsAtUrls (UIDocumentBrowserViewController, NSUrl[])' instead.")]
		[Export ("documentBrowser:didPickDocumentURLs:")]
		void DidPickDocumentUrls (UIDocumentBrowserViewController controller, NSUrl [] documentUrls);

		/// <param name="controller">The controller that made the request.</param>
		/// <param name="importHandler">The handler to run after the document is created.</param>
		/// <summary>Developers may implement this method to respond to a request to create a new document.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("documentBrowser:didRequestDocumentCreationWithHandler:")]
		void DidRequestDocumentCreation (UIDocumentBrowserViewController controller, Action<NSUrl, UIDocumentBrowserImportMode> importHandler);

		/// <param name="controller">The controller that imported the document.</param>
		/// <param name="sourceUrl">The original document URL.</param>
		/// <param name="destinationUrl">The imported document's URL.</param>
		/// <summary>Developers may implement this method to respond after a document is imported.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("documentBrowser:didImportDocumentAtURL:toDestinationURL:")]
		void DidImportDocument (UIDocumentBrowserViewController controller, NSUrl sourceUrl, NSUrl destinationUrl);

		/// <param name="controller">The controller that failed to import the document.</param>
		/// <param name="documentUrl">The document's original URL.</param>
		/// <param name="error">
		///           <para>The error that occurred.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Developers may implement this method to respond when the application fails to import a document.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("documentBrowser:failedToImportDocumentAtURL:error:")]
		void FailedToImportDocument (UIDocumentBrowserViewController controller, NSUrl documentUrl, [NullAllowed] NSError error);

		/// <param name="controller">The controller that is making the request.</param>
		/// <param name="documentUrls">URLs to the documents to share.</param>
		/// <summary>Returns an array of custom application activities for an activity view.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("documentBrowser:applicationActivitiesForDocumentURLs:")]
		UIActivity [] GetApplicationActivities (UIDocumentBrowserViewController controller, NSUrl [] documentUrls);

		/// <param name="controller">The controller that is about to present the activity.</param>
		/// <param name="activityViewController">The activity that will be presented.</param>
		/// <summary>Developers may implement this method to prepare for the display of an activity view.</summary>
		/// <remarks>To be added.</remarks>
		[Export ("documentBrowser:willPresentActivityViewController:")]
		void WillPresent (UIDocumentBrowserViewController controller, UIActivityViewController activityViewController);

		/// <param name="controller">To be added.</param>
		/// <param name="documentUrls">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("documentBrowser:didPickDocumentsAtURLs:")]
		void DidPickDocumentsAtUrls (UIDocumentBrowserViewController controller, NSUrl [] documentUrls);
	}

	/// <summary>Contains standard animations for a document browser.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIDocumentBrowserTransitionController : UIViewControllerAnimatedTransitioning {
		[NullAllowed, Export ("loadingProgress", ArgumentSemantic.Strong)]
		NSProgress LoadingProgress { get; set; }

		[NullAllowed, Export ("targetView", ArgumentSemantic.Weak)]
		UIView TargetView { get; set; }
	}

	/// <summary>Describes a custom action that the developer can add to the UI of a document browser.</summary>
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIDocumentBrowserAction {
		[Export ("initWithIdentifier:localizedTitle:availability:handler:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string identifier, string localizedTitle, UIDocumentBrowserActionAvailability availability, Action<NSUrl []> handler);

		[Export ("identifier")]
		string Identifier { get; }

		[Export ("localizedTitle")]
		string LocalizedTitle { get; }

		[Export ("availability")]
		UIDocumentBrowserActionAvailability Availability { get; }

		[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; set; }

		[Export ("supportedContentTypes", ArgumentSemantic.Copy)]
		string [] SupportedContentTypes { get; set; }

		[Export ("supportsMultipleItems")]
		bool SupportsMultipleItems { get; set; }
	}

	interface IUIFocusItemContainer { }
	/// <summary>Manages spatial information for focus items in a focus environment.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[NoMac]
	[Protocol]
	interface UIFocusItemContainer {
		/// <summary>Gets the coordinate space implemenation.</summary>
		/// <value>The coordinate space implemenation.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("coordinateSpace")]
		IUICoordinateSpace CoordinateSpace { get; }

		/// <param name="rect">The rectangle whose focus items to get.</param>
		/// <summary>Returns a list of all the child focus items within the specified rectangle.</summary>
		/// <returns>The list of all the child focus items within the specified rectangle.</returns>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("focusItemsInRect:")]
		IUIFocusItem [] GetFocusItems (CGRect rect);
	}

	/// <summary>Abstraction for the viewable and and total size of scrollable content.</summary>
	/// <remarks>To be added.</remarks>
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIFocusItemScrollableContainer : UIFocusItemContainer {
		/// <summary>Gets or sets the offset into the scrollable content.</summary>
		/// <value>The offset into the scrollable content.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("contentOffset", ArgumentSemantic.Assign)]
		CGPoint ContentOffset { get; set; }

		/// <summary>Gets or sets the total size of the scrollable content.</summary>
		/// <value>To be added.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("contentSize")]
		CGSize ContentSize { get; }

		/// <summary>Gets the visible size of the scrollview container.</summary>
		/// <value>The visible size of the scrollview container.</value>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[Export ("visibleSize")]
		CGSize VisibleSize { get; }
	}

	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIUserActivityRestoring {
		/// <param name="activity">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Abstract]
		[MacCatalyst (13, 1)]
		[Export ("restoreUserActivityState:")]
		void RestoreUserActivityState (NSUserActivity activity);
	}

	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIFontMetrics {
		[Static]
		[Export ("defaultMetrics", ArgumentSemantic.Strong)]
		UIFontMetrics DefaultMetrics { get; }

		[Static]
		[Export ("metricsForTextStyle:")]
		UIFontMetrics GetMetrics (string textStyle);

		[Export ("initForTextStyle:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string textStyle);

		[Export ("scaledFontForFont:")]
		UIFont GetScaledFont (UIFont font);

		/// <param name="font">The font for which to get a scaled version.</param>
		/// <param name="maximumPointSize">The maximum point size of the returned scaled font.</param>
		/// <summary>Returns a version of a font that is scaled for the current metrics and constrained to the specified maximum point size.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("scaledFontForFont:maximumPointSize:")]
		UIFont GetScaledFont (UIFont font, nfloat maximumPointSize);

		/// <param name="value">The height of an object that would contain the text at the standard size of Dynamic Type.</param>
		/// <summary>Returns a layout height that is scaled from the current Dynamic Type settings.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[Export ("scaledValueForValue:")]
		nfloat GetScaledValue (nfloat value);

		[MacCatalyst (13, 1)]
		[Export ("scaledFontForFont:compatibleWithTraitCollection:")]
		UIFont GetScaledFont (UIFont font, [NullAllowed] UITraitCollection traitCollection);

		/// <param name="font">The font for which to get a scaled version.</param>
		/// <param name="maximumPointSize">The maximum point size of the returned scaled font.</param>
		/// <param name="traitCollection">
		///           <para>The trait collection for which to get a scaled font.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Returns a version of a font that is scaled for the current metrics and trait collection, and is constrained to the specified maximum point size.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("scaledFontForFont:maximumPointSize:compatibleWithTraitCollection:")]
		UIFont GetScaledFont (UIFont font, nfloat maximumPointSize, [NullAllowed] UITraitCollection traitCollection);

		/// <param name="value">The height of an object that would contain the text at the standard size of Dynamic Type.</param>
		/// <param name="traitCollection">
		///           <para>The trait collection to use to calculate the scaled value.</para>
		///           <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
		///         </param>
		/// <summary>Returns a layout height that is scaled from the current Dynamic Type settings.</summary>
		/// <returns>To be added.</returns>
		/// <remarks>To be added.</remarks>
		[MacCatalyst (13, 1)]
		[Export ("scaledValueForValue:compatibleWithTraitCollection:")]
		nfloat GetScaledValue (nfloat value, [NullAllowed] UITraitCollection traitCollection);
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	[Native]
	public enum UIPencilPreferredAction : long {
		/// <summary>To be added.</summary>
		Ignore = 0,
		/// <summary>To be added.</summary>
		SwitchEraser,
		/// <summary>To be added.</summary>
		SwitchPrevious,
		/// <summary>To be added.</summary>
		ShowColorPalette,
		[iOS (16, 0), MacCatalyst (16, 0)]
		ShowInkAttributes,
		[iOS (17, 5), MacCatalyst (17, 5)]
		ShowContextualPalette,
		[iOS (17, 5), MacCatalyst (17, 5)]
		RunSystemShortcut,
	}

	[NoTV, iOS (17, 5), MacCatalyst (17, 5)]
	[Native]
	public enum UIPencilInteractionPhase : ulong {
		Began,
		Changed,
		Ended,
		Cancelled,
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIPencilInteraction : UIInteraction {
		[Static]
		[Export ("preferredTapAction")]
		UIPencilPreferredAction PreferredTapAction { get; }

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Static]
		[Export ("preferredSqueezeAction")]
		UIPencilPreferredAction PreferredSqueezeAction { get; }

		[iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Static]
		[Export ("prefersPencilOnlyDrawing")]
		bool PrefersPencilOnlyDrawing { get; }

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Static]
		[Export ("prefersHoverToolPreview")]
		bool PrefersHoverToolPreview { get; }

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Export ("initWithDelegate:")]
		NativeHandle Constructor (IUIPencilInteractionDelegate @delegate);

		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIPencilInteractionDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		/// <summary>To be added.</summary>
		///         <value>To be added.</value>
		///         <remarks>To be added.</remarks>
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }
	}

	[NoTV, iOS (17, 5), MacCatalyst (17, 5)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPencilHoverPose {

		[Export ("location", ArgumentSemantic.Assign)]
		CGPoint Location { get; }

		[Export ("zOffset")]
		nfloat ZOffset { get; }

		[Export ("azimuthAngle")]
		nfloat AzimuthAngle { get; }

		[Export ("azimuthUnitVector", ArgumentSemantic.Assign)]
		CGVector AzimuthUnitVector { get; }

		[Export ("altitudeAngle")]
		nfloat AltitudeAngle { get; }

		[Export ("rollAngle")]
		nfloat RollAngle { get; }
	}

	[NoTV, iOS (17, 5), MacCatalyst (17, 5)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPencilInteractionTap {

		[Export ("timestamp")]
		double Timestamp { get; }

		[NullAllowed, Export ("hoverPose", ArgumentSemantic.Strong)]
		UIPencilHoverPose HoverPose { get; }
	}

	[NoTV, iOS (17, 5), MacCatalyst (17, 5)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPencilInteractionSqueeze {

		[Export ("timestamp")]
		double Timestamp { get; }

		[Export ("phase", ArgumentSemantic.Assign)]
		UIPencilInteractionPhase Phase { get; }

		[NullAllowed, Export ("hoverPose", ArgumentSemantic.Strong)]
		UIPencilHoverPose HoverPose { get; }
	}

	interface IUIPencilInteractionDelegate { }

	[NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIPencilInteractionDelegate {

		/// <param name="interaction">To be added.</param>
		/// <summary>To be added.</summary>
		/// <remarks>To be added.</remarks>
		[Deprecated (PlatformName.iOS, 17, 5, message: "Use 'DidReceiveTap' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 17, 5, message: "Use 'DidReceiveTap' instead.")]
		[Export ("pencilInteractionDidTap:")]
		void DidTap (UIPencilInteraction interaction);

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Export ("pencilInteraction:didReceiveTap:")]
		void DidReceiveTap (UIPencilInteraction interaction, UIPencilInteractionTap tap);

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Export ("pencilInteraction:didReceiveSqueeze:")]
		void DidReceiveSqueeze (UIPencilInteraction interaction, UIPencilInteractionSqueeze squeeze);
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject), Name = "UIOpenURLContext")]
	[DisableDefaultCtor]
	interface UIOpenUrlContext {

		[Export ("URL", ArgumentSemantic.Copy)]
		NSUrl Url { get; }

		[Export ("options", ArgumentSemantic.Strong)]
		UISceneOpenUrlOptions Options { get; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIResponder))]
	[DisableDefaultCtor]
	interface UIScene {

		[Export ("initWithSession:connectionOptions:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UISceneSession session, UISceneConnectionOptions connectionOptions);

		[Export ("session")]
		UISceneSession Session { get; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUISceneDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Strong)]
		NSObject WeakDelegate { get; set; }

		[Export ("activationState")]
		UISceneActivationState ActivationState { get; }

		[Async]
		[Export ("openURL:options:completionHandler:")]
		void OpenUrl (NSUrl url, [NullAllowed] UISceneOpenExternalUrlOptions options, [NullAllowed] Action<bool> completion);

		[Export ("title")]
		string Title { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("subtitle")]
		string Subtitle { get; set; }

		[Export ("activationConditions", ArgumentSemantic.Strong)]
		UISceneActivationConditions ActivationConditions { get; set; }

		[Field ("UISceneWillConnectNotification")]
		[Notification]
		NSString WillConnectNotification { get; }

		[Field ("UISceneDidDisconnectNotification")]
		[Notification]
		NSString DidDisconnectNotification { get; }

		[Field ("UISceneDidActivateNotification")]
		[Notification]
		NSString DidActivateNotification { get; }

		[Field ("UISceneWillDeactivateNotification")]
		[Notification]
		NSString WillDeactivateNotification { get; }

		[Field ("UISceneWillEnterForegroundNotification")]
		[Notification]
		NSString WillEnterForegroundNotification { get; }

		[Field ("UISceneDidEnterBackgroundNotification")]
		[Notification]
		NSString DidEnterBackgroundNotification { get; }

		// UIScene (PointerLockState) category

		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed, Export ("pointerLockState")]
		UIPointerLockState PointerLockState { get; }

		// UIScene (UISceneEnhancedStateRestoration) category

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("extendStateRestoration")]
		void ExtendStateRestoration ();

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("completeStateRestoration")]
		void CompleteStateRestoration ();

		// Inlined from the UIScene (SystemProtection) category
		[iOS (18, 0), NoTV, MacCatalyst (18, 0)]
		[Export ("systemProtectionManager"), NullAllowed]
		UISceneSystemProtectionManager SystemProtectionManager { get; }

		[iOS (18, 0), NoTV, MacCatalyst (18, 0)]
		[Notification]
		[Field ("UISceneSystemProtectionDidChangeNotification")]
		NSString SystemProtectionDidChangeNotification { get; }
	}

	interface IUISceneDelegate { }

	[iOS (13, 0), TV (13, 0), NoMac]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UISceneDelegate {

		[Export ("scene:willConnectToSession:options:")]
		void WillConnect (UIScene scene, UISceneSession session, UISceneConnectionOptions connectionOptions);

		[Export ("sceneDidDisconnect:")]
		void DidDisconnect (UIScene scene);

		[Export ("sceneDidBecomeActive:")]
		void DidBecomeActive (UIScene scene);

		[Export ("sceneWillResignActive:")]
		void WillResignActive (UIScene scene);

		[Export ("sceneWillEnterForeground:")]
		void WillEnterForeground (UIScene scene);

		[Export ("sceneDidEnterBackground:")]
		void DidEnterBackground (UIScene scene);

		[Export ("scene:openURLContexts:")]
		void OpenUrlContexts (UIScene scene, NSSet<UIOpenUrlContext> urlContexts);

		[Export ("stateRestorationActivityForScene:")]
		[return: NullAllowed]
		NSUserActivity GetStateRestorationActivity (UIScene scene);

		[Export ("scene:restoreInteractionStateWithUserActivity:")]
		void RestoreInteractionState (UIScene scene, NSUserActivity stateRestorationActivity);

		[Export ("scene:willContinueUserActivityWithType:")]
		void WillContinueUserActivity (UIScene scene, string userActivityType);

		[Export ("scene:continueUserActivity:")]
		void ContinueUserActivity (UIScene scene, NSUserActivity userActivity);

		[Export ("scene:didFailToContinueUserActivityWithType:error:")]
		void DidFailToContinueUserActivity (UIScene scene, string userActivityType, NSError error);

		[Export ("scene:didUpdateUserActivity:")]
		void DidUpdateUserActivity (UIScene scene, NSUserActivity userActivity);
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	interface UISceneActivationConditions : NSSecureCoding {

		[Export ("canActivateForTargetContentIdentifierPredicate", ArgumentSemantic.Copy)]
		NSPredicate CanActivateForTargetContentIdentifierPredicate { get; set; }

		[Export ("prefersToActivateForTargetContentIdentifierPredicate", ArgumentSemantic.Copy)]
		NSPredicate PrefersToActivateForTargetContentIdentifierPredicate { get; set; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UISceneActivationRequestOptions : NSCopying {

		[NullAllowed, Export ("requestingScene", ArgumentSemantic.Strong)]
		UIScene RequestingScene { get; set; }

		[Introduced (PlatformName.MacCatalyst, 14, 0)]
		[NoTV, NoiOS]
		[Export ("collectionJoinBehavior", ArgumentSemantic.Assign)]
		UISceneCollectionJoinBehavior CollectionJoinBehavior { get; set; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISceneConfiguration : NSCopying, NSSecureCoding {

		[Static]
		[Export ("configurationWithName:sessionRole:")]
		UISceneConfiguration Create ([NullAllowed] string name, [BindAs (typeof (UIWindowSceneSessionRole))] NSString sessionRole);

		[Export ("initWithName:sessionRole:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] string name, [BindAs (typeof (UIWindowSceneSessionRole))] NSString sessionRole);

		[NullAllowed, Export ("name")]
		string Name { get; }

		[BindAs (typeof (UIWindowSceneSessionRole))]
		[Export ("role")]
		NSString Role { get; }

		[Advice ("You can use 'SceneType' with a 'Type' instead.")]
		[NullAllowed, Export ("sceneClass", ArgumentSemantic.Assign)]
		Class SceneClass { get; set; }

		Type SceneType {
			[Wrap ("Class.Lookup (SceneClass)!")]
			get;
			[Wrap ("SceneClass = value is null ? null : new Class (value)")]
			set;
		}

		[Advice ("You can use 'DelegateType' with a 'Type' instead.")]
		[NullAllowed, Export ("delegateClass", ArgumentSemantic.Assign)]
		Class DelegateClass { get; set; }

		Type DelegateType {
			[Wrap ("Class.Lookup (DelegateClass)!")]
			get;
			[Wrap ("DelegateClass = value is null ? null : new Class (value)")]
			set;
		}

		[NullAllowed, Export ("storyboard", ArgumentSemantic.Strong)]
		UIStoryboard Storyboard { get; set; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISceneConnectionOptions {

		[Export ("URLContexts", ArgumentSemantic.Copy)]
		NSSet<UIOpenUrlContext> UrlContexts { get; }

		[NullAllowed, Export ("sourceApplication")]
		string SourceApplication { get; }

		[NullAllowed, Export ("handoffUserActivityType")]
		string HandoffUserActivityType { get; }

		[Export ("userActivities", ArgumentSemantic.Copy)]
		NSSet<NSUserActivity> UserActivities { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("notificationResponse")]
		UNNotificationResponse NotificationResponse { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("shortcutItem")]
		UIApplicationShortcutItem ShortcutItem { get; }

		[NullAllowed, Export ("cloudKitShareMetadata")]
		CKShareMetadata CloudKitShareMetadata { get; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UISceneDestructionRequestOptions {

	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject), Name = "UISceneOpenExternalURLOptions")]
	interface UISceneOpenExternalUrlOptions {

		[Export ("universalLinksOnly")]
		bool UniversalLinksOnly { get; set; }

		[NoTV, iOS (14, 5)]
		[MacCatalyst (14, 5)]
		[NullAllowed]
		[Export ("eventAttribution", ArgumentSemantic.Copy)]
		UIEventAttribution EventAttribution { get; set; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject), Name = "UISceneOpenURLOptions")]
	[DisableDefaultCtor]
	interface UISceneOpenUrlOptions {

		[NullAllowed, Export ("sourceApplication")]
		string SourceApplication { get; }

		[NullAllowed, Export ("annotation")]
		NSObject Annotation { get; }

		[Export ("openInPlace")]
		bool OpenInPlace { get; }

		[NoTV, iOS (14, 5)]
		[MacCatalyst (14, 5)]
		[NullAllowed]
		[Export ("eventAttribution")]
		UIEventAttribution EventAttribution { get; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISceneSession : NSSecureCoding {

		[NullAllowed, Export ("scene")]
		UIScene Scene { get; }

		[BindAs (typeof (UIWindowSceneSessionRole))]
		[Export ("role")]
		NSString Role { get; }

		[Export ("configuration", ArgumentSemantic.Copy)]
		UISceneConfiguration Configuration { get; }

		[Export ("persistentIdentifier")]
		string PersistentIdentifier { get; }

		[NullAllowed, Export ("stateRestorationActivity", ArgumentSemantic.Strong)]
		NSUserActivity StateRestorationActivity { get; set; }

		[NullAllowed, Export ("userInfo", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> UserInfo { get; set; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	/* NS_TYPED_ENUM */
	enum UIFontDescriptorSystemDesign {
		[DefaultEnumValue]
		[Field ("UIFontDescriptorSystemDesignDefault")]
		Default,
		[Field ("UIFontDescriptorSystemDesignRounded")]
		Rounded,
		[MacCatalyst (13, 1)]
		[Field ("UIFontDescriptorSystemDesignSerif")]
		Serif,
		[MacCatalyst (13, 1)]
		[Field ("UIFontDescriptorSystemDesignMonospaced")]
		Monospaced,
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIBarAppearance : NSCopying, NSSecureCoding {

		[Export ("initWithIdiom:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIUserInterfaceIdiom idiom);

		[Export ("idiom", ArgumentSemantic.Assign)]
		UIUserInterfaceIdiom Idiom { get; }

		[Export ("initWithBarAppearance:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIBarAppearance barAppearance);

		[Export ("configureWithDefaultBackground")]
		void ConfigureWithDefaultBackground ();

		[Export ("configureWithOpaqueBackground")]
		void ConfigureWithOpaqueBackground ();

		[Export ("configureWithTransparentBackground")]
		void ConfigureWithTransparentBackground ();

		[NullAllowed, Export ("backgroundEffect", ArgumentSemantic.Copy)]
		UIBlurEffect BackgroundEffect { get; set; }

		[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Copy)]
		UIColor BackgroundColor { get; set; }

		[NullAllowed, Export ("backgroundImage", ArgumentSemantic.Strong)]
		UIImage BackgroundImage { get; set; }

		[Export ("backgroundImageContentMode", ArgumentSemantic.Assign)]
		UIViewContentMode BackgroundImageContentMode { get; set; }

		[NullAllowed, Export ("shadowColor", ArgumentSemantic.Copy)]
		UIColor ShadowColor { get; set; }

		[NullAllowed, Export ("shadowImage", ArgumentSemantic.Strong)]
		UIImage ShadowImage { get; set; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIBarButtonItemStateAppearance {

		[Export ("titleTextAttributes", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSObject> TitleTextAttributes { get; set; }

		[Export ("titlePositionAdjustment", ArgumentSemantic.Assign)]
		UIOffset TitlePositionAdjustment { get; set; }

		[NullAllowed, Export ("backgroundImage", ArgumentSemantic.Strong)]
		UIImage BackgroundImage { get; set; }

		[Export ("backgroundImagePositionAdjustment", ArgumentSemantic.Assign)]
		UIOffset BackgroundImagePositionAdjustment { get; set; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIBarButtonItemAppearance : NSCopying, NSSecureCoding {

		[Export ("initWithStyle:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIBarButtonItemStyle style);

		[Export ("configureWithDefaultForStyle:")]
		void ConfigureWithDefault (UIBarButtonItemStyle style);

		[Export ("normal", ArgumentSemantic.Strong)]
		UIBarButtonItemStateAppearance Normal { get; }

		[Export ("highlighted", ArgumentSemantic.Strong)]
		UIBarButtonItemStateAppearance Highlighted { get; }

		[Export ("disabled", ArgumentSemantic.Strong)]
		UIBarButtonItemStateAppearance Disabled { get; }

		[Export ("focused", ArgumentSemantic.Strong)]
		UIBarButtonItemStateAppearance Focused { get; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UICollectionViewCompositionalLayoutConfiguration : NSCopying {

		[Export ("scrollDirection", ArgumentSemantic.Assign)]
		UICollectionViewScrollDirection ScrollDirection { get; set; }

		[Export ("interSectionSpacing")]
		nfloat InterSectionSpacing { get; set; }

		[Export ("boundarySupplementaryItems", ArgumentSemantic.Copy)]
		NSCollectionLayoutBoundarySupplementaryItem [] BoundarySupplementaryItems { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("contentInsetsReference", ArgumentSemantic.Assign)]
		UIContentInsetsReference ContentInsetsReference { get; set; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[return: NullAllowed]
	delegate NSCollectionLayoutSection UICollectionViewCompositionalLayoutSectionProvider (nint section, INSCollectionLayoutEnvironment layoutEnvironment);

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UICollectionViewLayout))]
	[DisableDefaultCtor]
	interface UICollectionViewCompositionalLayout {

		[Export ("initWithSection:")]
		NativeHandle Constructor (NSCollectionLayoutSection section);

		[Export ("initWithSection:configuration:")]
		NativeHandle Constructor (NSCollectionLayoutSection section, UICollectionViewCompositionalLayoutConfiguration configuration);

		[Export ("initWithSectionProvider:")]
		NativeHandle Constructor (UICollectionViewCompositionalLayoutSectionProvider sectionProvider);

		[Export ("initWithSectionProvider:configuration:")]
		NativeHandle Constructor (UICollectionViewCompositionalLayoutSectionProvider sectionProvider, UICollectionViewCompositionalLayoutConfiguration configuration);

		[Export ("configuration", ArgumentSemantic.Copy)]
		UICollectionViewCompositionalLayoutConfiguration Configuration { get; set; }

		// UICollectionViewCompositionalLayout (UICollectionLayoutListSection) category

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Static]
		[Export ("layoutWithListConfiguration:")]
		UICollectionViewCompositionalLayout GetLayout (UICollectionLayoutListConfiguration listConfiguration);
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UICommandAlternate : NSCopying, NSSecureCoding {

		[Export ("title")]
		string Title { get; }

		[Export ("action")]
		Selector Action { get; }

		[Export ("modifierFlags")]
		UIKeyModifierFlags ModifierFlags { get; }

		[Static]
		[Export ("alternateWithTitle:action:modifierFlags:")]
		UICommandAlternate Create (string title, Selector action, UIKeyModifierFlags modifierFlags);
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIMenuElement))]
	[DisableDefaultCtor]
	interface UICommand : UIMenuLeaf {

		[Field ("UICommandTagShare")]
		NSString UICommandTagShare { get; }

		[Export ("title")]
		new string Title { get; set; }

		[NullAllowed, Export ("image", ArgumentSemantic.Copy)]
		new UIImage Image { get; set; }

		[NullAllowed, Export ("discoverabilityTitle")]
		new string DiscoverabilityTitle { get; set; }

		[Export ("action")]
		Selector Action { get; }

		[NullAllowed, Export ("propertyList")]
		NSObject PropertyList { get; }

		[Export ("attributes", ArgumentSemantic.Assign)]
		new UIMenuElementAttributes Attributes { get; set; }

		[Export ("state", ArgumentSemantic.Assign)]
		new UIMenuElementState State { get; set; }

		[Export ("alternates")]
		UICommandAlternate [] Alternates { get; }

		[Static]
		[Export ("commandWithTitle:image:action:propertyList:")]
		UICommand Create (string title, [NullAllowed] UIImage image, Selector action, [NullAllowed] NSObject propertyList);

		[Static]
		[Export ("commandWithTitle:image:action:propertyList:alternates:")]
		UICommand Create (string title, [NullAllowed] UIImage image, Selector action, [NullAllowed] NSObject propertyList, UICommandAlternate [] alternates);
	}

	interface IUIFontPickerViewControllerDelegate { }

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIFontPickerViewControllerDelegate {

		[Export ("fontPickerViewControllerDidCancel:")]
		void DidCancel (UIFontPickerViewController viewController);

		[Export ("fontPickerViewControllerDidPickFont:")]
		void DidPickFont (UIFontPickerViewController viewController);
	}

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIViewController))]
	[DisableDefaultCtor]
	interface UIFontPickerViewController {

		[Export ("initWithConfiguration:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIFontPickerViewControllerConfiguration configuration);

		[Export ("configuration", ArgumentSemantic.Copy)]
		UIFontPickerViewControllerConfiguration Configuration { get; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIFontPickerViewControllerDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[NullAllowed, Export ("selectedFontDescriptor", ArgumentSemantic.Strong)]
		UIFontDescriptor SelectedFontDescriptor { get; set; }
	}

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UIFontPickerViewControllerConfiguration : NSCopying {

		[Export ("includeFaces")]
		bool IncludeFaces { get; set; }

		[Export ("displayUsingSystemFont")]
		bool DisplayUsingSystemFont { get; set; }

		[Export ("filteredTraits", ArgumentSemantic.Assign)]
		UIFontDescriptorSymbolicTraits FilteredTraits { get; set; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use the 'LanguageFilter' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use the 'LanguageFilter' property instead.")]
		[NullAllowed, Export ("filteredLanguagesPredicate", ArgumentSemantic.Copy)]
		NSPredicate FilteredLanguagesPredicate { get; set; }

		[Static]
		[Export ("filterPredicateForFilteredLanguages:")]
		[return: NullAllowed]
		NSPredicate FilterPredicate (string [] filteredLanguages);
	}

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIGestureRecognizer))]
	[DisableDefaultCtor]
	interface UIHoverGestureRecognizer {

		[DesignatedInitializer]
		[Export ("initWithTarget:action:")]
		NativeHandle Constructor (NSObject target, Selector action);

		[DesignatedInitializer]
		[Wrap ("base (action)")]
		NativeHandle Constructor (Action action);

		[iOS (16, 1)]
		[MacCatalyst (16, 1)]
		[Export ("zOffset")]
		nfloat ZOffset { get; }

		[iOS (16, 4), MacCatalyst (17, 0)]
		[Export ("azimuthAngleInView:")]
		nfloat GetAzimuthAngle ([NullAllowed] UIView view);

		[iOS (16, 4), MacCatalyst (17, 0)]
		[Export ("azimuthUnitVectorInView:")]
		CGVector GetAzimuthUnitVector ([NullAllowed] UIView view);

		[iOS (16, 4), MacCatalyst (16, 4)]
		[Export ("altitudeAngle")]
		nfloat AltitudeAngle { get; }

		[iOS (17, 5), MacCatalyst (17, 5)]
		[Export ("rollAngle")]
		nfloat RollAngle { get; }
	}

	interface IUILargeContentViewerItem { }

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UILargeContentViewerItem {

		[Abstract]
		[Export ("showsLargeContentViewer")]
		bool ShowsLargeContentViewer { get; }

		[Abstract]
		[NullAllowed, Export ("largeContentTitle")]
		string LargeContentTitle { get; }

		[Abstract]
		[NullAllowed, Export ("largeContentImage", ArgumentSemantic.Strong)]
		UIImage LargeContentImage { get; }

		[Abstract]
		[Export ("scalesLargeContentImage")]
		bool ScalesLargeContentImage { get; }

		[Abstract]
		[Export ("largeContentImageInsets", ArgumentSemantic.Assign)]
		UIEdgeInsets LargeContentImageInsets { get; }
	}

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UILargeContentViewerInteraction : UIInteraction {

		[Field ("UILargeContentViewerInteractionEnabledStatusDidChangeNotification")]
		[Notification]
		NSString InteractionEnabledStatusDidChangeNotification { get; }

		[Export ("initWithDelegate:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] IUILargeContentViewerInteractionDelegate @delegate);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUILargeContentViewerInteractionDelegate Delegate { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[Export ("gestureRecognizerForExclusionRelationship", ArgumentSemantic.Strong)]
		UIGestureRecognizer GestureRecognizerForExclusionRelationship { get; }

		[Static]
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; }
	}

	interface IUILargeContentViewerInteractionDelegate { }

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UILargeContentViewerInteractionDelegate {

		[Export ("largeContentViewerInteraction:didEndOnItem:atPoint:")]
		void DidEnd (UILargeContentViewerInteraction interaction, [NullAllowed] IUILargeContentViewerItem item, CGPoint point);

		[Export ("largeContentViewerInteraction:itemAtPoint:")]
		[return: NullAllowed]
		IUILargeContentViewerItem GetItem (UILargeContentViewerInteraction interaction, CGPoint point);

		[Export ("viewControllerForLargeContentViewerInteraction:")]
		UIViewController GetViewController (UILargeContentViewerInteraction interaction);
	}

	interface IUIMenuBuilder { }

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIMenuBuilder {

		[Abstract]
		[Export ("system")]
		UIMenuSystem System { get; }

		[Abstract]
		[Export ("menuForIdentifier:")]
		[return: NullAllowed]
		UIMenu GetMenu (string identifier);

		[Abstract]
		[Export ("actionForIdentifier:")]
		[return: NullAllowed]
		UIAction GetAction (string identifier);

		[Abstract]
		[Export ("commandForAction:propertyList:")]
		[return: NullAllowed]
		UICommand GetCommand (Selector action, [NullAllowed] NSObject propertyList);

		[Abstract]
		[Export ("replaceMenuForIdentifier:withMenu:")]
		void ReplaceMenu (string replacedIdentifier, UIMenu replacementMenu);

		[Abstract]
		[Export ("replaceChildrenOfMenuForIdentifier:fromChildrenBlock:")]
		void ReplaceChildrenOfMenu (string parentIdentifier, Func<UIMenuElement [], UIMenuElement []> childrenBlock);

		[Abstract]
		[Export ("insertSiblingMenu:beforeMenuForIdentifier:")]
		void InsertSiblingMenuBefore (UIMenu siblingMenu, string siblingIdentifier);

		[Abstract]
		[Export ("insertSiblingMenu:afterMenuForIdentifier:")]
		void InsertSiblingMenuAfter (UIMenu siblingMenu, string siblingIdentifier);

		[Abstract]
		[Export ("insertChildMenu:atStartOfMenuForIdentifier:")]
		void InsertChildMenuAtStart (UIMenu childMenu, string parentIdentifier);

		[Abstract]
		[Export ("insertChildMenu:atEndOfMenuForIdentifier:")]
		void InsertChildMenuAtEnd (UIMenu childMenu, string parentIdentifier);

		[Abstract]
		[Export ("removeMenuForIdentifier:")]
		void RemoveMenu (string removedIdentifier);
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIMenuSystem {

		[Static]
		[Export ("mainSystem")]
		UIMenuSystem MainSystem { get; }

		[Static]
		[Export ("contextSystem")]
		UIMenuSystem ContextSystem { get; }

		[Export ("setNeedsRebuild")]
		void SetNeedsRebuild ();

		[Export ("setNeedsRevalidate")]
		void SetNeedsRevalidate ();
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIBarAppearance))]
	interface UINavigationBarAppearance {

		[Export ("initWithIdiom:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIUserInterfaceIdiom idiom);

		[Export ("initWithBarAppearance:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIBarAppearance barAppearance);

		[Export ("titleTextAttributes", ArgumentSemantic.Copy)]
		NSDictionary WeakTitleTextAttributes { get; set; }

		[Wrap ("WeakTitleTextAttributes")]
		UIStringAttributes TitleTextAttributes { get; set; }

		[Export ("titlePositionAdjustment", ArgumentSemantic.Assign)]
		UIOffset TitlePositionAdjustment { get; set; }

		[Export ("largeTitleTextAttributes", ArgumentSemantic.Copy)]
		NSDictionary WeakLargeTitleTextAttributes { get; set; }

		[Wrap ("WeakLargeTitleTextAttributes")]
		UIStringAttributes LargeTitleTextAttributes { get; set; }

		[Export ("buttonAppearance", ArgumentSemantic.Copy)]
		UIBarButtonItemAppearance ButtonAppearance { get; set; }

		[Export ("doneButtonAppearance", ArgumentSemantic.Copy)]
		UIBarButtonItemAppearance DoneButtonAppearance { get; set; }

		[Export ("backButtonAppearance", ArgumentSemantic.Copy)]
		UIBarButtonItemAppearance BackButtonAppearance { get; set; }

		[Export ("backIndicatorImage", ArgumentSemantic.Strong)]
		UIImage BackIndicatorImage { get; }

		[Export ("backIndicatorTransitionMaskImage", ArgumentSemantic.Strong)]
		UIImage BackIndicatorTransitionMaskImage { get; }

		[Export ("setBackIndicatorImage:transitionMaskImage:")]
		void SetBackIndicatorImage ([NullAllowed] UIImage backIndicatorImage, [NullAllowed] UIImage backIndicatorTransitionMaskImage);
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	delegate NSDictionary UITextAttributesConversionHandler (NSDictionary textAttributes);

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIScreenshotService {
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIScreenshotServiceDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[NullAllowed, Export ("windowScene", ArgumentSemantic.Weak)]
		UIWindowScene WindowScene { get; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	delegate NSDictionary UIScreenshotServiceDelegatePdfHandler ([NullAllowed] NSData pdfData, nint indexOfCurrentPage, CGRect rectInCurrentPage);

	interface IUIScreenshotServiceDelegate { }

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIScreenshotServiceDelegate {

		[Export ("screenshotService:generatePDFRepresentationWithCompletion:")]
		void GeneratePdfRepresentation (UIScreenshotService screenshotService, UIScreenshotServiceDelegatePdfHandler completionHandler);
	}

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UITextField))]
	interface UISearchTextField {

		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("tokens", ArgumentSemantic.Copy)]
		UISearchToken [] Tokens { get; set; }

		[Export ("insertToken:atIndex:")]
		void InsertToken (UISearchToken token, nint tokenIndex);

		[Export ("removeTokenAtIndex:")]
		void RemoveToken (nint tokenIndex);

		[Export ("positionOfTokenAtIndex:")]
		UITextPosition GetPositionOfToken (nint tokenIndex);

		[Export ("tokensInRange:")]
		UISearchToken [] GetTokens (UITextRange textRange);

		[Export ("textualRange")]
		UITextRange TextualRange { get; }

		[Export ("replaceTextualPortionOfRange:withToken:atIndex:")]
		void ReplaceTextualPortion (UITextRange textRange, UISearchToken token, nuint tokenIndex);

		[Export ("tokenBackgroundColor", ArgumentSemantic.Strong)]
		UIColor TokenBackgroundColor { get; set; }

		[Export ("allowsDeletingTokens")]
		bool AllowsDeletingTokens { get; set; }

		[Export ("allowsCopyingTokens")]
		bool AllowsCopyingTokens { get; set; }

		[iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("searchSuggestions", ArgumentSemantic.Copy)]
		[NullAllowed]
		IUISearchSuggestion [] SearchSuggestions { get; set; }
	}

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISearchToken {

		[Static]
		[Export ("tokenWithIcon:text:")]
		UISearchToken Create ([NullAllowed] UIImage icon, string text);

		[NullAllowed, Export ("representedObject", ArgumentSemantic.Strong)]
		NSObject RepresentedObject { get; set; }
	}

	interface IUISearchTextFieldDelegate { }

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UISearchTextFieldDelegate : UITextFieldDelegate {

		[Export ("searchTextField:itemProviderForCopyingToken:")]
		NSItemProvider GetItemProvider (UISearchTextField searchTextField, UISearchToken token);

		[iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Export ("searchTextField:didSelectSuggestion:")]
		void DidSelectSuggestion (UISearchTextField searchTextField, IUISearchSuggestion suggestion);
	}

	interface IUISearchTextFieldPasteItem { }

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UISearchTextFieldPasteItem : UITextPasteItem {

		[Abstract]
		[Export ("setSearchTokenResult:")]
		void SetSearchTokenResult (UISearchToken token);
	}

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIStatusBarManager {

		[Export ("statusBarStyle")]
		UIStatusBarStyle StatusBarStyle { get; }

		[Export ("statusBarHidden")]
		bool StatusBarHidden { [Bind ("isStatusBarHidden")] get; }

		[Export ("statusBarFrame")]
		CGRect StatusBarFrame { get; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITabBarItemStateAppearance {

		[Export ("titleTextAttributes", ArgumentSemantic.Copy)]
		NSDictionary WeakTitleTextAttributes { get; set; }

		[Wrap ("WeakTitleTextAttributes")]
		UIStringAttributes TitleTextAttributes { get; set; }

		[Export ("titlePositionAdjustment", ArgumentSemantic.Assign)]
		UIOffset TitlePositionAdjustment { get; set; }

		[NullAllowed, Export ("iconColor", ArgumentSemantic.Copy)]
		UIColor IconColor { get; set; }

		[Export ("badgePositionAdjustment", ArgumentSemantic.Assign)]
		UIOffset BadgePositionAdjustment { get; set; }

		[NullAllowed, Export ("badgeBackgroundColor", ArgumentSemantic.Copy)]
		UIColor BadgeBackgroundColor { get; set; }

		[Export ("badgeTextAttributes", ArgumentSemantic.Copy)]
		NSDictionary WeakBadgeTextAttributes { get; set; }

		[Wrap ("WeakBadgeTextAttributes")]
		UIStringAttributes BadgeTextAttributes { get; set; }

		[Export ("badgeTitlePositionAdjustment", ArgumentSemantic.Assign)]
		UIOffset BadgeTitlePositionAdjustment { get; set; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIBarAppearance))]
	interface UITabBarAppearance {

		[Export ("initWithIdiom:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIUserInterfaceIdiom idiom);

		[Export ("initWithBarAppearance:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIBarAppearance barAppearance);

		[Export ("stackedLayoutAppearance", ArgumentSemantic.Copy)]
		UITabBarItemAppearance StackedLayoutAppearance { get; set; }

		[Export ("inlineLayoutAppearance", ArgumentSemantic.Copy)]
		UITabBarItemAppearance InlineLayoutAppearance { get; set; }

		[Export ("compactInlineLayoutAppearance", ArgumentSemantic.Copy)]
		UITabBarItemAppearance CompactInlineLayoutAppearance { get; set; }

		[NullAllowed, Export ("selectionIndicatorTintColor", ArgumentSemantic.Copy)]
		UIColor SelectionIndicatorTintColor { get; set; }

		[NullAllowed, Export ("selectionIndicatorImage", ArgumentSemantic.Strong)]
		UIImage SelectionIndicatorImage { get; set; }

		[Export ("stackedItemPositioning", ArgumentSemantic.Assign)]
		UITabBarItemPositioning StackedItemPositioning { get; set; }

		[Export ("stackedItemWidth")]
		nfloat StackedItemWidth { get; set; }

		[Export ("stackedItemSpacing")]
		nfloat StackedItemSpacing { get; set; }
	}

	interface IUITextFormattingCoordinatorDelegate { }

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UITextFormattingCoordinatorDelegate {

		[Abstract]
		[Export ("updateTextAttributesWithConversionHandler:")]
		void UpdateTextAttributes (UITextAttributesConversionHandler conversionHandler);
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextFormattingCoordinator
#if IOS
		: UIFontPickerViewControllerDelegate
#endif
	{
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUITextFormattingCoordinatorDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[Static]
		[Export ("fontPanelVisible")]
		bool FontPanelVisible { [Bind ("isFontPanelVisible")] get; }

		[Static]
		[Export ("textFormattingCoordinatorForWindowScene:")]
		UITextFormattingCoordinator GetTextFormattingCoordinator (UIWindowScene windowScene);

		[Export ("initWithWindowScene:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIWindowScene windowScene);

		[Export ("setSelectedAttributes:isMultiple:")]
		void SetSelectedAttributes (NSDictionary attributes, bool flag);

		[Static]
		[Export ("toggleFontPanel:")]
		void ToggleFontPanel (NSObject sender);
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITextPlaceholder {

		[Export ("rects")]
		UITextSelectionRect [] Rects { get; }
	}

	interface IUITextInteractionDelegate { }

	[iOS (13, 0), NoTV]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UITextInteractionDelegate {

		[Export ("interactionShouldBegin:atPoint:")]
		bool ShouldBegin (UITextInteraction interaction, CGPoint point);

		[Export ("interactionWillBegin:")]
		void WillBegin (UITextInteraction interaction);

		[Export ("interactionDidEnd:")]
		void DidEnd (UITextInteraction interaction);
	}

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextInteraction : UIInteraction {

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUITextInteractionDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[NullAllowed, Export ("textInput", ArgumentSemantic.Weak)]
		IUITextInput TextInput { get; set; }

		[Export ("textInteractionMode")]
		UITextInteractionMode TextInteractionMode { get; }

		[Export ("gesturesForFailureRequirements")]
		UIGestureRecognizer [] GesturesForFailureRequirements { get; }

		[Static]
		[Export ("textInteractionForMode:")]
		UITextInteraction Create (UITextInteractionMode mode);
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIBarAppearance))]
	interface UIToolbarAppearance {

		[Export ("initWithIdiom:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIUserInterfaceIdiom idiom);

		[Export ("initWithBarAppearance:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIBarAppearance barAppearance);

		[Export ("buttonAppearance", ArgumentSemantic.Copy)]
		UIBarButtonItemAppearance ButtonAppearance { get; set; }

		[Export ("doneButtonAppearance", ArgumentSemantic.Copy)]
		UIBarButtonItemAppearance DoneButtonAppearance { get; set; }
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIScene))]
	[DisableDefaultCtor]
	interface UIWindowScene :
		UITraitChangeObservable {

		[Export ("initWithSession:connectionOptions:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UISceneSession session, UISceneConnectionOptions connectionOptions);

		[Export ("screen")]
		UIScreen Screen { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("interfaceOrientation")]
		UIInterfaceOrientation InterfaceOrientation { get; }

		[Export ("coordinateSpace")]
		IUICoordinateSpace CoordinateSpace { get; }

		[Export ("traitCollection")]
		UITraitCollection TraitCollection { get; }

		[NullAllowed, Export ("sizeRestrictions")]
		UISceneSizeRestrictions SizeRestrictions { get; }

		[Export ("windows")]
		UIWindow [] Windows { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("keyWindow", ArgumentSemantic.Strong)]
		UIWindow KeyWindow { get; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("activityItemsConfigurationSource", ArgumentSemantic.Weak)]
		IUIActivityItemsConfigurationProviding ActivityItemsConfigurationSource { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed, Export ("statusBarManager")]
		UIStatusBarManager StatusBarManager { get; }

		// From UIWindowScene (UIScreenshotService)

		[NullAllowed, Export ("screenshotService")]
		UIScreenshotService ScreenshotService { get; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("focusSystem")]
		UIFocusSystem FocusSystem { get; }

		[NoTV]
		[NoiOS]
		[MacCatalyst (13, 1)]
		[Export ("titlebar")]
		[NullAllowed]
		UITitlebar Titlebar { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("requestGeometryUpdateWithPreferences:errorHandler:")]
		void RequestGeometryUpdate (UIWindowSceneGeometryPreferences geometryPreferences, [NullAllowed] Action<NSError> errorHandler);

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("effectiveGeometry")]
		UIWindowSceneGeometry EffectiveGeometry { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("windowingBehaviors")]
		[NullAllowed]
		UISceneWindowingBehaviors WindowingBehaviors { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("fullScreen")]
		bool FullScreen { [Bind ("isFullScreen")] get; }

		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("traitOverrides")]
		IUITraitOverrides TraitOverrides { get; }
	}

	interface IUIWindowSceneDelegate { }

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIWindowSceneDelegate : UISceneDelegate {

		[NullAllowed, Export ("window", ArgumentSemantic.Strong)]
		UIWindow Window { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("windowScene:didUpdateCoordinateSpace:interfaceOrientation:traitCollection:")]
		void DidUpdateCoordinateSpace (UIWindowScene windowScene, IUICoordinateSpace previousCoordinateSpace, UIInterfaceOrientation previousInterfaceOrientation, UITraitCollection previousTraitCollection);

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("windowScene:performActionForShortcutItem:completionHandler:")]
		void PerformAction (UIWindowScene windowScene, UIApplicationShortcutItem shortcutItem, Action<bool> completionHandler);

		[Export ("windowScene:userDidAcceptCloudKitShareWithMetadata:")]
		void UserDidAcceptCloudKitShare (UIWindowScene windowScene, CKShareMetadata cloudKitShareMetadata);
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UISceneDestructionRequestOptions))]
	interface UIWindowSceneDestructionRequestOptions {

		[Export ("windowDismissalAnimation", ArgumentSemantic.Assign)]
		UIWindowSceneDismissalAnimation WindowDismissalAnimation { get; set; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITabBarItemAppearance : NSCopying, NSSecureCoding {

		[Export ("initWithStyle:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UITabBarItemAppearanceStyle style);

		[Export ("configureWithDefaultForStyle:")]
		void ConfigureWithDefault (UITabBarItemAppearanceStyle style);

		[Export ("normal", ArgumentSemantic.Strong)]
		UITabBarItemStateAppearance Normal { get; }

		[Export ("selected", ArgumentSemantic.Strong)]
		UITabBarItemStateAppearance Selected { get; }

		[Export ("disabled", ArgumentSemantic.Strong)]
		UITabBarItemStateAppearance Disabled { get; }

		[Export ("focused", ArgumentSemantic.Strong)]
		UITabBarItemStateAppearance Focused { get; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[return: NullAllowed]
	delegate UICollectionViewCell UICollectionViewDiffableDataSourceCellProvider (UICollectionView collectionView, NSIndexPath indexPath, NSObject itemIdentifier);

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[return: NullAllowed]
	delegate UICollectionReusableView UICollectionViewDiffableDataSourceSupplementaryViewProvider (UICollectionView collectionView, string elementKind, NSIndexPath indexPath);

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UICollectionViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType> : UICollectionViewDataSource
		where SectionIdentifierType : NSObject
		where ItemIdentifierType : NSObject {

		[Export ("initWithCollectionView:cellProvider:")]
		NativeHandle Constructor (UICollectionView collectionView, UICollectionViewDiffableDataSourceCellProvider cellProvider);

		[NullAllowed, Export ("supplementaryViewProvider", ArgumentSemantic.Copy)]
		UICollectionViewDiffableDataSourceSupplementaryViewProvider SupplementaryViewProvider { get; set; }

		[Export ("snapshot")]
		NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> Snapshot { get; }

		[Export ("applySnapshot:animatingDifferences:")]
		void ApplySnapshot (NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> snapshot, bool animatingDifferences);

		[Async]
		[Export ("applySnapshot:animatingDifferences:completion:")]
		void ApplySnapshot (NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> snapshot, bool animatingDifferences, [NullAllowed] Action completion);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("applySnapshotUsingReloadData:")]
		void ApplySnapshotUsingReloadData (NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> snapshot);

		[Async]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("applySnapshotUsingReloadData:completion:")]
		void ApplySnapshotUsingReloadData (NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> snapshot, [NullAllowed] Action completion);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("sectionIdentifierForIndex:")]
		[return: NullAllowed]
		SectionIdentifierType GetSectionIdentifier (nint index);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("indexForSectionIdentifier:")]
		nint GetIndex (SectionIdentifierType sectionIdentifier);

		[Export ("itemIdentifierForIndexPath:")]
		[return: NullAllowed]
		ItemIdentifierType GetItemIdentifier (NSIndexPath indexPath);

		[Export ("indexPathForItemIdentifier:")]
		[return: NullAllowed]
		NSIndexPath GetIndexPath (ItemIdentifierType identifier);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("reorderingHandlers", ArgumentSemantic.Copy)]
		UICollectionViewDiffableDataSourceReorderingHandlers<SectionIdentifierType, ItemIdentifierType> ReorderingHandlers { get; set; }

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("applySnapshot:toSection:animatingDifferences:")]
		void ApplySnapshot (NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> snapshot, SectionIdentifierType sectionIdentifier, bool animatingDifferences);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("applySnapshot:toSection:animatingDifferences:completion:")]
		void ApplySnapshot (NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> snapshot, SectionIdentifierType sectionIdentifier, bool animatingDifferences, [NullAllowed] Action completion);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("snapshotForSection:")]
		NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> GetSnapshot (SectionIdentifierType section);

		[TV (14, 0), iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[Export ("sectionSnapshotHandlers", ArgumentSemantic.Copy)]
		UICollectionViewDiffableDataSourceSectionSnapshotHandlers<ItemIdentifierType> SectionSnapshotHandlers { get; set; }
	}

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[return: NullAllowed]
	delegate UITableViewCell UITableViewDiffableDataSourceCellProvider (UITableView tableView, NSIndexPath indexPath, NSObject obj);

	[TV (13, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITableViewDiffableDataSource<SectionIdentifierType, ItemIdentifierType> : UITableViewDataSource
		where SectionIdentifierType : NSObject
		where ItemIdentifierType : NSObject {

		[Export ("initWithTableView:cellProvider:")]
		NativeHandle Constructor (UITableView tableView, UITableViewDiffableDataSourceCellProvider cellProvider);

		[Export ("snapshot")]
		NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> Snapshot { get; }

		[Export ("applySnapshot:animatingDifferences:")]
		void ApplySnapshot (NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> snapshot, bool animatingDifferences);

		[Async]
		[Export ("applySnapshot:animatingDifferences:completion:")]
		void ApplySnapshot (NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> snapshot, bool animatingDifferences, [NullAllowed] Action completion);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("applySnapshotUsingReloadData:")]
		void ApplySnapshotUsingReloadData (NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> snapshot);

		[Async]
		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("applySnapshotUsingReloadData:completion:")]
		void ApplySnapshotUsingReloadData (NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> snapshot, [NullAllowed] Action completion);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("sectionIdentifierForIndex:")]
		[return: NullAllowed]
		SectionIdentifierType GetSectionIdentifier (nint index);

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("indexForSectionIdentifier:")]
		nint GetIndex (SectionIdentifierType sectionIdentifier);

		[Export ("itemIdentifierForIndexPath:")]
		[return: NullAllowed]
		ItemIdentifierType GetItemIdentifier (NSIndexPath indexPath);

		[Export ("indexPathForItemIdentifier:")]
		[return: NullAllowed]
		NSIndexPath GetIndexPath (ItemIdentifierType identifier);

		[Export ("defaultRowAnimation", ArgumentSemantic.Assign)]
		UITableViewRowAnimation DefaultRowAnimation { get; set; }
	}

	[Static]
	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	interface UIActivityItemsConfigurationMetadataKey {
		[Field ("UIActivityItemsConfigurationMetadataKeyTitle")]
		NSString Title { get; }

		[Field ("UIActivityItemsConfigurationMetadataKeyMessageBody")]
		NSString MessageBody { get; }

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Field ("UIActivityItemsConfigurationMetadataKeyLinkPresentationMetadata")]
		NSString LinkPresentationMetadata { get; }

		[iOS (18, 0), MacCatalyst (18, 0)]
		[Field ("UIActivityItemsConfigurationMetadataKeyCollaborationModeRestrictions")]
		NSString CollaborationModeRestrictions { get; }

		[iOS (18, 0), MacCatalyst (18, 0)]
		[Field ("UIActivityItemsConfigurationMetadataKeyShareRecipients")]
		NSString ShareRecipients { get; }
	}

	[return: NullAllowed]
	delegate NSObject UIActivityItemsConfigurationMetadataProviderHandler (NSString activityItemsConfigurationMetadataKey);
	[return: NullAllowed]
	delegate NSObject UIActivityItemsConfigurationPerItemMetadataProviderHandler (nint index, NSString activityItemsConfigurationMetadataKey);
	[return: NullAllowed]
	delegate NSObject UIActivityItemsConfigurationPreviewProviderHandler (nint index, NSString activityItemsConfigurationPreviewIntent, CGSize suggestedSize);

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIActivityItemsConfiguration : UIActivityItemsConfigurationReading {

		[NullAllowed, Export ("localObject", ArgumentSemantic.Strong)]
		NSObject LocalObject { get; set; }

		[Export ("supportedInteractions", ArgumentSemantic.Copy)]
		NSString [] WeakSupportedInteractions { get; set; }

		[Advice ("Uses 'UIActivityItemsConfigurationMetadataKey' constants in the function handler.")]
		[NullAllowed, Export ("metadataProvider", ArgumentSemantic.Strong)]
		UIActivityItemsConfigurationMetadataProviderHandler MetadataProvider { get; set; }

		[Advice ("Uses 'UIActivityItemsConfigurationMetadataKey' constants in the function handler.")]
		[NullAllowed, Export ("perItemMetadataProvider", ArgumentSemantic.Strong)]
		UIActivityItemsConfigurationPerItemMetadataProviderHandler PerItemMetadataProvider { get; set; }

		[Advice ("Uses 'UIActivityItemsConfigurationPreviewIntent' enum constants in the function handler.")]
		[NullAllowed, Export ("previewProvider", ArgumentSemantic.Strong)]
		UIActivityItemsConfigurationPreviewProviderHandler PreviewProvider { get; set; }

		[NullAllowed, Export ("applicationActivitiesProvider", ArgumentSemantic.Strong)]
		Func<UIActivity []> ApplicationActivitiesProvider { get; set; }

		[Static]
		[Export ("activityItemsConfigurationWithObjects:")]
		UIActivityItemsConfiguration Create (INSItemProviderWriting [] objects);

		[Static]
		[Export ("activityItemsConfigurationWithItemProviders:")]
		UIActivityItemsConfiguration Create (NSItemProvider [] itemProviders);

		[Export ("initWithObjects:")]
		[DesignatedInitializer]
		NativeHandle Constructor (INSItemProviderWriting [] objects);

		[Export ("initWithItemProviders:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSItemProvider [] itemProviders);
	}

	interface IUIActivityItemsConfigurationReading { }

	[NoTV, iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIActivityItemsConfigurationReading {

		[Abstract]
		[Export ("itemProvidersForActivityItemsConfiguration", ArgumentSemantic.Copy)]
		NSItemProvider [] ItemProvidersForActivityItemsConfiguration { get; }

		[Export ("activityItemsConfigurationSupportsInteraction:")]
		bool GetActivityItemsConfigurationSupportsInteraction (NSString activityItemsConfigurationInteraction);

		[Export ("activityItemsConfigurationMetadataForKey:")]
		[return: NullAllowed]
		NSObject GetActivityItemsConfigurationMetadata (NSString activityItemsConfigurationMetadataKey);

		[Export ("activityItemsConfigurationMetadataForItemAtIndex:key:")]
		[return: NullAllowed]
		NSObject GetActivityItemsConfigurationMetadata (nint index, NSString activityItemsConfigurationMetadataKey);

		[Export ("activityItemsConfigurationPreviewForItemAtIndex:intent:suggestedSize:")]
		[return: NullAllowed]
		NSItemProvider GetActivityItemsConfigurationPreview (nint index, NSString activityItemsConfigurationPreviewIntent, CGSize suggestedSize);

		[return: NullAllowed]
		[Export ("applicationActivitiesForActivityItemsConfiguration")]
		UIActivity [] GetApplicationActivitiesForActivityItemsConfiguration ();
	}

	[iOS (13, 0), TV (13, 0)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISceneSizeRestrictions {

		[Export ("minimumSize", ArgumentSemantic.Assign)]
		CGSize MinimumSize { get; set; }

		[Export ("maximumSize", ArgumentSemantic.Assign)]
		CGSize MaximumSize { get; set; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("allowsFullScreen")]
		bool AllowsFullScreen { get; set; }
	}

	interface IUIContextMenuInteractionAnimating { }

	[TV (17, 0), iOS (13, 0)]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIContextMenuInteractionAnimating {

		[Abstract]
		[NullAllowed, Export ("previewViewController")]
		UIViewController PreviewViewController { get; }

		[Abstract]
		[Export ("addAnimations:")]
		void AddAnimations (Action animations);

		[Abstract]
		[Export ("addCompletion:")]
		void AddCompletion (Action completion);
	}

	[Introduced (PlatformName.MacCatalyst, 13, 4)]
	[iOS (13, 4), TV (13, 4)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIKey : NSCopying, NSCoding {

		[Export ("characters")]
		string Characters { get; }

		[Export ("charactersIgnoringModifiers")]
		string CharactersIgnoringModifiers { get; }

		[Export ("modifierFlags")]
		UIKeyModifierFlags ModifierFlags { get; }

		[Export ("keyCode")]
		UIKeyboardHidUsage KeyCode { get; }
	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPointerInteraction : UIInteraction {

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		IUIPointerInteractionDelegate Delegate { get; }

		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Export ("initWithDelegate:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([NullAllowed] IUIPointerInteractionDelegate @delegate);

		[Export ("invalidate")]
		void Invalidate ();
	}

	interface IUIPointerInteractionDelegate { }

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIPointerInteractionDelegate {

		[Export ("pointerInteraction:regionForRequest:defaultRegion:")]
		[return: NullAllowed]
		UIPointerRegion GetRegionForRequest (UIPointerInteraction interaction, UIPointerRegionRequest request, UIPointerRegion defaultRegion);

		[Export ("pointerInteraction:styleForRegion:")]
		[return: NullAllowed]
		UIPointerStyle GetStyleForRegion (UIPointerInteraction interaction, UIPointerRegion region);

		[Export ("pointerInteraction:willEnterRegion:animator:")]
		void WillEnterRegion (UIPointerInteraction interaction, UIPointerRegion region, IUIPointerInteractionAnimating animator);

		[Export ("pointerInteraction:willExitRegion:animator:")]
		void WillExitRegion (UIPointerInteraction interaction, UIPointerRegion region, IUIPointerInteractionAnimating animator);
	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPointerRegionRequest {

		[Export ("location")]
		CGPoint Location { get; }

		[Export ("modifiers")]
		UIKeyModifierFlags Modifiers { get; }
	}

	interface IUIPointerInteractionAnimating { }

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[Protocol]
	interface UIPointerInteractionAnimating {

		[Abstract]
		[Export ("addAnimations:")]
		void AddAnimations (Action animations);

		[Abstract]
		[Export ("addCompletion:")]
		void AddCompletion (Action<bool> completion);
	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPointerRegion : NSCopying {

		[Export ("rect")]
		CGRect Rect { get; }

		[NullAllowed, Export ("identifier")]
		NSObject Identifier { get; }

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("latchingAxes", ArgumentSemantic.Assign)]
		UIAxis LatchingAxes { get; set; }

		[Static]
		[Export ("regionWithRect:identifier:")]
		UIPointerRegion Create (CGRect rect, [NullAllowed] NSObject identifier);
	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIHoverStyle))]
	[DisableDefaultCtor]
	interface UIPointerStyle : NSCopying {

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("accessories", ArgumentSemantic.Copy)]
		UIPointerAccessory [] Accessories { get; set; }

		[Static]
		[Export ("styleWithEffect:shape:")]
		UIPointerStyle Create (UIPointerEffect effect, [NullAllowed] UIPointerShape shape);

		[Static]
		[Export ("styleWithShape:constrainedAxes:")]
		UIPointerStyle Create (UIPointerShape shape, UIAxis axes);

		[Static]
		[Export ("hiddenPointerStyle")]
		UIPointerStyle CreateHiddenPointerStyle ();

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("systemPointerStyle")]
		UIPointerStyle CreateSystemPointerStyle ();
	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPointerEffect : NSCopying, UIHoverEffect {

		[Export ("preview", ArgumentSemantic.Copy)]
		UITargetedPreview Preview { get; }

		[Static]
		[Export ("effectWithPreview:")]
		UIPointerEffect Create (UITargetedPreview preview);
	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIPointerEffect))]
	interface UIPointerHighlightEffect {

	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIPointerEffect))]
	interface UIPointerLiftEffect {

	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (UIPointerEffect))]
	interface UIPointerHoverEffect {

		[Export ("preferredTintMode", ArgumentSemantic.Assign)]
		UIPointerEffectTintMode PreferredTintMode { get; set; }

		[Export ("prefersShadow")]
		bool PrefersShadow { get; set; }

		[Export ("prefersScaledContent")]
		bool PrefersScaledContent { get; set; }
	}

	[NoTV, iOS (13, 4)]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPointerShape : NSCopying {

		[Static]
		[Export ("shapeWithPath:")]
		UIPointerShape Create (UIBezierPath path);

		[Static]
		[Export ("shapeWithRoundedRect:")]
		UIPointerShape CreateRounded (CGRect rect);

		[Static]
		[Export ("shapeWithRoundedRect:cornerRadius:")]
		UIPointerShape CreateRounded (CGRect rect, nfloat cornerRadius);

		[Static]
		[Export ("beamWithPreferredLength:axis:")]
		UIPointerShape CreateBeam (nfloat preferredLength, UIAxis axis);
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	interface NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> : NSCopying
		where ItemIdentifierType : NSObject {

		[Export ("appendItems:")]
		void AppendItems (ItemIdentifierType [] items);

		[Export ("appendItems:intoParentItem:")]
		void AppendItems (ItemIdentifierType [] items, [NullAllowed] ItemIdentifierType parentItem);

		[Export ("insertItems:beforeItem:")]
		void InsertItemsBefore (ItemIdentifierType [] items, ItemIdentifierType beforeIdentifier);

		[Export ("insertItems:afterItem:")]
		void InsertItemsAfter (ItemIdentifierType [] items, ItemIdentifierType afterIdentifier);

		[Export ("deleteItems:")]
		void DeleteItems (ItemIdentifierType [] items);

		[Export ("deleteAllItems")]
		void DeleteAllItems ();

		[Export ("expandItems:")]
		void ExpandItems (ItemIdentifierType [] items);

		[Export ("collapseItems:")]
		void CollapseItems (ItemIdentifierType [] items);

		[Export ("replaceChildrenOfParentItem:withSnapshot:")]
		void ReplaceChildren (ItemIdentifierType parentItem, NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> snapshot);

		[Export ("insertSnapshot:beforeItem:")]
		void InsertSnapshotBeforeItem (NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> snapshot, ItemIdentifierType item);

		[Export ("insertSnapshot:afterItem:")]
		ItemIdentifierType InsertSnapshotAfterItem (NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> snapshot, ItemIdentifierType item);

		[Export ("isExpanded:")]
		bool IsExpanded (ItemIdentifierType item);

		[Export ("isVisible:")]
		bool IsVisible (ItemIdentifierType item);

		[Export ("containsItem:")]
		bool ContainsItem (ItemIdentifierType item);

		[Export ("levelOfItem:")]
		nint GetLevel (ItemIdentifierType item);

		[Export ("indexOfItem:")]
		nint GetIndex (ItemIdentifierType item);

		[Export ("expandedItems")]
		ItemIdentifierType [] ExpandedItems { get; }

		[Export ("parentOfChildItem:")]
		[return: NullAllowed]
		ItemIdentifierType GetParent (ItemIdentifierType ofChildItem);

		[Export ("snapshotOfParentItem:")]
		NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> GetSnapshot (ItemIdentifierType parentItem);

		[Export ("snapshotOfParentItem:includingParentItem:")]
		NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> GetSnapshot (ItemIdentifierType parentItem, bool includingParentItem);

		[Export ("items", ArgumentSemantic.Strong)]
		ItemIdentifierType [] Items { get; }

		[Export ("rootItems", ArgumentSemantic.Strong)]
		ItemIdentifierType [] RootItems { get; }

		[Export ("visibleItems", ArgumentSemantic.Strong)]
		ItemIdentifierType [] VisibleItems { get; }

		[Export ("visualDescription")]
		string VisualDescription { get; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIBackgroundConfiguration : NSCopying, NSSecureCoding {

		[Static]
		[Export ("clearConfiguration")]
		UIBackgroundConfiguration ClearConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use the 'ListCellConfiguration' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use the 'ListCellConfiguration' property instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use the 'ListCellConfiguration' property instead.")]
		[Static]
		[Export ("listPlainCellConfiguration")]
		UIBackgroundConfiguration ListPlainCellConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use the 'ListHeaderConfiguration' or the 'ListFooterConfiguration' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use the 'ListHeaderConfiguration' or the 'ListFooterConfiguration' property instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use the 'ListHeaderConfiguration' or the 'ListFooterConfiguration' property instead.")]
		[Static]
		[Export ("listPlainHeaderFooterConfiguration")]
		UIBackgroundConfiguration ListPlainHeaderFooterConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use the 'ListCellConfiguration' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use the 'ListCellConfiguration' property instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use the 'ListCellConfiguration' property instead.")]
		[Static]
		[Export ("listGroupedCellConfiguration")]
		UIBackgroundConfiguration ListGroupedCellConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use the 'ListHeaderConfiguration' or the 'ListFooterConfiguration' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use the 'ListHeaderConfiguration' or the 'ListFooterConfiguration' property instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use the 'ListHeaderConfiguration' or the 'ListFooterConfiguration' property instead.")]
		[Static]
		[Export ("listGroupedHeaderFooterConfiguration")]
		UIBackgroundConfiguration ListGroupedHeaderFooterConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use the 'ListHeaderConfiguration' or the 'ListFooterConfiguration' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use the 'ListHeaderConfiguration' or the 'ListFooterConfiguration' property instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use the 'ListHeaderConfiguration' or the 'ListFooterConfiguration' property instead.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("listSidebarHeaderConfiguration")]
		UIBackgroundConfiguration ListSidebarHeaderConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use the 'ListCellConfiguration' property instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use the 'ListCellConfiguration' property instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use the 'ListCellConfiguration' property instead.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("listSidebarCellConfiguration")]
		UIBackgroundConfiguration ListSidebarCellConfiguration { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("listAccompaniedSidebarCellConfiguration")]
		UIBackgroundConfiguration ListAccompaniedSidebarCellConfiguration { get; }

		[Export ("updatedConfigurationForState:")]
		UIBackgroundConfiguration GetUpdatedConfiguration (IUIConfigurationState state);

		[NullAllowed, Export ("customView", ArgumentSemantic.Strong)]
		UIView CustomView { get; set; }

		[Export ("cornerRadius")]
		nfloat CornerRadius { get; set; }

		[Export ("backgroundInsets", ArgumentSemantic.Assign)]
		NSDirectionalEdgeInsets BackgroundInsets { get; set; }

		[Export ("edgesAddingLayoutMarginsToBackgroundInsets", ArgumentSemantic.Assign)]
		NSDirectionalRectEdge EdgesAddingLayoutMarginsToBackgroundInsets { get; set; }

		[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
		UIColor BackgroundColor { get; set; }

		[NullAllowed, Export ("backgroundColorTransformer", ArgumentSemantic.Copy)]
		UIConfigurationColorTransformerHandler BackgroundColorTransformer { get; set; }

		[Export ("resolvedBackgroundColorForTintColor:")]
		UIColor GetResolvedBackgroundColor (UIColor tintColor);

		[NullAllowed, Export ("visualEffect", ArgumentSemantic.Copy)]
		UIVisualEffect VisualEffect { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("imageContentMode", ArgumentSemantic.Assign)]
		UIViewContentMode ImageContentMode { get; set; }

		[NullAllowed, Export ("strokeColor", ArgumentSemantic.Strong)]
		UIColor StrokeColor { get; set; }

		[NullAllowed, Export ("strokeColorTransformer", ArgumentSemantic.Copy)]
		UIConfigurationColorTransformerHandler StrokeColorTransformer { get; set; }

		[Export ("resolvedStrokeColorForTintColor:")]
		UIColor GetResolvedStrokeColor (UIColor tintColor);

		[Export ("strokeWidth")]
		nfloat StrokeWidth { get; set; }

		[Export ("strokeOutset")]
		nfloat StrokeOutset { get; set; }

		[Static]
		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("listCellConfiguration")]
		UIBackgroundConfiguration ListCellConfiguration { get; }

		[Static]
		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("listHeaderConfiguration")]
		UIBackgroundConfiguration ListHeaderConfiguration { get; }

		[Static]
		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("listFooterConfiguration")]
		UIBackgroundConfiguration ListFooterConfiguration { get; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("shadowProperties")]
		UIShadowProperties ShadowProperties { get; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DesignatedDefaultCtor]
	interface UICellAccessory : NSCopying, NSSecureCoding {

		[Field ("UICellAccessoryStandardDimension")]
		nfloat StandardDimension { get; }

		[Export ("displayedState", ArgumentSemantic.Assign)]
		UICellAccessoryDisplayedState DisplayedState { get; set; }

		[Export ("hidden")]
		bool IsHidden { [Bind ("isHidden")] get; set; }

		[Export ("reservedLayoutWidth")]
		nfloat ReservedLayoutWidth { get; set; }

		[NullAllowed, Export ("tintColor", ArgumentSemantic.Strong)]
		UIColor TintColor { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICellAccessory))]
	interface UICellAccessoryDisclosureIndicator {

	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICellAccessory))]
	interface UICellAccessoryCheckmark {

	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICellAccessory))]
	interface UICellAccessoryDelete {

		[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
		UIColor BackgroundColor { get; set; }

		[NullAllowed, Export ("actionHandler", ArgumentSemantic.Copy)]
		Action ActionHandler { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICellAccessory))]
	interface UICellAccessoryInsert {

		[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
		UIColor BackgroundColor { get; set; }

		[NullAllowed, Export ("actionHandler", ArgumentSemantic.Copy)]
		Action ActionHandler { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICellAccessory))]
	interface UICellAccessoryReorder {

		[Export ("showsVerticalSeparator")]
		bool ShowsVerticalSeparator { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICellAccessory))]
	interface UICellAccessoryMultiselect {

		[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Strong)]
		UIColor BackgroundColor { get; set; }
	}

	[NoTV, iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICellAccessory))]
	interface UICellAccessoryOutlineDisclosure {

		[Export ("style", ArgumentSemantic.Assign)]
		UICellAccessoryOutlineDisclosureStyle Style { get; set; }

		[NullAllowed, Export ("actionHandler", ArgumentSemantic.Copy)]
		Action ActionHandler { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICellAccessory))]
	[DisableDefaultCtor]
	interface UICellAccessoryLabel {

		[Export ("initWithText:")]
		[DesignatedInitializer]
		NativeHandle Constructor (string text);

		[Export ("text")]
		string Text { get; }

		[Export ("font", ArgumentSemantic.Strong)]
		UIFont Font { get; set; }

		[Export ("adjustsFontForContentSizeCategory")]
		bool AdjustsFontForContentSizeCategory { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	delegate nuint UICellAccessoryPosition (UICellAccessory [] accessories);

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICellAccessory))]
	[DisableDefaultCtor]
	interface UICellAccessoryCustomView {

		[Export ("initWithCustomView:placement:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIView customView, UICellAccessoryPlacement placement);

		[Export ("customView", ArgumentSemantic.Strong)]
		UIView CustomView { get; }

		[Export ("placement")]
		UICellAccessoryPlacement Placement { get; }

		[Export ("maintainsFixedSize")]
		bool MaintainsFixedSize { get; set; }

		[NullAllowed, Export ("position", ArgumentSemantic.Copy)]
		UICellAccessoryPosition Position { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UIViewConfigurationState))]
	[DisableDefaultCtor]
	interface UICellConfigurationState {

		[Export ("initWithTraitCollection:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UITraitCollection traitCollection);

		[Export ("editing")]
		bool Editing { [Bind ("isEditing")] get; set; }

		[Export ("expanded")]
		bool Expanded { [Bind ("isExpanded")] get; set; }

		[Export ("swiped")]
		bool Swiped { [Bind ("isSwiped")] get; set; }

		[Export ("reordering")]
		bool Reordering { [Bind ("isReordering")] get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("cellDragState", ArgumentSemantic.Assign)]
		UICellConfigurationDragState CellDragState { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("cellDropState", ArgumentSemantic.Assign)]
		UICellConfigurationDropState CellDropState { get; set; }
	}

	[NoTV]
	[MacCatalyst (13, 1)]
	[return: NullAllowed]
	delegate UISwipeActionsConfiguration UICollectionLayoutListSwipeActionsConfigurationProvider (NSIndexPath indexPath);

	[NoTV]
	[MacCatalyst (13, 1)]
	delegate UIListSeparatorConfiguration UICollectionLayoutListItemSeparatorHandler (NSIndexPath indexPath, UIListSeparatorConfiguration sectionSeparatorConfiguration);

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UICollectionLayoutListConfiguration : NSCopying {

		[Export ("initWithAppearance:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UICollectionLayoutListAppearance appearance);

		[Export ("appearance")]
		UICollectionLayoutListAppearance Appearance { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("showsSeparators")]
		bool ShowsSeparators { get; set; }

		[NoTV, iOS (14, 5)]
		[MacCatalyst (14, 5)]
		[Export ("separatorConfiguration", ArgumentSemantic.Copy)]
		UIListSeparatorConfiguration SeparatorConfiguration { get; set; }

		[NoTV, iOS (14, 5)]
		[MacCatalyst (14, 5)]
		[NullAllowed]
		[Export ("itemSeparatorHandler", ArgumentSemantic.Copy)]
		UICollectionLayoutListItemSeparatorHandler ItemSeparatorHandler { get; set; }

		[NullAllowed, Export ("backgroundColor", ArgumentSemantic.Assign)]
		UIColor BackgroundColor { get; set; }

		[Export ("headerMode", ArgumentSemantic.Assign)]
		UICollectionLayoutListHeaderMode HeaderMode { get; set; }

		[Export ("footerMode", ArgumentSemantic.Assign)]
		UICollectionLayoutListFooterMode FooterMode { get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("headerTopPadding")]
		nfloat HeaderTopPadding { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed]
		[Export ("leadingSwipeActionsConfigurationProvider", ArgumentSemantic.Copy)]
		UICollectionLayoutListSwipeActionsConfigurationProvider LeadingSwipeActionsConfigurationProvider { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[NullAllowed]
		[Export ("trailingSwipeActionsConfigurationProvider", ArgumentSemantic.Copy)]
		UICollectionLayoutListSwipeActionsConfigurationProvider TrailingSwipeActionsConfigurationProvider { get; set; }

		[TV (18, 0), Mac (15, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("contentHuggingElements")]
		UICollectionLayoutListContentHuggingElements ContentHuggingElements { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	delegate void UICollectionViewCellRegistrationConfigurationHandler (UICollectionViewCell cell, NSIndexPath indexPath, NSObject item);

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UICollectionViewCellRegistration {

		[Static]
		[Export ("registrationWithCellClass:configurationHandler:")]
		UICollectionViewCellRegistration GetRegistration (Class cellClass, UICollectionViewCellRegistrationConfigurationHandler configurationHandler);

		[Static]
		[Wrap ("GetRegistration (new Class (cellType), configurationHandler)")]
		UICollectionViewCellRegistration GetRegistration (Type cellType, UICollectionViewCellRegistrationConfigurationHandler configurationHandler);

		[Static]
		[Export ("registrationWithCellNib:configurationHandler:")]
		UICollectionViewCellRegistration GetRegistration (UINib cellNib, UICollectionViewCellRegistrationConfigurationHandler configurationHandler);

		[NullAllowed, Export ("cellClass")]
		Class CellClass { get; }

		[NullAllowed, Wrap ("Class.Lookup (CellClass)")]
		Type CellType { get; }

		[NullAllowed, Export ("cellNib")]
		UINib CellNib { get; }

		[Export ("configurationHandler")]
		UICollectionViewCellRegistrationConfigurationHandler ConfigurationHandler { get; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	delegate void UICollectionViewSupplementaryRegistrationConfigurationHandler (UICollectionReusableView supplementaryView, string elementKind, NSIndexPath indexPath);

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UICollectionViewSupplementaryRegistration {

		[Static]
		[Export ("registrationWithSupplementaryClass:elementKind:configurationHandler:")]
		UICollectionViewSupplementaryRegistration GetRegistration (Class supplementaryClass, string elementKind, UICollectionViewSupplementaryRegistrationConfigurationHandler configurationHandler);

		[Static]
		[Wrap ("GetRegistration (new Class (supplementaryType), elementKind, configurationHandler)")]
		UICollectionViewSupplementaryRegistration GetRegistration (Type supplementaryType, string elementKind, UICollectionViewSupplementaryRegistrationConfigurationHandler configurationHandler);

		[Static]
		[Export ("registrationWithSupplementaryNib:elementKind:configurationHandler:")]
		UICollectionViewSupplementaryRegistration GetRegistration (UINib supplementaryNib, string elementKind, UICollectionViewSupplementaryRegistrationConfigurationHandler configurationHandler);

		[NullAllowed, Export ("supplementaryClass")]
		Class SupplementaryClass { get; }

		[NullAllowed, Wrap ("Class.Lookup (SupplementaryClass)")]
		Type SupplementaryType { get; }

		[NullAllowed, Export ("supplementaryNib")]
		UINib SupplementaryNib { get; }

		[Export ("elementKind")]
		string ElementKind { get; }

		[Export ("configurationHandler")]
		UICollectionViewSupplementaryRegistrationConfigurationHandler ConfigurationHandler { get; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UICollectionViewCell))]
	interface UICollectionViewListCell {

		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Export ("defaultContentConfiguration")]
		UIListContentConfiguration DefaultContentConfiguration { get; }

		[Export ("indentationLevel")]
		nint IndentationLevel { get; set; }

		[Export ("indentationWidth")]
		nfloat IndentationWidth { get; set; }

		[Export ("indentsAccessories")]
		bool IndentsAccessories { get; set; }

		[Export ("accessories", ArgumentSemantic.Copy)]
		UICellAccessory [] Accessories { get; set; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("separatorLayoutGuide")]
		UILayoutGuide SeparatorLayoutGuide { get; }
	}

	interface IUIColorPickerViewControllerDelegate { }

	[NoTV, iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIColorPickerViewControllerDelegate {

		[Deprecated (PlatformName.iOS, 15, 0, message: "Use the 'DidSelectColor (UIColorPickerViewController, UIColor, bool)' overload instead.")]
		[Deprecated (PlatformName.MacCatalyst, 15, 0, message: "Use the 'DidSelectColor (UIColorPickerViewController, UIColor, bool)' overload instead.")]
		[Export ("colorPickerViewControllerDidSelectColor:")]
		void DidSelectColor (UIColorPickerViewController viewController);

		[iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("colorPickerViewController:didSelectColor:continuously:")]
		void DidSelectColor (UIColorPickerViewController viewController, UIColor color, bool continuously);

		[Export ("colorPickerViewControllerDidFinish:")]
		void DidFinish (UIColorPickerViewController viewController);
	}

	[NoTV, iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UIViewController))]
	[DesignatedDefaultCtor]
	interface UIColorPickerViewController {
		[Export ("initWithNibName:bundle:")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIColorPickerViewControllerDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[Export ("selectedColor", ArgumentSemantic.Strong)]
		UIColor SelectedColor { get; set; }

		[Export ("supportsAlpha")]
		bool SupportsAlpha { get; set; }
	}

	[NoTV, iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UIControl))]
	interface UIColorWell {

		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[NullAllowed, Export ("title")]
		string Title { get; set; }

		[Export ("supportsAlpha")]
		bool SupportsAlpha { get; set; }

		[NullAllowed, Export ("selectedColor", ArgumentSemantic.Strong)]
		UIColor SelectedColor { get; set; }
	}

	interface IUIConfigurationState { }

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[Protocol]
	interface UIConfigurationState : NSCopying, NSSecureCoding {

		// Needs to be manually inlined in adopting classes
		// [Abstract]
		// [Export ("initWithTraitCollection:")]
		// NativeHandle Constructor (UITraitCollection traitCollection);

		[Abstract]
		[Export ("traitCollection", ArgumentSemantic.Strong)]
		UITraitCollection TraitCollection { get; set; }

		[Abstract]
		[Export ("customStateForKey:")]
		[return: NullAllowed]
		NSObject GetCustomState (string key);

		[Abstract]
		[Export ("setCustomState:forKey:")]
		void SetCustomState ([NullAllowed] NSObject customState, string key);

		[Abstract]
		[Export ("objectForKeyedSubscript:")]
		[return: NullAllowed]
		NSObject GetObject (string key);

		[Abstract]
		[Export ("setObject:forKeyedSubscript:")]
		void SetObject ([NullAllowed] NSObject obj, string key);
	}

	interface IUIContentConfiguration { }

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[NoMac]
	[Protocol]
	interface UIContentConfiguration : NSCopying {

		[Abstract]
		[Export ("makeContentView")]
		IUIContentView MakeContentView ();

		[Abstract]
		[Export ("updatedConfigurationForState:")]
		IUIContentConfiguration GetUpdatedConfiguration (IUIConfigurationState state);
	}

	interface IUIContentView { }

	[TV (14, 0), iOS (14, 0)]
	[NoMac]
	[MacCatalyst (14, 0)]
	[Protocol]
	interface UIContentView {

		[Abstract]
		[Export ("configuration", ArgumentSemantic.Copy)]
		IUIContentConfiguration Configuration { get; set; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("supportsConfiguration:")]
		bool SupportsConfiguration (IUIContentConfiguration configuration);
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	delegate void UIDeferredMenuElementCompletionHandler (UIMenuElement [] elements);

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	delegate void UIDeferredMenuElementProviderHandler ([BlockCallback] UIDeferredMenuElementCompletionHandler completion);

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UIMenuElement))]
	[DisableDefaultCtor]
	interface UIDeferredMenuElement {

		[Static]
		[Export ("elementWithProvider:")]
		UIDeferredMenuElement Create (UIDeferredMenuElementProviderHandler elementProvider);

		[iOS (15, 0), MacCatalyst (15, 0), TV (15, 0)]
		[Static]
		[Export ("elementWithUncachedProvider:")]
		UIDeferredMenuElement CreateUncached (UIDeferredMenuElementProviderHandler elementProvider);
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	interface NSDiffableDataSourceSectionTransaction<SectionIdentifierType, ItemIdentifierType>
		where SectionIdentifierType : NSObject
		where ItemIdentifierType : NSObject {

		[Export ("sectionIdentifier")]
		SectionIdentifierType SectionIdentifier { get; }

		[Export ("initialSnapshot")]
		NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> InitialSnapshot { get; }

		[Export ("finalSnapshot")]
		NSDiffableDataSourceSectionSnapshot<ItemIdentifierType> FinalSnapshot { get; }

#if false // https://github.com/dotnet/macios/issues/15577
		[Export ("difference")]
		NSOrderedCollectionDifference Difference { get; }
#endif
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	interface NSDiffableDataSourceTransaction<SectionIdentifierType, ItemIdentifierType>
		where SectionIdentifierType : NSObject
		where ItemIdentifierType : NSObject {

		[Export ("initialSnapshot")]
		NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> InitialSnapshot { get; }

		[Export ("finalSnapshot")]
		NSDiffableDataSourceSnapshot<SectionIdentifierType, ItemIdentifierType> FinalSnapshot { get; }

#if false // https://github.com/dotnet/macios/issues/15577
		[Export ("difference")]
		NSOrderedCollectionDifference Difference { get; }
#endif

		[Export ("sectionTransactions")]
		NSDiffableDataSourceSectionTransaction<SectionIdentifierType, ItemIdentifierType> [] SectionTransactions { get; }
	}

	[NoTV, iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIIndirectScribbleInteraction : UIInteraction {

		[Export ("initWithDelegate:")]
		[DesignatedInitializer]
		NativeHandle Constructor (IUIIndirectScribbleInteractionDelegate @delegate);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIIndirectScribbleInteractionDelegate Delegate { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[Export ("handlingWriting")]
		bool HandlingWriting { [Bind ("isHandlingWriting")] get; }
	}

	interface IUIIndirectScribbleInteractionDelegate { }

	[NoTV, iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIIndirectScribbleInteractionDelegate {

		[Abstract]
		[Export ("indirectScribbleInteraction:requestElementsInRect:completion:")]
		void RequestElements (UIIndirectScribbleInteraction interaction, CGRect rect, Action<NSObject []> completion);

		[Abstract]
		[Export ("indirectScribbleInteraction:isElementFocused:")]
		bool IsElementFocused (UIIndirectScribbleInteraction interaction, NSObject elementIdentifier);

		[Abstract]
		[Export ("indirectScribbleInteraction:frameForElement:")]
		CGRect GetFrameForElement (UIIndirectScribbleInteraction interaction, NSObject elementIdentifier);

		[Abstract]
		[Export ("indirectScribbleInteraction:focusElementIfNeeded:referencePoint:completion:")]
		void FocusElementIfNeeded (UIIndirectScribbleInteraction interaction, NSObject elementIdentifier, CGPoint focusReferencePoint, Action<IUITextInput> completion);

		[Export ("indirectScribbleInteraction:shouldDelayFocusForElement:")]
		bool ShouldDelayFocus (UIIndirectScribbleInteraction interaction, NSObject elementIdentifier);

		[Export ("indirectScribbleInteraction:willBeginWritingInElement:")]
		void WillBeginWriting (UIIndirectScribbleInteraction interaction, NSObject elementIdentifier);

		[Export ("indirectScribbleInteraction:didFinishWritingInElement:")]
		void DidFinishWriting (UIIndirectScribbleInteraction interaction, NSObject elementIdentifier);
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIListContentConfiguration : UIContentConfiguration, NSSecureCoding {

		[Static]
		[Export ("cellConfiguration")]
		UIListContentConfiguration CellConfiguration { get; }

		[Static]
		[Export ("subtitleCellConfiguration")]
		UIListContentConfiguration SubtitleCellConfiguration { get; }

		[Static]
		[Export ("valueCellConfiguration")]
		UIListContentConfiguration ValueCellConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use 'HeaderConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use 'HeaderConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use 'HeaderConfiguration' instead.")]
		[Static]
		[Export ("plainHeaderConfiguration")]
		UIListContentConfiguration PlainHeaderConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use 'FooterConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use 'FooterConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use 'FooterConfiguration' instead.")]
		[Static]
		[Export ("plainFooterConfiguration")]
		UIListContentConfiguration PlainFooterConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use 'HeaderConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use 'HeaderConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use 'HeaderConfiguration' instead.")]
		[Static]
		[Export ("groupedHeaderConfiguration")]
		UIListContentConfiguration GroupedHeaderConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use 'FooterConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use 'FooterConfiguration' instead.")]
		[Deprecated (PlatformName.TvOS, 18, 0, message: "Use 'FooterConfiguration' instead.")]
		[Static]
		[Export ("groupedFooterConfiguration")]
		UIListContentConfiguration GroupedFooterConfiguration { get; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("prominentInsetGroupedHeaderConfiguration")]
		UIListContentConfiguration ProminentInsetGroupedHeaderConfiguration { get; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[Static]
		[Export ("extraProminentInsetGroupedHeaderConfiguration")]
		UIListContentConfiguration ExtraProminentInsetGroupedHeaderConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use 'CellConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use 'CellConfiguration' instead.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("sidebarCellConfiguration")]
		UIListContentConfiguration SidebarCellConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use 'SubtitleCellConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use 'SubtitleCellConfiguration' instead.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("sidebarSubtitleCellConfiguration")]
		UIListContentConfiguration SidebarSubtitleCellConfiguration { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("accompaniedSidebarCellConfiguration")]
		UIListContentConfiguration AccompaniedSidebarCellConfiguration { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("accompaniedSidebarSubtitleCellConfiguration")]
		UIListContentConfiguration AccompaniedSidebarSubtitleCellConfiguration { get; }

		[Deprecated (PlatformName.iOS, 18, 0, message: "Use 'HeaderConfiguration' instead.")]
		[Deprecated (PlatformName.MacCatalyst, 18, 0, message: "Use 'HeaderConfiguration' instead.")]
		[NoTV]
		[MacCatalyst (13, 1)]
		[Static]
		[Export ("sidebarHeaderConfiguration")]
		UIListContentConfiguration SidebarHeaderConfiguration { get; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Static]
		[Export ("headerConfiguration")]
		UIListContentConfiguration HeaderConfiguration { get; }

		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Static]
		[Export ("footerConfiguration")]
		UIListContentConfiguration FooterConfiguration { get; }

		[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; set; }

		[Export ("imageProperties")]
		UIListContentImageProperties ImageProperties { get; }

		[NullAllowed, Export ("text")]
		string Text { get; set; }

		[NullAllowed, Export ("attributedText", ArgumentSemantic.Copy)]
		NSAttributedString AttributedText { get; set; }

		[Export ("textProperties")]
		UIListContentTextProperties TextProperties { get; }

		[NullAllowed, Export ("secondaryText")]
		string SecondaryText { get; set; }

		[NullAllowed, Export ("secondaryAttributedText", ArgumentSemantic.Copy)]
		NSAttributedString SecondaryAttributedText { get; set; }

		[Export ("secondaryTextProperties")]
		UIListContentTextProperties SecondaryTextProperties { get; }

		[Export ("axesPreservingSuperviewLayoutMargins", ArgumentSemantic.Assign)]
		UIAxis AxesPreservingSuperviewLayoutMargins { get; set; }

		[Export ("directionalLayoutMargins", ArgumentSemantic.Assign)]
		NSDirectionalEdgeInsets DirectionalLayoutMargins { get; set; }

		[Export ("prefersSideBySideTextAndSecondaryText")]
		bool PrefersSideBySideTextAndSecondaryText { get; set; }

		[Export ("imageToTextPadding")]
		nfloat ImageToTextPadding { get; set; }

		[Export ("textToSecondaryTextHorizontalPadding")]
		nfloat TextToSecondaryTextHorizontalPadding { get; set; }

		[Export ("textToSecondaryTextVerticalPadding")]
		nfloat TextToSecondaryTextVerticalPadding { get; set; }

		[iOS (18, 0), TV (18, 0), MacCatalyst (18, 0)]
		[Export ("alpha")]
		nfloat Alpha { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (UIView))]
	[DisableDefaultCtor]
	interface UIListContentView : UIContentView {

		[Export ("initWithConfiguration:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIListContentConfiguration configuration);

		// UIContentView interface wants IUIContentConfiguration, covariant types can't come soon enough
		[Sealed, Export ("configuration", ArgumentSemantic.Copy)]
		UIListContentConfiguration ListContentConfiguration { get; set; }

		[NullAllowed, Export ("textLayoutGuide", ArgumentSemantic.Strong)]
		UILayoutGuide TextLayoutGuide { get; }

		[NullAllowed, Export ("secondaryTextLayoutGuide", ArgumentSemantic.Strong)]
		UILayoutGuide SecondaryTextLayoutGuide { get; }

		[NullAllowed, Export ("imageLayoutGuide", ArgumentSemantic.Strong)]
		UILayoutGuide ImageLayoutGuide { get; }
	}

	delegate UIColor UIConfigurationColorTransformerHandler (UIColor color);

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIListContentImageProperties : NSCopying, NSSecureCoding {

		[Field ("UIListContentImageStandardDimension")]
		nfloat StandardDimension { get; }

		[NullAllowed, Export ("preferredSymbolConfiguration", ArgumentSemantic.Copy)]
		UIImageSymbolConfiguration PreferredSymbolConfiguration { get; set; }

		[NullAllowed, Export ("tintColor", ArgumentSemantic.Strong)]
		UIColor TintColor { get; set; }

		[NullAllowed, Export ("tintColorTransformer", ArgumentSemantic.Copy)]
		UIConfigurationColorTransformerHandler TintColorTransformer { get; set; }

		[Export ("resolvedTintColorForTintColor:")]
		UIColor GetResolvedTintColor (UIColor tintColor);

		[Export ("cornerRadius")]
		nfloat CornerRadius { get; set; }

		[Export ("maximumSize", ArgumentSemantic.Assign)]
		CGSize MaximumSize { get; set; }

		[Export ("reservedLayoutSize", ArgumentSemantic.Assign)]
		CGSize ReservedLayoutSize { get; set; }

		[Export ("accessibilityIgnoresInvertColors")]
		bool AccessibilityIgnoresInvertColors { get; set; }

		[iOS (18, 0), TV (18, 0), MacCatalyst (18, 0)]
		[Export ("strokeWidth")]
		nfloat StrokeWidth { get; set; }

		[iOS (18, 0), TV (18, 0), MacCatalyst (18, 0)]
		[Export ("strokeColor", ArgumentSemantic.Strong), NullAllowed]
		UIColor StrokeColor { get; set; }

		[iOS (18, 0), TV (18, 0), MacCatalyst (18, 0)]
		[Export ("strokeColorTransformer", ArgumentSemantic.Copy), NullAllowed]
		UIConfigurationColorTransformerHandler StrokeColorTransformer { get; set; }

		[iOS (18, 0), TV (18, 0), MacCatalyst (18, 0)]
		[Export ("resolvedStrokeColorForTintColor:")]
		UIColor GetResolvedStrokeColor (UIColor tintColor);
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIListContentTextProperties : NSCopying, NSSecureCoding {

		[Export ("font", ArgumentSemantic.Strong)]
		UIFont Font { get; set; }

		[Export ("color", ArgumentSemantic.Strong)]
		UIColor Color { get; set; }

		[NullAllowed, Export ("colorTransformer", ArgumentSemantic.Copy)]
		UIConfigurationColorTransformerHandler ColorTransformer { get; set; }

		[Export ("resolvedColor")]
		UIColor ResolvedColor { get; }

		[Export ("alignment", ArgumentSemantic.Assign)]
		UIListContentTextAlignment Alignment { get; set; }

		[Export ("lineBreakMode", ArgumentSemantic.Assign)]
		UILineBreakMode LineBreakMode { get; set; }

		[Export ("numberOfLines")]
		nint NumberOfLines { get; set; }

		[Export ("adjustsFontSizeToFitWidth")]
		bool AdjustsFontSizeToFitWidth { get; set; }

		[Export ("minimumScaleFactor")]
		nfloat MinimumScaleFactor { get; set; }

		[Export ("allowsDefaultTighteningForTruncation")]
		bool AllowsDefaultTighteningForTruncation { get; set; }

		[Export ("adjustsFontForContentSizeCategory")]
		bool AdjustsFontForContentSizeCategory { get; set; }

		[Export ("transform", ArgumentSemantic.Assign)]
		UIListContentTextTransform Transform { get; set; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("showsExpansionTextWhenTruncated")]
		bool ShowsExpansionTextWhenTruncated { get; set; }
	}

	interface UIPointerLockStateDidChangeEventArgs {
		[NoTV, iOS (14, 0)]
		[MacCatalyst (14, 0)]
		[NullAllowed]
		[Export ("UIPointerLockStateSceneUserInfoKey")]
		UIScene Scene { get; }
	}

	[NoTV, iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPointerLockState {

		[Field ("UIPointerLockStateDidChangeNotification")]
		[Notification (typeof (UIPointerLockStateDidChangeEventArgs))]
		NSString DidChangeNotification { get; }

		[Export ("locked")]
		bool Locked { [Bind ("isLocked")] get; }
	}

	[NoTV, iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIScribbleInteraction : UIInteraction {

		[Export ("initWithDelegate:")]
		[DesignatedInitializer]
		NativeHandle Constructor (IUIScribbleInteractionDelegate @delegate);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIScribbleInteractionDelegate Delegate { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[Export ("handlingWriting")]
		bool HandlingWriting { [Bind ("isHandlingWriting")] get; }

		[Static]
		[Export ("pencilInputExpected")]
		bool PencilInputExpected { [Bind ("isPencilInputExpected")] get; }
	}

	interface IUIScribbleInteractionDelegate { }

	[NoTV, iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIScribbleInteractionDelegate {

		[Export ("scribbleInteraction:shouldBeginAtLocation:")]
		bool ShouldBegin (UIScribbleInteraction interaction, CGPoint location);

		[Export ("scribbleInteractionShouldDelayFocus:")]
		bool ShouldDelayFocus (UIScribbleInteraction interaction);

		[Export ("scribbleInteractionWillBeginWriting:")]
		void WillBeginWriting (UIScribbleInteraction interaction);

		[Export ("scribbleInteractionDidFinishWriting:")]
		void DidFinishWriting (UIScribbleInteraction interaction);
	}

	interface IUISearchSuggestion { }

	[TV (14, 0), iOS (16, 0)]
	[MacCatalyst (16, 0)]
	[Protocol]
	interface UISearchSuggestion {

		[Abstract]
		[NullAllowed, Export ("localizedSuggestion")]
		NSString LocalizedSuggestion { get; }

		[return: NullAllowed]
		[Export ("localizedDescription")]
		NSString GetLocalizedDescription ();

		[return: NullAllowed]
		[Export ("iconImage")]
		UIImage GetIconImage ();

		[NoTV, iOS (16, 0)]
		[MacCatalyst (16, 0)]
#if XAMCORE_5_0
		[Abstract]
#endif
		[NullAllowed]
		[Export ("localizedAttributedSuggestion")]
		NSAttributedString LocalizedAttributedSuggestion { get; }

		[TV (16, 0), iOS (16, 0)]
		[MacCatalyst (16, 0)]
#if XAMCORE_5_0
		[Abstract]
#endif
		[NullAllowed, Export ("representedObject", ArgumentSemantic.Strong)]
		NSObject RepresentedObject { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[Static, Partial]
	interface UIConfigurationColorTransformer {

		// Manually bound inside UIKit/UIConfigurationColorTransformer.cs
		[Internal]
		[Field ("UIConfigurationColorTransformerGrayscale")]
		IntPtr _Grayscale { get; }

#if XAMCORE_5_0
		[Internal]
#else
		[Obsolete ("Use the 'PreferredTint' property instead.")]
#endif
		[Field ("UIConfigurationColorTransformerPreferredTint")]
		IntPtr _PreferredTint { get; }

#if XAMCORE_5_0
		[Internal]
#else
		[Obsolete ("Use the 'MonochromeTint' property instead.")]
#endif
		[Field ("UIConfigurationColorTransformerMonochromeTint")]
		IntPtr _MonochromeTint { get; }
	}

	[TV (14, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISearchSuggestionItem : UISearchSuggestion {

		[Static]
		[Export ("suggestionWithLocalizedSuggestion:")]
		UISearchSuggestionItem Create (NSString localizedSuggestion);

		[Static]
		[Export ("suggestionWithLocalizedSuggestion:descriptionString:")]
		UISearchSuggestionItem Create (NSString localizedSuggestion, [NullAllowed] string description);

		[Static]
		[Export ("suggestionWithLocalizedSuggestion:descriptionString:iconImage:")]
		UISearchSuggestionItem Create (NSString localizedSuggestion, [NullAllowed] string description, [NullAllowed] UIImage iconImage);

		[Export ("initWithLocalizedSuggestion:")]
		NativeHandle Constructor (NSString localizedSuggestion);

		[Export ("initWithLocalizedSuggestion:localizedDescription:")]
		NativeHandle Constructor (NSString localizedSuggestion, [NullAllowed] string description);

		[Export ("initWithLocalizedSuggestion:localizedDescription:iconImage:")]
		NativeHandle Constructor (NSString localizedSuggestion, [NullAllowed] string description, [NullAllowed] UIImage iconImage);

		// Inlined by the adopted protocol
		// [NullAllowed, Export ("localizedSuggestion")]
		// string LocalizedSuggestion { get; }

		// [NullAllowed, Export ("localizedDescription")]
		// string LocalizedDescription { get; }

		// [NullAllowed, Export ("iconImage")]
		// UIImage IconImage { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("suggestionWithLocalizedAttributedSuggestion:")]
		UISearchSuggestionItem Create (NSAttributedString suggestion);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("suggestionWithLocalizedAttributedSuggestion:descriptionString:")]
		UISearchSuggestionItem Create (NSAttributedString localizedSuggestion, [NullAllowed] string description);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("suggestionWithLocalizedAttributedSuggestion:descriptionString:iconImage:")]
		UISearchSuggestionItem Create (NSAttributedString localizedSuggestion, [NullAllowed] string description, [NullAllowed] UIImage iconImage);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("initWithLocalizedAttributedSuggestion:")]
		NativeHandle Constructor (NSAttributedString localizedSuggestion);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("initWithLocalizedAttributedSuggestion:localizedDescription:")]
		NativeHandle Constructor (NSAttributedString localizedSuggestion, [NullAllowed] string description);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("initWithLocalizedAttributedSuggestion:localizedDescription:iconImage:")]
		NativeHandle Constructor (NSAttributedString localizedSuggestion, [NullAllowed] string description, [NullAllowed] UIImage iconImage);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("localizedAttributedSuggestion")]
		[NullAllowed]
		new NSAttributedString LocalizedAttributedSuggestion { get; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[NullAllowed, Export ("representedObject", ArgumentSemantic.Strong)]
		new NSObject RepresentedObject { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIViewConfigurationState : UIConfigurationState {

		[Export ("initWithTraitCollection:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UITraitCollection traitCollection);

		[Export ("traitCollection", ArgumentSemantic.Strong)]
		new UITraitCollection TraitCollection { get; set; }

		[Export ("disabled")]
		bool Disabled { [Bind ("isDisabled")] get; set; }

		[Export ("highlighted")]
		bool Highlighted { [Bind ("isHighlighted")] get; set; }

		[Export ("selected")]
		bool Selected { [Bind ("isSelected")] get; set; }

		[Export ("focused")]
		bool Focused { [Bind ("isFocused")] get; set; }

		[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
		[Export ("pinned")]
		bool Pinned { [Bind ("isPinned")] get; set; }
	}

	// TODO: Our trampolines generator does not support generic delegate definitions
	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	interface UICollectionViewDiffableDataSourceSectionSnapshotHandlers<ItemType> : NSCopying
		where ItemType : NSObject {

		// 	[NullAllowed, Export ("shouldExpandItemHandler", ArgumentSemantic.Copy)]
		// 	Func<ItemType, bool> ShouldExpandItemHandler { get; set; }

		// 	[NullAllowed, Export ("willExpandItemHandler", ArgumentSemantic.Copy)]
		// 	Action<ItemType> WillExpandItemHandler { get; set; }

		// 	[NullAllowed, Export ("shouldCollapseItemHandler", ArgumentSemantic.Copy)]
		// 	Func<ItemType, bool> ShouldCollapseItemHandler { get; set; }

		// 	[NullAllowed, Export ("willCollapseItemHandler", ArgumentSemantic.Copy)]
		// 	Action<ItemType> WillCollapseItemHandler { get; set; }

		// 	[NullAllowed, Export ("snapshotForExpandingParentItemHandler", ArgumentSemantic.Copy)]
		// 	Func<ItemType, NSDiffableDataSourceSectionSnapshot<ItemType>, NSDiffableDataSourceSectionSnapshot<ItemType>> SnapshotForExpandingParentItemHandler { get; set; }
	}

	// TODO: Our trampolines generator does not support generic delegate definitions
	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[BaseType (typeof (NSObject))]
	interface UICollectionViewDiffableDataSourceReorderingHandlers<SectionType, ItemType> : NSCopying
		where SectionType : NSObject
		where ItemType : NSObject {

		// [NullAllowed, Export ("canReorderItemHandler", ArgumentSemantic.Copy)]
		// Func<ItemType, bool> CanReorderItemHandler { get; set; }

		// [NullAllowed, Export ("willReorderHandler", ArgumentSemantic.Copy)]
		// Action<NSDiffableDataSourceTransaction<SectionType, ItemType>> WillReorderHandler { get; set; }

		// [NullAllowed, Export ("didReorderHandler", ArgumentSemantic.Copy)]
		// Action<NSDiffableDataSourceTransaction<SectionType, ItemType>> DidReorderHandler { get; set; }
	}

	[TV (14, 0), iOS (14, 0)]
	[MacCatalyst (14, 0)]
	[Native]
	public enum UIListContentTextTransform : long {
		None,
		Uppercase,
		Lowercase,
		Capitalized,
	}

	[NoTV, iOS (14, 5)]
	[MacCatalyst (14, 5)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIEventAttribution : NSCopying {

		[Export ("sourceIdentifier")]
		byte SourceIdentifier { get; }

		[Export ("destinationURL", ArgumentSemantic.Copy)]
		NSUrl DestinationUrl { get; }

		[NullAllowed, Export ("reportEndpoint", ArgumentSemantic.Copy)]
		NSUrl ReportEndpoint { get; }

		[Export ("sourceDescription")]
		string SourceDescription { get; }

		[Export ("purchaser")]
		string Purchaser { get; }

		[Export ("initWithSourceIdentifier:destinationURL:sourceDescription:purchaser:")]
		NativeHandle Constructor (byte sourceIdentifier, NSUrl destinationUrl, string sourceDescription, string purchaser);
	}

	[NoTV, iOS (14, 5)]
	[MacCatalyst (14, 5)]
	[BaseType (typeof (UIView))]
	interface UIEventAttributionView {

		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);
	}

	[NoTV, iOS (14, 5)]
	[MacCatalyst (14, 5)]
	[Native]
	public enum UIListSeparatorVisibility : long {
		Automatic,
		Visible,
		Hidden,
	}

	[NoTV, iOS (14, 5)]
	[MacCatalyst (14, 5)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIListSeparatorConfiguration : NSCopying, NSSecureCoding {

		[Export ("initWithListAppearance:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UICollectionLayoutListAppearance listAppearance);

		[Export ("topSeparatorVisibility", ArgumentSemantic.Assign)]
		UIListSeparatorVisibility TopSeparatorVisibility { get; set; }

		[Export ("bottomSeparatorVisibility", ArgumentSemantic.Assign)]
		UIListSeparatorVisibility BottomSeparatorVisibility { get; set; }

		[Export ("topSeparatorInsets", ArgumentSemantic.Assign)]
		NSDirectionalEdgeInsets TopSeparatorInsets { get; set; }

		[Export ("bottomSeparatorInsets", ArgumentSemantic.Assign)]
		NSDirectionalEdgeInsets BottomSeparatorInsets { get; set; }

		[Export ("color", ArgumentSemantic.Strong)]
		UIColor Color { get; set; }

		[Export ("multipleSelectionColor", ArgumentSemantic.Strong)]
		UIColor MultipleSelectionColor { get; set; }

		[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
		[NullAllowed, Export ("visualEffect", ArgumentSemantic.Copy)]
		UIVisualEffect VisualEffect { get; set; }
	}

	[NoTV, iOS (14, 5)]
	[MacCatalyst (14, 5)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPrinterDestination : NSSecureCoding {

		[Export ("initWithURL:")]
		NativeHandle Constructor (NSUrl url);

		[Export ("URL", ArgumentSemantic.Copy)]
		NSUrl Url { get; set; }

		[NullAllowed, Export ("displayName")]
		string DisplayName { get; set; }

		[NullAllowed, Export ("txtRecord", ArgumentSemantic.Copy)]
		NSData TxtRecord { get; set; }
	}

	interface IUIActivityItemsConfigurationProviding { }

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[Protocol]
	interface UIActivityItemsConfigurationProviding {

		[Abstract]
		[Export ("activityItemsConfiguration", ArgumentSemantic.Strong)]
		[NullAllowed]
		IUIActivityItemsConfigurationReading ActivityItemsConfiguration { get; }
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	delegate bool UIBandSelectionInteractionShouldBeginHandler (UIBandSelectionInteraction interaction, CGPoint point);

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIBandSelectionInteraction : UIInteraction {

		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Export ("state")]
		UIBandSelectionInteractionState State { get; }

		[Export ("selectionRect")]
		CGRect SelectionRect { get; }

		[Export ("initialModifierFlags")]
		UIKeyModifierFlags InitialModifierFlags { get; }

		[NullAllowed, Export ("shouldBeginHandler", ArgumentSemantic.Copy)]
		UIBandSelectionInteractionShouldBeginHandler ShouldBeginHandler { get; set; }

		[Export ("initWithSelectionHandler:")]
		NativeHandle Constructor (Action<UIBandSelectionInteraction> selectionHandler);
	}

	[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
	delegate NSDictionary UIConfigurationTextAttributesTransformerHandler (NSDictionary textAttributes);

	[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIButtonConfiguration : NSCopying, NSSecureCoding {

		[Static]
		[Export ("plainButtonConfiguration")]
		UIButtonConfiguration PlainButtonConfiguration { get; }

		[Static]
		[Export ("tintedButtonConfiguration")]
		UIButtonConfiguration TintedButtonConfiguration { get; }

		[Static]
		[Export ("grayButtonConfiguration")]
		UIButtonConfiguration GrayButtonConfiguration { get; }

		[Static]
		[Export ("filledButtonConfiguration")]
		UIButtonConfiguration FilledButtonConfiguration { get; }

		[Static]
		[Export ("borderlessButtonConfiguration")]
		UIButtonConfiguration BorderlessButtonConfiguration { get; }

		[Static]
		[Export ("borderedButtonConfiguration")]
		UIButtonConfiguration BorderedButtonConfiguration { get; }

		[Static]
		[Export ("borderedTintedButtonConfiguration")]
		UIButtonConfiguration BorderedTintedButtonConfiguration { get; }

		[Static]
		[Export ("borderedProminentButtonConfiguration")]
		UIButtonConfiguration BorderedProminentButtonConfiguration { get; }

		[Export ("updatedConfigurationForButton:")]
		UIButtonConfiguration GetUpdatedConfiguration (UIButton button);

		[Export ("background", ArgumentSemantic.Strong)]
		UIBackgroundConfiguration Background { get; set; }

		[Export ("cornerStyle", ArgumentSemantic.Assign)]
		UIButtonConfigurationCornerStyle CornerStyle { get; set; }

		[Export ("buttonSize", ArgumentSemantic.Assign)]
		UIButtonConfigurationSize ButtonSize { get; set; }

		[Export ("macIdiomStyle", ArgumentSemantic.Assign)]
		UIButtonConfigurationMacIdiomStyle MacIdiomStyle { get; set; }

		[NullAllowed, Export ("baseForegroundColor", ArgumentSemantic.Strong)]
		UIColor BaseForegroundColor { get; set; }

		[NullAllowed, Export ("baseBackgroundColor", ArgumentSemantic.Strong)]
		UIColor BaseBackgroundColor { get; set; }

		[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; set; }

		[NullAllowed, Export ("imageColorTransformer", ArgumentSemantic.Copy)]
		UIConfigurationColorTransformerHandler ImageColorTransformer { get; set; }

		[NullAllowed, Export ("preferredSymbolConfigurationForImage", ArgumentSemantic.Copy)]
		UIImageSymbolConfiguration PreferredSymbolConfigurationForImage { get; set; }

		[Export ("showsActivityIndicator")]
		bool ShowsActivityIndicator { get; set; }

		[NullAllowed, Export ("activityIndicatorColorTransformer", ArgumentSemantic.Copy)]
		UIConfigurationColorTransformerHandler ActivityIndicatorColorTransformer { get; set; }

		[NullAllowed, Export ("title")]
		string Title { get; set; }

		[NullAllowed, Export ("attributedTitle", ArgumentSemantic.Copy)]
		NSAttributedString AttributedTitle { get; set; }

		[NullAllowed, Export ("titleTextAttributesTransformer", ArgumentSemantic.Copy)]
		UIConfigurationTextAttributesTransformerHandler TitleTextAttributesTransformer { get; set; }

		[NullAllowed, Export ("titleLineBreakMode", ArgumentSemantic.Assign)]
		UILineBreakMode TitleLineBreakMode { get; set; }

		[NullAllowed, Export ("subtitle")]
		string Subtitle { get; set; }

		[NullAllowed, Export ("attributedSubtitle", ArgumentSemantic.Copy)]
		NSAttributedString AttributedSubtitle { get; set; }

		[NullAllowed, Export ("subtitleTextAttributesTransformer", ArgumentSemantic.Copy)]
		UIConfigurationTextAttributesTransformerHandler SubtitleTextAttributesTransformer { get; set; }

		[NullAllowed, Export ("subtitleLineBreakMode", ArgumentSemantic.Assign)]
		UILineBreakMode SubtitleLineBreakMode { get; set; }

		[Export ("contentInsets", ArgumentSemantic.Assign)]
		NSDirectionalEdgeInsets ContentInsets { get; set; }

		[Export ("setDefaultContentInsets")]
		void SetDefaultContentInsets ();

		[Export ("imagePlacement", ArgumentSemantic.Assign)]
		NSDirectionalRectEdge ImagePlacement { get; set; }

		[Export ("imagePadding")]
		nfloat ImagePadding { get; set; }

		[Export ("titlePadding")]
		nfloat TitlePadding { get; set; }

		[Export ("titleAlignment", ArgumentSemantic.Assign)]
		UIButtonConfigurationTitleAlignment TitleAlignment { get; set; }

		[Export ("automaticallyUpdateForSelection")]
		bool AutomaticallyUpdateForSelection { get; set; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("indicator", ArgumentSemantic.Assign)]
		UIButtonConfigurationIndicator Indicator { get; set; }

		[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("indicatorColorTransformer", ArgumentSemantic.Copy)]
		[NullAllowed]
		UIConfigurationColorTransformerHandler IndicatorColorTransformer { get; set; }
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIFocusEffect : NSCopying {

		[Static]
		[Export ("effect")]
		UIFocusEffect Create ();
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (UIFocusEffect))]
	[DisableDefaultCtor]
	interface UIFocusHaloEffect {

		[Static]
		[Export ("effectWithRect:")]
		UIFocusHaloEffect Create (CGRect rect);

		[Static]
		[Export ("effectWithRoundedRect:cornerRadius:curve:")]
		UIFocusHaloEffect Create (CGRect rect, nfloat cornerRadius, string curve);

		[Static]
		[Export ("effectWithPath:")]
		UIFocusHaloEffect Create (UIBezierPath bezierPath);

		[NullAllowed, Export ("containerView", ArgumentSemantic.Weak)]
		UIView ContainerView { get; set; }

		[NullAllowed, Export ("referenceView", ArgumentSemantic.Weak)]
		UIView ReferenceView { get; set; }

		[Export ("position", ArgumentSemantic.Assign)]
		UIFocusHaloEffectPosition Position { get; set; }
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (UITrackingLayoutGuide))]
	interface UIKeyboardLayoutGuide {

		[Export ("followsUndockedKeyboard")]
		bool FollowsUndockedKeyboard { get; set; }

		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("usesBottomSafeArea")]
		bool UsesBottomSafeArea { get; set; }

		[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("keyboardDismissPadding")]
		nfloat KeyboardDismissPadding { get; set; }
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISheetPresentationControllerDetent {

		[Field ("UISheetPresentationControllerAutomaticDimension")]
		nfloat AutomaticDimension { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Field ("UISheetPresentationControllerDetentInactive")]
		nfloat DetentInactive { get; }

		[Static]
		[Export ("mediumDetent")]
		UISheetPresentationControllerDetent CreateMediumDetent ();

		[Static]
		[Export ("largeDetent")]
		UISheetPresentationControllerDetent CreateLargeDetent ();


		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("identifier", ArgumentSemantic.Strong)]
		string Identifier { get; }

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Static]
		[Export ("customDetentWithIdentifier:resolver:")]
		UISheetPresentationControllerDetent Create ([NullAllowed] string identifier, Func<IUISheetPresentationControllerDetentResolutionContext, nfloat> resolver);

		[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
		[Export ("resolvedValueInContext:")]
		nfloat GetResolvedValue (IUISheetPresentationControllerDetentResolutionContext context);
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	interface UIToolTipInteraction : UIInteraction {

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIToolTipInteractionDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[NullAllowed, Export ("defaultToolTip")]
		string DefaultToolTip { get; set; }

		[Export ("initWithDefaultToolTip:")]
		NativeHandle Constructor (string defaultToolTip);
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIToolTipConfiguration {

		[Export ("toolTip")]
		string ToolTip { get; }

		[Export ("sourceRect")]
		CGRect SourceRect { get; }

		[Static]
		[Export ("configurationWithToolTip:")]
		UIToolTipConfiguration Create (string toolTip);

		[Static]
		[Export ("configurationWithToolTip:inRect:")]
		UIToolTipConfiguration Create (string toolTip, CGRect sourceRect);
	}

	interface IUIToolTipInteractionDelegate { }

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIToolTipInteractionDelegate {

		[Export ("toolTipInteraction:configurationAtPoint:")]
		[return: NullAllowed]
		UIToolTipConfiguration GetConfiguration (UIToolTipInteraction interaction, CGPoint point);
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (UILayoutGuide))]
	interface UITrackingLayoutGuide {

		[Export ("setConstraints:activeWhenNearEdge:")]
		void SetConstraintsActiveWhenNear (NSLayoutConstraint [] trackingConstraints, NSDirectionalRectEdge edge);

		[Export ("constraintsActiveWhenNearEdge:")]
		NSLayoutConstraint [] GetConstraintsActiveWhenNear (NSDirectionalRectEdge edge);

		[Export ("setConstraints:activeWhenAwayFromEdge:")]
		void SetConstraintsActiveWhenAway (NSLayoutConstraint [] trackingConstraints, NSDirectionalRectEdge edge);

		[Export ("constraintsActiveWhenAwayFromEdge:")]
		NSLayoutConstraint [] GetConstraintsActiveWhenAway (NSDirectionalRectEdge edge);

		[Export ("removeAllTrackedConstraints")]
		void RemoveAllTrackedConstraints ();
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[return: NullAllowed]
	delegate UIWindowSceneActivationConfiguration UIWindowSceneActivationActionConfigurationProvider (UIWindowSceneActivationAction action);

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (UIAction))]
	[DisableDefaultCtor]
	interface UIWindowSceneActivationAction {

		[NullAllowed, Export ("title")]
		string Title { get; set; }

		[Static]
		[Export ("actionWithIdentifier:alternateAction:configurationProvider:")]
		UIWindowSceneActivationAction Create ([NullAllowed][BindAs (typeof (UIActionIdentifier))] NSString identifier, [NullAllowed] UIAction alternateAction, UIWindowSceneActivationActionConfigurationProvider configurationProvider);
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIWindowSceneActivationConfiguration {

		[Export ("userActivity", ArgumentSemantic.Strong)]
		NSUserActivity UserActivity { get; }

		[NullAllowed, Export ("options", ArgumentSemantic.Strong)]
		UIWindowSceneActivationRequestOptions Options { get; set; }

		[NullAllowed, Export ("preview", ArgumentSemantic.Strong)]
		UITargetedPreview Preview { get; set; }

		[Export ("initWithUserActivity:")]
		[DesignatedInitializer]
		NativeHandle Constructor (NSUserActivity userActivity);
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[return: NullAllowed]
	delegate UIWindowSceneActivationConfiguration UIWindowSceneActivationInteractionConfigurationProvider (UIWindowSceneActivationInteraction interaction, CGPoint location);

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIWindowSceneActivationInteraction : UIInteraction {

		[Export ("initWithConfigurationProvider:errorHandler:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIWindowSceneActivationInteractionConfigurationProvider configurationProvider, Action<NSError> errorHandler);
	}

	[TV (15, 0), iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (UISceneActivationRequestOptions))]
	interface UIWindowSceneActivationRequestOptions {

		[Obsoleted (PlatformName.iOS, 17, 0, message: "Use the property 'Placement' instead.")]
		[Obsoleted (PlatformName.TvOS, 17, 0, message: "Use the property 'Placement' instead.")]
		[Obsoleted (PlatformName.MacCatalyst, 17, 0, message: "Use the property 'Placement' instead.")]
		[Export ("preferredPresentationStyle", ArgumentSemantic.Assign)]
		UIWindowScenePresentationStyle PreferredPresentationStyle { get; set; }

		[NullAllowed]
		[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
		[Export ("placement", ArgumentSemantic.Copy)]
		UIWindowScenePlacement Placement { get; set; }
	}

	[NoTV, iOS (15, 0), MacCatalyst (15, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIPointerAccessory : NSCopying {

		[Export ("shape", ArgumentSemantic.Copy)]
		UIPointerShape Shape { get; }

		[Export ("position")]
		UIPointerAccessoryPosition Position { get; }

		[Export ("orientationMatchesAngle")]
		bool OrientationMatchesAngle { get; set; }

		[Static]
		[Export ("accessoryWithShape:position:")]
		UIPointerAccessory Create (UIPointerShape shape, UIPointerAccessoryPosition position);

		[Static]
		[Export ("arrowAccessoryWithPosition:")]
		UIPointerAccessory CreateArrow (UIPointerAccessoryPosition position);
	}

	[NoiOS]
	[NoTV]
	[MacCatalyst (13, 1)]
	[Native]
	public enum UITitlebarTitleVisibility : long {
		Visible,
		Hidden,
	}

	[MacCatalyst (14, 0)]
	[NoiOS]
	[NoTV]
	[Native]
	public enum UITitlebarToolbarStyle : long {
		Automatic,
		Expanded,
		Preference,
		Unified,
		UnifiedCompact,
	}

	[NoiOS]
	[NoTV]
	[MacCatalyst (13, 1)]
	[BaseType (typeof (NSObject))]
	interface UITitlebar {
		[Export ("titleVisibility", ArgumentSemantic.Assign)]
		UITitlebarTitleVisibility TitleVisibility { get; set; }

		[MacCatalyst (14, 0)]
		[Export ("toolbarStyle", ArgumentSemantic.Assign)]
		UITitlebarToolbarStyle ToolbarStyle { get; set; }

		[MacCatalyst (14, 0)]
		[Export ("separatorStyle", ArgumentSemantic.Assign)]
		UITitlebarSeparatorStyle SeparatorStyle { get; set; }

		[NullAllowed, Export ("toolbar", ArgumentSemantic.Strong)]
		NSToolbar Toolbar { get; set; }

		[Export ("autoHidesToolbarInFullScreen")]
		bool AutoHidesToolbarInFullScreen { get; set; }

		[NullAllowed, Export ("representedURL", ArgumentSemantic.Copy)]
		NSUrl RepresentedUrl { get; set; }
	}

	[TV (15, 4), iOS (15, 4), MacCatalyst (15, 4)]
	[BaseType (typeof (UICellAccessory))]
	[DesignatedDefaultCtor]
	interface UICellAccessoryDetail {

		[NullAllowed, Export ("actionHandler", ArgumentSemantic.Copy)]
		Action ActionHandler { get; set; }
	}

	interface IUICalendarSelectionMultiDateDelegate { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UICalendarSelectionMultiDateDelegate {
		[Abstract]
		[Export ("multiDateSelection:didSelectDate:")]
		void DidSelectDate (UICalendarSelectionMultiDate selection, NSDateComponents dateComponents);

		[Abstract]
		[Export ("multiDateSelection:didDeselectDate:")]
		void DidDeselectDate (UICalendarSelectionMultiDate selection, NSDateComponents dateComponents);

		[Export ("multiDateSelection:canSelectDate:")]
		bool CanSelectDate (UICalendarSelectionMultiDate selection, NSDateComponents dateComponents);

		[Export ("multiDateSelection:canDeselectDate:")]
		bool CanDeselectDate (UICalendarSelectionMultiDate selection, NSDateComponents dateComponents);
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (UICalendarSelection))]
	interface UICalendarSelectionMultiDate {
		[Export ("selectedDates", ArgumentSemantic.Copy)]
		NSDateComponents [] SelectedDates { get; set; }

		[Export ("setSelectedDates:animated:")]
		void SetSelectedDates (NSDateComponents [] selectedDates, bool animated);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUICalendarSelectionMultiDateDelegate Delegate { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[Export ("initWithDelegate:")]
		NativeHandle Constructor ([NullAllowed] IUICalendarSelectionMultiDateDelegate @delegate);
	}

	interface IUICalendarSelectionSingleDateDelegate { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UICalendarSelectionSingleDateDelegate {
		[Abstract]
		[Export ("dateSelection:didSelectDate:")]
		void DidSelectDate (UICalendarSelectionSingleDate selection, [NullAllowed] NSDateComponents dateComponents);

		[Export ("dateSelection:canSelectDate:")]
		bool CanSelectDate (UICalendarSelectionSingleDate selection, [NullAllowed] NSDateComponents dateComponents);
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UICalendarSelection {
		[Export ("updateSelectableDates")]
		void UpdateSelectableDates ();
	}


	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (UICalendarSelection))]
	interface UICalendarSelectionSingleDate {
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUICalendarSelectionSingleDateDelegate Delegate { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[NullAllowed, Export ("selectedDate", ArgumentSemantic.Copy)]
		NSDateComponents SelectedDate { get; set; }

		[Export ("setSelectedDate:animated:")]
		void SetSelectedDate ([NullAllowed] NSDateComponents selectedDate, bool animated);

		[Export ("initWithDelegate:")]
		NativeHandle Constructor ([NullAllowed] IUICalendarSelectionSingleDateDelegate @delegate);
	}

	interface IUICalendarViewDelegate { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UICalendarViewDelegate {
		[Abstract]
		[Export ("calendarView:decorationForDateComponents:")]
		[return: NullAllowed]
		UICalendarViewDecoration GetDecoration (UICalendarView calendarView, NSDateComponents dateComponents);

		[iOS (16, 2), MacCatalyst (16, 0)]
		[Export ("calendarView:didChangeVisibleDateComponentsFrom:")]
		void DidChangeVisibleDateComponents (UICalendarView calendarView, NSDateComponents previousDateComponents);
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	interface UICalendarViewDecoration {
		[Export ("initWithImage:color:size:")]
		NativeHandle Constructor ([NullAllowed] UIImage image, [NullAllowed] UIColor color, UICalendarViewDecorationSize size);

		[Export ("initWithCustomViewProvider:")]
		NativeHandle Constructor (Func<UIView> customViewProvider);

		[Static]
		[Export ("decorationWithColor:size:")]
		UICalendarViewDecoration Create ([NullAllowed] UIColor color, UICalendarViewDecorationSize size);

		[Static]
		[Export ("decorationWithImage:")]
		UICalendarViewDecoration Create ([NullAllowed] UIImage image);

		[Static]
		[Export ("decorationWithImage:color:size:")]
		UICalendarViewDecoration Create ([NullAllowed] UIImage image, [NullAllowed] UIColor color, UICalendarViewDecorationSize size);

		[Static]
		[Export ("decorationWithCustomViewProvider:")]
		UICalendarViewDecoration Create (Func<UIView> customViewProvider);
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (UIView))]
	interface UICalendarView {

		[DesignatedInitializer]
		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUICalendarViewDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[NullAllowed, Export ("selectionBehavior", ArgumentSemantic.Strong)]
		UICalendarSelection SelectionBehavior { get; set; }

		[Export ("locale", ArgumentSemantic.Strong)]
		NSLocale Locale { get; set; }

		[Export ("calendar", ArgumentSemantic.Copy)]
		NSCalendar Calendar { get; set; }

		[NullAllowed, Export ("timeZone", ArgumentSemantic.Strong)]
		NSTimeZone TimeZone { get; set; }

		[Export ("fontDesign")]
		string FontDesign { get; set; }

		[Export ("availableDateRange", ArgumentSemantic.Copy)]
		NSDateInterval AvailableDateRange { get; set; }

		[Export ("visibleDateComponents", ArgumentSemantic.Copy)]
		NSDateComponents VisibleDateComponents { get; set; }

		[Export ("setVisibleDateComponents:animated:")]
		void SetVisibleDateComponents (NSDateComponents dateComponents, bool animated);

		[Export ("wantsDateDecorations")]
		bool WantsDateDecorations { get; set; }

		[Export ("reloadDecorationsForDateComponents:animated:")]
		void ReloadDecorations (NSDateComponents [] dates, bool animated);
	}


	interface IUIEditMenuInteractionAnimating { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol]
	interface UIEditMenuInteractionAnimating {
		[Abstract]
		[Export ("addAnimations:")]
		void AddAnimations (Action animations);

		[Abstract]
		[Export ("addCompletion:")]
		void AddCompletion (Action completion);
	}

	interface IUIEditMenuInteractionDelegate { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIEditMenuInteractionDelegate {
		[Export ("editMenuInteraction:menuForConfiguration:suggestedActions:")]
		[return: NullAllowed]
		UIMenu GetMenu (UIEditMenuInteraction interaction, UIEditMenuConfiguration configuration, UIMenuElement [] suggestedActions);

		[Export ("editMenuInteraction:targetRectForConfiguration:")]
		CGRect GetTargetRect (UIEditMenuInteraction interaction, UIEditMenuConfiguration configuration);

		[Export ("editMenuInteraction:willPresentMenuForConfiguration:animator:")]
		void WillPresentMenu (UIEditMenuInteraction interaction, UIEditMenuConfiguration configuration, IUIEditMenuInteractionAnimating animator);

		[Export ("editMenuInteraction:willDismissMenuForConfiguration:animator:")]
		void WillDismissMenu (UIEditMenuInteraction interaction, UIEditMenuConfiguration configuration, IUIEditMenuInteractionAnimating animator);
	}

	interface IUILayoutGuideAspectFitting { }

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol]
	interface UILayoutGuideAspectFitting {
		[Abstract]
		[Export ("aspectRatio")]
		nfloat AspectRatio { get; set; }
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol]
	interface UIMenuLeaf {
		[Abstract]
		[Export ("title")]
		string Title { get; set; }

		[Abstract]
		[NullAllowed, Export ("image", ArgumentSemantic.Copy)]
		UIImage Image { get; set; }

		[Abstract]
		[NullAllowed, Export ("discoverabilityTitle")]
		string DiscoverabilityTitle { get; set; }

		[Abstract]
		[Export ("attributes", ArgumentSemantic.Assign)]
		UIMenuElementAttributes Attributes { get; set; }

		[Abstract]
		[Export ("state", ArgumentSemantic.Assign)]
		UIMenuElementState State { get; set; }

		[Abstract]
		[NullAllowed, Export ("sender")]
		NSObject Sender { get; }

		[NoTV, iOS (16, 0)]
		[MacCatalyst (16, 0)]
		[Abstract]
		[Export ("presentationSourceItem")]
		IUIPopoverPresentationControllerSourceItem PresentationSourceItem { get; }

		[Abstract]
		[Export ("performWithSender:target:")]
		void Target ([NullAllowed] NSObject sender, [NullAllowed] NSObject target);

		[iOS (17, 0)]
#if XAMCORE_5_0
		[Abstract]
#endif
		[Export ("selectedImage", ArgumentSemantic.Copy)]
		UIImage SelectedImage { get; set; }
	}

	interface IUINavigationItemRenameDelegate { }

	interface IUIPopoverPresentationControllerSourceItem { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0), NoMac]
	[Protocol]
	interface UIPopoverPresentationControllerSourceItem {

		[NoTV, iOS (17, 0)]
#if XAMCORE_5_0
		[Abstract]
#endif
		[Export ("frameInView:")]
		CGRect GetFrame (UIView referenceView);
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UINavigationItemRenameDelegate {
		[Abstract]
		[Export ("navigationItem:didEndRenamingWithTitle:")]
		void DidEndRenaming (UINavigationItem navigationItem, string title);

		[Export ("navigationItemShouldBeginRenaming:")]
		bool ShouldBeginRenaming (UINavigationItem navigationItem);

		[Export ("navigationItem:willBeginRenamingWithSuggestedTitle:selectedRange:")]
		string WillBeginRenaming (UINavigationItem navigationItem, string title, NSRange selectedRange);

		[Export ("navigationItem:shouldEndRenamingWithTitle:")]
		bool ShouldEndRenaming (UINavigationItem navigationItem, string title);
	}

	interface IUISheetPresentationControllerDetentResolutionContext { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol]
	interface UISheetPresentationControllerDetentResolutionContext {
		[Abstract]
		[Export ("containerTraitCollection")]
		UITraitCollection ContainerTraitCollection { get; }

		[Abstract]
		[Export ("maximumDetentValue")]
		nfloat MaximumDetentValue { get; }
	}

	interface IUITextSearchAggregator { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol]
	interface UITextSearchAggregator {
		[Abstract]
		[Export ("allFoundRanges")]
		NSOrderedSet<UITextRange> AllFoundRanges { get; }

		[Abstract]
		[Export ("foundRange:forSearchString:inDocument:")]
		void GetFoundRange (UITextRange range, string @string, [NullAllowed] INSCopying document);

		[Abstract]
		[Export ("invalidateFoundRange:inDocument:")]
		void Invalidate (UITextRange foundRange, [NullAllowed] INSCopying document);

		[Abstract]
		[Export ("finishedSearching")]
		void FinishedSearching ();

		[Abstract]
		[Export ("invalidate")]
		void Invalidate ();
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	interface UITextSearchOptions {
		[Export ("wordMatchMethod")]
		UITextSearchMatchMethod WordMatchMethod { get; }

		[Export ("stringCompareOptions")]
		NSStringCompareOptions StringCompareOptions { get; }
	}

	interface IUITextSearching { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[Protocol]
	interface UITextSearching {
		[Abstract]
		[NullAllowed, Export ("selectedTextRange")]
		UITextRange SelectedTextRange { get; }

		[Abstract]
		[Export ("compareFoundRange:toRange:inDocument:")]
		NSComparisonResult Compare (UITextRange foundRange, UITextRange toRange, [NullAllowed] INSCopying document);

		[Abstract]
		[Export ("performTextSearchWithQueryString:usingOptions:resultAggregator:")]
		void PerformTextSearch (string @string, UITextSearchOptions options, IUITextSearchAggregator aggregator);

		[Abstract]
		[Export ("decorateFoundTextRange:inDocument:usingStyle:")]
		void Decorate (UITextRange foundRange, [NullAllowed] INSCopying document, UITextSearchFoundTextStyle style);

		[Abstract]
		[Export ("clearAllDecoratedFoundText")]
		void ClearAllDecoratedFoundText ();

		[Export ("supportsTextReplacement")]
		bool SupportsTextReplacement { get; }

		[Export ("shouldReplaceFoundTextInRange:inDocument:withText:")]
		bool ShouldReplaceFoundText (UITextRange range, [NullAllowed] INSCopying document, string replacementText);

		[Export ("replaceFoundTextInRange:inDocument:withText:")]
		void ReplaceFoundText (UITextRange range, [NullAllowed] INSCopying document, string replacementText);

		[Export ("replaceAllOccurrencesOfQueryString:usingOptions:withText:")]
		void ReplaceAllOccurrences (string queryString, UITextSearchOptions options, string replacementText);

		[Export ("willHighlightFoundTextRange:inDocument:")]
		void WillHighlight (UITextRange foundRange, [NullAllowed] INSCopying document);

		[Export ("scrollRangeToVisible:inDocument:")]
		void ScrollRangeToVisible (UITextRange range, [NullAllowed] INSCopying document);

		[NullAllowed, Export ("selectedTextSearchDocument")]
		INSCopying SelectedTextSearchDocument { get; }

		[Export ("compareOrderFromDocument:toDocument:")]
		NSComparisonResult CompareOrder (INSCopying fromDocument, INSCopying toDocument);
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIEditMenuInteraction : UIInteraction {
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIEditMenuInteractionDelegate Delegate { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[Export ("initWithDelegate:")]
		NativeHandle Constructor ([NullAllowed] IUIEditMenuInteractionDelegate @delegate);

		[Export ("presentEditMenuWithConfiguration:")]
		void PresentEditMenu (UIEditMenuConfiguration configuration);

		[Export ("dismissMenu")]
		void DismissMenu ();

		[Export ("reloadVisibleMenu")]
		void ReloadVisibleMenu ();

		[Export ("updateVisibleMenuPositionAnimated:")]
		void UpdateVisibleMenuPosition (bool animated);

		[Export ("locationInView:")]
		CGPoint GetLocation ([NullAllowed] UIView inView);
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIEditMenuConfiguration {
		[Export ("identifier", ArgumentSemantic.Copy)]
		INSCopying Identifier { get; }

		[Export ("sourcePoint", ArgumentSemantic.Assign)]
		CGPoint SourcePoint { get; }

		[Export ("preferredArrowDirection", ArgumentSemantic.Assign)]
		UIEditMenuArrowDirection PreferredArrowDirection { get; set; }

		[Static]
		[Export ("configurationWithIdentifier:sourcePoint:")]
		UIEditMenuConfiguration Create ([NullAllowed] INSCopying identifier, CGPoint sourcePoint);
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (UICellAccessory))]
	[DisableDefaultCtor]
	interface UICellAccessoryPopUpMenu {
		[Export ("initWithMenu:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIMenu menu);

		[Export ("menu", ArgumentSemantic.Copy)]
		UIMenu Menu { get; }

		[NullAllowed, Export ("selectedElementDidChangeHandler", ArgumentSemantic.Copy)]
		Action<UIMenu> SelectedElementDidChangeHandler { get; set; }
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIDocumentProperties {
		[Export ("initWithURL:")]
		NativeHandle Constructor (NSUrl url);

		[Export ("initWithMetadata:")]
		NativeHandle Constructor (LPLinkMetadata metadata);

		[Export ("metadata", ArgumentSemantic.Copy)]
		LPLinkMetadata Metadata { get; set; }

		[NullAllowed, Export ("dragItemsProvider", ArgumentSemantic.Copy)]
		Func<IUIDragSession, NSArray<UIDragItem>> DragItemsProvider { get; set; }

		[NullAllowed, Export ("activityViewControllerProvider", ArgumentSemantic.Copy)]
		Func<UIActivityViewController> ActivityViewControllerProvider { get; set; }

		[Export ("wantsIconRepresentation")]
		bool WantsIconRepresentation { get; set; }
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[return: NullAllowed]
	delegate UIMenu OptionsMenuProviderHandler (UIMenuElement [] elements);

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIFindInteraction : UIInteraction {
		[Export ("findNavigatorVisible")]
		bool FindNavigatorVisible { [Bind ("isFindNavigatorVisible")] get; }

		[NullAllowed, Export ("activeFindSession")]
		UIFindSession ActiveFindSession { get; }

		[NullAllowed, Export ("searchText")]
		string SearchText { get; set; }

		[NullAllowed, Export ("replacementText")]
		string ReplacementText { get; set; }

		[NullAllowed, Export ("optionsMenuProvider", ArgumentSemantic.Copy)]
		OptionsMenuProviderHandler OptionsMenuProvider { get; set; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIFindInteractionDelegate Delegate { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[Export ("initWithSessionDelegate:")]
		[DesignatedInitializer]
		NativeHandle Constructor (IUIFindInteractionDelegate sessionDelegate);

		[Export ("presentFindNavigatorShowingReplace:")]
		void PresentFindNavigatorShowingReplace (bool showingReplace);

		[Export ("dismissFindNavigator")]
		void DismissFindNavigator ();

		[Export ("findNext")]
		void FindNext ();

		[Export ("findPrevious")]
		void FindPrevious ();

		[Export ("updateResultCount")]
		void UpdateResultCount ();
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	interface UIFindSession {
		[Export ("resultCount")]
		nint ResultCount { get; }

		[Export ("highlightedResultIndex")]
		nint HighlightedResultIndex { get; }

		[Export ("searchResultDisplayStyle", ArgumentSemantic.Assign)]
		UIFindSessionSearchResultDisplayStyle SearchResultDisplayStyle { get; set; }

		[Export ("performSearchWithQuery:options:")]
		void PerformSearch (string query, [NullAllowed] UITextSearchOptions options);

		[Export ("performSingleReplacementWithSearchQuery:replacementString:options:")]
		void PerformSingleReplacement (string searchQuery, string replacementString, [NullAllowed] UITextSearchOptions options);

		[Export ("replaceAllInstancesOfSearchQuery:withReplacementString:options:")]
		void ReplaceAllInstances (string searchQuery, string replacementString, [NullAllowed] UITextSearchOptions options);

		[Export ("highlightNextResultInDirection:")]
		void HighlightNextResult (UITextStorageDirection direction);

		[Export ("invalidateFoundResults")]
		void InvalidateFoundResults ();

		[Export ("supportsReplacement")]
		bool SupportsReplacement { get; }

		[Export ("allowsReplacementForCurrentlyHighlightedResult")]
		bool AllowsReplacementForCurrentlyHighlightedResult { get; }
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	interface UIPasteControlConfiguration : NSSecureCoding {
		[Export ("displayMode", ArgumentSemantic.Assign)]
		UIPasteControlDisplayMode DisplayMode { get; set; }

		[Export ("cornerStyle", ArgumentSemantic.Assign)]
		UIButtonConfigurationCornerStyle CornerStyle { get; set; }

		[Export ("cornerRadius")]
		nfloat CornerRadius { get; set; }

		[NullAllowed, Export ("baseForegroundColor", ArgumentSemantic.Strong)]
		UIColor BaseForegroundColor { get; set; }

		[NullAllowed, Export ("baseBackgroundColor", ArgumentSemantic.Strong)]
		UIColor BaseBackgroundColor { get; set; }

		[iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("imagePlacement", ArgumentSemantic.Assign)]
		NSDirectionalRectEdge ImagePlacement { get; set; }
	}

	interface IUIFindInteractionDelegate { }

	[NoTV, iOS (16, 0), MacCatalyst (16, 0), NoMac]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIFindInteractionDelegate {
		// This abstract method needs attributes since PDFKit.PDFView
		// implements this interface and has iOS 11 support. When inlining
		// this method, the attributes are not carried over and causes issues
		// since it is not supported until iOS 16
		[NoTV, iOS (16, 0), MacCatalyst (16, 0), NoMac]
		[Abstract]
		[Export ("findInteraction:sessionForView:")]
		[return: NullAllowed]
		UIFindSession GetSession (UIFindInteraction interaction, UIView view);

		[Export ("findInteraction:didBeginFindSession:")]
		void DidBeginFindSession (UIFindInteraction interaction, UIFindSession session);

		[Export ("findInteraction:didEndFindSession:")]
		void DidEndFindSession (UIFindInteraction interaction, UIFindSession session);
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISceneWindowingBehaviors {
		[Export ("closable")]
		bool Closable { [Bind ("isClosable")] get; set; }

		[Export ("miniaturizable")]
		bool Miniaturizable { [Bind ("isMiniaturizable")] get; set; }
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (UIFindSession))]
	[DisableDefaultCtor]
	interface UITextSearchingFindSession {
		[NullAllowed, Export ("searchableObject", ArgumentSemantic.Weak)]
		IUITextSearching SearchableObject { get; }

		[Export ("initWithSearchableObject:")]
		[DesignatedInitializer]
		NativeHandle Constructor (IUITextSearching searchableObject);
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIWindowSceneGeometry : NSCopying {
		[Export ("systemFrame")]
		CGRect SystemFrame { get; }

		[NoTV]
		[MacCatalyst (13, 1)]
		[Export ("interfaceOrientation")]
		UIInterfaceOrientation InterfaceOrientation { get; }
	}

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (NSObject))]
	interface UIWindowSceneGeometryPreferences { }

	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (UIWindowSceneGeometryPreferences))]
	[DisableDefaultCtor]
	interface UIWindowSceneGeometryPreferencesMac {
		[DesignatedInitializer]
		[Export ("init")]
		NativeHandle Constructor ();

		[Export ("initWithSystemFrame:")]
		NativeHandle Constructor (CGRect systemFrame);

		[Export ("systemFrame", ArgumentSemantic.Assign)]
		CGRect SystemFrame { get; set; }
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (UIWindowSceneGeometryPreferences))]
	[DisableDefaultCtor]
	interface UIWindowSceneGeometryPreferencesIOS {
		[DesignatedInitializer]
		[Export ("init")]
		NativeHandle Constructor ();

		[Export ("initWithInterfaceOrientations:")]
		NativeHandle Constructor (UIInterfaceOrientationMask interfaceOrientations);

		[Export ("interfaceOrientations", ArgumentSemantic.Assign)]
		UIInterfaceOrientationMask InterfaceOrientations { get; set; }
	}

	[NoTV, iOS (16, 0), MacCatalyst (16, 0)]
	[BaseType (typeof (UIControl))]
	interface UIPasteControl {
		[Export ("configuration")]
		UIPasteControlConfiguration Configuration { get; }

		[NullAllowed, Export ("target", ArgumentSemantic.Weak)]
		IUIPasteConfigurationSupporting Target { get; set; }

		[Export ("initWithConfiguration:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIPasteControlConfiguration configuration);

		[Export ("initWithFrame:")]
		[DesignatedInitializer]
		NativeHandle Constructor (CGRect frame);
	}

	[Static]
	[Internal]
	[TV (16, 0), iOS (16, 0), MacCatalyst (16, 0)]
	interface UIFontWidthConstants {
		[Field ("UIFontWidthCondensed")]
		nfloat Condensed { get; }

		[Field ("UIFontWidthStandard")]
		nfloat Standard { get; }

		[Field ("UIFontWidthExpanded")]
		nfloat Expanded { get; }

		[Field ("UIFontWidthCompressed")]
		nfloat Compressed { get; }
	}

	[NoTV, iOS (16, 4), MacCatalyst (16, 4)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextInputContext {

		[Export ("pencilInputExpected")]
		bool PencilInputExpected { [Bind ("isPencilInputExpected")] get; set; }

		[Export ("dictationInputExpected")]
		bool DictationInputExpected { [Bind ("isDictationInputExpected")] get; set; }

		[Export ("hardwareKeyboardInputExpected")]
		bool HardwareKeyboardInputExpected { [Bind ("isHardwareKeyboardInputExpected")] get; set; }

		[Static]
		[Export ("current")]
		UITextInputContext Current { get; }
	}

	[TV (17, 0), iOS (17, 0)]
	[Native]
	public enum UICollectionLayoutSectionOrthogonalScrollingBounce : long {
		Automatic,
		Always,
		Never,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Native]
	public enum UIContentUnavailableAlignment : long {
		Center,
		Natural,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Native]
	public enum UISceneCaptureState : long {
		Unspecified = -1,
		Inactive = 0,
		Active = 1,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Flags]
	[Native]
	public enum UIAccessibilityDirectTouchOptions : ulong {
		None = 0x0,
		SilentOnTouch = 1uL << 0,
		RequiresActivation = 1uL << 1,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Native]
	public enum UICornerCurve : long {
		Automatic,
		Circular,
		Continuous,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Native]
	public enum UIImageDynamicRange : long {
		Unspecified = -1,
		Standard = 0,
		ConstrainedHigh = 1,
		High = 2,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Native]
	public enum UILabelVibrancy : long {
		None,
		Automatic,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Native]
	public enum UILetterformAwareSizingRule : long {
		Typographic,
		Oversize,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Native]
	public enum UITextInlinePredictionType : long {
		Default,
		No,
		Yes,
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[Native]
	public enum UITextItemContentType : long {
		Link = 0,
		TextAttachment = 1,
		Tag = 2,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Native]
	public enum UITextViewBorderStyle : long {
		None,
		[NoTV, NoiOS, NoMacCatalyst]
		RoundedRect,
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UICollectionLayoutSectionOrthogonalScrollingProperties : NSCopying {
		[Export ("decelerationRate")]
		double DecelerationRate { get; set; }

		[Export ("bounce", ArgumentSemantic.Assign)]
		UICollectionLayoutSectionOrthogonalScrollingBounce Bounce { get; set; }
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UIContentUnavailableButtonProperties : NSCopying, NSSecureCoding {
		[NullAllowed, Export ("primaryAction", ArgumentSemantic.Copy)]
		UIAction PrimaryAction { get; set; }

		[NullAllowed, Export ("menu", ArgumentSemantic.Copy)]
		UIMenu Menu { get; set; }

		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Export ("role", ArgumentSemantic.Assign)]
		UIButtonRole Role { get; set; }
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIContentUnavailableConfiguration : UIContentConfiguration, NSSecureCoding {
		[Static]
		[Export ("emptyConfiguration")]
		UIContentUnavailableConfiguration CreateEmptyConfiguration ();

		[Static]
		[Export ("loadingConfiguration")]
		UIContentUnavailableConfiguration CreateLoadingConfiguration ();

		[Static]
		[Export ("searchConfiguration")]
		UIContentUnavailableConfiguration CreateSearchConfiguration ();

		[NullAllowed, Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; set; }

		[Export ("imageProperties")]
		UIContentUnavailableImageProperties ImageProperties { get; }

		[NullAllowed, Export ("text")]
		string Text { get; set; }

		[NullAllowed, Export ("attributedText", ArgumentSemantic.Copy)]
		NSAttributedString AttributedText { get; set; }

		[Export ("textProperties")]
		UIContentUnavailableTextProperties TextProperties { get; }

		[NullAllowed, Export ("secondaryText")]
		string SecondaryText { get; set; }

		[NullAllowed, Export ("secondaryAttributedText", ArgumentSemantic.Copy)]
		NSAttributedString SecondaryAttributedText { get; set; }

		[Export ("secondaryTextProperties")]
		UIContentUnavailableTextProperties SecondaryTextProperties { get; }

		[Export ("button", ArgumentSemantic.Strong)]
		UIButtonConfiguration Button { get; set; }

		[Export ("buttonProperties")]
		UIContentUnavailableButtonProperties ButtonProperties { get; }

		[Export ("secondaryButton", ArgumentSemantic.Strong)]
		UIButtonConfiguration SecondaryButton { get; set; }

		[Export ("secondaryButtonProperties")]
		UIContentUnavailableButtonProperties SecondaryButtonProperties { get; }

		[Export ("alignment", ArgumentSemantic.Assign)]
		UIContentUnavailableAlignment Alignment { get; set; }

		[Export ("axesPreservingSuperviewLayoutMargins", ArgumentSemantic.Assign)]
		UIAxis AxesPreservingSuperviewLayoutMargins { get; set; }

		[Export ("directionalLayoutMargins", ArgumentSemantic.Assign)]
		NSDirectionalEdgeInsets DirectionalLayoutMargins { get; set; }

		[Export ("imageToTextPadding")]
		nfloat ImageToTextPadding { get; set; }

		[Export ("textToSecondaryTextPadding")]
		nfloat TextToSecondaryTextPadding { get; set; }

		[Export ("textToButtonPadding")]
		nfloat TextToButtonPadding { get; set; }

		[Export ("buttonToSecondaryButtonPadding")]
		nfloat ButtonToSecondaryButtonPadding { get; set; }

		[Export ("background", ArgumentSemantic.Strong)]
		UIBackgroundConfiguration Background { get; set; }
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UIContentUnavailableImageProperties : NSCopying, NSSecureCoding {
		[NullAllowed, Export ("preferredSymbolConfiguration", ArgumentSemantic.Copy)]
		UIImageSymbolConfiguration PreferredSymbolConfiguration { get; set; }

		[NullAllowed, Export ("tintColor", ArgumentSemantic.Strong)]
		UIColor TintColor { get; set; }

		[Export ("cornerRadius")]
		nfloat CornerRadius { get; set; }

		[Export ("maximumSize", ArgumentSemantic.Assign)]
		CGSize MaximumSize { get; set; }

		[Export ("accessibilityIgnoresInvertColors")]
		bool AccessibilityIgnoresInvertColors { get; set; }
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UIContentUnavailableTextProperties : NSCopying, NSSecureCoding {
		[Export ("font", ArgumentSemantic.Strong)]
		UIFont Font { get; set; }

		[Export ("color", ArgumentSemantic.Strong)]
		UIColor Color { get; set; }

		[Export ("lineBreakMode", ArgumentSemantic.Assign)]
		UILineBreakMode LineBreakMode { get; set; }

		[Export ("numberOfLines")]
		nint NumberOfLines { get; set; }

		[Export ("adjustsFontSizeToFitWidth")]
		bool AdjustsFontSizeToFitWidth { get; set; }

		[Export ("minimumScaleFactor")]
		nfloat MinimumScaleFactor { get; set; }

		[Export ("allowsDefaultTighteningForTruncation")]
		bool AllowsDefaultTighteningForTruncation { get; set; }
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIContentUnavailableConfigurationState : UIConfigurationState {
		[Export ("initWithTraitCollection:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UITraitCollection traitCollection);

		[NullAllowed, Export ("searchText", ArgumentSemantic.Strong)]
		string SearchText { get; set; }
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (UIView))]
	[DisableDefaultCtor]
	interface UIContentUnavailableView : UIContentView {
		[Export ("initWithConfiguration:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UIContentUnavailableConfiguration configuration);

		[Export ("scrollEnabled")]
		bool ScrollEnabled { [Bind ("isScrollEnabled")] get; set; }
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[DisableDefaultCtor] // It crashes the app.
#if XAMCORE_5_0
	[BaseType (typeof(UIViewController))]
	[Abstract] // "UIDocumentViewController is an abstract base class that is meant to be subclassed."
	interface UIDocumentViewController
#else
	[BaseType (typeof (UIViewController), Name = "UIDocumentViewController")]
	interface UIDocViewController
#endif
	{
		[DesignatedInitializer]
		[Export ("initWithNibName:bundle:")]
		[PostGet ("NibBundle")]
		NativeHandle Constructor ([NullAllowed] string nibName, [NullAllowed] NSBundle bundle);

		[Export ("initWithDocument:")]
		NativeHandle Constructor ([NullAllowed] UIDocument document);

		[NullAllowed, Export ("document", ArgumentSemantic.Strong)]
		UIDocument Document { get; set; }

		[Export ("navigationItemDidUpdate")]
		void NavigationItemDidUpdate ();

		[Async]
		[Export ("openDocumentWithCompletionHandler:")]
		void OpenDocument (Action<bool> completionHandler);

		[Export ("documentDidOpen")]
		void DocumentDidOpen ();

		[Export ("undoRedoItemGroup")]
		UIBarButtonItemGroup UndoRedoItemGroup { get; }

		[iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("launchOptions", ArgumentSemantic.Strong)]
		UIDocumentViewControllerLaunchOptions LaunchOptions { get; set; }
	}

	interface IUIShapeProvider { }

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UIShapeProvider {
		[Abstract]
		[Export ("resolvedShapeInContext:")]
		UIResolvedShape CreateResolvedShape (UIShapeResolutionContext context);
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIShape : UIShapeProvider, NSCopying {
		[Static]
		[Export ("rectShape")]
		UIShape CreateRectShape ();

		[Static]
		[Export ("capsuleShape")]
		UIShape CreateCapsuleShape ();

		[Static]
		[Export ("circleShape")]
		UIShape CreateCircleShape ();

		[Static]
		[Export ("rectShapeWithCornerRadius:")]
		UIShape CreateRectShape (nfloat cornerRadius);

		[Static]
		[Export ("rectShapeWithCornerRadius:cornerCurve:")]
		UIShape CreateRectShape (nfloat cornerRadius, UICornerCurve cornerCurve);

		[Static]
		[Export ("rectShapeWithCornerRadius:cornerCurve:maskedCorners:")]
		UIShape CreateRectShape (nfloat cornerRadius, UICornerCurve cornerCurve, UIRectCorner maskedCorners);

		[Static]
		[Export ("fixedRectShapeWithRect:")]
		UIShape CreateFixedRectShape (CGRect rect);

		[Static]
		[Export ("fixedRectShapeWithRect:cornerRadius:")]
		UIShape CreateFixedRectShape (CGRect rect, nfloat cornerRadius);

		[Static]
		[Export ("fixedRectShapeWithRect:cornerRadius:cornerCurve:maskedCorners:")]
		UIShape CreateFixedRectShape (CGRect rect, nfloat cornerRadius, UICornerCurve cornerCurve, UIRectCorner maskedCorners);

		[Static]
		[Export ("shapeWithBezierPath:")]
		UIShape CreateShape (UIBezierPath path);

		[Static]
		[Export ("shapeWithProvider:")]
		UIShape CreateShape (IUIShapeProvider provider);

		[Export ("shapeByApplyingInsets:")]
		UIShape CreateShape (UIEdgeInsets insets);

		[Export ("shapeByApplyingInset:")]
		UIShape CreateShapeByApplyingInset (nfloat inset);
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIResolvedShape : NSCopying {
		[Export ("shape")]
		UIShape Shape { get; }

		[Export ("boundingRect")]
		CGRect BoundingRect { get; }

		[Export ("path")]
		UIBezierPath Path { get; }

		[Export ("shapeByApplyingInsets:")]
		UIResolvedShape CreateShape (UIEdgeInsets insets);

		[Export ("shapeByApplyingInset:")]
		UIResolvedShape CreateShape (nfloat inset);
	}

	interface IUIHoverEffect { }

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UIHoverEffect { }

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIHoverAutomaticEffect : UIHoverEffect, NSCopying {
		[Static]
		[Export ("effect")]
		UIHoverAutomaticEffect Create ();
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIHoverHighlightEffect : UIHoverEffect, NSCopying {
		[Static]
		[Export ("effect")]
		UIHoverHighlightEffect Create ();
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIHoverLiftEffect : UIHoverEffect, NSCopying {
		[Static]
		[Export ("effect")]
		UIHoverLiftEffect Create ();
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIHoverStyle : NSCopying {
		[Export ("effect", ArgumentSemantic.Strong)]
		IUIHoverEffect Effect { get; set; }

		[NullAllowed]
		[Export ("shape", ArgumentSemantic.Strong)]
		UIShape Shape { get; set; }

		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Static]
		[Export ("styleWithEffect:shape:")]
		UIHoverStyle Create (IUIHoverEffect effect, [NullAllowed] UIShape shape);

		[Static]
		[Export ("styleWithShape:")]
		UIHoverStyle Create ([NullAllowed] UIShape shape);

		[Static]
		[Export ("automaticStyle")]
		UIHoverStyle CreateAutomatic ();
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIShapeResolutionContext {
		[Export ("contentShape")]
		UIResolvedShape ContentShape { get; }
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UIWindowScenePlacement : NSCopying { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (UIWindowScenePlacement))]
	interface UIWindowSceneStandardPlacement {
		[Static]
		[Export ("standardPlacement")]
		UIWindowSceneStandardPlacement Create ();
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (UIWindowScenePlacement))]
	interface UIWindowSceneProminentPlacement {
		[Static]
		[Export ("prominentPlacement")]
		UIWindowSceneProminentPlacement Create ();
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UIImageReader {
		[Static]
		[Export ("defaultReader", ArgumentSemantic.Strong)]
		UIImageReader DefaultReader { get; }

		[Static]
		[Export ("readerWithConfiguration:")]
		UIImageReader CreateReader (UIImageReaderConfiguration configuration);

		[Export ("configuration", ArgumentSemantic.Copy)]
		UIImageReaderConfiguration Configuration { get; }

		[Export ("imageWithContentsOfFileURL:")]
		UIImage GetImage (NSUrl url);

		[Export ("imageWithData:")]
		UIImage GetImage (NSData data);

		[Async]
		[Export ("imageWithContentsOfFileURL:completion:")]
		void GetImage (NSUrl url, Action<UIImage> completion);

		[Async]
		[Export ("imageWithData:completion:")]
		void GetImage (NSData data, Action<UIImage> completion);
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UIImageReaderConfiguration : NSCopying {
		[Export ("prefersHighDynamicRange")]
		bool PrefersHighDynamicRange { get; set; }

		[Export ("preparesImagesForDisplay")]
		bool PreparesImagesForDisplay { get; set; }

		[Export ("preferredThumbnailSize", ArgumentSemantic.Assign)]
		CGSize PreferredThumbnailSize { get; set; }

		[Export ("pixelsPerInch")]
		nfloat PixelsPerInch { get; set; }
	}

	interface IUIPageControlProgressDelegate { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIPageControlProgressDelegate {
		[Export ("pageControlProgress:initialProgressForPage:")]
		float GetInitialProgressForPage (UIPageControlProgress progress, nint page);

		[Export ("pageControlProgressVisibilityDidChange:")]
		void VisibilityDidChange (UIPageControlProgress progress);
	}

	interface IUIPageControlTimerProgressDelegate { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIPageControlTimerProgressDelegate : UIPageControlProgressDelegate {
		[Export ("pageControlTimerProgressDidChange:")]
		void PageControlTimerProgressDidChange (UIPageControlTimerProgress progress);

		[Export ("pageControlTimerProgress:shouldAdvanceToPage:")]
		bool ShouldAdvanceToPage (UIPageControlTimerProgress progress, nint page);
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UIPageControlProgress {
		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIPageControlProgressDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[Export ("currentProgress")]
		float CurrentProgress { get; set; }

		[Export ("progressVisible")]
		bool ProgressVisible { [Bind ("isProgressVisible")] get; }
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (UIPageControlProgress))]
	[DisableDefaultCtor]
	interface UIPageControlTimerProgress {
		[Export ("initWithPreferredDuration:")]
		[DesignatedInitializer]
		NativeHandle Constructor (double preferredDuration);

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUIPageControlTimerProgressDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[Export ("resetsToInitialPageAfterEnd")]
		bool ResetsToInitialPageAfterEnd { get; set; }

		[Export ("running")]
		bool Running { [Bind ("isRunning")] get; }

		[Export ("resumeTimer")]
		void ResumeTimer ();

		[Export ("pauseTimer")]
		void PauseTimer ();

		[Export ("preferredDuration")]
		double PreferredDuration { get; set; }

		[Export ("setDuration:forPage:")]
		void SetDuration (double duration, nint page);

		[Export ("durationForPage:")]
		double GetDuration (nint page);
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISceneSessionActivationRequest : NSCopying {
		[Export ("role")]
		string Role { get; }

		[NullAllowed, Export ("session")]
		UISceneSession Session { get; }

		[NullAllowed, Export ("userActivity", ArgumentSemantic.Strong)]
		NSUserActivity UserActivity { get; set; }

		[NullAllowed, Export ("options", ArgumentSemantic.Copy)]
		UISceneActivationRequestOptions Options { get; set; }

		[Static]
		[Export ("request")]
		UISceneSessionActivationRequest Create ();

		[Static]
		[Export ("requestWithRole:")]
		UISceneSessionActivationRequest Create (string role);

		[Static]
		[Export ("requestWithSession:")]
		UISceneSessionActivationRequest Create (UISceneSession session);
	}

	[TV (17, 0), iOS (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISymbolEffectCompletionContext {
		[Export ("finished")]
		bool Finished { [Bind ("isFinished")] get; }

		[NullAllowed, Export ("sender", ArgumentSemantic.Weak)]
		NSObject Sender { get; }

		[NullAllowed, Export ("effect")]
		NSSymbolEffect Effect { get; }

		[NullAllowed, Export ("contentTransition")]
		NSSymbolContentTransition ContentTransition { get; }
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextItem {
		[Export ("contentType", ArgumentSemantic.Assign)]
		UITextItemContentType ContentType { get; }

		[Export ("range", ArgumentSemantic.Assign)]
		NSRange Range { get; }

		[NullAllowed, Export ("link", ArgumentSemantic.Strong)]
		NSUrl Link { get; }

		[NullAllowed, Export ("textAttachment", ArgumentSemantic.Strong)]
		NSTextAttachment TextAttachment { get; }

		[NullAllowed, Export ("tagIdentifier", ArgumentSemantic.Strong)]
		string TagIdentifier { get; }
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UIWindowSceneDragInteraction : UIInteraction {
		[NoMacCatalyst]
		[Export ("gestureForFailureRelationships")]
		UIGestureRecognizer GestureForFailureRelationships { get; }
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextItemMenuPreview {
		[Static]
		[Export ("defaultPreview")]
		UITextItemMenuPreview DefaultPreview { get; }

		[Export ("initWithView:")]
		NativeHandle Constructor (UIView view);
	}

	[NoTV, iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextItemMenuConfiguration {
		[Static]
		[Export ("configurationWithMenu:")]
		UITextItemMenuConfiguration Create (UIMenu menu);

		[Static]
		[Export ("configurationWithPreview:menu:")]
		UITextItemMenuConfiguration Create ([NullAllowed] UITextItemMenuPreview preview, UIMenu menu);
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITextLoupeSession {
		[Static]
		[Export ("beginLoupeSessionAtPoint:fromSelectionWidgetView:inView:")]
		[return: NullAllowed]
		UITextLoupeSession BeginLoupeSession (CGPoint point, [NullAllowed] UIView selectionWidget, UIView interactionView);

		[Export ("moveToPoint:withCaretRect:trackingCaret:")]
		void MoveToPoint (CGPoint point, CGRect caretRect, bool tracksCaret);

		[Export ("invalidate")]
		void Invalidate ();
	}

	interface IUITextCursorView { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UITextCursorView : UICoordinateSpace {
		[Abstract]
		[Export ("blinking")]
		bool Blinking { [Bind ("isBlinking")] get; set; }

		[Abstract]
		[Export ("resetBlinkAnimation")]
		void ResetBlinkAnimation ();
	}

	interface IUITextSelectionHighlightView { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UITextSelectionHighlightView : UICoordinateSpace {
		[Abstract]
		[Export ("selectionRects", ArgumentSemantic.Strong)]
		UITextSelectionRect [] SelectionRects { get; set; }
	}

	interface IUITextSelectionHandleView { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UITextSelectionHandleView : UICoordinateSpace {
		[Abstract]
		[Export ("direction", ArgumentSemantic.Assign)]
		NSDirectionalRectEdge Direction { get; set; }

		[Abstract]
		[Export ("vertical")]
		bool Vertical { [Bind ("isVertical")] get; }

		[Abstract]
		[NullAllowed, Export ("customShape", ArgumentSemantic.Strong)]
		UIBezierPath CustomShape { get; set; }

		[Abstract]
		[Export ("preferredFrameForRect:")]
		CGRect GetPreferredFrame (CGRect rect);
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextSelectionDisplayInteraction : UIInteraction {
		[Export ("activated")]
		bool Activated { [Bind ("isActivated")] get; set; }

		[NullAllowed, Export ("textInput", ArgumentSemantic.Weak)]
		IUITextInput TextInput { get; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUITextSelectionDisplayInteractionDelegate Delegate { get; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; }

		[Export ("cursorView", ArgumentSemantic.Strong)]
		IUITextCursorView CursorView { get; set; }

		[Export ("highlightView", ArgumentSemantic.Strong)]
		IUITextSelectionHighlightView HighlightView { get; set; }

		[Export ("handleViews", ArgumentSemantic.Strong)]
		IUITextSelectionHandleView [] HandleViews { get; set; }

		[Export ("initWithTextInput:delegate:")]
		[DesignatedInitializer]
		NativeHandle Constructor (IUITextInput textInput, IUITextSelectionDisplayInteractionDelegate @delegate);

		[Export ("layoutManagedSubviews")]
		void LayoutManagedSubviews ();

		[Export ("setNeedsSelectionUpdate")]
		void SetNeedsSelectionUpdate ();
	}

	interface IUITextSelectionDisplayInteractionDelegate { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UITextSelectionDisplayInteractionDelegate {
		[Export ("selectionContainerViewBelowTextForSelectionDisplayInteraction:")]
		[return: NullAllowed]
		UIView GetSelectionContainerViewBelowText (UITextSelectionDisplayInteraction interaction);
	}

	interface IUITraitDefinition { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UITraitDefinition {
		[Static]
		[Export ("identifier")]
		string Identifier { get; }

		[Static]
		[Export ("name")]
		string Name { get; }

		[Static]
		[Export ("affectsColorAppearance")]
		bool AffectsColorAppearance { get; }
	}

	interface IUICGFloatTraitDefinition { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UICGFloatTraitDefinition : UITraitDefinition {
		[Static, Abstract]
		[Export ("defaultValue")]
		nfloat DefaultValue { get; }
	}


	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UILetterformAwareAdjusting {
		[Abstract]
		[Export ("sizingRule", ArgumentSemantic.Assign)]
		UILetterformAwareSizingRule SizingRule { get; set; }
	}

	[TV (17, 0), NoMac, iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UILookToDictateCapable {
		[NoTV]
		[Abstract]
		[Export ("lookToDictateEnabled")]
		bool LookToDictateEnabled { [Bind ("isLookToDictateEnabled")] get; set; }
	}

	interface IUINSIntegerTraitDefinition { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UINSIntegerTraitDefinition : UITraitDefinition {
		[Static, Abstract]
		[Export ("defaultValue")]
		nint DefaultValue { get; }
	}

	interface IUIObjectTraitDefinition { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIObjectTraitDefinition : UITraitDefinition {
		[Static, Abstract]
		[NullAllowed, Export ("defaultValue")]
		NSObject DefaultValue { get; }
	}

	interface IUIMutableTraits : INativeObject { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol, Model]
	[BaseType (typeof (NSObject))]
	interface UIMutableTraits {
		[Abstract]
		[Export ("setCGFloatValue:forTrait:")]
		void SetValue (nfloat value, IUICGFloatTraitDefinition trait);

		[Abstract]
		[Export ("valueForCGFloatTrait:")]
		nfloat GetValue (IUICGFloatTraitDefinition trait);

		[Abstract]
		[Export ("setNSIntegerValue:forTrait:")]
		void SetValue (nint value, IUINSIntegerTraitDefinition trait);

		[Abstract]
		[Export ("valueForNSIntegerTrait:")]
		nint GetValue (IUINSIntegerTraitDefinition trait);

		[Abstract]
		[Export ("setObject:forTrait:")]
		void SetObject ([NullAllowed] NSObject @object, IUIObjectTraitDefinition trait);

		[Abstract]
		[Export ("objectForTrait:")]
		[return: NullAllowed]
		NSObject GetObject (IUIObjectTraitDefinition trait);

		[Abstract]
		[Export ("userInterfaceIdiom", ArgumentSemantic.Assign)]
		UIUserInterfaceIdiom UserInterfaceIdiom { get; set; }

		[Abstract]
		[Export ("userInterfaceStyle", ArgumentSemantic.Assign)]
		UIUserInterfaceStyle UserInterfaceStyle { get; set; }

		[Abstract]
		[Export ("layoutDirection", ArgumentSemantic.Assign)]
		UITraitEnvironmentLayoutDirection LayoutDirection { get; set; }

		[Abstract]
		[Export ("displayScale")]
		nfloat DisplayScale { get; set; }

		[Abstract]
		[Export ("horizontalSizeClass", ArgumentSemantic.Assign)]
		UIUserInterfaceSizeClass HorizontalSizeClass { get; set; }

		[Abstract]
		[Export ("verticalSizeClass", ArgumentSemantic.Assign)]
		UIUserInterfaceSizeClass VerticalSizeClass { get; set; }

		[Abstract]
		[Export ("forceTouchCapability", ArgumentSemantic.Assign)]
		UIForceTouchCapability ForceTouchCapability { get; set; }

		[Abstract]
		[Export ("preferredContentSizeCategory")]
		string PreferredContentSizeCategory { get; set; }

		[Abstract]
		[Export ("displayGamut", ArgumentSemantic.Assign)]
		UIDisplayGamut DisplayGamut { get; set; }

		[Abstract]
		[Export ("accessibilityContrast", ArgumentSemantic.Assign)]
		UIAccessibilityContrast AccessibilityContrast { get; set; }

		[NoTV]
		[Abstract]
		[Export ("userInterfaceLevel", ArgumentSemantic.Assign)]
		UIUserInterfaceLevel UserInterfaceLevel { get; set; }

		[Abstract]
		[Export ("legibilityWeight", ArgumentSemantic.Assign)]
		UILegibilityWeight LegibilityWeight { get; set; }

		[Abstract]
		[Export ("activeAppearance", ArgumentSemantic.Assign)]
		UIUserInterfaceActiveAppearance ActiveAppearance { get; set; }

		[Abstract]
		[Export ("toolbarItemPresentationSize", ArgumentSemantic.Assign)]
		UINSToolbarItemPresentationSize ToolbarItemPresentationSize { get; set; }

		[Abstract]
		[Export ("imageDynamicRange", ArgumentSemantic.Assign)]
		UIImageDynamicRange ImageDynamicRange { get; set; }

		[Abstract]
		[Export ("sceneCaptureState", ArgumentSemantic.Assign)]
		UISceneCaptureState SceneCaptureState { get; set; }

		[Abstract]
		[Export ("typesettingLanguage")]
		string TypesettingLanguage { get; set; }

		[Abstract]
		[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
		[Export ("listEnvironment")]
		UIListEnvironment ListEnvironment { get; set; }
	}


	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitUserInterfaceIdiom : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitUserInterfaceStyle : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitLayoutDirection : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitDisplayScale : UICGFloatTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitHorizontalSizeClass : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitVerticalSizeClass : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitForceTouchCapability : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitPreferredContentSizeCategory : UIObjectTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitDisplayGamut : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitAccessibilityContrast : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitUserInterfaceLevel : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitLegibilityWeight : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitActiveAppearance : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitToolbarItemPresentationSize : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitImageDynamicRange : UINSIntegerTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitTypesettingLanguage : UIObjectTraitDefinition {
	}

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitSceneCaptureState : UINSIntegerTraitDefinition {
	}

	interface IUITraitOverrides { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UITraitOverrides : UIMutableTraits {
		[Abstract]
		[Export ("containsTrait:")]
#if XAMCORE_5_0
		bool ContainsTrait (Class trait);
#else
		[Obsolete ("Use 'ContainsTrait<T> ()', 'ContainsTrait (Type)' or 'ContainsTrait (Class)' instead.")]
		bool ContainsTrait (IUITraitDefinition trait);
#endif

		[Abstract]
		[Export ("removeTrait:")]
#if XAMCORE_5_0
		void RemoveTrait (Class trait);
#else
		[Obsolete ("Use 'RemoveTrait<T> ()', 'RemoveTrait (Type)' or 'RemoveTrait (Class)' instead.")]
		void RemoveTrait (IUITraitDefinition trait);
#endif
	}

	[iOS (17, 0), TV (17, 0), MacCatalyst (17, 0)]
	public enum UIAccessibilityPriority {
		[Field ("UIAccessibilityPriorityHigh")]
		High,
		[Field ("UIAccessibilityPriorityDefault")]
		Default,
		[Field ("UIAccessibilityPriorityLow")]
		Low,
	}

	// cannot be an enum because the values are doubles
	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Static]
	public interface UICollectionLayoutSectionOrthogonalScrollingDecelerationRate {

		[Field ("UICollectionLayoutSectionOrthogonalScrollingDecelerationRateAutomatic")]
		double Automatic { get; }

		[Field ("UICollectionLayoutSectionOrthogonalScrollingDecelerationRateNormal")]
		double Normal { get; }

		[Field ("UICollectionLayoutSectionOrthogonalScrollingDecelerationRateFast")]
		double Fast { get; }
	}

#if XAMCORE_5_0
	[BackingFieldType (typeof (ulong))]
#else
	[BackingFieldType (typeof (ulong), GetConstantMethodName = "GetConstantValue")]
#endif
	public enum UIAccessibilityTraits : long {
		[Field ("UIAccessibilityTraitNone")]
		None,

		[Field ("UIAccessibilityTraitButton")]
		Button,

		[Field ("UIAccessibilityTraitLink")]
		Link,

		[Field ("UIAccessibilityTraitHeader")]
		Header,

		[Field ("UIAccessibilityTraitSearchField")]
		SearchField,

		[Field ("UIAccessibilityTraitImage")]
		Image,

		[Field ("UIAccessibilityTraitSelected")]
		Selected,

		[Field ("UIAccessibilityTraitPlaysSound")]
		PlaysSound,

		[Field ("UIAccessibilityTraitKeyboardKey")]
		KeyboardKey,

		[Field ("UIAccessibilityTraitStaticText")]
		StaticText,

		[Field ("UIAccessibilityTraitSummaryElement")]
		SummaryElement,

		[Field ("UIAccessibilityTraitNotEnabled")]
		NotEnabled,

		[Field ("UIAccessibilityTraitUpdatesFrequently")]
		UpdatesFrequently,

		[Field ("UIAccessibilityTraitStartsMediaSession")]
		StartsMediaSession,

		[Field ("UIAccessibilityTraitAdjustable")]
		Adjustable,

		[Field ("UIAccessibilityTraitAllowsDirectInteraction")]
		AllowsDirectInteraction,

		[Field ("UIAccessibilityTraitCausesPageTurn")]
		CausesPageTurn,

		[MacCatalyst (13, 1)]
		[Field ("UIAccessibilityTraitTabBar")]
		TabBar,

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UIAccessibilityTraitSupportsZoom")]
		SupportsZoom,

		[iOS (17, 0), MacCatalyst (17, 0), TV (17, 0)]
		[Field ("UIAccessibilityTraitToggleButton")]
		ToggleButton,
	}

	interface IUITraitChangeRegistration { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UITraitChangeRegistration : NSCopying { }

	[TV (17, 0), iOS (17, 0), MacCatalyst (17, 0)]
	[Protocol]
	interface UITraitChangeObservable {
		[Abstract (GenerateExtensionMethod = true)]
		[Export ("registerForTraitChanges:withHandler:")]
		IUITraitChangeRegistration RegisterForTraitChanges (Class [] traits, Action<IUITraitEnvironment, UITraitCollection> handler);

		[Abstract (GenerateExtensionMethod = true)]
		[Export ("registerForTraitChanges:withTarget:action:")]
		IUITraitChangeRegistration RegisterForTraitChanges (Class [] traits, NSObject target, Selector action);

		[Abstract (GenerateExtensionMethod = true)]
		[Export ("registerForTraitChanges:withAction:")]
		IUITraitChangeRegistration RegisterForTraitChanges (Class [] traits, Selector action);

		[Abstract]
		[Export ("unregisterForTraitChanges:")]
		void UnregisterForTraitChanges (IUITraitChangeRegistration registration);
	}

	[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextCursorDropPositionAnimator {

		[Export ("cursorView")]
		IUITextCursorView CursorView { get; }

		[Export ("textInput")]
		IUITextInput TextInput { get; }

		[Export ("initWithTextCursorView:textInput:")]
		[DesignatedInitializer]
		NativeHandle Constructor (IUITextCursorView cursorView, IUITextInput textInput);

		[Export ("setCursorVisible:animated:")]
		void SetCursorVisible (bool visible, bool animated);

		[Export ("placeCursorAtPosition:animated:")]
		void PlaceCursor (UITextPosition atPosition, bool animated);

		[Async]
		[Export ("animateAlongsideChanges:completion:")]
		void AnimateAlongsideChanges ([NullAllowed] Action animation, [NullAllowed] Action completion);
	}

	[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
	[BaseType (typeof (NSObject))]
	interface UIMenuDisplayPreferences : NSCopying, NSSecureCoding {

		[Export ("maximumNumberOfTitleLines")]
		nint MaximumNumberOfTitleLines { get; set; }
	}

	[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
	[Protocol (BackwardsCompatibleCodeGeneration = false)]
	interface UIItemProviderReadingAugmentationProviding {

		[Static, Abstract]
		[Export ("objectWithItemProviderData:typeIdentifier:requestedClass:error:")]
		[return: NullAllowed]
		NSObject GetTypeIdentifier (NSData data, string typeIdentifier, Class requestedClass, [NullAllowed] out NSError outError);

		[Static, Abstract]
		[Export ("additionalLeadingReadableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
		string [] AdditionalLeadingReadableTypeIdentifiersForItemProvider { get; }

		[Static, Abstract]
		[Export ("additionalTrailingReadableTypeIdentifiersForItemProvider", ArgumentSemantic.Copy)]
		string [] AdditionalTrailingReadableTypeIdentifiersForItemProvider { get; }
	}

	[TV (17, 4), iOS (17, 4), MacCatalyst (17, 4)]
	[BaseType (typeof (UIView))]
	[DisableDefaultCtor]
	interface UIStandardTextCursorView : UITextCursorView {

		[Export ("initWithFrame:")]
		NativeHandle Constructor (CGRect frame);
	}

	[NoTV, iOS (17, 5), MacCatalyst (17, 5)]
	[BaseType (typeof (UIFeedbackGenerator))]
	[DisableDefaultCtor]
	interface UICanvasFeedbackGenerator {

		[Export ("alignmentOccurredAtLocation:")]
		void AlignmentOccurred (CGPoint atLocation);

		[Export ("pathCompletedAtLocation:")]
		void PathCompleted (CGPoint atLocation);

		[iOS (17, 5), MacCatalyst (17, 5)]
		[New] // kind of overloading a static member, make it return 'instancetype'
		[Static]
		[Export ("feedbackGeneratorForView:")]
		UICanvasFeedbackGenerator GetFeedbackGenerator (UIView forView);
	}

	[Native]
	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UIActivityCollaborationMode : long {
		SendCopy,
		Collaborate,
	}

	[Native]
	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UIActivitySectionTypes : ulong {
		None = 0,
		PeopleSuggestions,
	}

	[Native]
	[TV (18, 0), NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UICollectionLayoutListContentHuggingElements : ulong {
		None = 0,
		SupplementaryHeader = 1 << 0,
	}

	[Native]
	[TV (18, 0), NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UIColorProminence : long {
		Primary,
		Secondary,
		Tertiary,
		Quaternary,
	}

	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UIDocumentCreationIntent {
		[DefaultEnumValue]
		[Field ("UIDocumentCreationIntentDefault")]
		Default,
	}

	[Native]
	[TV (18, 0), NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UITabPlacement : long {
		Automatic = 0,
		Default = 1,
		Optional = 2,
		Movable = 3,
		Pinned = 4,
		Fixed = 5,
		SidebarOnly = 6,
	}

	[Native]
	[TV (18, 0), NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UITabBarControllerMode : long {
		Automatic = 0,
		TabBar = 1,
		[NoTV]
		TabSidebar = 2,
	}

	[Native]
	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UITabBarControllerSidebarLayout : long {
		Automatic = 0,
		Overlap = 1,
		Tile = 2,
	}

	[Native]
	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UITabGroupSidebarAppearance : ulong {
		Automatic = 0,
		Inline = 1,
		RootSection = 2,
	}

	[Native]
	[TV (18, 0), NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UITableViewContentHuggingElements : long {
		None = 0,
		SectionHeaders = 1 << 0,
	}

	[Native]
	[TV (18, 0), NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UITextMathExpressionCompletionType : long {
		Default,
		No,
		Yes,
	}

	[Native]
	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UIWritingToolsBehavior : long {
		None = -1,
		Default = 0,
		Complete,
		Limited,
	}

	[Flags]
	[Native]
	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UIWritingToolsResultOptions : ulong {
		Default = 0,
		PlainText = 1 << 0,
		RichText = 1 << 1,
		List = 1 << 2,
		Table = 1 << 3,
	}

	[Native]
	[TV (18, 0), NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	enum UIListEnvironment : long {
		Unspecified = 0,
		None = 1,
		Plain = 2,
		Grouped = 3,
		[NoTV]
		InsetGrouped = 4,
		[NoTV]
		Sidebar = 5,
		[NoTV]
		SidebarPlain = 6,
	}

	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIActivityCollaborationModeRestriction : NSSecureCoding, NSCopying {

		[Export ("disabledMode")]
		UIActivityCollaborationMode DisabledMode { get; }

		[Export ("alertTitle", ArgumentSemantic.Copy), NullAllowed]
		string AlertTitle { get; }

		[Export ("alertMessage", ArgumentSemantic.Copy), NullAllowed]
		string AlertMessage { get; }

		[Export ("alertDismissButtonTitle", ArgumentSemantic.Copy), NullAllowed]
		string AlertDismissButtonTitle { get; }

		[Export ("alertRecoverySuggestionButtonTitle", ArgumentSemantic.Copy), NullAllowed]
		string AlertRecoverySuggestionButtonTitle { get; }

		[Export ("alertRecoverySuggestionButtonLaunchURL", ArgumentSemantic.Copy), NullAllowed]
		NSUrl AlertRecoverySuggestionButtonLaunchUrl { get; }

		[Export ("initWithDisabledMode:")]
		NativeHandle Constructor (UIActivityCollaborationMode disabledMode);

		[Export ("initWithDisabledMode:alertTitle:alertMessage:")]
		NativeHandle Constructor (UIActivityCollaborationMode disabledMode, string alertTitle, string alertMessage);

		[Export ("initWithDisabledMode:alertTitle:alertMessage:alertDismissButtonTitle:")]
		NativeHandle Constructor (UIActivityCollaborationMode disabledMode, string alertTitle, string alertMessage, string alertDismissButtonTitle);

		[Export ("initWithDisabledMode:alertTitle:alertMessage:alertDismissButtonTitle:alertRecoverySuggestionButtonTitle:alertRecoverySuggestionButtonLaunchURL:")]
		NativeHandle Constructor (UIActivityCollaborationMode disabledMode, string alertTitle, string alertMessage, string alertDismissButtonTitle, string alertRecoverySuggestionButtonTitle, NSUrl alertRecoverySuggestionButtonLaunchUrl);
	}

	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (UICalendarSelection))]
	[DisableDefaultCtor]
	interface UICalendarSelectionWeekOfYear {
		[Export ("selectedWeekOfYear", ArgumentSemantic.Copy), NullAllowed]
		NSDateComponents SelectedWeekOfYear { get; set; }

		[Export ("setSelectedWeekOfYear:animated:")]
		void SetSelectedWeekOfYear ([NullAllowed] NSDateComponents selectedWeekOfYear, bool animated);

		[Export ("delegate", ArgumentSemantic.Weak), NullAllowed]
		NSObject WeakDelegate { get; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUISheetPresentationControllerDelegate Delegate { get; }

		[Export ("initWithDelegate:")]
		NativeHandle Constructor ([NullAllowed] IUICalendarSelectionWeekOfYearDelegate @delegate);
	}

	[NoTV, NoMac, iOS (18, 0), MacCatalyst (18, 0)]
	[Protocol (BackwardsCompatibleCodeGeneration = false), Model]
	[BaseType (typeof (NSObject))]
	interface UICalendarSelectionWeekOfYearDelegate {
		[Abstract]
		[Export ("weekOfYearSelection:didSelectWeekOfYear:")]
		void DidSelectWeekOfYear (UICalendarSelectionWeekOfYear selection, [NullAllowed] NSDateComponents weekOfYearComponents);

		[Export ("weekOfYearSelection:canSelectWeekOfYear:")]
		bool CanSelectWeekOfYear (UICalendarSelectionWeekOfYear selection, [NullAllowed] NSDateComponents weekOfYearComponents);
	}

	interface IUICalendarSelectionWeekOfYearDelegate { }

	[iOS (18, 0), MacCatalyst (18, 0), NoTV]
	[BaseType (typeof (NSObject))]
	interface UIDocumentViewControllerLaunchOptions {
		[Export ("browserViewController", ArgumentSemantic.Strong)]
		UIDocumentBrowserViewController BrowserViewController { get; set; }

		[Export ("title", ArgumentSemantic.Copy)]
		string Title { get; set; }

		[Export ("primaryAction", ArgumentSemantic.Copy), NullAllowed]
		UIAction PrimaryAction { get; set; }

		[Export ("secondaryAction", ArgumentSemantic.Copy), NullAllowed]
		UIAction SecondaryAction { get; set; }

		[Export ("documentTargetView", ArgumentSemantic.Strong), NullAllowed]
		UIView DocumentTargetView { get; set; }

		[Export ("foregroundAccessoryView", ArgumentSemantic.Strong), NullAllowed]
		UIView ForegroundAccessoryView { get; set; }

		[Export ("backgroundAccessoryView", ArgumentSemantic.Strong), NullAllowed]
		UIView BackgroundAccessoryView { get; set; }

		[Export ("background", ArgumentSemantic.Strong)]
		UIBackgroundConfiguration Background { get; set; }

		[Static]
		[Export ("createDocumentActionWithIntent:")]
		UIAction CreateDocumentAction (UIDocumentCreationIntent indent);
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (UITab))]
	[DisableDefaultCtor]
	interface UISearchTab {
		[DesignatedInitializer]
		[Export ("initWithViewControllerProvider:")]
		NativeHandle Constructor ([NullAllowed] Func<UITab, UIViewController> viewControllerProvider);
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITab : UIAccessibilityIdentification
#if !TVOS
		, UIPopoverPresentationControllerSourceItem, UISpringLoadedInteractionSupporting
#endif
	{
		[Export ("identifier", ArgumentSemantic.Strong)]
		string Identifier { get; }

		[Export ("title", ArgumentSemantic.Copy)]
		string Title { get; set; }

		[Export ("image", ArgumentSemantic.Strong), NullAllowed]
		UIImage Image { get; set; }

		[Export ("subtitle", ArgumentSemantic.Copy), NullAllowed]
		string Subtitle { get; set; }

		[Export ("badgeValue", ArgumentSemantic.Copy), NullAllowed]
		string BadgeValue { get; set; }

		[Export ("preferredPlacement", ArgumentSemantic.Assign)]
		UITabPlacement PreferredPlacement { get; set; }

		[Export ("userInfo", ArgumentSemantic.Strong), NullAllowed]
		NSObject UserInfo { get; set; }

		[Export ("parent", ArgumentSemantic.Strong), NullAllowed]
		UITabGroup Parent { get; }

		[Export ("tabBarController", ArgumentSemantic.Strong), NullAllowed]
		UITabBarController TabBarController { get; }

		[Export ("viewController", ArgumentSemantic.Strong), NullAllowed]
		UIViewController ViewController { get; }

		[NullAllowed, Export ("managingTabGroup", ArgumentSemantic.Strong)]
		UITabGroup ManagingTabGroup { get; }

		[Export ("hidden", ArgumentSemantic.Assign)]
		bool Hidden { [Bind ("isHidden")] get; set; }

		[Export ("hiddenByDefault", ArgumentSemantic.Assign)]
		bool HiddenByDefault { [Bind ("isHiddenByDefault")] get; set; }

		[Export ("allowsHiding", ArgumentSemantic.Assign)]
		bool AllowsHiding { get; set; }

		[Export ("initWithTitle:image:identifier:viewControllerProvider:")]
		NativeHandle Constructor (string title, [NullAllowed] UIImage image, string identifier, [NullAllowed] Func<UITab, UIViewController> viewControllerProvider);

		[TV (18, 4), iOS (18, 4), MacCatalyst (18, 4)]
		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[TV (18, 4), iOS (18, 4), MacCatalyst (18, 4)]
		[Export ("hasVisiblePlacement")]
		bool HasVisiblePlacement { get; }
	}

	[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITabSidebarScrollTarget {
		[Static]
		[Export ("targetForHeader")]
		UITabSidebarScrollTarget GetTargetForHeader ();

		[Static]
		[Export ("targetForFooter")]
		UITabSidebarScrollTarget GetTargetForFooter ();

		[Static]
		[Export ("targetForTab:")]
		UITabSidebarScrollTarget GetTargetForTab (UITab tab);

	}

	[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITabBarControllerSidebar {
		[Export ("delegate", ArgumentSemantic.Weak), NullAllowed]
		NSObject WeakDelegate { get; set; }

		[Wrap ("WeakDelegate")]
		[NullAllowed]
		IUITabBarControllerSidebarDelegate Delegate { get; set; }

		[Export ("hidden", ArgumentSemantic.Assign)]
		bool Hidden { [Bind ("isHidden")] get; set; }

		[Export ("preferredLayout", ArgumentSemantic.Assign)]
		UITabBarControllerSidebarLayout PreferredLayout { get; set; }

		[Export ("headerContentConfiguration", ArgumentSemantic.Copy), NullAllowed]
		IUIContentConfiguration HeaderContentConfiguration { get; set; }

		[Export ("footerContentConfiguration", ArgumentSemantic.Copy), NullAllowed]
		IUIContentConfiguration FooterContentConfiguration { get; set; }

		[Export ("bottomBarView", ArgumentSemantic.Strong), NullAllowed]
		UIView BottomBarView { get; set; }

		[Export ("scrollToTarget:animated:")]
		void ScrollToTarget (UITabSidebarScrollTarget target, bool animated);

		[Export ("reconfigureItemForTab:")]
		void ReconfigureItemForTab (UITab tab);

		[iOS (18, 2), MacCatalyst (18, 2)]
		[NullAllowed, Export ("navigationOverflowItems", ArgumentSemantic.Strong)]
		UIDeferredMenuElement NavigationOverflowItems { get; set; }
	}

	[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
	[Protocol (BackwardsCompatibleCodeGeneration = false), Model]
	[BaseType (typeof (NSObject))]
	interface UITabBarControllerSidebarDelegate {
		[Export ("tabBarController:sidebarVisibilityWillChange:animator:")]
		void SidebarVisibilityWillChange (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, IUITabBarControllerSidebarAnimating animator);

		[Export ("tabBarController:sidebar:itemForRequest:"), NoDefaultValue]
		UITabSidebarItem GetItemForRequest (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, UITabSidebarItemRequest request);

		[Export ("tabBarController:sidebar:updateItem:")]
		void UpdateItem (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, UITabSidebarItem item);

		[Export ("tabBarController:sidebar:willBeginDisplayingTab:")]
		void WillBeginDisplayingTab (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, UITab tab);

		[Export ("tabBarController:sidebar:didEndDisplayingTab:")]
		void DidEndDisplayingTab (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, UITab tab);

		[Export ("tabBarController:sidebar:leadingSwipeActionsConfigurationForTab:"), DefaultValue (null)]
		[return: NullAllowed]
		UISwipeActionsConfiguration GetLeadingSwipeActionsConfigurationForTab (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, UITab tab);

		[Export ("tabBarController:sidebar:trailingSwipeActionsConfigurationForTab:"), DefaultValue (null)]
		[return: NullAllowed]
		UISwipeActionsConfiguration GetTrailingSwipeActionsConfigurationForTab (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, UITab tab);

		[Export ("tabBarController:sidebar:contextMenuConfigurationForTab:"), DefaultValue (null)]
		[return: NullAllowed]
		UIContextMenuConfiguration GetContextMenuConfigurationForTab (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, UITab tab);

		[iOS (18, 4), MacCatalyst (18, 4)]
		[Export ("tabBarController:sidebar:itemsForBeginningDragSession:tab:")]
		UIDragItem [] GetItemsForBeginningDragSession (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, IUIDragSession dragSession, UITab tab);

		[iOS (18, 4), MacCatalyst (18, 4)]
		[Export ("tabBarController:sidebar:itemsForAddingToDragSession:tab:")]
		UIDragItem [] GetItemsForAddingToDragSession (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, IUIDragSession dragSession, UITab tab);

		[iOS (18, 4), MacCatalyst (18, 4)]
		[Export ("tabBarController:sidebar:sidebarAction:group:operationForAcceptingItemsFromDropSession:")]
		UIDropOperation GetOperationForAcceptingItemsFromDropSession (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, UIAction sidebarAction, UITabGroup group, IUIDropSession session);

		[iOS (18, 4), MacCatalyst (18, 4)]
		[Export ("tabBarController:sidebar:sidebarAction:group:acceptItemsFromDropSession:")]
		void AcceptItemsFromDropSession (UITabBarController tabBarController, UITabBarControllerSidebar sidebar, UIAction sidebarAction, UITabGroup group, IUIDropSession session);
	}

	interface IUITabBarControllerSidebarDelegate { }

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (UITab))]
	[DisableDefaultCtor]
	interface UITabGroup {
		[Export ("selectedChild", ArgumentSemantic.Strong), NullAllowed]
		UITab SelectedChild { get; set; }

		[Export ("defaultChildIdentifier", ArgumentSemantic.Copy), NullAllowed]
		string DefaultChildIdentifier { get; set; }

		[Export ("children", ArgumentSemantic.Copy)]
		UITab [] Children { get; set; }

		[Export ("displayOrderIdentifiers", ArgumentSemantic.Copy)]
		string [] DisplayOrderIdentifiers { get; set; }

		[Export ("allowsReordering", ArgumentSemantic.Assign)]
		bool AllowsReordering { get; set; }

		[Export ("displayOrder", ArgumentSemantic.Strong)]
		UITab [] DisplayOrder { get; }

		[Export ("managingNavigationController", ArgumentSemantic.Strong), NullAllowed]
		UINavigationController ManagingNavigationController { get; set; }

		[Export ("tabForIdentifier:")]
		[return: NullAllowed]
		UITab GetTab (string identifier);

		[Export ("sidebarActions", ArgumentSemantic.Copy)]
		UIAction [] SidebarActions { get; set; }

		[NoTV]
		[Export ("sidebarAppearance", ArgumentSemantic.Assign)]
		UITabGroupSidebarAppearance SidebarAppearance { get; set; }

		[Export ("initWithTitle:image:identifier:children:viewControllerProvider:")]
		NativeHandle Constructor (string title, [NullAllowed] UIImage image, string identifier, UITab [] children, [NullAllowed] Func<UITab, UIViewController> viewControllerProvider);
	}

	[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITabSidebarItem : NSCopying {
		[Export ("tab", ArgumentSemantic.Strong), NullAllowed]
		UITab Tab { get; }

		[Export ("action", ArgumentSemantic.Strong), NullAllowed]
		UIAction Action { get; }

		[Export ("configurationState", ArgumentSemantic.Strong)]
		UICellConfigurationState ConfigurationState { get; }

		[Export ("contentConfiguration", ArgumentSemantic.Copy)]
		IUIContentConfiguration ContentConfiguration { get; set; }

		[Export ("backgroundConfiguration", ArgumentSemantic.Copy)]
		UIBackgroundConfiguration BackgroundConfiguration { get; set; }

		[Export ("accessories", ArgumentSemantic.Copy)]
		UICellAccessory [] Accessories { get; set; }

		[Export ("defaultContentConfiguration")]
		UIListContentConfiguration DefaultContentConfiguration { get; }

		[Export ("defaultBackgroundConfiguration")]
		UIBackgroundConfiguration DefaultBackgroundConfiguration { get; }

		[Static]
		[Export ("itemFromRequest:")]
		UITabSidebarItem GetItem (UITabSidebarItemRequest request);
	}

	[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITabSidebarItemRequest {
		[Export ("tab"), NullAllowed]
		UITab Tab { get; }

		[Export ("action"), NullAllowed]
		UIAction Action { get; }
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	interface UITraitListEnvironment : UINSIntegerTraitDefinition {
	}

	[TV (18, 0), iOS (18, 0), NoMacCatalyst]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIUpdateActionPhase {
		[Static]
		[Export ("afterUpdateScheduled")]
		UIUpdateActionPhase AfterUpdateScheduled { get; }

		[Static]
		[Export ("beforeEventDispatch")]
		UIUpdateActionPhase BeforeEventDispatch { get; }

		[Static]
		[Export ("afterEventDispatch")]
		UIUpdateActionPhase AfterEventDispatch { get; }

		[Static]
		[Export ("beforeCADisplayLinkDispatch")]
		UIUpdateActionPhase BeforeCADisplayLinkDispatch { get; }

		[Static]
		[Export ("afterCADisplayLinkDispatch")]
		UIUpdateActionPhase AfterCADisplayLinkDispatch { get; }

		[Static]
		[Export ("beforeCATransactionCommit")]
		UIUpdateActionPhase BeforeCATransactionCommit { get; }

		[Static]
		[Export ("afterCATransactionCommit")]
		UIUpdateActionPhase AfterCATransactionCommit { get; }

		[Static]
		[Export ("beforeLowLatencyEventDispatch")]
		UIUpdateActionPhase BeforeLowLatencyEventDispatch { get; }

		[Static]
		[Export ("afterLowLatencyEventDispatch")]
		UIUpdateActionPhase AfterLowLatencyEventDispatch { get; }

		[Static]
		[Export ("beforeLowLatencyCATransactionCommit")]
		UIUpdateActionPhase BeforeLowLatencyCATransactionCommit { get; }

		[Static]
		[Export ("afterLowLatencyCATransactionCommit")]
		UIUpdateActionPhase AfterLowLatencyCATransactionCommit { get; }

		[Static]
		[Export ("afterUpdateComplete")]
		UIUpdateActionPhase AfterUpdateComplete { get; }
	}

	[TV (18, 0), iOS (18, 0), NoMacCatalyst]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIUpdateInfo {
		[Static]
		[Export ("currentUpdateInfoForWindowScene:")]
		[return: NullAllowed]
		UIUpdateInfo GetCurrentUpdateInfo (UIWindowScene windowScene);

		[Static]
		[Export ("currentUpdateInfoForView:")]
		[return: NullAllowed]
		UIUpdateInfo GetCurrentUpdateInfo (UIView windowScene);

		[Export ("modelTime")]
		double ModelTime { get; }

		[Export ("completionDeadlineTime")]
		double CompletionDeadlineTime { get; }

		[Export ("estimatedPresentationTime")]
		double EstimatedPresentationTime { get; }

		[Export ("immediatePresentationExpected")]
		bool ImmediatePresentationExpected { [Bind ("isImmediatePresentationExpected")] get; }

		[Export ("lowLatencyEventDispatchConfirmed")]
		bool LowLatencyEventDispatchConfirmed { [Bind ("isLowLatencyEventDispatchConfirmed")] get; }

		[Export ("performingLowLatencyPhases")]
		bool PerformingLowLatencyPhases { [Bind ("isPerformingLowLatencyPhases")] get; }
	}

	delegate void UIUpdateLinkCallback (UIUpdateLink updateLink, UIUpdateInfo updateInfo);

	[TV (18, 0), iOS (18, 0), NoMacCatalyst]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIUpdateLink {
		[Static]
		[Export ("updateLinkForWindowScene:")]
		UIUpdateInfo GetUpdateLink (UIWindowScene windowScene);

		[Static]
		[Export ("updateLinkForView:")]
		UIUpdateInfo GetUpdateLink (UIView windowScene);

		[Export ("addActionToPhase:handler:")]
		void AddActionToPhase (UIUpdateActionPhase phase, UIUpdateLinkCallback handler);

		[Export ("addActionToPhase:target:selector:")]
		void AddActionToPhase (UIUpdateActionPhase phase, NSObject target, Selector selector);

		[Export ("enabled")]
		bool Enabled { [Bind ("isEnabled")] get; set; }

		[Export ("requiresContinuousUpdates")]
		bool RequiresContinuousUpdates { get; set; }

		[Export ("wantsLowLatencyEventDispatch")]
		bool WantsLowLatencyEventDispatch { get; set; }

		[Export ("wantsImmediatePresentation")]
		bool WantsImmediatePresentation { get; set; }

		[Export ("preferredFrameRateRange")]
		CAFrameRateRange PreferredFrameRateRange { get; set; }

		[NullAllowed]
		[Export ("currentUpdateInfo")]
		UIUpdateInfo CurrentUpdateInfo { get; }

		// From the UIUpdateLink(Convenience) category
		[Export ("addActionWithHandler:")]
		void AddAction (UIUpdateLinkCallback handler);

		// From the UIUpdateLink(Convenience) category
		[Export ("addActionWithTarget:selector:")]
		void AddAction (NSObject target, Selector selector);

		// From the UIUpdateLink(Convenience) category
		[Static]
		[Export ("updateLinkForWindowScene:actionHandler:")]
		void UpdateLink (UIWindowScene windowScene, UIUpdateLinkCallback handler);

		// From the UIUpdateLink(Convenience) category
		[Static]
		[Export ("updateLinkForWindowScene:actionTarget:selector:")]
		void UpdateLink (UIWindowScene windowScene, NSObject target, Selector selector);

		// From the UIUpdateLink(Convenience) category
		[Static]
		[Export ("updateLinkForView:actionHandler:")]
		void UpdateLink (UIView windowScene, UIUpdateLinkCallback handler);

		// From the UIUpdateLink(Convenience) category
		[Static]
		[Export ("updateLinkForView:actionTarget:selector:")]
		void UpdateLink (UIView windowScene, NSObject target, Selector selector);
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIViewControllerTransition {
		[Static]
		[Export ("zoomWithOptions:sourceViewProvider:")]
		UIViewControllerTransition Zoom ([NullAllowed] UIZoomTransitionOptions options, Func<UIZoomTransitionSourceViewProviderContext, UIView> sourceViewProvider);

		[Static]
		[Export ("coverVerticalTransition")]
		UIViewControllerTransition CoverVerticalTransition { get; }

		[Static]
		[Export ("flipHorizontalTransition")]
		UIViewControllerTransition FlipHorizontalTransition { get; }

		[Static]
		[Export ("crossDissolveTransition")]
		UIViewControllerTransition CrossDissolveTransition { get; }

		[Static]
		[Export ("partialCurlTransition")]
		UIViewControllerTransition PartialCurlTransition { get; }
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UIZoomTransitionSourceViewProviderContext {
		[Export ("sourceViewController", ArgumentSemantic.Strong)]
		UIViewController SourceViewController { get; }

		[Export ("zoomedViewController", ArgumentSemantic.Strong)]
		UIViewController ZoomedViewController { get; }
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	interface UIZoomTransitionOptions : NSCopying {
		[Export ("interactiveDismissShouldBegin", ArgumentSemantic.Copy), NullAllowed]
		Func<UIZoomTransitionInteractionContext, bool> InteractiveDismissShouldBegin { get; set; }

		[Export ("alignmentRectProvider", ArgumentSemantic.Copy), NullAllowed]
		Func<UIZoomTransitionAlignmentRectContext, CGRect> AlignmentRectProvider { get; set; }

		[Export ("dimmingColor", ArgumentSemantic.Strong), NullAllowed]
		UIColor DimmingColor { get; set; }

		[Export ("dimmingVisualEffect", ArgumentSemantic.Strong), NullAllowed]
		UIBlurEffect DimmingVisualEffect { get; set; }
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	interface UIZoomTransitionInteractionContext {
		[Export ("location")]
		CGPoint Location { get; }

		[Export ("velocity")]
		CGVector Velocity { get; }

		[Export ("willBegin")]
		bool WillBegin { get; }
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	interface UIZoomTransitionAlignmentRectContext {
		[Export ("sourceView")]
		UIView SourceView { get; }

		[Export ("zoomedViewController")]
		UIViewController ZoomedViewController { get; }
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[Category]
	[BaseType (typeof (NSObject))]
	interface NSObject_UIAccessibilityHitTest {
		[Export ("accessibilityHitTest:withEvent:")]
		[return: NullAllowed]
		NSObject AccessibilityHitTest (CGPoint point, [NullAllowed] UIEvent withEvent);
	}

	[NoTV, iOS (18, 0), MacCatalyst (18, 0)]
	[Category]
	[BaseType (typeof (NSObject))]
	interface NSObject_UIAccessibilityTextNavigation {
		[Export ("accessibilityPreviousTextNavigationElement", ArgumentSemantic.Strong)]
		[return: NullAllowed]
		NSObject GetAccessibilityPreviousTextNavigationElement ();

		[Export ("setAccessibilityPreviousTextNavigationElement:")]
		void SetAccessibilityPreviousTextNavigationElement ([NullAllowed] NSObject element);

		[Export ("accessibilityNextTextNavigationElement", ArgumentSemantic.Strong)]
		[return: NullAllowed]
		NSObject GetAccessibilityNextTextNavigationElement ();

		[Export ("setAccessibilityNextTextNavigationElement:")]
		void SetAccessibilityNextTextNavigationElement ([NullAllowed] NSObject element);

		[Export ("accessibilityPreviousTextNavigationElementBlock", ArgumentSemantic.Strong)]
		[return: NullAllowed]
		AXObjectReturnBlock GetAccessibilityPreviousTextNavigationElementBlock ();

		[Export ("setAccessibilityPreviousTextNavigationElementBlock:")]
		void SetAccessibilityPreviousTextNavigationElementBlock ([NullAllowed] AXObjectReturnBlock element);

		[Export ("accessibilityNextTextNavigationElementBlock", ArgumentSemantic.Strong)]
		[return: NullAllowed]
		AXObjectReturnBlock GetAccessibilityNextTextNavigationElementBlock ();

		[Export ("setAccessibilityNextTextNavigationElementBlock:")]
		void SetAccessibilityNextTextNavigationElementBlock ([NullAllowed] AXObjectReturnBlock element);
	}

	[return: NullAllowed]
	delegate NSObject AXObjectReturnBlock ();

	[Native]
	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	enum UIAccessibilityExpandedStatus : long {
		Unsupported = 0,
		Expanded,
		Collapsed,
	}

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[BaseType (typeof (NSObject))]
	interface UIShadowProperties : NSCopying, NSSecureCoding {
		[Export ("color", ArgumentSemantic.Strong)]
		UIColor Color { get; set; }

		[Export ("opacity", ArgumentSemantic.Assign)]
		nfloat Opacity { get; set; }

		[Export ("radius", ArgumentSemantic.Assign)]
		nfloat Radius { get; set; }

		[Export ("offset", ArgumentSemantic.Assign)]
		CGSize Offset { get; set; }

		[Export ("path", ArgumentSemantic.Copy), NullAllowed]
		UIBezierPath Path { get; set; }
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	[Protocol (BackwardsCompatibleCodeGeneration = false), Model]
	[BaseType (typeof (NSObject))]
	interface UITextFormattingViewControllerDelegate {
		[Abstract]
		[Export ("textFormattingViewController:didChangeValue:")]
		void DidChangeValue (UITextFormattingViewController viewController, UITextFormattingViewControllerChangeValue changeValue);

		[Export ("textFormattingViewController:shouldPresentFontPicker:")]
		bool ShouldPresentFontPicker (UITextFormattingViewController viewController, UIFontPickerViewController fontPicker);

		[Export ("textFormattingViewController:shouldPresentColorPicker:")]
		bool ShouldPresentColorPicker (UITextFormattingViewController viewController, UIColorPickerViewController colorPicker);

		[Export ("textFormattingDidFinish:")]
		void TextFormattingDidFinish (UITextFormattingViewController viewController);
	}

	interface IUITextFormattingViewControllerDelegate { }

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	[BaseType (typeof (UIViewController))]
	[DisableDefaultCtor]
	interface UITextFormattingViewController {
		[DesignatedInitializer]
		[Export ("init")]
		NativeHandle Constructor ();

		[Export ("configuration", ArgumentSemantic.Copy)]
		UITextFormattingViewControllerConfiguration Configuration { get; }

		[Export ("formattingDescriptor", ArgumentSemantic.Copy), NullAllowed]
		UITextFormattingViewControllerFormattingDescriptor FormattingDescriptor { get; set; }

		[Wrap ("WeakDelegate")]
		IUITextFormattingViewControllerDelegate Delegate { get; set; }

		[NullAllowed, Export ("delegate", ArgumentSemantic.Weak)]
		NSObject WeakDelegate { get; set; }

		[Export ("initWithConfiguration:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UITextFormattingViewControllerConfiguration configuration);
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	enum UITextFormattingViewControllerChangeType {
		[DefaultEnumValue]
		[Field ("UITextFormattingViewControllerUndefinedChangeType")]
		Undefined,

		[Field ("UITextFormattingViewControllerSetBoldChangeType")]
		SetBold,

		[Field ("UITextFormattingViewControllerRemoveBoldChangeType")]
		RemoveBold,

		[Field ("UITextFormattingViewControllerSetItalicChangeType")]
		SetItalic,

		[Field ("UITextFormattingViewControllerRemoveItalicChangeType")]
		RemoveItalic,

		[Field ("UITextFormattingViewControllerSetUnderlineChangeType")]
		SetUnderline,

		[Field ("UITextFormattingViewControllerRemoveUnderlineChangeType")]
		RemoveUnderline,

		[Field ("UITextFormattingViewControllerSetStrikethroughChangeType")]
		SetStrikethrough,

		[Field ("UITextFormattingViewControllerRemoveStrikethroughChangeType")]
		RemoveStrikethrough,

		[Field ("UITextFormattingViewControllerFontChangeType")]
		Font,

		[Field ("UITextFormattingViewControllerFontSizeChangeType")]
		FontSize,

		[Field ("UITextFormattingViewControllerIncreaseFontSizeChangeType")]
		IncreaseFontSize,

		[Field ("UITextFormattingViewControllerDecreaseFontSizeChangeType")]
		DecreaseFontSize,

		[Field ("UITextFormattingViewControllerTextColorChangeType")]
		TextColor,

		[Field ("UITextFormattingViewControllerLineHeightPointSizeChangeType")]
		LineHeightPointSize,

		[Field ("UITextFormattingViewControllerIncreaseIndentationChangeType")]
		IncreaseIndentation,

		[Field ("UITextFormattingViewControllerDecreaseIndentationChangeType")]
		DecreaseIndentation,

		[Field ("UITextFormattingViewControllerFormattingStyleChangeType")]
		FormattingStyle,

		[Field ("UITextFormattingViewControllerTextListChangeType")]
		TextList,

		[Field ("UITextFormattingViewControllerTextAlignmentChangeType")]
		TextAlignment,

		[Field ("UITextFormattingViewControllerHighlightChangeType")]
		Highlight,
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextFormattingViewControllerChangeValue : NSCopying, NSSecureCoding {
		// @property (readonly, nonatomic) UITextFormattingViewControllerChangeType _Nonnull changeType;
		[Export ("changeType")]
		[BindAs (typeof (UITextFormattingViewControllerChangeType))]
		NSString ChangeType { get; }

		[NullAllowed, Export ("formattingStyleKey")]
		string FormattingStyleKey { get; }

		[NullAllowed, Export ("font", ArgumentSemantic.Copy)]
		UIFont Font { get; }

		[NullAllowed, Export ("color", ArgumentSemantic.Copy)]
		UIColor Color { get; }

		// This represents any number, so we could in theory bind it as 'double' and it'll
		// work, but that also seems a bit restrictive, so I'm leaving this as NSNumber for now.
		[NullAllowed, Export ("numberValue", ArgumentSemantic.Copy)]
		NSNumber NumberValue { get; }

		[NullAllowed, Export ("textList")]
		[BindAs (typeof (UITextFormattingViewControllerTextList))]
		NSString TextList { get; }

		[Export ("textAlignment")]
		UITextAlignment TextAlignment { get; }

		[NullAllowed, Export ("highlight")]
		[BindAs (typeof (UITextFormattingViewControllerHighlight))]
		NSString Highlight { get; }
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	enum UITextFormattingViewControllerComponentKey {
		[Field ("UITextFormattingViewControllerFormattingStylesComponentKey")]
		FormattingStyles,

		[Field ("UITextFormattingViewControllerFontAttributesComponentKey")]
		FontAttributes,

		[Field ("UITextFormattingViewControllerFontPickerComponentKey")]
		FontPicker,

		[Field ("UITextFormattingViewControllerFontSizeComponentKey")]
		FontSize,

		[Field ("UITextFormattingViewControllerFontPointSizeComponentKey")]
		FontPointSize,

		[Field ("UITextFormattingViewControllerTextAlignmentComponentKey")]
		TextAlignment,

		[Field ("UITextFormattingViewControllerTextAlignmentAndJustificationComponentKey")]
		TextAlignmentAndJustification,

		[Field ("UITextFormattingViewControllerTextIndentationComponentKey")]
		TextIndentation,

		[Field ("UITextFormattingViewControllerLineHeightComponentKey")]
		LineHeight,

		[Field ("UITextFormattingViewControllerListStylesComponentKey")]
		ListStyles,

		[Field ("UITextFormattingViewControllerTextColorComponentKey")]
		TextColor,

		[Field ("UITextFormattingViewControllerHighlightComponentKey")]
		Highlight,

		[Field ("UITextFormattingViewControllerHighlightPickerComponentKey")]
		HighlightPicker,
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	[Native]
	public enum UITextFormattingViewControllerComponentSize : long {
		Automatic = 0,
		Mini = 1,
		Small = 2,
		Regular = 3,
		Large = 4,
		ExtraLarge = 5,
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextFormattingViewControllerComponent : NSCopying, NSSecureCoding {
		[Export ("componentKey")]
		[BindAs (typeof (UITextFormattingViewControllerComponentKey))]
		NSString ComponentKey { get; }

		[Export ("preferredSize")]
		UITextFormattingViewControllerComponentSize PreferredSize { get; }

		[Export ("initWithComponentKey:preferredSize:")]
		[DesignatedInitializer]
		NativeHandle Constructor ([BindAs (typeof (UITextFormattingViewControllerComponentKey))] NSString componentKey, UITextFormattingViewControllerComponentSize preferredSize);
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextFormattingViewControllerComponentGroup : NSCopying, NSSecureCoding {
		[Export ("components", ArgumentSemantic.Copy)]
		UITextFormattingViewControllerComponent [] Components { get; }

		[Export ("initWithComponents:")]
		[DesignatedInitializer]
		NativeHandle Constructor (UITextFormattingViewControllerComponent [] components);
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextFormattingViewControllerConfiguration : NSCopying, NSSecureCoding {
		[Export ("groups", ArgumentSemantic.Copy)]
		UITextFormattingViewControllerComponentGroup [] Groups { get; }

		[Export ("formattingStyles", ArgumentSemantic.Copy), NullAllowed]
		UITextFormattingViewControllerFormattingStyle [] FormattingStyles { get; set; }

		[NullAllowed, Export ("fontPickerConfiguration", ArgumentSemantic.Copy)]
		UIFontPickerViewControllerConfiguration FontPickerConfiguration { get; set; }

		[DesignatedInitializer]
		[Export ("init")]
		NativeHandle Constructor ();

		[Export ("initWithGroups:")]
		NativeHandle Constructor (UITextFormattingViewControllerComponentGroup [] groups);
	}

	[Flags]
	[NoTV, NoMacCatalyst, iOS (18, 0)]
	enum UITextFormattingViewControllerTextAlignment {
		[Field ("UITextFormattingViewControllerTextAlignmentLeft")]
		Left = 1,

		[Field ("UITextFormattingViewControllerTextAlignmentCenter")]
		Center = 2,

		[Field ("UITextFormattingViewControllerTextAlignmentRight")]
		Right = 4,

		[Field ("UITextFormattingViewControllerTextAlignmentJustified")]
		Justified = 8,

		[Field ("UITextFormattingViewControllerTextAlignmentNatural")]
		Natural = 16,
	}

	[Flags]
	[NoTV, NoMacCatalyst, iOS (18, 0)]
	enum UITextFormattingViewControllerTextList {
		[Field ("UITextFormattingViewControllerTextListDisc")]
		Disc = 1,

		[Field ("UITextFormattingViewControllerTextListHyphen")]
		Hyphen = 2,

		[Field ("UITextFormattingViewControllerTextListDecimal")]
		Decimal = 4,

		[Field ("UITextFormattingViewControllerTextListOther")]
		Other = 8,
	}

	[Flags]
	[NoTV, NoMacCatalyst, iOS (18, 0)]
	enum UITextFormattingViewControllerHighlight {
		[DefaultEnumValue]
		[Field ("UITextFormattingViewControllerHighlightDefault")]
		Default = 1,

		[Field ("UITextFormattingViewControllerHighlightPurple")]
		Purple = 2,

		[Field ("UITextFormattingViewControllerHighlightPink")]
		Pink = 4,

		[Field ("UITextFormattingViewControllerHighlightOrange")]
		Orange = 8,

		[Field ("UITextFormattingViewControllerHighlightMint")]
		Mint = 16,

		[Field ("UITextFormattingViewControllerHighlightBlue")]
		Blue = 32,
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UITextFormattingViewControllerFormattingDescriptor : NSCopying, NSSecureCoding {
		[Export ("init")]
		[DesignatedInitializer]
		NativeHandle Constructor ();

		[Export ("initWithString:range:")]
		NativeHandle Constructor (NSAttributedString @string, NSRange range);

		[Export ("initWithAttributes:")]
		NativeHandle Constructor (NSDictionary attributes);

		[Wrap ("this (attributes.GetDictionary ()!)")]
		NativeHandle Constructor (UIStringAttributes attributes);

		[NullAllowed, Export ("fonts", ArgumentSemantic.Copy)]
		UIFont [] Fonts { get; set; }

		[NullAllowed, Export ("textColors", ArgumentSemantic.Copy)]
		UIColor [] TextColors { get; set; }

		[Export ("lineHeight")]
		nfloat LineHeight { get; set; }

		[Export ("underlinePresent")]
		bool UnderlinePresent { get; set; }

		[Export ("strikethroughPresent")]
		bool StrikethroughPresent { get; set; }

		[Export ("textAlignments", ArgumentSemantic.Copy)]
		NSSet<NSString> WeakTextAlignments { get; set; }

		UITextFormattingViewControllerTextAlignment TextAlignments {
			[Wrap ("UITextFormattingViewControllerTextAlignmentExtensions.ToFlags (WeakTextAlignments)")]
			get;
			[Wrap ("WeakTextAlignments = new NSSet<NSString> (value.ToArray ())")]
			set;
		}

		[Export ("textLists", ArgumentSemantic.Copy)]
		NSSet<NSString> WeakTextLists { get; set; }

		UITextFormattingViewControllerTextList TextLists {
			[Wrap ("UITextFormattingViewControllerTextListExtensions.ToFlags (WeakTextLists)")]
			get;
			[Wrap ("WeakTextLists = new NSSet<NSString> (value.ToArray ())")]
			set;
		}

		[Export ("highlights", ArgumentSemantic.Copy)]
		NSSet<NSString> WeakHighlights { get; set; }

		UITextFormattingViewControllerHighlight Highlights {
			[Wrap ("UITextFormattingViewControllerHighlightExtensions.ToFlags (WeakHighlights)")]
			get;
			[Wrap ("WeakHighlights = new NSSet<NSString> (value.ToArray ())")]
			set;
		}

		[NullAllowed, Export ("formattingStyleKey")]
		string FormattingStyleKey { get; set; }
	}

	[NoTV, NoMacCatalyst, iOS (18, 0)]
	[BaseType (typeof (NSObject))]
	interface UITextFormattingViewControllerFormattingStyle : NSCopying, NSSecureCoding {
		[Export ("styleKey")]
		string StyleKey { get; }

		[Export ("title")]
		string Title { get; }

		[Export ("attributes", ArgumentSemantic.Copy)]
		NSDictionary WeakAttributes { get; }

		[Wrap ("WeakAttributes")]
		UIStringAttributes Attributes { get; }

		[Export ("initWithStyleKey:title:attributes:")]
		NativeHandle Constructor (string styleKey, string title, NSDictionary attributes);

		[Wrap ("this (styleKey, title, attributes.GetDictionary ()!)")]
		NativeHandle Constructor (string styleKey, string title, UIStringAttributes attributes);
	}

	[NoTV, iOS (18, 0)]
	[Protocol (BackwardsCompatibleCodeGeneration = false)]
	interface UITabBarControllerSidebarAnimating {
		[Abstract]
		[Export ("addAnimations:")]
		void AddAnimations (Action animations);

		[Abstract]
		[Export ("addCompletion:")]
		void AddCompletion (Action completion);
	}

	interface IUITabBarControllerSidebarAnimating { }

	[TV (18, 0), iOS (18, 0), MacCatalyst (18, 0)]
	[Native]
	public enum UIFocusItemDeferralMode : long {
		Automatic,
		Always,
		Never,
	}

	[NoTV, MacCatalyst (18, 0), iOS (18, 0)]
	[BaseType (typeof (NSObject))]
	[DisableDefaultCtor]
	interface UISceneSystemProtectionManager {
		[Export ("userAuthenticationEnabled")]
		bool UserAuthenticationEnabled { [Bind ("isUserAuthenticationEnabled")] get; }
	}

	[NoTV, NoiOS, MacCatalyst (16, 0)]
	[BaseType (typeof (NSToolbarItem))]
	[DisableDefaultCtor]
	interface NSUIViewToolbarItem {
		[DesignatedInitializer]
		[Export ("initWithItemIdentifier:uiView:")]
		NativeHandle Constructor (NSString identifier, UIView uiView);

		[Export ("uiView", ArgumentSemantic.Strong)]
		UIView UIView { get; [Bind ("setUIView:")] set; }
	}

	[NoMac, NoTV, iOS (18, 1), MacCatalyst (18, 1)]
	[return: NullAllowed]
	delegate IUITextInput UITextInputReturnHandler ();

	[NoMac, NoTV, iOS (18, 1), MacCatalyst (18, 1)]
	[Category]
	[BaseType (typeof (NSObject))]
	interface NSObject_UIAccessibilityTextOperations {

		[return: NullAllowed]
		[Export ("accessibilityTextInputResponder")]
		IUITextInput GetAccessibilityTextInputResponder ();

		[Export ("setAccessibilityTextInputResponder:")]
		void SetAccessibilityTextInputResponder ([NullAllowed] IUITextInput textInput);

		[return: NullAllowed]
		[Export ("accessibilityTextInputResponderBlock")]
		UITextInputReturnHandler GetAccessibilityTextInputResponderHandler ();

		[Export ("setAccessibilityTextInputResponderBlock:")]
		void SetAccessibilityTextInputResponderHandler ([NullAllowed] UITextInputReturnHandler handler);
	}

	[NoTV, NoMacCatalyst, iOS (18, 2)]
	[Native]
	public enum UIApplicationCategory : long {
		UIApplicationCategoryWebBrowser = 1,
	}

	[NoTV, NoMacCatalyst, iOS (18, 2)]
	[Native]
	public enum UIApplicationCategoryDefaultStatus : long {
		Unavailable,
		IsDefault,
		NotDefault,
	}

	[NoTV, NoMacCatalyst, iOS (18, 2)]
	[ErrorDomain ("UIApplicationCategoryDefaultErrorDomain")]
	[Native]
	public enum UIApplicationCategoryDefaultErrorCode : long {
		RateLimited = 1,
	}

	[NoTV, NoMacCatalyst, iOS (18, 2)]
	[Category]
	[BaseType (typeof (UIApplication))]
	interface UIApplication_DefaultApplication {
		[Export ("defaultStatusForCategory:error:")]
		UIApplicationCategoryDefaultStatus GetDefaultStatus (UIApplicationCategory category, [NullAllowed] out NSError error);
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[BaseType (typeof (NSObject))]
	interface UIConversationContext {
		[Export ("threadIdentifier")]
		string ThreadIdentifier { get; set; }

		[Export ("entries", ArgumentSemantic.Copy)]
		UIConversationEntry [] Entries { get; set; }

		[Export ("selfIdentifiers", ArgumentSemantic.Copy)]
		NSSet<NSString> SelfIdentifiers { get; set; }

		[Export ("responsePrimaryRecipientIdentifiers", ArgumentSemantic.Copy)]
		NSSet<NSString> ResponsePrimaryRecipientIdentifiers { get; set; }

		[Export ("participantNameByIdentifier", ArgumentSemantic.Copy)]
		NSDictionary<NSString, NSPersonNameComponents> ParticipantNameByIdentifier { get; set; }
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[BaseType (typeof (NSObject))]
	interface UIConversationEntry {
		[Export ("text")]
		string Text { get; set; }

		[Export ("senderIdentifier")]
		string SenderIdentifier { get; set; }

		[Export ("sentDate", ArgumentSemantic.Copy)]
		NSDate SentDate { get; set; }

		[Export ("entryIdentifier")]
		string EntryIdentifier { get; set; }

		[NullAllowed, Export ("replyThreadIdentifier")]
		string ReplyThreadIdentifier { get; set; }

		[Export ("primaryRecipientIdentifiers", ArgumentSemantic.Copy)]
		NSSet<NSString> PrimaryRecipientIdentifiers { get; set; }
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[BaseType (typeof (NSObject))]
	interface UIInputSuggestion {
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[BaseType (typeof (UIConversationContext))]
	interface UIMailConversationContext {
		[Export ("responseSubject")]
		string ResponseSubject { get; set; }

		[Export ("responseHasCustomSignature")]
		bool ResponseHasCustomSignature { get; set; }

		[Export ("responseSecondaryRecipientIdentifiers", ArgumentSemantic.Copy)]
		NSSet<NSString> ResponseSecondaryRecipientIdentifiers { get; set; }
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[Native]
	public enum UIMailConversationEntryKind : long {
		None = 0,
		Personal = 1,
		Promotion = 2,
		Social = 3,
		Transaction = 4,
		News = 5,
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[BaseType (typeof (UIConversationEntry))]
	interface UIMailConversationEntry {
		[Export ("kind", ArgumentSemantic.Assign)]
		UIMailConversationEntryKind Kind { get; set; }

		[Export ("responseSecondaryRecipientIdentifiers", ArgumentSemantic.Copy)]
		NSSet<NSString> ResponseSecondaryRecipientIdentifiers { get; set; }
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[BaseType (typeof (UIConversationContext))]
	interface UIMessageConversationContext {
		[Export ("isJunk")]
		bool IsJunk { get; set; }
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[Native]
	public enum UIMessageConversationEntryDataKind : long {
		Text = 0,
		Attachment = 1,
		Other = 2,
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[BaseType (typeof (UIConversationEntry))]
	interface UIMessageConversationEntry {
		[Export ("dataKind", ArgumentSemantic.Assign)]
		UIMessageConversationEntryDataKind DataKind { get; set; }

		[Export ("wasSentBySelf")]
		bool WasSentBySelf { get; set; }
	}

	[NoTV, NoMacCatalyst, iOS (18, 4)]
	[BaseType (typeof (UIInputSuggestion))]
	interface UISmartReplySuggestion {
		[Export ("smartReply")]
		string SmartReply { get; }
	}
}
